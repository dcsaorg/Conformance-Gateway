{
  "openapi": "3.0.3",
  "info": {
    "title": "DCSA OpenAPI specification for Booking",
    "description": "API specification issued by DCSA.org.\n\nFor explanation of specific values or objects please refer to the [Information Model 2024.Q1](https://dcsa-website.cdn.prismic.io/dcsa-website/ZhlC9TjCgu4jzyW5_20240402-DCSA-Information-Model-2024.Q1-ReleaseCandidate_01.pdf). This API specification does not define the allowable updates and their timing in accordance with the established business rules. Refer to the [DCSA Interface Standard for the Booking process 2.0](https://dcsa.org/standards/booking/documentation-booking-2) to address this. **All use cases mentioned in this API specification refer to use cases defined in this Booking IFS**.\n\nAll other documents related to the Booking publication can be found [here](https://dcsa.org/standards/booking-process/)\n\nIt is possible to use the Booking API as a standalone API. In that case poll on the following endPoints:\n\n    GET /v2/bookings/{bookingReference}\n\nin order to poll information about status changes. All `/v2/bookings` endPoints must be implmented by the provider\n\n### Notifications (Implemented by consumer)\nIt is possible to have notifications pushed to you whenever the provider needs input and/or a state change. The format of the notification is defined by the [Booking Notification endPoint](#/BookingNotification).\n\n    POST /v2/booking-notifications\n\nfor \"shallow\" notifications - and\n\n    POST /v2/booking-full-notifications\n\nfor full state transfer.\n\nSigning up for notifications is defined outside the scope of this API specification.\n\nBoth of these endPoint is to be implemented by the consumers of the `Booking API` in order to have push events.\n\n### Stats API\nThe Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to the Booking API. Further details can be found [here](https://labs.dcsa.org/#/http/guides/api-guides/stats-api/introduction)\n\nFor a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/bkg/v2#v200). Please [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\n",
    "contact": {
      "name": "Digital Container Shipping Association (DCSA)",
      "url": "https://dcsa.org",
      "email": "info@dcsa.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "Booking",
      "description": "Booking endPoints to be implemented by providers of the Booking API"
    },
    {
      "name": "Notifications",
      "description": "Notifications to be implemented by the consumers of the Booking API"
    }
  ],
  "paths": {
    "/v2/bookings": {
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "Creates a new Booking\n",
        "description": "Creates a new booking request. This endPoint corresponds with **UseCase 1 - Submit booking request**.\n\n**Needs to be updated**\n\n## Precondition\nThe consumer has information for a `Booking Request`\n\n## Postcondition\nThe provider has received the `Booking Request`. \n\nThe consumer will receive a `201` (Created) if the request payload schema-validates or a `400` (Bad Request) if it does not.\n\n## Flow\nThe following occurs when a provider receives a `Booking Request`:\n\n1. The payload (`Booking Request`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n   **The process stops here!**\n2. The payload is schema-valid which means\n    - all required properties are provided\n    - all values provided have correct data type.\n\n    A `carrierBookingRequestReference` (as a reference to the `Booking Request`) is created and stored along with the payload in the provider system.\n  \n    **For the rest of this description and in all examples the value `cbrr-123` will be used as `carrierBookingRequestReference`**\n\n3. A `201` (Created) response is returned with the following payload\n    ```\n    {\n      carrierBookingRequestReference: 'cbrr-123',\n      bookingStatus: 'RECEIVED'\n    }\n    ```\n4. All '_relevant_' subscribers will be notified via a [Booking Notification](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_BKG_NTF/2.0.0-Beta-3#/Notifications/booking-notifications).\n\nFor `POST` `Booking Request` the process ends here. The `Booking Request`\n  - is now stored in the provider system\n  - has status `RECEIVED`\n  - a `201` (Created) response is sent to the consumer with a payload containing `bookingStatus='RECEIVED'`\n  - awaits further processing by the provider\n  - '_relevant_' subscribers have been notified.\n\nThe provider wil now start asynchronous processing. Once processed, the new status of the `Booking Request` will be communicated via a `Booking Notification`. In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the\n\n    GET /v2/bookings/{bookingReference}\n    \nendPoint to check if the `bookingStatus` of the `Booking Request` has changed.\n",
        "operationId": "create-bookings",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "requestBody": {
          "description": "The payload used to create a `Booking Request`",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBooking"
              },
              "examples": {
                "dryExample": {
                  "summary": "Standard dry cargo Booking\n",
                  "description": "Make a `Booking Request` with standard Dry cargo being sent from Bremerhaven, Germany to Norfolk, US\n",
                  "value": {
                    "receiptTypeAtOrigin": "CY",
                    "deliveryTypeAtDestination": "CY",
                    "cargoMovementTypeAtOrigin": "FCL",
                    "cargoMovementTypeAtDestination": "FCL",
                    "serviceContractReference": "HHL51800000",
                    "freightPaymentTermCode": "PRE",
                    "originChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "PRE",
                      "portChargesPaymentTermCode": "PRE"
                    },
                    "destinationChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "COL",
                      "portChargesPaymentTermCode": "PRE",
                      "otherChargesPaymentTermCode": "PRE"
                    },
                    "contractQuotationReference": "HHL1401",
                    "vessel": {
                      "name": "MAERSK IOWA",
                      "vesselIMONumber": "9298686"
                    },
                    "carrierServiceCode": "TA1",
                    "carrierExportVoyageNumber": "403W",
                    "isPartialLoadAllowed": false,
                    "isExportDeclarationRequired": false,
                    "isImportLicenseRequired": false,
                    "expectedDepartureDate": "2024-01-20",
                    "incoTerms": "EXW",
                    "communicationChannelCode": "AO",
                    "isEquipmentSubstitutionAllowed": false,
                    "references": [
                      {
                        "type": "CR",
                        "value": "KN-00103004"
                      }
                    ],
                    "documentParties": {
                      "bookingAgent": {
                        "partyName": "KN Bremerhaven",
                        "address": {
                          "name": "Kuehne + Nagel (AG & Co.) KG",
                          "street": "Amerikaring",
                          "streetNumber": "40",
                          "postCode": "27568",
                          "city": "Bremerhaven",
                          "countryCode": "DE"
                        },
                        "partyContactDetails": [
                          {
                            "name": "Export operations department",
                            "phone": "+49 471 945410"
                          }
                        ]
                      }
                    },
                    "partyContactDetails": [
                      {
                        "name": "Diane",
                        "phone": "+49 471 945410"
                      }
                    ],
                    "shipmentLocations": [
                      {
                        "location": {
                          "locationName": "Bremerhaven",
                          "UNLocationCode": "DEBRV"
                        },
                        "locationTypeCode": "POL"
                      },
                      {
                        "location": {
                          "locationName": "Norfolk",
                          "UNLocationCode": "USORF"
                        },
                        "locationTypeCode": "POD"
                      }
                    ],
                    "requestedEquipments": [
                      {
                        "isShipperOwned": false,
                        "ISOEquipmentCode": "42GP",
                        "units": 3,
                        "commodities": [
                          {
                            "commodityType": "Dry cargo, Freight all kinds",
                            "cargoGrossWeight": 36000,
                            "cargoGrossWeightUnit": "KGM"
                          }
                        ]
                      }
                    ]
                  }
                },
                "reeferExample": {
                  "summary": "Reefer cargo Booking (Apple Juice)\n",
                  "description": "Make a `Booking Request` with reefer requirements (1° celcius with vents and drain holes open and genset required) sent from Bremerhaven, Germany to Norfolk, US\n",
                  "value": {
                    "receiptTypeAtOrigin": "CY",
                    "deliveryTypeAtDestination": "CY",
                    "cargoMovementTypeAtOrigin": "FCL",
                    "cargoMovementTypeAtDestination": "FCL",
                    "serviceContractReference": "HHL51800000",
                    "freightPaymentTermCode": "PRE",
                    "originChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "PRE",
                      "portChargesPaymentTermCode": "PRE",
                      "otherChargesPaymentTermCode": "PRE"
                    },
                    "destinationChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "COL",
                      "portChargesPaymentTermCode": "PRE"
                    },
                    "contractQuotationReference": "HHL1401",
                    "vessel": {
                      "name": "MAERSK IOWA",
                      "vesselIMONumber": "9298686"
                    },
                    "carrierServiceCode": "TA1",
                    "carrierExportVoyageNumber": "403W",
                    "isPartialLoadAllowed": false,
                    "isExportDeclarationRequired": false,
                    "isImportLicenseRequired": false,
                    "expectedDepartureDate": "2024-01-20",
                    "incoTerms": "EXW",
                    "communicationChannelCode": "AO",
                    "isEquipmentSubstitutionAllowed": false,
                    "references": [
                      {
                        "type": "CR",
                        "value": "KN-00103004"
                      }
                    ],
                    "documentParties": {
                      "bookingAgent": {
                        "partyName": "KN Bremerhaven",
                        "address": {
                          "name": "Kuehne + Nagel (AG & Co.) KG",
                          "street": "Amerikaring",
                          "streetNumber": "40",
                          "postCode": "27568",
                          "city": "Bremerhaven",
                          "countryCode": "DE"
                        },
                        "partyContactDetails": [
                          {
                            "name": "Export operations department",
                            "phone": "+49 471 945410"
                          }
                        ]
                      }
                    },
                    "partyContactDetails": [
                      {
                        "name": "Diane",
                        "phone": "+49 471 945410"
                      }
                    ],
                    "shipmentLocations": [
                      {
                        "location": {
                          "locationName": "Bremerhaven",
                          "UNLocationCode": "DEBRV"
                        },
                        "locationTypeCode": "POL"
                      },
                      {
                        "location": {
                          "locationName": "Norfolk",
                          "UNLocationCode": "USORF"
                        },
                        "locationTypeCode": "POD"
                      }
                    ],
                    "requestedEquipments": [
                      {
                        "isShipperOwned": false,
                        "ISOEquipmentCode": "45R1",
                        "units": 3,
                        "isNonOperatingReefer": false,
                        "activeReeferSettings": {
                          "temperatureSetpoint": 1,
                          "temperatureUnit": "CEL",
                          "isVentilationOpen": true,
                          "isDrainholesOpen": false,
                          "isGeneratorSetRequired": true
                        },
                        "commodities": [
                          {
                            "commodityType": "Apple juice",
                            "HSCodes": [
                              "20097919"
                            ],
                            "cargoGrossWeight": 36000,
                            "cargoGrossWeightUnit": "KGM"
                          }
                        ]
                      }
                    ]
                  }
                },
                "norExample": {
                  "summary": "Standard dry cargo Booking using a Reefer Container\n",
                  "description": "Make a `Booking Request` with standard Dry cargo using a reefer container being sent from Bremerhaven, Germany to Norfolk, US\n",
                  "value": {
                    "receiptTypeAtOrigin": "CY",
                    "deliveryTypeAtDestination": "CY",
                    "cargoMovementTypeAtOrigin": "FCL",
                    "cargoMovementTypeAtDestination": "FCL",
                    "serviceContractReference": "HHL51800000",
                    "freightPaymentTermCode": "PRE",
                    "originChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "PRE",
                      "portChargesPaymentTermCode": "PRE",
                      "otherChargesPaymentTermCode": "PRE"
                    },
                    "destinationChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "COL",
                      "portChargesPaymentTermCode": "PRE"
                    },
                    "contractQuotationReference": "HHL1401",
                    "vessel": {
                      "name": "MAERSK IOWA",
                      "vesselIMONumber": "9298686"
                    },
                    "carrierServiceCode": "TA1",
                    "carrierExportVoyageNumber": "403W",
                    "isPartialLoadAllowed": false,
                    "isExportDeclarationRequired": false,
                    "isImportLicenseRequired": false,
                    "expectedDepartureDate": "2024-01-20",
                    "incoTerms": "EXW",
                    "communicationChannelCode": "AO",
                    "isEquipmentSubstitutionAllowed": false,
                    "references": [
                      {
                        "type": "CR",
                        "value": "KN-00103004"
                      }
                    ],
                    "documentParties": {
                      "bookingAgent": {
                        "partyName": "KN Bremerhaven",
                        "address": {
                          "name": "Kuehne + Nagel (AG & Co.) KG",
                          "street": "Amerikaring",
                          "streetNumber": "40",
                          "postCode": "27568",
                          "city": "Bremerhaven",
                          "countryCode": "DE"
                        },
                        "partyContactDetails": [
                          {
                            "name": "Export operations department",
                            "phone": "+49 471 945410"
                          }
                        ]
                      }
                    },
                    "partyContactDetails": [
                      {
                        "name": "Diane",
                        "phone": "+49 471 945410"
                      }
                    ],
                    "shipmentLocations": [
                      {
                        "location": {
                          "locationName": "Bremerhaven",
                          "UNLocationCode": "DEBRV"
                        },
                        "locationTypeCode": "POL"
                      },
                      {
                        "location": {
                          "locationName": "Norfolk",
                          "UNLocationCode": "USORF"
                        },
                        "locationTypeCode": "POD"
                      }
                    ],
                    "requestedEquipments": [
                      {
                        "isShipperOwned": false,
                        "ISOEquipmentCode": "45R1",
                        "isNonOperatingReefer": true,
                        "units": 3,
                        "commodities": [
                          {
                            "commodityType": "Dry cargo, Freight all kinds",
                            "cargoGrossWeight": 36000,
                            "cargoGrossWeightUnit": "KGM"
                          }
                        ]
                      }
                    ]
                  }
                },
                "dgExample": {
                  "summary": "Dangerous Goods (DG) cargo Booking\n",
                  "description": "Make a `Booking Request` with DG cargo (*Environmentally hazardous substance, liquid, N.O.S (Propiconazole)*) being sent from Bremerhaven, Germany to Norfolk, US\n",
                  "value": {
                    "receiptTypeAtOrigin": "CY",
                    "deliveryTypeAtDestination": "CY",
                    "cargoMovementTypeAtOrigin": "FCL",
                    "cargoMovementTypeAtDestination": "FCL",
                    "serviceContractReference": "HHL51800000",
                    "freightPaymentTermCode": "PRE",
                    "originChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "PRE",
                      "portChargesPaymentTermCode": "PRE"
                    },
                    "destinationChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "COL",
                      "portChargesPaymentTermCode": "PRE"
                    },
                    "contractQuotationReference": "HHL1401",
                    "vessel": {
                      "name": "MAERSK IOWA",
                      "vesselIMONumber": "9298686"
                    },
                    "carrierServiceCode": "TA1",
                    "carrierExportVoyageNumber": "403W",
                    "isPartialLoadAllowed": false,
                    "isExportDeclarationRequired": false,
                    "isImportLicenseRequired": false,
                    "expectedDepartureDate": "2024-01-20",
                    "incoTerms": "EXW",
                    "communicationChannelCode": "AO",
                    "isEquipmentSubstitutionAllowed": false,
                    "references": [
                      {
                        "type": "CR",
                        "value": "KN-00103004"
                      }
                    ],
                    "documentParties": {
                      "bookingAgent": {
                        "partyName": "KN Bremerhaven",
                        "address": {
                          "name": "Kuehne + Nagel (AG & Co.) KG",
                          "street": "Amerikaring",
                          "streetNumber": "40",
                          "postCode": "27568",
                          "city": "Bremerhaven",
                          "countryCode": "DE"
                        },
                        "partyContactDetails": [
                          {
                            "name": "Export operations department",
                            "phone": "+49 471 945410"
                          }
                        ]
                      }
                    },
                    "partyContactDetails": [
                      {
                        "name": "Diane",
                        "phone": "+49 471 945410"
                      }
                    ],
                    "shipmentLocations": [
                      {
                        "location": {
                          "locationName": "Bremerhaven",
                          "UNLocationCode": "DEBRV"
                        },
                        "locationTypeCode": "POL"
                      },
                      {
                        "location": {
                          "locationName": "Norfolk",
                          "UNLocationCode": "USORF"
                        },
                        "locationTypeCode": "POD"
                      }
                    ],
                    "requestedEquipments": [
                      {
                        "isShipperOwned": false,
                        "ISOEquipmentCode": "42GP",
                        "units": 3,
                        "commodities": [
                          {
                            "commodityType": "Environmentally hazardous substance, liquid, N.O.S (Propiconazole)",
                            "HSCodes": [
                              "293499"
                            ],
                            "cargoGrossWeight": 36000,
                            "cargoGrossWeightUnit": "KGM",
                            "outerPackaging": {
                              "imoPackagingCode": "3A1",
                              "numberOfPackages": 100,
                              "description": "Jerrican, steel",
                              "dangerousGoods": [
                                {
                                  "unNumber": "3082",
                                  "properShippingName": "Environmentally hazardous substance, liquid, N.O.S\n",
                                  "imoClass": "9",
                                  "isMarinePollutant": false,
                                  "packingGroup": 3,
                                  "isLimitedQuantity": false,
                                  "isExceptedQuantity": false,
                                  "isSalvagePackings": false,
                                  "isEmptyUncleanedResidue": false,
                                  "isWaste": false,
                                  "isHot": false,
                                  "isCompetentAuthorityApprovalProvided": false,
                                  "emergencyContactDetails": {
                                    "contact": "John Doe",
                                    "phone": "+1 123062970"
                                  },
                                  "EMSNumber": "F-A S-F",
                                  "isReportableQuantity": false,
                                  "grossWeight": {
                                    "value": 12000,
                                    "unit": "KGM"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "`Booking Request` has been successfully created in the provider system. The status of the `Booking Request` is now `RECEIVED`. The consumer is now awaiting provider to process the `Booking Request` asynchronously.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingRefStatus"
                },
                "examples": {
                  "receExample": {
                    "summary": "Booking request received\n",
                    "description": "A `Booking Request` has been received (`bookingStatus='RECEIVED'`), schema validated and stored in provider system\n",
                    "value": {
                      "carrierBookingRequestReference": "cbrr-123",
                      "bookingStatus": "RECEIVED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "In case the `Booking Request` does not schema validate a `400` (Bad Request) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "badRequestExample": {
                    "summary": "Booking missing receiptTypeAtOrigin\n",
                    "description": "`receiptTypeAtOrigin` is a mandatory property in the `Booking Request`. This is an example of how the error object would look in case this property is missing\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v2/bookings",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "statusCodeMessage": "receiptTypeAtOrigin not found - it is a mandatory property in Booking request\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "property": "receiptTypeAtOrigin",
                          "errorCodeText": "mandatory property missing",
                          "errorCodeMessage": "receiptTypeAtOrigin must be provided as part of a Booking request\n"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "internalServerErrorExample": {
                    "summary": "Internal Server Error while processing Booking Request\n",
                    "description": "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v2/bookings",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Internal Server Error occurred while processing Booking request\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Internal Error occurred",
                          "errorCodeMessage": "Internal Error occurred"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "For other errors the error object should be populated with relevant information\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "tooManyRequestsExample": {
                    "summary": "Making too many Bookings Requests\n",
                    "description": "Calling the endPoint\n\n    POST /v2/bookings\n\ntoo many times within a timeperiod.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v2/bookings",
                      "statusCode": 429,
                      "statusCodeText": "Too Many Requests",
                      "statusCodeMessage": "Too many request to create a booking has been requested. Please try again in 1 hour\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Max Booking requests reached",
                          "errorCodeMessage": "A maximum of 10 Bookings can be created per hour"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/bookings/{bookingReference}": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Gets the Booking\n",
        "description": "Retrieves the `Booking Request` with the `bookingReference`. The path can contain a `carrierBookingRequestReference` or a `carrierBookingReference`. It is recommended to use this endPoint to `GET` data before an update is made to make sure latest version is being updated.\n\nThe default payload when calling this endPoint is the \"original\" `Booking`. It is also possible to get the latest amendment to a `Booking` called the `Amended Booking`. In order to get the `Amended Booking`, it is necessary to use the query parameter `amendedContent` and set it to `true`.\n    GET /v2/bookings/{bookingReference}?amendedContent=true\n\nThe `status` of the \"original\" `Booking` is included in both payloads as `bookingStatus`. `amendedBookingStatus` and related content is only available after the provider has approved the `Booking` via **UseCase 5: Confirm Booking request** and until:\n- the provider requests for a new amendment (**UseCase 6: Request to amend confirmed Booking**) in which case the \"old update\" is no longer accessable.\n- the consumer submits a new amendment (**UseCase 7: Request amendment to confirmed Booking**) in which case the \"new update\" provided **replaces** the \"old update\".\n- the provider re-confirms the `Booking` (**UseCase 5: Confirm booking request**) in which case the \"old update\" is no longer accessable.\n\nIf `amendedContent=true` is requested but no amendment has yet been provided by the consumer **or** the state of the \"original\" `Booking` is `PENDING AMENDMENT`, then a `404` (Not Found) is returned.\n\nIf the provider is requesting some changes to the `Booking` this will also be part of the \"original\" `Booking` payload in the `requestedChanges` property. This property is **conditional** on the `bookingStatus='PENDING UPDATE'` (in case the `Booking` has not yet been confirmed) or `bookingStatus='PENDING AMENDMENT'` (in case it is a confirmed `Booking`).\n\nIn case no subscription (`Notification`) has been set up - it is possible to use this endPoint to poll on in order to detect if `bookingStatus` and/or `amendedBookingStatus` has changed.\n",
        "operationId": "get-bookings",
        "parameters": [
          {
            "name": "bookingReference",
            "in": "path",
            "description": "This can be one of:\n- `carrierBookingRequestReference` (in case no carrierBookingReference has yet been appointed to the booking)\n- `carrierBookingReference`\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "pattern": "^\\S(?:.*\\S)?$",
              "type": "string",
              "example": "CBR001"
            }
          },
          {
            "name": "amendedContent",
            "in": "query",
            "description": "Controls wether the content of this payload is the amendmended Booking (`amendedContent=true`) or the confirmed Booking (`amendedContent=false`).\n\nIf `amendedContent=true` and no amendment has been requested or if the provider is not able to send the amendment - the response will be a `404` Not Found\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "example": false,
              "default": false
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                },
                "examples": {
                  "dryNotConfirmedExample": {
                    "summary": "Standard dry cargo Booking (not confirmed)\n",
                    "description": "Gets a `Booking Request` with standard Dry cargo which has not yet been confirmed. The `Booking` is in state `PENDING UPDATE` and requires some changes (specified in the `requestedChanges` property)\n",
                    "value": {
                      "carrierBookingRequestReference": "cbrr-123",
                      "bookingStatus": "PENDING UPDATE",
                      "receiptTypeAtOrigin": "CY",
                      "deliveryTypeAtDestination": "CY",
                      "cargoMovementTypeAtOrigin": "FCL",
                      "cargoMovementTypeAtDestination": "FCL",
                      "serviceContractReference": "HHL51800000",
                      "freightPaymentTermCode": "PRE",
                      "originChargesPaymentTerm": {
                        "haulageChargesPaymentTermCode": "PRE",
                        "portChargesPaymentTermCode": "PRE"
                      },
                      "destinationChargesPaymentTerm": {
                        "haulageChargesPaymentTermCode": "COL",
                        "portChargesPaymentTermCode": "PRE",
                        "otherChargesPaymentTermCode": "PRE"
                      },
                      "contractQuotationReference": "HHL1401",
                      "vessel": {
                        "name": "MAERSK IOWA",
                        "vesselIMONumber": "9298686"
                      },
                      "carrierServiceCode": "TA1",
                      "carrierExportVoyageNumber": "403W",
                      "isPartialLoadAllowed": false,
                      "isExportDeclarationRequired": false,
                      "isImportLicenseRequired": false,
                      "expectedDepartureDate": "2024-01-20",
                      "incoTerms": "EXW",
                      "communicationChannelCode": "AO",
                      "isEquipmentSubstitutionAllowed": false,
                      "references": [
                        {
                          "type": "CR",
                          "value": "KN-00103004"
                        }
                      ],
                      "documentParties": {
                        "bookingAgent": {
                          "partyName": "KN Bremerhaven",
                          "address": {
                            "name": "Kuehne + Nagel (AG & Co.) KG",
                            "street": "Amerikaring",
                            "streetNumber": "40",
                            "postCode": "27568",
                            "city": "Bremerhaven",
                            "countryCode": "DE"
                          },
                          "partyContactDetails": [
                            {
                              "name": "Export operations department",
                              "phone": "+49 471 945410"
                            }
                          ]
                        }
                      },
                      "partyContactDetails": [
                        {
                          "name": "Diane",
                          "phone": "+49 471 945410"
                        }
                      ],
                      "shipmentLocations": [
                        {
                          "location": {
                            "locationName": "Bremerhaven",
                            "UNLocationCode": "DEBRV"
                          },
                          "locationTypeCode": "POL"
                        },
                        {
                          "location": {
                            "locationName": "Norfolk",
                            "UNLocationCode": "USORF"
                          },
                          "locationTypeCode": "POD"
                        }
                      ],
                      "requestedEquipments": [
                        {
                          "isShipperOwned": false,
                          "ISOEquipmentCode": "42GP",
                          "units": 3,
                          "commodities": [
                            {
                              "commodityType": "Dry cargo, Freight all kinds",
                              "cargoGrossWeight": 36000,
                              "cargoGrossWeightUnit": "KGM"
                            }
                          ]
                        }
                      ],
                      "requestedChanges": [
                        {
                          "jsonPath": "$.requestedEquipment.units",
                          "property": "units",
                          "message": "Not enough available \"42GP\" equipment. Please change to \"22G1\" instead\n"
                        }
                      ]
                    }
                  },
                  "dryConfirmedExample": {
                    "summary": "Gets a confirmed Standard dry cargo Booking\n",
                    "description": "Gets a `Confirmed Booking` with standard Dry cargo. In this example the `Booking` has previously received an amendment which was confirmed (`amendedBookingStatus='AMENDMENT CONFIRMED'`)\n\nAs part of the confirmation the `Booking` is enriched with a `transportPlan`, `shipmentCutOffTimes`, `carrierClauses` and in this example also an `advanceManifestFiling` since the `Booking` is arriving in US.\n",
                    "value": {
                      "carrierBookingRequestReference": "cbrr-123",
                      "carrierBookingReference": "cbr-987",
                      "bookingStatus": "CONFIRMED",
                      "amendedBookingStatus": "AMENDMENT CONFIRMED",
                      "receiptTypeAtOrigin": "CY",
                      "deliveryTypeAtDestination": "CY",
                      "cargoMovementTypeAtOrigin": "FCL",
                      "cargoMovementTypeAtDestination": "FCL",
                      "serviceContractReference": "HHL51800000",
                      "freightPaymentTermCode": "PRE",
                      "originChargesPaymentTerm": {
                        "haulageChargesPaymentTermCode": "PRE",
                        "portChargesPaymentTermCode": "PRE",
                        "otherChargesPaymentTermCode": "COL"
                      },
                      "destinationChargesPaymentTerm": {
                        "haulageChargesPaymentTermCode": "COL",
                        "portChargesPaymentTermCode": "PRE",
                        "otherChargesPaymentTermCode": "COL"
                      },
                      "contractQuotationReference": "HHL1401",
                      "vessel": {
                        "name": "MAERSK IOWA",
                        "vesselIMONumber": "9298686"
                      },
                      "carrierServiceCode": "TA1",
                      "carrierExportVoyageNumber": "403W",
                      "isPartialLoadAllowed": false,
                      "isExportDeclarationRequired": false,
                      "isImportLicenseRequired": false,
                      "expectedDepartureDate": "2024-01-20",
                      "incoTerms": "EXW",
                      "communicationChannelCode": "AO",
                      "isEquipmentSubstitutionAllowed": false,
                      "references": [
                        {
                          "type": "CR",
                          "value": "KN-00103004"
                        }
                      ],
                      "documentParties": {
                        "bookingAgent": {
                          "partyName": "KN Bremerhaven",
                          "address": {
                            "name": "Kuehne + Nagel (AG & Co.) KG",
                            "street": "Amerikaring",
                            "streetNumber": "40",
                            "postCode": "27568",
                            "city": "Bremerhaven",
                            "countryCode": "DE"
                          },
                          "partyContactDetails": [
                            {
                              "name": "Export operations department",
                              "phone": "+49 471 945410"
                            }
                          ]
                        }
                      },
                      "partyContactDetails": [
                        {
                          "name": "Diane",
                          "phone": "+49 471 945410"
                        }
                      ],
                      "shipmentLocations": [
                        {
                          "location": {
                            "locationName": "Bremerhaven",
                            "UNLocationCode": "DEBRV"
                          },
                          "locationTypeCode": "POL"
                        },
                        {
                          "location": {
                            "locationName": "Norfolk",
                            "UNLocationCode": "USORF"
                          },
                          "locationTypeCode": "POD"
                        }
                      ],
                      "requestedEquipments": [
                        {
                          "isShipperOwned": false,
                          "ISOEquipmentCode": "42GP",
                          "units": 3,
                          "commodities": [
                            {
                              "commodityType": "Dry cargo, Freight all kinds",
                              "cargoGrossWeight": 36000,
                              "cargoGrossWeightUnit": "KGM"
                            }
                          ]
                        }
                      ],
                      "confirmedEquipments": [
                        {
                          "ISOEquipmentCode": "42GP",
                          "units": 3
                        }
                      ],
                      "transportPlan": [
                        {
                          "transportPlanStage": "MNC",
                          "transportPlanStageSequenceNumber": 1,
                          "loadLocation": {
                            "locationName": "Bremerhaven",
                            "UNLocationCode": "DEBRV"
                          },
                          "dischargeLocation": {
                            "locationName": "Norfolk",
                            "UNLocationCode": "USORF"
                          },
                          "plannedDepartureDate": "2024-01-20",
                          "plannedArrivalDate": "2024-01-31",
                          "modeOfTransport": "VESSEL",
                          "vesselName": "MAERSK IOWA",
                          "vesselIMONumber": "9298686",
                          "carrierServiceCode": "TA1",
                          "carrierExportVoyageNumber": "403W"
                        }
                      ],
                      "shipmentCutOffTimes": [
                        {
                          "cutOffDateTimeCode": "DCO",
                          "cutOffDateTime": "2024-01-17T22:30:00.000"
                        },
                        {
                          "cutOffDateTimeCode": "VCO",
                          "cutOffDateTime": "2024-01-18T22:30:00.000"
                        },
                        {
                          "cutOffDateTimeCode": "FCO",
                          "cutOffDateTime": "2024-01-19T13:30:00.000"
                        }
                      ],
                      "advanceManifestFilings": [
                        {
                          "manifestTypeCode": "ACE",
                          "countryCode": "US"
                        }
                      ],
                      "carrierClauses": [
                        "The date of shipment, the carrying vessel and theschedule are not guaranteed and are always subject tochanges.",
                        "Operations such as lifting, stowage, drayage and customs declaration of containers are based on the description of the nature, quantity, measurement and weight declared by the Shipper. The Shipper shall be liable for any damage, loss, expense and fines incurred by Carrier XYZ or its agents due to incorrectness or incompleteness of such declaration.",
                        "Warranted shipper must fulfill the requirements of SOLAS regulations and the IMO guidelines regarding the Verified Gross Mass (VGM) of container carrying cargo (msc.1/circ.1474, 9 June 2014).",
                        "In accordance with SOLAS regulations and IMO guidelines regarding the VGM (verified gross mass), any expenses incurred because the VGM was submitted late or was not submitted at all will be charged back to the customer with an additional administration fee."
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "In case the consumer is requesting the `Amended Booking` by calling:\n    GET /v2/bookings/{bookingReference}?amendedContent=true\n    \nbut:\n- the `Booking` has not yet been confirmed\n- the `Booking` has been confirmed but no amendment has yet been provided by the consumer\n- the provider has requested for a new amendment (**UseCase 6: Request to amend confirmed Booking**) in which case the \"old update\" is no longer accessable.\n\na `404` (Not Found) is returned.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "notFoundExample": {
                    "summary": "Missing amended Booking\n",
                    "description": "The `Amended Booking` response is requested - but no `Amended Booking` exists.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "/v2/bookings/cbrr-123?amendedContent=true",
                      "statusCode": 404,
                      "statusCodeText": "Not Found",
                      "statusCodeMessage": "No amended booking exists",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "No amended booking",
                          "errorCodeMessage": "No amended booking available"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "internalServerErrorExample": {
                    "summary": "Internal Server Error while processing Booking request\n",
                    "description": "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "/v2/bookings/cbrr-123",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Internal Server Error occurred while processing Booking request\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Internal Error occurred",
                          "errorCodeMessage": "Internal Error occurred"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "getError": {
                    "summary": "GET non-existing Booking Request\n",
                    "description": "Calling\n    GET /v2/bookings/cbrr-123\n    \nresults in an error as booking `cbrr-123` does not exist.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "/v2/bookings/cbrr-123",
                      "statusCode": 404,
                      "statusCodeText": "Not Found",
                      "statusCodeMessage": "The requested carrierBookingRequestReference does not exist\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Non existent carrierBookingRequestReference",
                          "errorCodeMessage": "carrierBookingRequestReference `cbrr-123` does not exist\n"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Booking"
        ],
        "summary": "Updates the Booking\n",
        "description": "Updates the `Booking Request` with the `bookingReference`. The path can contain either a `carrierBookingRequestReference` or a `carrierBookingReference`. This endPoint corresponds with either\n- **UseCase 3 - Submit updated Booking request**\n- **UseCase 7 - Request amendments to confirmed Booking**\n\nThis endPoint is to be used in response to\n- **UseCase 2 - Request to update Booking request**\n- **UseCase 6 - Request to amend confirmed Booking**\n\nthe endPoint can also be used in case `bookingStatus='RECEIVED'` and the consumer has an update to the `Booking Request`.\n\n### Precondition\nIn order to update a `Booking Request`, the status of the `Booking Request` needs to be in state\n- `RECEIVED` in case the consumer has updated information for the `Booking Request`\n- `PENDING UPDATE` in case the provider has requested the consumer to update the `Booking Request` (a result of **UseCase 2 - Request to update Booking request**)\n- `UPDATE RECEIVED` in case the consumer has additional changes to an already sent update\n- `PENDING AMENDMENT` in case the provider has requested the consumer to amend the `Booking Request` (a result of **UseCase 6 - Request to amend confirmed Booking**)\n- `CONFIRMED` in case the consumer has an amendment to the `Booking Request`\n\n## Postcondition\nThe provider has received an update (**UseCase 3 - Submit updated Booking request**) or an amendment (**UseCase 7 - Request amendments to confirmed Booking**) to the `Booking Request`.\n\nIn case an amendment was received to the `Booking Request`(**UseCase 7 - Request to amend confirmed Booking**) - the amendment will be called `Amended Booking`. The `Amended Booking` and the \"original\" `Booking Request` will **co-exist** until a new amendment is submitted by the consumer (via **UseCase 7: Request amendments to confirmed Booking**) or until the provider requests an update (sets the `bookingStatus='PENDING AMENDMENT'` via **UseCase 6: Request to amend confirmed Booking**). If the `amendedBookingStatus` is present it always represents the latest version of an amendment received by the provider.\n\nThe consumer will receive a `200` (OK) if the payload schema-validates or a `400` (Bad Request) if it does not.\n\n## Flow\nThe following occurs when a provider receives an **update** to a `Booking Request`\n1. The payload (`Booking Request`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n   **The process stops here!**\n2. The payload is schema-valid which means\n   - all required properties are provided\n   - all values provided have correct data type\n  \n   The updated `Booking Request` is stored in the provider system.\n\n   **For the rest of this description and in all examples the value `cbrr-123` will be used as `carrierBookingRequestReference`**\n3. The response depends on which useCase is the reason for calling this endPoint (what the `bookingStatus` is):\n    - If `bookingStatus` **is** `RECEIVED` then this endPoint is being used in addition to **UseCase 1 - Submit booking request**. In this case the consumer would like to make an update to an already sent `Booking Request` - this is done via **UseCase 3 - Submit updated Booking Request**. The `bookingStatus` now changes to `UPDATE RECEIVED`.\n    \n      A `200` (OK) response corresponding to the following payload is returned\n      ```\n      {\n        carrierBookingRequestReference: 'cbrr-123',\n        bookingStatus: 'UPDATE RECEIVED'\n      }\n      ```\n    - If `bookingStatus` is `PENDING UPDATE` then this endPoint is being used as a reponse to **UseCase 2 - Request to update Booking request** in this case the provider has requested an update to a `Booking Request`.  The `bookingStatus` now changes to `UPDATE RECEIVED`.\n\n      A `200` (OK) response corresponding to the following payload is returned\n      ```\n      {\n        carrierBookingRequestReference: 'cbrr-123',\n        bookingStatus: 'UPDATE RECEIVED'\n      }\n      ```\n    - If `bookingStatus` is `UPDATE RECEIVED` then this endPoint is being used to update an already sent update. The `bookingStatus` stays as `UPDATE RECEIVED`.\n\n      A `200` (OK) response corresponding to the following payload is returned\n      ```\n      {\n        carrierBookingRequestReference: 'cbrr-123',\n        bookingStatus: 'UPDATE RECEIVED'\n      }\n      ```\n    - If `bookingStatus` is `PENDING AMENDMENT` then this endPoint is being used as a response to **UseCase 6 - Request to amend Confirmed Booking**, in this case the provider has requested an amendment to a `Confirmed Booking`. The `bookingStatus` stays `PENDING AMENDMENT` and `amendedBookingStatus` is set to `AMENDMENT RECEVIED`.\n    \n      A `200` (OK) response corresponding to the following payload is returned\n      ```\n      {\n        carrierBookingReference: 'cbr-987',\n        carrierBookingRequestReference: 'cbrr-123',\n        bookingStatus: 'PENDING AMENDMENT',\n        amendedBookingStatus: 'AMENDMENT RECEIVED'\n      }\n      ```\n    - If `bookingStatus` is `CONFIRMED` then this endPoint is being used in order to request an amendment to a `Confirmed Booking` this is done via **UseCase 7 - Request Amendments to Confirmed Booking**. The `bookingStatus` stays `CONFIRMED` and `amendedBookingStatus` is set to `AMENDMENT RECEIVED`.\n    \n      A `200` (OK) response corresponding to the following payload is returned\n      ```\n      {\n        carrierBookingReference: 'cbr-987',\n        carrierBookingRequestReference: 'cbrr-123',\n        bookingStatus: 'CONFIRMED',\n        amendedBookingStatus: 'AMENDMENT RECEIVED'\n      }\n      ```\n4. All '_relevant_' subscribers will be notified via a [Booking Notification](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_BKG_NTF/2.0.0-Beta-3#/Notifications/booking-notifications).\n\nFor `PUT` `Booking Request` the process ends here. The `Booking Request`\n  - is now stored in the provider system\n  - a `200` (OK) response is sent to the consumer with the status of the `Booking` (and possibly also with the `amendedBookingStatus`) with one of the following values (depending on the useCase):\n    - `bookingStatus='UPDATE RECEIVED'` (if endPoint used before a `Booking`has been confirmed)\n    - `bookingStatus='PENDING AMENDMENT'` and `amendedBookingStatus='AMENDMENT RECEIVED'` (if endPoint used as a response to **UseCase 6 - Request to amend Confirmed Booking**)\n    - `bookingStatus='CONFIRMED'` and `amendedBookingStatus='AMENDMENT RECEIVED'` (if consumer is requesting an amendment to a `Confirmed Booking`)\n  - awaits further processing by the provider\n  - '_relevant_' subscribers have been notified.\n\nThe provider wil now start asynchronous processing. Once processed, the new status of the `Booking` and `Amended Booking Request` will be communicated via a `Booking Notification`. In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the\n    GET /v2/bookings/{bookingReference}\n    \nendPoint to check if the `bookingStatus` and `amendedBookingStatus` of the `Booking` has changed.\n  \nIf the consumer wants to get the content of the `Amended Booking` provided via this `PUT` endPoint, the `GET` endPoint needs to be used in combination with the `?amendedContent=true` queryParameter:\n    GET /v2/bookings/{bookingReference}?amendedContent=true\n\nIt is possible to `GET` the content of the `Amended Booking` via the example above until either:\n\n- the provider requests for a new amendment (**UseCase 6: Request to amend confirmed Booking**) in which case the \"old update\" is no longer accessible\n- the consumer submits a new update (**UseCase 7: Request amendment to confirmed Booking**) in which case the \"new amendment\" provided **replaces** the \"old amendment\".\n",
        "operationId": "update-bookings",
        "parameters": [
          {
            "name": "bookingReference",
            "in": "path",
            "description": "This can be one of:\n- `carrierBookingRequestReference` (in case no carrierBookingReference has yet been appointed to the booking)\n- `carrierBookingReference`\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "pattern": "^\\S(?:.*\\S)?$",
              "type": "string",
              "example": "CBR001"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters used to update the `Booking request`\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBooking"
              },
              "examples": {
                "dryExample": {
                  "summary": "Standard dry cargo Booking\n",
                  "description": "Updating a `Booking Request` with standard Dry cargo being sent from Bremerhaven, Germany to Norfolk, US\n",
                  "value": {
                    "carrierBookingRequestReference": "cbrr-123",
                    "receiptTypeAtOrigin": "CY",
                    "deliveryTypeAtDestination": "CY",
                    "cargoMovementTypeAtOrigin": "FCL",
                    "cargoMovementTypeAtDestination": "FCL",
                    "serviceContractReference": "HHL51800000",
                    "freightPaymentTermCode": "PRE",
                    "originChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "PRE",
                      "portChargesPaymentTermCode": "PRE"
                    },
                    "destinationChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "COL",
                      "portChargesPaymentTermCode": "PRE",
                      "otherChargesPaymentTermCode": "PRE"
                    },
                    "contractQuotationReference": "HHL1401",
                    "vessel": {
                      "name": "MAERSK IOWA",
                      "vesselIMONumber": "9298686"
                    },
                    "carrierServiceCode": "TA1",
                    "carrierExportVoyageNumber": "403W",
                    "isPartialLoadAllowed": false,
                    "isExportDeclarationRequired": false,
                    "isImportLicenseRequired": false,
                    "expectedDepartureDate": "2024-01-20",
                    "incoTerms": "EXW",
                    "communicationChannelCode": "AO",
                    "isEquipmentSubstitutionAllowed": false,
                    "references": [
                      {
                        "type": "CR",
                        "value": "KN-00103004"
                      }
                    ],
                    "documentParties": {
                      "bookingAgent": {
                        "partyName": "KN Bremerhaven",
                        "address": {
                          "name": "Kuehne + Nagel (AG & Co.) KG",
                          "street": "Amerikaring",
                          "streetNumber": "40",
                          "postCode": "27568",
                          "city": "Bremerhaven",
                          "countryCode": "DE"
                        },
                        "partyContactDetails": [
                          {
                            "name": "Export operations department",
                            "phone": "+49 471 945410"
                          }
                        ]
                      }
                    },
                    "partyContactDetails": [
                      {
                        "name": "Diane",
                        "phone": "+49 471 945410"
                      }
                    ],
                    "shipmentLocations": [
                      {
                        "location": {
                          "locationName": "Bremerhaven",
                          "UNLocationCode": "DEBRV"
                        },
                        "locationTypeCode": "POL"
                      },
                      {
                        "location": {
                          "locationName": "Norfolk",
                          "UNLocationCode": "USORF"
                        },
                        "locationTypeCode": "POD"
                      }
                    ],
                    "requestedEquipments": [
                      {
                        "isShipperOwned": false,
                        "ISOEquipmentCode": "42GP",
                        "units": 3,
                        "commodities": [
                          {
                            "commodityType": "Dry cargo, Freight all kinds",
                            "cargoGrossWeight": 36000,
                            "cargoGrossWeightUnit": "KGM"
                          }
                        ]
                      }
                    ]
                  }
                },
                "reeferExample": {
                  "summary": "Reefer cargo Booking (Apple Juice)\n",
                  "description": "Updating a `Booking Request` with reefer requirements (2° celcius with vents and drain holes open and genset required) sent from Bremerhaven, Germany to Norfolk, US\n",
                  "value": {
                    "carrierBookingRequestReference": "cbrr-123",
                    "receiptTypeAtOrigin": "CY",
                    "deliveryTypeAtDestination": "CY",
                    "cargoMovementTypeAtOrigin": "FCL",
                    "cargoMovementTypeAtDestination": "FCL",
                    "serviceContractReference": "HHL51800000",
                    "freightPaymentTermCode": "PRE",
                    "originChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "PRE",
                      "portChargesPaymentTermCode": "PRE",
                      "otherChargesPaymentTermCode": "PRE"
                    },
                    "destinationChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "COL",
                      "portChargesPaymentTermCode": "PRE",
                      "otherChargesPaymentTermCode": "PRE"
                    },
                    "contractQuotationReference": "HHL1401",
                    "vessel": {
                      "name": "MAERSK IOWA",
                      "vesselIMONumber": "9298686"
                    },
                    "carrierServiceCode": "TA1",
                    "carrierExportVoyageNumber": "403W",
                    "isPartialLoadAllowed": false,
                    "isExportDeclarationRequired": false,
                    "isImportLicenseRequired": false,
                    "expectedDepartureDate": "2024-01-20",
                    "incoTerms": "EXW",
                    "communicationChannelCode": "AO",
                    "isEquipmentSubstitutionAllowed": false,
                    "references": [
                      {
                        "type": "CR",
                        "value": "KN-00103004"
                      }
                    ],
                    "documentParties": {
                      "bookingAgent": {
                        "partyName": "KN Bremerhaven",
                        "address": {
                          "name": "Kuehne + Nagel (AG & Co.) KG",
                          "street": "Amerikaring",
                          "streetNumber": "40",
                          "postCode": "27568",
                          "city": "Bremerhaven",
                          "countryCode": "DE"
                        },
                        "partyContactDetails": [
                          {
                            "name": "Export operations department",
                            "phone": "+49 471 945410"
                          }
                        ]
                      }
                    },
                    "partyContactDetails": [
                      {
                        "name": "Diane",
                        "phone": "+49 471 945410"
                      }
                    ],
                    "shipmentLocations": [
                      {
                        "location": {
                          "locationName": "Bremerhaven",
                          "UNLocationCode": "DEBRV"
                        },
                        "locationTypeCode": "POL"
                      },
                      {
                        "location": {
                          "locationName": "Norfolk",
                          "UNLocationCode": "USORF"
                        },
                        "locationTypeCode": "POD"
                      }
                    ],
                    "requestedEquipments": [
                      {
                        "isShipperOwned": false,
                        "ISOEquipmentCode": "45R1",
                        "units": 3,
                        "isNonOperatingReefer": false,
                        "activeReeferSettings": {
                          "temperatureSetpoint": 2,
                          "temperatureUnit": "CEL",
                          "isVentilationOpen": true,
                          "isDrainholesOpen": false,
                          "isGeneratorSetRequired": true
                        },
                        "commodities": [
                          {
                            "commodityType": "Apple juice",
                            "HSCodes": [
                              "20097919"
                            ],
                            "cargoGrossWeight": 36000,
                            "cargoGrossWeightUnit": "KGM"
                          }
                        ]
                      }
                    ]
                  }
                },
                "norExample": {
                  "summary": "Standard dry cargo Booking using a Reefer Container\n",
                  "description": "Update a `Booking Request` with standard Dry cargo using a reefer container being sent from Bremerhaven, Germany to Norfolk, US\n",
                  "value": {
                    "carrierBookingRequestReference": "cbrr-123",
                    "receiptTypeAtOrigin": "CY",
                    "deliveryTypeAtDestination": "CY",
                    "cargoMovementTypeAtOrigin": "FCL",
                    "cargoMovementTypeAtDestination": "FCL",
                    "serviceContractReference": "HHL51800000",
                    "freightPaymentTermCode": "PRE",
                    "originChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "PRE",
                      "portChargesPaymentTermCode": "PRE"
                    },
                    "destinationChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "COL",
                      "portChargesPaymentTermCode": "PRE"
                    },
                    "contractQuotationReference": "HHL1401",
                    "vessel": {
                      "name": "MAERSK IOWA",
                      "vesselIMONumber": "9298686"
                    },
                    "carrierServiceCode": "TA1",
                    "carrierExportVoyageNumber": "403W",
                    "isPartialLoadAllowed": false,
                    "isExportDeclarationRequired": false,
                    "isImportLicenseRequired": false,
                    "expectedDepartureDate": "2024-01-20",
                    "incoTerms": "EXW",
                    "communicationChannelCode": "AO",
                    "isEquipmentSubstitutionAllowed": false,
                    "references": [
                      {
                        "type": "CR",
                        "value": "KN-00103004"
                      }
                    ],
                    "documentParties": {
                      "bookingAgent": {
                        "partyName": "KN Bremerhaven",
                        "address": {
                          "name": "Kuehne + Nagel (AG & Co.) KG",
                          "street": "Amerikaring",
                          "streetNumber": "40",
                          "postCode": "27568",
                          "city": "Bremerhaven",
                          "countryCode": "DE"
                        },
                        "partyContactDetails": [
                          {
                            "name": "Export operations department",
                            "phone": "+49 471 945410"
                          }
                        ]
                      }
                    },
                    "partyContactDetails": [
                      {
                        "name": "Diane",
                        "phone": "+49 471 945410"
                      }
                    ],
                    "shipmentLocations": [
                      {
                        "location": {
                          "locationName": "Bremerhaven",
                          "UNLocationCode": "DEBRV"
                        },
                        "locationTypeCode": "POL"
                      },
                      {
                        "location": {
                          "locationName": "Norfolk",
                          "UNLocationCode": "USORF"
                        },
                        "locationTypeCode": "POD"
                      }
                    ],
                    "requestedEquipments": [
                      {
                        "isShipperOwned": false,
                        "ISOEquipmentCode": "45R1",
                        "isNonOperatingReefer": true,
                        "units": 3,
                        "commodities": [
                          {
                            "commodityType": "Dry cargo, Freight all kinds",
                            "cargoGrossWeight": 36000,
                            "cargoGrossWeightUnit": "KGM"
                          }
                        ]
                      }
                    ]
                  }
                },
                "dgExample": {
                  "summary": "Dangerous Goods (DG) cargo Booking\n",
                  "description": "Update a `Confirmed Booking` (a `Booking` with `carrierBookingReference='cbr-987'`) with DG cargo (*Environmentally hazardous substance, liquid, N.O.S (Propiconazole)*) being sent from Bremerhaven, Germany to Norfolk, US\n",
                  "value": {
                    "carrierBookingRequestReference": "cbrr-123",
                    "carrierBookingReference": "cbr-987",
                    "receiptTypeAtOrigin": "CY",
                    "deliveryTypeAtDestination": "CY",
                    "cargoMovementTypeAtOrigin": "FCL",
                    "cargoMovementTypeAtDestination": "FCL",
                    "serviceContractReference": "HHL51800000",
                    "freightPaymentTermCode": "PRE",
                    "originChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "PRE",
                      "portChargesPaymentTermCode": "PRE",
                      "otherChargesPaymentTermCode": "PRE"
                    },
                    "destinationChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "COL",
                      "portChargesPaymentTermCode": "PRE"
                    },
                    "contractQuotationReference": "HHL1401",
                    "vessel": {
                      "name": "MAERSK IOWA",
                      "vesselIMONumber": "9298686"
                    },
                    "carrierServiceCode": "TA1",
                    "carrierExportVoyageNumber": "403W",
                    "isPartialLoadAllowed": false,
                    "isExportDeclarationRequired": false,
                    "isImportLicenseRequired": false,
                    "expectedDepartureDate": "2024-01-20",
                    "incoTerms": "EXW",
                    "communicationChannelCode": "AO",
                    "isEquipmentSubstitutionAllowed": false,
                    "references": [
                      {
                        "type": "CR",
                        "value": "KN-00103004"
                      }
                    ],
                    "documentParties": {
                      "bookingAgent": {
                        "partyName": "KN Bremerhaven",
                        "address": {
                          "name": "Kuehne + Nagel (AG & Co.) KG",
                          "street": "Amerikaring",
                          "streetNumber": "40",
                          "postCode": "27568",
                          "city": "Bremerhaven",
                          "countryCode": "DE"
                        },
                        "partyContactDetails": [
                          {
                            "name": "Export operations department",
                            "phone": "+49 471 945410"
                          }
                        ]
                      }
                    },
                    "partyContactDetails": [
                      {
                        "name": "Diane",
                        "phone": "+49 471 945410"
                      }
                    ],
                    "shipmentLocations": [
                      {
                        "location": {
                          "locationName": "Bremerhaven",
                          "UNLocationCode": "DEBRV"
                        },
                        "locationTypeCode": "POL"
                      },
                      {
                        "location": {
                          "locationName": "Norfolk",
                          "UNLocationCode": "USORF"
                        },
                        "locationTypeCode": "POD"
                      }
                    ],
                    "requestedEquipments": [
                      {
                        "isShipperOwned": false,
                        "ISOEquipmentCode": "42GP",
                        "units": 3,
                        "commodities": [
                          {
                            "commodityType": "Environmentally hazardous substance, liquid, N.O.S (Propiconazole)",
                            "HSCodes": [
                              "293499"
                            ],
                            "cargoGrossWeight": 36000,
                            "cargoGrossWeightUnit": "KGM",
                            "outerPackaging": {
                              "imoPackagingCode": "3A1",
                              "numberOfPackages": 100,
                              "description": "Jerrican, steel",
                              "dangerousGoods": [
                                {
                                  "unNumber": "3082",
                                  "properShippingName": "Environmentally hazardous substance, liquid, N.O.S\n",
                                  "imoClass": "9",
                                  "isMarinePollutant": false,
                                  "packingGroup": 3,
                                  "isLimitedQuantity": false,
                                  "isExceptedQuantity": false,
                                  "isSalvagePackings": false,
                                  "isEmptyUncleanedResidue": false,
                                  "isWaste": false,
                                  "isHot": false,
                                  "isCompetentAuthorityApprovalProvided": false,
                                  "emergencyContactDetails": {
                                    "contact": "John Doe",
                                    "phone": "+1 123062970"
                                  },
                                  "EMSNumber": "F-A S-F",
                                  "isReportableQuantity": false,
                                  "grossWeight": {
                                    "value": 12000,
                                    "unit": "KGM"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The `Booking request` has been successfully updated in the provider systemwith one of the following combinations (depending on the use case):\n- `bookingStatus='PENDING UPDATE'` in case the consumer has provided an update to a `Booking request` and is awaiting the provider to take action\n- `bookingStatus='PENDING AMENDMENT'` and `amendedBookingStatus='AMENDMENT RECEIVED'` in case the provider has requested an amendment and the consumer has provided an amendment to a `Confirmed Booking` and is awaiting the provider to take action\n- `bookingStatus='CONFIRMED'` and `amendedBookingStatus='AMENDMENT RECEIVED'` in case the consumer has provided an amendment to a `Confirmed Booking` and is awaiting the provider to take action\n\nThe status of the `Booking` can be monitored on the\n    GET /v2/bookings/{bookingReference}\n\nendPoint by the consumer. If the consumer wants to get the content of the `Amended Booking` the `GET` endPoint needs to be used in combination with the `?amendedContent=true` queryParameter:\n    GET /v2/bookings/{bookingReference}?amendedContent=true\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingRefStatus"
                },
                "examples": {
                  "updateReceivedExample": {
                    "summary": "Booking request updated\n",
                    "description": "An updated `Booking request` received, schema validated and stored in provider system - the `Booking` now awaits provider action\n    bookingStatus='UPDATE RECEIVED'\n",
                    "value": {
                      "carrierBookingRequestReference": "cbrr-123",
                      "bookingStatus": "UPDATE RECEIVED"
                    }
                  },
                  "pendingAmendmentApprovalExample": {
                    "summary": "Confirmed Booking amendment\n",
                    "description": "An amendment to a `Confirmed Booking` received, schema validated and stored in provider system - the `Booking` now awaits provider action\n    bookingStatus='CONFIRMED'\n    amendedBookingStatus: 'AMENDMENT RECEIVED'\n",
                    "value": {
                      "carrierBookingRequestReference": "cbrr-123",
                      "carrierBookingReference": "cbr-987",
                      "bookingStatus": "CONFIRMED",
                      "amendedBookingStatus": "AMENDMENT RECEIVED"
                    }
                  },
                  "pendingAmendmentExample": {
                    "summary": "Confirm requested Booking amendment\n",
                    "description": "A requested amendment to a `Confirmed Booking` by the provider has been received, schema validated and stored in provider system. The `Booking` now awaits provider action\n    bookingStatus='PENDING AMENDMENT'\n    amendedBookingStatus: 'AMENDMENT RECEIVED'\n",
                    "value": {
                      "carrierBookingRequestReference": "cbrr-123",
                      "carrierBookingReference": "cbr-987",
                      "bookingStatus": "PENDING AMENDMENT",
                      "amendedBookingStatus": "AMENDMENT RECEIVED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "In case the updated/amended `Booking request` does not schema validate a `400` (Bad Request) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "badRequestExample": {
                    "summary": "Booking missing receiptTypeAtOrigin\n",
                    "description": "`receiptTypeAtOrigin` is a mandatory property in the `Booking request`. This is an example of how the error object would look in case this property is missing\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "PUT",
                      "requestUri": "/v2/bookings/cbrr-123",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "statusCodeMessage": "receiptTypeAtOrigin not found - it is a mandatory property in Booking request\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "property": "receiptTypeAtOrigin",
                          "errorCodeText": "mandatory property missing",
                          "errorCodeMessage": "receiptTypeAtOrigin must be provided as part of a Booking request\n"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "In case the provider is processing an already updated `Booking request` - it is possible for the provider to reject new incomming requests by returning a `409` (Conflict)\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "conflictExample": {
                    "summary": "Conflicting request\n",
                    "description": "The provider is already processing a request and needs to finish this process before any new requests are processed\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "PUT",
                      "requestUri": "/v2/bookings/cbrr-123",
                      "statusCode": 409,
                      "statusCodeText": "Conflict",
                      "statusCodeMessage": "Previous request is being processed. Please try again\nlater\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Conflicting request is being processed",
                          "errorCodeMessage": "The Booking cannot be updated/amended while it is being processed. Please try again later\n"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "internalServerErrorExample": {
                    "summary": "Internal Server Error while processing Booking request\n",
                    "description": "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "PUT",
                      "requestUri": "/v2/bookings/cbrr-123",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Internal Server Error occurred while processing Booking request\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Internal Error occurred",
                          "errorCodeMessage": "Internal Error occurred"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "For other errors the error object should be populated with relevant information\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "tooManyRequestsExample": {
                    "summary": "Updating too many Bookings requests\n",
                    "description": "Calling the endPoint GET /v2/bookings/cbrr-123 too many times within a timeperiod.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "PUT",
                      "requestUri": "/v2/bookings/cbrr-123",
                      "statusCode": 429,
                      "statusCodeText": "Too Many Requests",
                      "statusCodeMessage": "Too many request to update a booking has been requested. Please try again in 1 hour\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Max Booking requests reached",
                          "errorCodeMessage": "A maximum of 10 Bookings can be updated per hour"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Booking"
        ],
        "summary": "Cancels the Booking or cancels a Booking Amendment\n",
        "description": "A shipper initiated cancellation of the `Booking` or `Booking Amendment`. This endPoint corresponds with **UseCase 11 - Cancel Booking by shipper** or **UseCase 9 - Cancel amendment to confirmed Booking**.\n\n## Precondition\nIn order to cancel a `Booking`, the `bookingStatus` must be either\n- `RECEIVED`\n- `PENDING UPDATE`\n- `UPDATE RECEIVED`\n- `CONFIRMED`\n- `PENDING AMENDMENT`\n\nIn order to cancel a `Booking Amendment`, the status of the `Booking Amendment` must be\n- `AMENDMENT RECEIVED`\n\n## Postcondition\nThe provider has received a cancellation from the consumer for a `Booking` or for a `Booking Amendment`.\n\nThe consumer will receive a `200` (OK) if the payload schema-validates or a `400` (Bad Request) if it does not.\n\n## Flow\nThe following occurs when a provider receives a cancellation request:\n1. The payload is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n   **The process stops here!**\n2. The payload is schema-valid which means:\n   - all required properties are provided.\n   - all values provided have correct data type.\n3. Depending on the paylod of the request - either:\n   - the entire `Booking` is cancelled (including any ongoing amendment). This is the case when the payload contains `bookingStatus='CANCELLED'`.\n   \n     When cancelling a `Booking` the `amendedBookingStatus` is set to `AMENDMENT CANCELLED`\n   - only the amendment to the `Booking` is cancelled (in this case the `Booking` continues and `bookingStatus` stays unchanged). This is the case when the payload contains `amendedBookingStatus='AMENDMENT CANCELLED'`.\n     \n     **If** no amendment is being requested prior to this call (`amendedBookingStatus` is **not** `AMENDMENT RECIEVED`) then a 404 (Not Found) is returned\n4. All '*relevant*' subscribers will be notified via a [Booking Notification](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_BKG_NTF/2.0.0-Beta-3#/Notifications/booking-notifications).\n",
        "operationId": "cancel-booking",
        "parameters": [
          {
            "name": "bookingReference",
            "in": "path",
            "description": "This can be one of:\n- `carrierBookingRequestReference` (in case no carrierBookingReference has yet been appointed to the booking)\n- `carrierBookingReference`\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "pattern": "^\\S(?:.*\\S)?$",
              "type": "string",
              "example": "CBR001"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bookings_bookingReference_body"
              },
              "examples": {
                "bookingCancelledExample": {
                  "summary": "Entire Booking cancelled\n",
                  "description": "The consumer wants to cancel the entire `Booking`. This is done by setting the `bookingStatus` to `CANCELLED` and provide an optional `reason`.\n",
                  "value": {
                    "bookingStatus": "CANCELLED",
                    "reason": "Customer cancelled order"
                  }
                },
                "amendmentCancelledExample": {
                  "summary": "Amendment cancelled\n",
                  "description": "The consumer wants to **only** cancel the amendment (and keep the `Booking`). This is done by setting the `amendedBookingStatus` to `AMENDMENT CANCELLED`.\n",
                  "value": {
                    "amendedBookingStatus": "AMENDMENT CANCELLED"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking has been cancelled\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingRefCancelledStatus"
                },
                "examples": {
                  "bookingCancelledExample": {
                    "summary": "Entire Booking cancelled\n",
                    "description": "The consumer has requested that the entire `Booking` should be cancelled. `bookingStatus` is set to `CANCELLED` and `amendedBookingStatus` is set to `AMENDMENT CANCELLED`.\n",
                    "value": {
                      "carrierBookingRequestReference": "cbrr-123",
                      "carrierBookingReference": "cbr-987",
                      "bookingStatus": "CANCELLED",
                      "amendedBookingStatus": "AMENDMENT CANCELLED"
                    }
                  },
                  "amendmentCancelled1Example": {
                    "summary": "Amendment cancelled on a confirmed Booking\n",
                    "description": "The consumer has requested that the amendment to a confirmed `Booking` is to be cancelled. The status of the `Booking` stays as `CONFIRMED`. The `amendedBookingStatus` is set to `AMENDMENT CANCELLED`.\n",
                    "value": {
                      "carrierBookingRequestReference": "cbrr-123",
                      "carrierBookingReference": "cbr-987",
                      "bookingStatus": "CONFIRMED",
                      "amendedBookingStatus": "AMENDMENT CANCELLED"
                    }
                  },
                  "amendmentCancelled2Example": {
                    "summary": "Amendment requested by provider cancelled by consumer\n",
                    "description": "The consumer has requested that the amendment to a confirmed `Booking` is to be cancelled. The status of the `Booking` stays as `PENDING AMENDMENT`. The `amendedBookingStatus` is set to `AMENDMENT CANCELLED`.\n",
                    "value": {
                      "carrierBookingRequestReference": "cbrr-123",
                      "carrierBookingReference": "cbr-987",
                      "bookingStatus": "PENDING AMENDMENT",
                      "amendedBookingStatus": "AMENDMENT CANCELLED"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "In case the provider is processing an already updated Booking request - it is possible for the provider to reject the cancellation by returning a `409` (Conflict)\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "conflictExample": {
                    "summary": "Conflicting request\n",
                    "description": "The provider is already processing a request and needs to finish this process.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "PATCH",
                      "requestUri": "/v2/bookings/cbrr-123",
                      "statusCode": 409,
                      "statusCodeText": "Conflict",
                      "statusCodeMessage": "Previous request is being processed. Please try again later\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Conflicting request is being processed",
                          "errorCodeMessage": "Conflicting request is being processed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/booking-notifications": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Send a new Booking Notification",
        "description": "Creates a new [`Booking Notification`](#/BookingNotification). This endPoint is called whenever a `Booking` that a consumer has subscribed to changes state or is updated.\n",
        "operationId": "booking-notifications",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "requestBody": {
          "description": "The payload used to create a [`Booking Notification`](#/BookingNotification)\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingNotification"
              },
              "examples": {
                "receivedExample": {
                  "summary": "Booking request received\n",
                  "description": "A notification explaining that a `Booking Request` has been received and stored in provider system (`bookingStatus='RECEIVED'`).\n",
                  "value": {
                    "specversion": "1.0",
                    "id": "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                    "source": "https://member.com/",
                    "type": "org.dcsa.booking.v2",
                    "time": "2018-04-05T17:31:00Z",
                    "datacontenttype": "application/json",
                    "subscriptionReference": "BKG001",
                    "data": {
                      "bookingStatus": "RECEIVED",
                      "carrierBookingRequestReference": "24595eb0-5cfc-4381-9c3a-cedc1975e9aa"
                    }
                  }
                },
                "declinedExample": {
                  "summary": "Booking amendment declined\n",
                  "description": "A notification explaining that an amendment to a `Booking` has been declined (`amendedBookingStatus='AMENDMENT DECLINED'`)\n",
                  "value": {
                    "specversion": "1.0",
                    "id": "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                    "source": "https://member.com/",
                    "type": "org.dcsa.booking.v2",
                    "time": "2018-04-05T17:31:00Z",
                    "datacontenttype": "application/json",
                    "subscriptionReference": "BKG001",
                    "data": {
                      "bookingStatus": "CONFIRMED",
                      "amendedBookingStatus": "AMENDMENT DECLINED",
                      "carrierBookingRequestReference": "24595eb0-5cfc-4381-9c3a-cedc1975e9aa",
                      "carrierBookingReference": "ABC709951",
                      "reason": "Declined because of no equipment availability"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            }
          },
          "400": {
            "description": "In case the `Notification` does not schema validate a `400` (Bad Request) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "badRequestExample": {
                    "summary": "Booking missing carrierBookingReference or carrierBookingRequestReference\n",
                    "description": "`carrierBookingReference` or `carrierBookingRequestReference` is a conditionary property in the `Notification` (at least one of them must be present). This is an example of how the error object would look in case this property is missing\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v2/booking-notifications",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "statusCodeMessage": "carrierBookingReference or carrierBookingRequestReference not found - one of them is a mandatory to provide in a Notification\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "property": "carrierBookingReference or carrierBookingRequestReference",
                          "errorCodeText": "mandatory property missing",
                          "errorCodeMessage": "carrierBookingReference or carrierBookingRequestReference must be provided as part of a Notification\n"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "internalServerErrorExample": {
                    "summary": "Internal Server Error while processing Notification\n",
                    "description": "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v2/booking-notifications",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Internal Server Error occurred while processing Booking request\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Internal Error occurred",
                          "errorCodeMessage": "Internal Error occurred"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "For other errors the error object should be populated with relevant information\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "tooManyRequestsExample": {
                    "summary": "Making too many Notifications\n",
                    "description": "Calling the endPoint\n\n    POST /v2/booking-notifications\n\ntoo many times within a timeperiod.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v2/booking-notifications",
                      "statusCode": 429,
                      "statusCodeText": "Too Many Requests",
                      "statusCodeMessage": "Too many request to create a Notification has been requested. Please try again in 1 hour\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Max Notifications reached",
                          "errorCodeMessage": "A maximum of 10 Notifications can be created per hour"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/booking-full-notifications": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Send a full Booking Notification",
        "description": "Sends an entire [`Booking`](#/Booking). This endPoint is called whenever a `Booking` that a consumer has subscribed to changes state or is updated.\n",
        "operationId": "booking-full-notifications",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "requestBody": {
          "description": "The Booking to send [`Booking`](#/Booking)\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Booking"
              },
              "examples": {
                "receivedExample": {
                  "summary": "Booking request received\n",
                  "description": "A Full Notification containing the `Booking Request` received and stored in provider system (`bookingStatus='RECEIVED'`).\n",
                  "value": {
                    "carrierBookingRequestReference": "cbrr-123",
                    "bookingStatus": "RECEIVED",
                    "receiptTypeAtOrigin": "CY",
                    "deliveryTypeAtDestination": "CY",
                    "cargoMovementTypeAtOrigin": "FCL",
                    "cargoMovementTypeAtDestination": "FCL",
                    "serviceContractReference": "HHL51800000",
                    "freightPaymentTermCode": "PRE",
                    "originChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "PRE",
                      "portChargesPaymentTermCode": "PRE"
                    },
                    "destinationChargesPaymentTerm": {
                      "haulageChargesPaymentTermCode": "COL",
                      "portChargesPaymentTermCode": "PRE",
                      "otherChargesPaymentTermCode": "PRE"
                    },
                    "contractQuotationReference": "HHL1401",
                    "vessel": {
                      "name": "MAERSK IOWA",
                      "vesselIMONumber": "9298686"
                    },
                    "carrierServiceCode": "TA1",
                    "carrierExportVoyageNumber": "403W",
                    "isPartialLoadAllowed": false,
                    "isExportDeclarationRequired": false,
                    "isImportLicenseRequired": false,
                    "expectedDepartureDate": "2024-01-20",
                    "incoTerms": "EXW",
                    "communicationChannelCode": "AO",
                    "isEquipmentSubstitutionAllowed": false,
                    "references": [
                      {
                        "type": "CR",
                        "value": "KN-00103004"
                      }
                    ],
                    "documentParties": {
                      "bookingAgent": {
                        "partyName": "KN Bremerhaven",
                        "address": {
                          "name": "Kuehne + Nagel (AG & Co.) KG",
                          "street": "Amerikaring",
                          "streetNumber": "40",
                          "postCode": "27568",
                          "city": "Bremerhaven",
                          "countryCode": "DE"
                        },
                        "partyContactDetails": [
                          {
                            "name": "Export operations department",
                            "phone": "+49 471 945410"
                          }
                        ]
                      }
                    },
                    "partyContactDetails": [
                      {
                        "name": "Diane",
                        "phone": "+49 471 945410"
                      }
                    ],
                    "shipmentLocations": [
                      {
                        "location": {
                          "locationName": "Bremerhaven",
                          "UNLocationCode": "DEBRV"
                        },
                        "locationTypeCode": "POL"
                      },
                      {
                        "location": {
                          "locationName": "Norfolk",
                          "UNLocationCode": "USORF"
                        },
                        "locationTypeCode": "POD"
                      }
                    ],
                    "requestedEquipments": [
                      {
                        "isShipperOwned": false,
                        "ISOEquipmentCode": "42GP",
                        "units": 3,
                        "commodities": [
                          {
                            "commodityType": "Dry cargo, Freight all kinds",
                            "cargoGrossWeight": 36000,
                            "cargoGrossWeightUnit": "KGM"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            }
          },
          "400": {
            "description": "In case the `Full Notification` does not schema validate a `400` (Bad Request) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "badRequestExample": {
                    "summary": "Booking missing bookingStatus\n",
                    "description": "`bookingStatus` is a mandatory property in the `Full Notification`. This is an example of how the error object would look in case this property is missing\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v2/booking-full-notifications",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "statusCodeMessage": "bookingStatus not found - one of them is a mandatory to provide in a Full Notification\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "property": "bookingStatus",
                          "errorCodeText": "mandatory property missing",
                          "errorCodeMessage": "bookingStatus must be provided as part of a Full Notification\n"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "internalServerErrorExample": {
                    "summary": "Internal Server Error while processing Full Notification\n",
                    "description": "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v2/booking-full-notifications",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Internal Server Error occurred while processing Booking request\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Internal Error occurred",
                          "errorCodeMessage": "Internal Error occurred"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "For other errors the error object should be populated with relevant information\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "tooManyRequestsExample": {
                    "summary": "Making too many Full Notifications\n",
                    "description": "Calling the endPoint\n\n    POST /v2/booking-full-notifications\n\ntoo many times within a timeperiod.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v2/booking-full-notifications",
                      "statusCode": 429,
                      "statusCodeText": "Too Many Requests",
                      "statusCodeMessage": "Too many request to create a Notification has been requested. Please try again in 1 hour\n",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Max Full Notifications reached",
                          "errorCodeMessage": "A maximum of 10 Full Notifications can be created per hour"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BookingNotification": {
        "title": "Booking Notification",
        "required": [
          "data",
          "datacontenttype",
          "id",
          "source",
          "specversion",
          "subscriptionReference",
          "time",
          "type"
        ],
        "type": "object",
        "properties": {
          "specversion": {
            "type": "string",
            "description": "The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.\n\nCurrently, this attribute will only have the 'major' and 'minor' version numbers included in it. This allows for 'patch' changes to the specification to be made without changing this property's value in the serialization. Note: for 'release candidate' releases a suffix might be used for testing purposes.\n",
            "example": "1.0",
            "enum": [
              "1.0"
            ]
          },
          "id": {
            "maxLength": 100,
            "type": "string",
            "description": "Identifies the event. Producers MUST ensure that `source` + `id` is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same `id`. Consumers MAY assume that Events with identical `source` and `id` are duplicates.\n",
            "example": "3cecb101-7a1a-43a4-9d62-e88a131651e2"
          },
          "source": {
            "maxLength": 4096,
            "type": "string",
            "description": "Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.\n\nProducers MUST ensure that `source` + `id` is unique for each distinct event.\n\nAn application MAY assign a unique `source` to each distinct producer, which makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique `source` identifiers.\n\nA source MAY include more than one producer. In that case the producers MUST collaborate to ensure that `source` + `id` is unique for each distinct event.\n",
            "example": "https://member.com/"
          },
          "type": {
            "type": "string",
            "description": "This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type - see [Versioning of CloudEvents in the Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents) for more information.\n",
            "example": "org.dcsa.booking.v2",
            "enum": [
              "org.dcsa.booking.v2"
            ]
          },
          "time": {
            "type": "string",
            "description": "Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same `source` MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.\n",
            "format": "date-time",
            "example": "2018-04-05T17:31:00Z"
          },
          "datacontenttype": {
            "type": "string",
            "description": "Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the [JSON envelope](formats/json-format.md#3-envelope) format might carry an XML payload in `data`, and the consumer is informed by this attribute being set to \"application/xml\". The rules for how `data` content is rendered for different `datacontenttype` values are defined in the event format specifications; for example, the JSON event format defines the relationship in [section 3.1](formats/json-format.md#31-handling-of-data).\n\nFor some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol.\n\nIn some event formats the `datacontenttype` attribute MAY be omitted. For example, if a JSON format event has no `datacontenttype` attribute, then it is implied that the `data` is a JSON value conforming to the \"application/json\" media type. In other words: a JSON-format event with no `datacontenttype` is exactly equivalent to one with `datacontenttype=\"application/json\"`.\n\nWhen translating an event message with no `datacontenttype` attribute to a different format or protocol binding, the target `datacontenttype` SHOULD be set explicitly to the implied `datacontenttype` of the source.\n",
            "example": "application/json",
            "enum": [
              "application/json"
            ]
          },
          "subscriptionReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The reference of the subscription that has triggered this event\n",
            "example": "30675492-50ff-4e17-a7df-7a487a8ad343"
          },
          "data": {
            "$ref": "#/components/schemas/BookingNotification_data"
          }
        },
        "description": "`CloudEvent` specific properties for the `Notification`.\n"
      },
      "RequestedChange": {
        "title": "Requested Change",
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "property": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the property causing the error.\n",
            "example": "facilityCode"
          },
          "jsonPath": {
            "maxLength": 500,
            "type": "string",
            "description": "A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).\n",
            "example": "$.location.facilityCode"
          },
          "message": {
            "maxLength": 500,
            "type": "string",
            "description": "A description of the problem that needs attention.\n",
            "example": "Spaces not allowed in facility code"
          }
        },
        "description": "A change required to the document in order for the carrier to accepted it\n"
      },
      "ErrorResponse": {
        "title": "Error Response",
        "required": [
          "errorDateTime",
          "errors",
          "httpMethod",
          "requestUri",
          "statusCode",
          "statusCodeText"
        ],
        "type": "object",
        "properties": {
          "httpMethod": {
            "type": "string",
            "description": "The HTTP method used to make the request e.g. `GET`, `POST`, etc\n",
            "example": "POST",
            "enum": [
              "GET",
              "HEAD",
              "POST",
              "PUT",
              "DELETE",
              "OPTION",
              "PATCH"
            ]
          },
          "requestUri": {
            "type": "string",
            "description": "The URI that was requested.\n",
            "example": "/v1/events"
          },
          "statusCode": {
            "type": "integer",
            "description": "The HTTP status code returned.\n",
            "format": "int32",
            "example": 400
          },
          "statusCodeText": {
            "maxLength": 50,
            "type": "string",
            "description": "A standard short description corresponding to the HTTP status code.\n",
            "example": "Bad Request"
          },
          "statusCodeMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "A long description corresponding to the HTTP status code with additional information.\n",
            "example": "The supplied data could not be accepted"
          },
          "providerCorrelationReference": {
            "maxLength": 100,
            "type": "string",
            "description": "A unique identifier to the HTTP request within the scope of the API provider.\n",
            "example": "4426d965-0dd8-4005-8c63-dc68b01c4962"
          },
          "errorDateTime": {
            "type": "string",
            "description": "The DateTime corresponding to the error occurring. Must be formatted using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\n",
            "format": "date-time",
            "example": "2019-11-12T07:41:00+08:30"
          },
          "errors": {
            "minItems": 1,
            "type": "array",
            "description": "An array of errors providing more detail about the root cause.\n",
            "items": {
              "$ref": "#/components/schemas/DetailedError"
            }
          }
        },
        "description": "Unexpected error"
      },
      "DetailedError": {
        "title": "Detailed Error",
        "required": [
          "errorCodeMessage",
          "errorCodeText"
        ],
        "type": "object",
        "properties": {
          "errorCode": {
            "maximum": 9999,
            "minimum": 7000,
            "type": "integer",
            "description": "The detailed error code returned.\n\n  - `7000-7999` Technical error codes\n  - `8000-8999` Functional error codes\n  - `9000-9999` API provider-specific error codes            \n\n[Error codes as specified by DCSA](https://dcsa.atlassian.net/wiki/spaces/DTG/pages/197132308/Standard+Error+Codes).\n",
            "format": "int32",
            "example": 7003
          },
          "property": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the property causing the error.\n",
            "example": "facilityCode"
          },
          "value": {
            "maxLength": 500,
            "type": "string",
            "description": "The value of the property causing the error serialised as a string exactly as in the original request.\n",
            "example": "SG SIN WHS"
          },
          "jsonPath": {
            "maxLength": 500,
            "type": "string",
            "description": "A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).\n",
            "example": "$.location.facilityCode"
          },
          "errorCodeText": {
            "maxLength": 100,
            "type": "string",
            "description": "A standard short description corresponding to the `errorCode`.\n",
            "example": "invalidData"
          },
          "errorCodeMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "A long description corresponding to the `errorCode` with additional information.\n",
            "example": "Spaces not allowed in facility code"
          }
        },
        "description": "A detailed description of what has caused the error.\n"
      },
      "Address": {
        "title": "Address",
        "required": [
          "city",
          "countryCode",
          "street"
        ],
        "type": "object",
        "properties": {
          "street": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the street of the party's address.",
            "example": "Ruijggoordweg"
          },
          "streetNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The number of the street of the party's address.",
            "example": "100"
          },
          "floor": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The floor of the party's street number.\n",
            "example": "2nd"
          },
          "postCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The post code of the party's address.",
            "example": "1047 HM"
          },
          "city": {
            "maxLength": 65,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The city name of the party's address.\n",
            "example": "Amsterdam"
          },
          "stateRegion": {
            "maxLength": 65,
            "type": "string",
            "description": "The state/region of the party's address.",
            "example": "North Holland"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "NL"
          }
        },
        "description": "An object for storing address related information\n"
      },
      "Facility": {
        "title": "Facility",
        "required": [
          "facilityCode",
          "facilityCodeListProvider"
        ],
        "type": "object",
        "properties": {
          "facilityCode": {
            "maxLength": 6,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The code used for identifying the specific facility. This code does not include the UN Location Code.\n\nThe definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:\n\n- for `SMDG` - the codeList used is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx) \n- for `BIC` - the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/)\n",
            "example": "ADT"
          },
          "facilityCodeListProvider": {
            "type": "string",
            "description": "The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\n- `BIC` (Requires a UN Location Code)\n- `SMDG` (Requires a UN Location Code)\n",
            "example": "SMDG",
            "enum": [
              "BIC",
              "SMDG"
            ]
          }
        },
        "description": "An object used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\n"
      },
      "GeoCoordinate": {
        "title": "Geo Coordinate",
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "maxLength": 10,
            "type": "string",
            "description": "Geographic coordinate that specifies the north–south position of a point on the Earth's surface.",
            "example": "48.8585500"
          },
          "longitude": {
            "maxLength": 11,
            "type": "string",
            "description": "Geographic coordinate that specifies the east–west position of a point on the Earth's surface.",
            "example": "2.294492036"
          }
        },
        "description": "An object used to express a location using `latitude` and `longitude`.\n"
      },
      "CreateBooking": {
        "title": "Create Booking",
        "required": [
          "cargoMovementTypeAtDestination",
          "cargoMovementTypeAtOrigin",
          "communicationChannelCode",
          "deliveryTypeAtDestination",
          "documentParties",
          "isEquipmentSubstitutionAllowed",
          "isExportDeclarationRequired",
          "isImportLicenseRequired",
          "isPartialLoadAllowed",
          "receiptTypeAtOrigin",
          "requestedEquipments",
          "shipmentLocations"
        ],
        "type": "object",
        "properties": {
          "receiptTypeAtOrigin": {
            "maxLength": 3,
            "type": "string",
            "description": "Indicates the type of service offered at `Origin`. The options are:\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
            "example": "CY",
            "enum": [
              "CY",
              "SD",
              "CFS"
            ]
          },
          "deliveryTypeAtDestination": {
            "maxLength": 3,
            "type": "string",
            "description": "Indicates the type of service offered at `Destination`. The options are:\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
            "example": "CY",
            "enum": [
              "CY",
              "SD",
              "CFS"
            ]
          },
          "cargoMovementTypeAtOrigin": {
            "maxLength": 3,
            "type": "string",
            "description": "Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
            "example": "FCL"
          },
          "cargoMovementTypeAtDestination": {
            "maxLength": 3,
            "type": "string",
            "description": "Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
            "example": "FCL"
          },
          "serviceContractReference": {
            "maxLength": 30,
            "type": "string",
            "description": "Reference number for agreement between shipper and carrier, which optionally includes a certain minimum quantity commitment (usually referred as “MQC”) of cargo that the shipper commits to over a fixed period, and the carrier commits to a certain rate or rate schedule.\n\n**Condition:** Either a valid `serviceContractReference` or `contractQuotationReference` must be provided.\n",
            "example": "HHL51800000"
          },
          "freightPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "originChargesPaymentTerm": {
            "$ref": "#/components/schemas/Origin Charges Payment Term"
          },
          "destinationChargesPaymentTerm": {
            "$ref": "#/components/schemas/Destination Charges Payment Term"
          },
          "contractQuotationReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference.\n\n**Condition:** Either a valid `contractQuotationReference` or `serviceContractReference` must be provided.\n",
            "example": "HHL1401"
          },
          "vessel": {
            "$ref": "#/components/schemas/Vessel"
          },
          "carrierServiceName": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of a service as specified by the carrier.\n\n**Condition:** Mandatory if `carrierExportVoyageNumber` is provided and Vessel details or `carrierServiceCode` are blank\n",
            "example": "Great Lion Service"
          },
          "carrierServiceCode": {
            "maxLength": 11,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The carrier specific code of the service for which the schedule details are published.\n\n**Condition:** Mandatory if `carrierExportVoyageNumber` is provided and Vessel details or `carrierServiceName` are blank\n",
            "example": "FE1"
          },
          "universalServiceReference": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "^SR\\d{5}[A-Z]$",
            "type": "string",
            "description": "A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.\n",
            "example": "SR12345A"
          },
          "carrierExportVoyageNumber": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The carrier specific identifier of the export Voyage.\n\n**Condition:** Mandatory if `expectedDepartureDate` or `expectedArrivalAtPlaceOfDeliveryStartDate` and `expectedArrivalAtPlaceOfDeliveryEndDate` is not provided.\n",
            "example": "2103S"
          },
          "universalExportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWSR]`\n\n- `2 digits` for the year\n- `2 alphanumeric characters` for the sequence number of the voyage\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).\n",
            "example": "2103N"
          },
          "declaredValue": {
            "minimum": 0,
            "type": "number",
            "description": "The value of the cargo that the shipper declares to avoid the carrier's limitation of liability and \"Ad Valorem\" freight, i.e. freight which is calculated based on the value of the goods declared by the shipper.\n",
            "format": "float",
            "example": 1231.1
          },
          "declaredValueCurrency": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "^[A-Z]{3}$",
            "type": "string",
            "description": "The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n",
            "example": "DKK"
          },
          "isPartialLoadAllowed": {
            "type": "boolean",
            "description": "Indication whether the shipper agrees to load part of the shipment in case where not all of the cargo is delivered within cut-off.\n",
            "example": true
          },
          "isExportDeclarationRequired": {
            "type": "boolean",
            "description": "Information provided by the shipper whether an export declaration is required for this particular shipment/commodity/destination.\n",
            "example": true
          },
          "exportDeclarationReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A government document permitting designated goods to be shipped out of the country.  Reference number assigned by an issuing authority to an Export License. The export license must be valid at time of departure.\n",
            "example": "ABC123123"
          },
          "isImportLicenseRequired": {
            "type": "boolean",
            "description": "Information provided by the shipper whether an import permit or license is required for this particular\nshipment/commodity/destination.\n",
            "example": true
          },
          "importLicenseReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A certificate, issued by countries exercising import controls, that permits importation of the articles stated in the license. Reference number assigned by an issuing authority to an Import License. The import license number must be valid at time of arrival.\n",
            "example": "XYZ987987"
          },
          "expectedDepartureDate": {
            "type": "string",
            "description": "The date when the shipment is expected to be loaded on board a vessel as provided by the shipper or its agent.\n\n**Condition:** Mandatory if vessel/voyage/service details or `expectedArrivalAtPlaceOfDeliveryDate` is not provided.\n",
            "format": "date",
            "example": "2021-05-17"
          },
          "expectedArrivalAtPlaceOfDeliveryStartDate": {
            "type": "string",
            "description": "The start date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryEndDate`) for when the shipment is expected to arrive at `Place Of Delivery`.\n\n**Condition:** Mandatory if vessel/voyage/service details or `expectedDepartureDate` is not provided.\n",
            "format": "date",
            "example": "2021-05-17"
          },
          "expectedArrivalAtPlaceOfDeliveryEndDate": {
            "type": "string",
            "description": "The end date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryStartDate`) for when the shipment is expected to arrive at `Place Of Delivery`.\n\n**Condition:** Mandatory if vessel/voyage/service details or `expectedDepartureDate` is not provided.\n",
            "format": "date",
            "example": "2021-05-19"
          },
          "transportDocumentTypeCode": {
            "type": "string",
            "description": "Specifies the type of the `Transport Document`. Possible values are:\n- `BOL` (Bill of Lading)\n- `SWB` (Sea Waybill)\n",
            "example": "SWB",
            "enum": [
              "BOL",
              "SWB"
            ]
          },
          "transportDocumentReference": {
            "maxLength": 20,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A unique reference allocated by the shipping line to the `Transport Document` that the booking concerns.\n",
            "example": "reserved-HHL123"
          },
          "bookingChannelReference": {
            "maxLength": 20,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Identification number provided by the platform/channel used for booking request/confirmation, ex: Inttra booking reference, or GTNexus, other.\n\n**Condition:** a booking channel is being used\n",
            "example": "Inttra reference"
          },
          "incoTerms": {
            "maxLength": 3,
            "type": "string",
            "description": "Transport obligations, costs and risks as agreed between buyer and seller as defined by [ICC](https://iccwbo.org/business-solutions/incoterms-rules/). A list of possible values:\n- `EXW` (Ex-Works)\n- `FCA` (Free Carrier)\n- `FAS` (Free Alongside Ship)\n- `FOB` (Free On Board)\n- `CFR` (Cost and Freight)\n- `CIF` (Cost, Insurance and Freight)\n- `CPT` (Carriage Paid To)\n- `CIP` (Carriage And Insurance Paid To)\n- `DAP` (Delivered At Place)\n- `DPU` (Delivered At Place Unloaded)\n- `DDP` (Delivered Duty Paid)\n",
            "example": "FCA"
          },
          "communicationChannelCode": {
            "maxLength": 2,
            "type": "string",
            "description": "Specifying which communication channel is to be used for this booking e.g. Possible values are:\n- `EI` (EDI transmission)\n- `EM` (Email)\n- `AO` (API)\n",
            "example": "AO"
          },
          "isEquipmentSubstitutionAllowed": {
            "type": "boolean",
            "description": "Indicates if an alternate equipment type can be provided by the carrier.\n",
            "example": true
          },
          "invoicePayableAt": {
            "$ref": "#/components/schemas/Invoice Payable At"
          },
          "placeOfBLIssue": {
            "title": "Place of B/L Issue",
            "type": "object",
            "description": "An object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified either as a `UN Location Code` or as a `CountryCode`.\n",
            "oneOf": [
              {
                "title": "UN Location Code",
                "required": [
                  "UNLocationCode"
                ],
                "type": "object",
                "properties": {
                  "UNLocationCode": {
                    "maxLength": 5,
                    "minLength": 5,
                    "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
                    "type": "string",
                    "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                    "example": "NLAMS"
                  }
                }
              },
              {
                "title": "Country Code",
                "required": [
                  "countryCode"
                ],
                "type": "object",
                "properties": {
                  "countryCode": {
                    "maxLength": 2,
                    "minLength": 2,
                    "pattern": "^[A-Z]{2}$",
                    "type": "string",
                    "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                    "example": "DK"
                  }
                }
              }
            ]
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/ReferenceShipper"
            }
          },
          "documentParties": {
            "$ref": "#/components/schemas/Document Parties"
          },
          "partyContactDetails": {
            "type": "array",
            "description": "The contact details of the person(s) to contact in relation to the **Booking** (changes, notifications etc.) \n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "shipmentLocations": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Shipment Locations`\n",
            "items": {
              "$ref": "#/components/schemas/ShipmentLocation"
            }
          },
          "requestedEquipments": {
            "minItems": 1,
            "type": "array",
            "description": "List of `Requested Equipments`. Multiple containers can be requested within the same booking. For each Requested Equipment object with 2 or more units, it is a condition that the commodity (or list of commodities) defined within the same Requested Equipment object is the same for each requested unit.\n\n**Example:** 2 x 20' containing 50% shoes and 50% t-shirts can be requested within the same Requested Equipment object only if each 20' will contain 50% shoes and 50% t-shirts. If 1 x 20' will contain 100% shoes and the other 20' will be 100% t-shirts, 2 separate Requested Equipment objects must be defined.\n",
            "items": {
              "$ref": "#/components/schemas/RequestedEquipmentShipper"
            }
          }
        }
      },
      "UpdateBooking": {
        "title": "Update Booking",
        "required": [
          "cargoMovementTypeAtDestination",
          "cargoMovementTypeAtOrigin",
          "communicationChannelCode",
          "deliveryTypeAtDestination",
          "documentParties",
          "isEquipmentSubstitutionAllowed",
          "isExportDeclarationRequired",
          "isImportLicenseRequired",
          "isPartialLoadAllowed",
          "receiptTypeAtOrigin",
          "requestedEquipments",
          "shipmentLocations"
        ],
        "type": "object",
        "properties": {
          "carrierBookingRequestReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference to the booking during the booking request phase.\n\n**Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` must be provided\n",
            "example": "24595eb0-5cfc-4381-9c3a-cedc1975e9aa"
          },
          "carrierBookingReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The `carrierBookingReference` if know. Often this will not be known until the booking has been confirmed. Is available during a booking amendment.\n\n**Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` must be provided\n",
            "example": "ABC709951"
          },
          "receiptTypeAtOrigin": {
            "maxLength": 3,
            "type": "string",
            "description": "Indicates the type of service offered at `Origin`. The options are:\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
            "example": "CY",
            "enum": [
              "CY",
              "SD",
              "CFS"
            ]
          },
          "deliveryTypeAtDestination": {
            "maxLength": 3,
            "type": "string",
            "description": "Indicates the type of service offered at `Destination`. The options are:\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
            "example": "CY",
            "enum": [
              "CY",
              "SD",
              "CFS"
            ]
          },
          "cargoMovementTypeAtOrigin": {
            "maxLength": 3,
            "type": "string",
            "description": "Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
            "example": "FCL"
          },
          "cargoMovementTypeAtDestination": {
            "maxLength": 3,
            "type": "string",
            "description": "Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
            "example": "FCL"
          },
          "serviceContractReference": {
            "maxLength": 30,
            "type": "string",
            "description": "Reference number for agreement between shipper and carrier, which optionally includes a certain minimum quantity commitment (usually referred as “MQC”) of cargo that the shipper commits to over a fixed period, and the carrier commits to a certain rate or rate schedule.\n\n**Condition:** Either a valid `serviceContractReference` or `contractQuotationReference` must be provided.\n",
            "example": "HHL51800000"
          },
          "freightPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "originChargesPaymentTerm": {
            "$ref": "#/components/schemas/Origin Charges Payment Term"
          },
          "destinationChargesPaymentTerm": {
            "$ref": "#/components/schemas/Destination Charges Payment Term"
          },
          "contractQuotationReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference.\n\n**Condition:** Either a valid `contractQuotationReference` or `serviceContractReference` must be provided.\n",
            "example": "HHL1401"
          },
          "vessel": {
            "$ref": "#/components/schemas/Vessel"
          },
          "carrierServiceName": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of a service as specified by the carrier.\n\n**Condition:** Mandatory if `carrierExportVoyageNumber` is provided and Vessel details or `carrierServiceCode` are blank\n",
            "example": "Great Lion Service"
          },
          "carrierServiceCode": {
            "maxLength": 11,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The carrier specific code of the service for which the schedule details are published.\n\n**Condition:** Mandatory if `carrierExportVoyageNumber` is provided and Vessel details or `carrierServiceName` are blank\n",
            "example": "FE1"
          },
          "universalServiceReference": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "^SR\\d{5}[A-Z]$",
            "type": "string",
            "description": "A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.\n",
            "example": "SR12345A"
          },
          "carrierExportVoyageNumber": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The carrier specific identifier of the export Voyage.\n\n**Condition:** Mandatory if `expectedDepartureDate` or `expectedArrivalAtPlaceOfDeliveryStartDate` and `expectedArrivalAtPlaceOfDeliveryEndDate` is not provided.\n",
            "example": "2103S"
          },
          "universalExportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWSR]`\n- `2 digits` for the year\n- `2 alphanumeric characters` for the sequence number of the voyage\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).\n",
            "example": "2103N"
          },
          "declaredValue": {
            "minimum": 0,
            "type": "number",
            "description": "The value of the cargo that the shipper declares to avoid the carrier's limitation of liability and \"Ad Valorem\" freight, i.e. freight which is calculated based on the value of the goods declared by the shipper.\n",
            "format": "float",
            "example": 1231.1
          },
          "declaredValueCurrency": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "^[A-Z]{3}$",
            "type": "string",
            "description": "The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n",
            "example": "DKK"
          },
          "isPartialLoadAllowed": {
            "type": "boolean",
            "description": "Indication whether the shipper agrees to load part of the shipment in case where not all of the cargo is delivered within cut-off.\n",
            "example": true
          },
          "isExportDeclarationRequired": {
            "type": "boolean",
            "description": "Information provided by the shipper whether an export declaration is required for this particular shipment/commodity/destination.\n",
            "example": true
          },
          "exportDeclarationReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A government document permitting designated goods to be shipped out of the country.  Reference number assigned by an issuing authority to an Export License. The export license must be valid at time of departure. Required if Export declaration required is `True`.\n",
            "example": "ABC123123"
          },
          "isImportLicenseRequired": {
            "type": "boolean",
            "description": "Information provided by the shipper whether an import permit or license is required for this particular\nshipment/commodity/destination.\n",
            "example": true
          },
          "importLicenseReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A certificate, issued by countries exercising import controls, that permits importation of the articles stated in the license. Reference number assigned by an issuing authority to an Import License. The import license number must be valid at time of arrival. Required if import license required is ‘True’.\n",
            "example": "ABC123123"
          },
          "expectedDepartureDate": {
            "type": "string",
            "description": "The date when the shipment is expected to be loaded on board a vessel as provided by the shipper or its agent.\n\n**Condition:** Mandatory if vessel/voyage/service details or `expectedArrivalAtPlaceOfDeliveryDate` is not provided.\n",
            "format": "date",
            "example": "2021-05-17"
          },
          "expectedArrivalAtPlaceOfDeliveryStartDate": {
            "type": "string",
            "description": "The start date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryEndDate`) for when the shipment is expected to arrive at `Place Of Delivery`.\n\n**Condition:** Mandatory if vessel/voyage/service details or `expectedDepartureDate` is not provided.\n",
            "format": "date",
            "example": "2021-05-17"
          },
          "expectedArrivalAtPlaceOfDeliveryEndDate": {
            "type": "string",
            "description": "The end date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryStartDate`) for when the shipment is expected to arrive at `Place Of Delivery`.\n\n**Condition:** Mandatory if vessel/voyage/service details or `expectedDepartureDate` is not provided.\n",
            "format": "date",
            "example": "2021-05-19"
          },
          "transportDocumentTypeCode": {
            "type": "string",
            "description": "Specifies the type of the `Transport Document`. Possible values are:\n- `BOL` (Bill of Lading)\n- `SWB` (Sea Waybill)\n",
            "example": "SWB",
            "enum": [
              "BOL",
              "SWB"
            ]
          },
          "transportDocumentReference": {
            "maxLength": 20,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A unique reference allocated by the shipping line to the `Transport Document` that the booking concerns.\n",
            "example": "reserved-HHL123"
          },
          "bookingChannelReference": {
            "maxLength": 20,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Identification number provided by the platform/channel used for booking request/confirmation, ex: Inttra booking reference, or GTNexus, other.\n\n**Condition:** a booking channel is being used\n",
            "example": "Inttra reference"
          },
          "incoTerms": {
            "maxLength": 3,
            "type": "string",
            "description": "Transport obligations, costs and risks as agreed between buyer and seller as defined by [ICC](https://iccwbo.org/business-solutions/incoterms-rules/). A list of possible values:\n- `EXW` (Ex-Works)\n- `FCA` (Free Carrier)\n- `FAS` (Free Alongside Ship)\n- `FOB` (Free On Board)\n- `CFR` (Cost and Freight)\n- `CIF` (Cost, Insurance and Freight)\n- `CPT` (Carriage Paid To)\n- `CIP` (Carriage And Insurance Paid To)\n- `DAP` (Delivered At Place)\n- `DPU` (Delivered At Place Unloaded)\n- `DDP` (Delivered Duty Paid)\n",
            "example": "FCA"
          },
          "communicationChannelCode": {
            "maxLength": 2,
            "type": "string",
            "description": "Specifying which communication channel is to be used for this booking e.g. Possible values are:\n- `EI` (EDI transmission)\n- `EM` (Email)\n- `AO` (API)\n",
            "example": "AO"
          },
          "isEquipmentSubstitutionAllowed": {
            "type": "boolean",
            "description": "Indicates if an alternate equipment type can be provided by the carrier.\n",
            "example": true
          },
          "invoicePayableAt": {
            "$ref": "#/components/schemas/Invoice Payable At"
          },
          "placeOfBLIssue": {
            "title": "Place of B/L Issue",
            "type": "object",
            "description": "An object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified either as a `UN Location Code` or as a `CountryCode`.\n",
            "oneOf": [
              {
                "title": "UN Location Code",
                "required": [
                  "UNLocationCode"
                ],
                "type": "object",
                "properties": {
                  "UNLocationCode": {
                    "maxLength": 5,
                    "minLength": 5,
                    "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
                    "type": "string",
                    "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                    "example": "NLAMS"
                  }
                }
              },
              {
                "title": "Country Code",
                "required": [
                  "countryCode"
                ],
                "type": "object",
                "properties": {
                  "countryCode": {
                    "maxLength": 2,
                    "minLength": 2,
                    "pattern": "^[A-Z]{2}$",
                    "type": "string",
                    "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                    "example": "DK"
                  }
                }
              }
            ]
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/ReferenceShipper"
            }
          },
          "documentParties": {
            "$ref": "#/components/schemas/Document Parties"
          },
          "partyContactDetails": {
            "type": "array",
            "description": "The contact details of the person(s) to contact in relation to the **Booking** (changes, notifications etc.) \n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "shipmentLocations": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Shipment Locations`\n",
            "items": {
              "$ref": "#/components/schemas/ShipmentLocation"
            }
          },
          "requestedEquipments": {
            "minItems": 1,
            "type": "array",
            "description": "List of `Requested Equipments`. Multiple containers can be requested within the same booking. For each Requested Equipment object with 2 or more units, it is a condition that the commodity (or list of commodities) defined within the same Requested Equipment object is the same for each requested unit.\n\n**Example:** 2 x 20' containing 50% shoes and 50% t-shirts can be requested within the same Requested Equipment object only if each 20' will contain 50% shoes and 50% t-shirts. If 1 x 20' will contain 100% shoes and the other 20' will be 100% t-shirts, 2 separate Requested Equipment objects must be defined.\n",
            "items": {
              "$ref": "#/components/schemas/RequestedEquipmentShipper"
            }
          }
        }
      },
      "Booking": {
        "title": "Booking",
        "required": [
          "bookingStatus",
          "cargoMovementTypeAtDestination",
          "cargoMovementTypeAtOrigin",
          "communicationChannelCode",
          "deliveryTypeAtDestination",
          "documentParties",
          "isEquipmentSubstitutionAllowed",
          "isExportDeclarationRequired",
          "isImportLicenseRequired",
          "isPartialLoadAllowed",
          "receiptTypeAtOrigin",
          "requestedEquipments",
          "shipmentLocations"
        ],
        "type": "object",
        "properties": {
          "carrierBookingRequestReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference to the booking during the booking request phase.\n\n**Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` must be provided\n",
            "example": "24595eb0-5cfc-4381-9c3a-cedc1975e9aa"
          },
          "carrierBookingReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The `carrierBookingReference` if know. Often this will not be known until the booking has been confirmed. Is available during a booking amendment.\n\n**Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` must be provided\n",
            "example": "ABC709951"
          },
          "bookingStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Booking`. Possible values are:\n- `RECEIVED` (Booking request has been received)\n- `PENDING UPDATE` (An update is required to the Booking)\n- `UPDATE RECEIVED` (An update has been received and is awaiting to be processed)\n- `CONFIRMED` (Booking has been Confirmed)\n- `PENDING AMENDMENT` (An amendment is required to the Booking)\n- `REJECTED` (Booking discontinued by carrier before it has been Confirmed)\n- `DECLINED` (Booking discontinued by carrier after it has been Confirmed)\n- `CANCELLED` (Booking discontinued by consumer)\n- `COMPLETED` (The Transport Document this Booking is connected to has been Surrendered for Delivery)\n",
            "example": "RECEIVED"
          },
          "amendedBookingStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of latest amendment added to the `Booking`. If no amendment has been requested - then this field is empty. Possible values are:\n- `AMENDMENT RECEIVED` (An amendment has been received and is awaiting to be processed)\n- `AMENDMENT CONFIRMED` (Amendment is confirmed)\n- `AMENDMENT DECLINED` (Amendment discontinued by provider)\n- `AMENDMENT CANCELLED` (Amendment discontinued by consumer)\n",
            "example": "AMENDMENT RECEIVED"
          },
          "receiptTypeAtOrigin": {
            "maxLength": 3,
            "type": "string",
            "description": "Indicates the type of service offered at `Origin`. The options are:\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
            "example": "CY",
            "enum": [
              "CY",
              "SD",
              "CFS"
            ]
          },
          "deliveryTypeAtDestination": {
            "maxLength": 3,
            "type": "string",
            "description": "Indicates the type of service offered at `Destination`. The options are:\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
            "example": "CY",
            "enum": [
              "CY",
              "SD",
              "CFS"
            ]
          },
          "cargoMovementTypeAtOrigin": {
            "maxLength": 3,
            "type": "string",
            "description": "Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
            "example": "FCL"
          },
          "cargoMovementTypeAtDestination": {
            "maxLength": 3,
            "type": "string",
            "description": "Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
            "example": "FCL"
          },
          "serviceContractReference": {
            "maxLength": 30,
            "type": "string",
            "description": "Reference number for agreement between shipper and carrier, which optionally includes a certain minimum quantity commitment (usually referred as “MQC”) of cargo that the shipper commits to over a fixed period, and the carrier commits to a certain rate or rate schedule.\n\n**Condition:** Either a valid `serviceContractReference` or `contractQuotationReference` must be provided.\n",
            "example": "HHL51800000"
          },
          "freightPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "originChargesPaymentTerm": {
            "$ref": "#/components/schemas/Origin Charges Payment Term"
          },
          "destinationChargesPaymentTerm": {
            "$ref": "#/components/schemas/Destination Charges Payment Term"
          },
          "contractQuotationReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference.\n\n**Condition:** Either a valid `contractQuotationReference` or `serviceContractReference` must be provided.\n",
            "example": "HHL1401"
          },
          "vessel": {
            "$ref": "#/components/schemas/Vessel"
          },
          "carrierServiceName": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of a service as specified by the carrier.\n\n**Condition:** Mandatory if `carrierExportVoyageNumber` is provided and Vessel details or `carrierServiceCode` are blank\n",
            "example": "Great Lion Service"
          },
          "carrierServiceCode": {
            "maxLength": 11,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The carrier specific code of the service for which the schedule details are published.\n\n**Condition:** Mandatory if `carrierExportVoyageNumber` is provided and Vessel details or `carrierServiceName` are blank\n",
            "example": "FE1"
          },
          "universalServiceReference": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "^SR\\d{5}[A-Z]$",
            "type": "string",
            "description": "A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.\n",
            "example": "SR12345A"
          },
          "carrierExportVoyageNumber": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The carrier specific identifier of the export Voyage.\n\n**Condition:** Mandatory if `expectedDepartureDate` or `expectedArrivalAtPlaceOfDeliveryStartDate` and `expectedArrivalAtPlaceOfDeliveryEndDate` is not provided.\n",
            "example": "2103S"
          },
          "universalExportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWSR]`\n- `2 digits` for the year\n- `2 alphanumeric characters` for the sequence number of the voyage\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).\n",
            "example": "2103N"
          },
          "declaredValue": {
            "minimum": 0,
            "type": "number",
            "description": "The value of the cargo that the shipper declares to avoid the carrier's limitation of liability and \"Ad Valorem\" freight, i.e. freight which is calculated based on the value of the goods declared by the shipper.\n",
            "format": "float",
            "example": 1231.1
          },
          "declaredValueCurrency": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "^[A-Z]{3}$",
            "type": "string",
            "description": "The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n",
            "example": "DKK"
          },
          "isPartialLoadAllowed": {
            "type": "boolean",
            "description": "Indication whether the shipper agrees to load part of the shipment in case where not all of the cargo is delivered within cut-off.\n",
            "example": true
          },
          "isExportDeclarationRequired": {
            "type": "boolean",
            "description": "Information provided by the shipper whether an export declaration is required for this particular shipment/commodity/destination.\n",
            "example": true
          },
          "exportDeclarationReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A government document permitting designated goods to be shipped out of the country.  Reference number assigned by an issuing authority to an Export License. The export license must be valid at time of departure. Required if Export declaration required is `True`.\n",
            "example": "ABC123123"
          },
          "isImportLicenseRequired": {
            "type": "boolean",
            "description": "Information provided by the shipper whether an import permit or license is required for this particular shipment/commodity/destination.\n",
            "example": true
          },
          "importLicenseReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A certificate, issued by countries exercising import controls, that permits importation of the articles stated in the license. Reference number assigned by an issuing authority to an Import License. The import license number must be valid at time of arrival. Required if import license required is ‘True’.\n",
            "example": "ABC123123"
          },
          "expectedDepartureDate": {
            "type": "string",
            "description": "The date when the shipment is expected to be loaded on board a vessel as provided by the shipper or its agent.\n\n**Condition:** Mandatory if vessel/voyage/service details or `expectedArrivalAtPlaceOfDeliveryDate` is not provided.\n",
            "format": "date",
            "example": "2021-05-17"
          },
          "expectedArrivalAtPlaceOfDeliveryStartDate": {
            "type": "string",
            "description": "The start date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryEndDate`) for when the shipment is expected to arrive at `Place Of Delivery`.\n\n**Condition:** Mandatory if vessel/voyage/service details or `expectedDepartureDate` is not provided.\n",
            "format": "date",
            "example": "2021-05-17"
          },
          "expectedArrivalAtPlaceOfDeliveryEndDate": {
            "type": "string",
            "description": "The end date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryStartDate`) for when the shipment is expected to arrive at `Place Of Delivery`.\n\n**Condition:** Mandatory if vessel/voyage/service details or `expectedDepartureDate` is not provided.\n",
            "format": "date",
            "example": "2021-05-19"
          },
          "transportDocumentTypeCode": {
            "type": "string",
            "description": "Specifies the type of the `Transport Document`. Possible values are:\n- `BOL` (Bill of Lading)\n- `SWB` (Sea Waybill)\n",
            "example": "SWB",
            "enum": [
              "BOL",
              "SWB"
            ]
          },
          "transportDocumentReference": {
            "maxLength": 20,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A unique reference allocated by the shipping line to the `Transport Document` that the booking concerns.\n",
            "example": "reserved-HHL123"
          },
          "bookingChannelReference": {
            "maxLength": 20,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Identification number provided by the platform/channel used for booking request/confirmation, ex: Inttra booking reference, or GTNexus, other.\n\n**Condition:** a booking channel is being used\n",
            "example": "Inttra reference"
          },
          "incoTerms": {
            "maxLength": 3,
            "type": "string",
            "description": "Transport obligations, costs and risks as agreed between buyer and seller as defined by [ICC](https://iccwbo.org/business-solutions/incoterms-rules/). A list of possible values:\n- `EXW` (Ex-Works)\n- `FCA` (Free Carrier)\n- `FAS` (Free Alongside Ship)\n- `FOB` (Free On Board)\n- `CFR` (Cost and Freight)\n- `CIF` (Cost, Insurance and Freight)\n- `CPT` (Carriage Paid To)\n- `CIP` (Carriage And Insurance Paid To)\n- `DAP` (Delivered At Place)\n- `DPU` (Delivered At Place Unloaded)\n- `DDP` (Delivered Duty Paid)\n",
            "example": "FCA"
          },
          "communicationChannelCode": {
            "maxLength": 2,
            "type": "string",
            "description": "Specifying which communication channel is to be used for this booking e.g. Possible values are:\n- `EI` (EDI transmission)\n- `EM` (Email)\n- `AO` (API)\n",
            "example": "AO"
          },
          "isEquipmentSubstitutionAllowed": {
            "type": "boolean",
            "description": "Indicates if an alternate equipment type can be provided by the carrier.\n",
            "example": true
          },
          "termsAndConditions": {
            "maxLength": 50000,
            "type": "string",
            "description": "Carrier terms and conditions of transport.\n",
            "example": "Any reference in..."
          },
          "invoicePayableAt": {
            "$ref": "#/components/schemas/Invoice Payable At"
          },
          "placeOfBLIssue": {
            "title": "Place of B/L Issue",
            "type": "object",
            "description": "An object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified either as a `UN Location Code` or as a `CountryCode`.\n",
            "oneOf": [
              {
                "title": "UN Location Code",
                "required": [
                  "UNLocationCode"
                ],
                "type": "object",
                "properties": {
                  "UNLocationCode": {
                    "maxLength": 5,
                    "minLength": 5,
                    "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
                    "type": "string",
                    "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                    "example": "NLAMS"
                  }
                }
              },
              {
                "title": "Country Code",
                "required": [
                  "countryCode"
                ],
                "type": "object",
                "properties": {
                  "countryCode": {
                    "maxLength": 2,
                    "minLength": 2,
                    "pattern": "^[A-Z]{2}$",
                    "type": "string",
                    "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                    "example": "DK"
                  }
                }
              }
            ]
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "documentParties": {
            "$ref": "#/components/schemas/Document Parties_1"
          },
          "partyContactDetails": {
            "type": "array",
            "description": "The contact details of the person(s) to contact in relation to the **Booking** (changes, notifications etc.) \n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "shipmentLocations": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Shipment Locations`\n",
            "items": {
              "$ref": "#/components/schemas/ShipmentLocation"
            }
          },
          "requestedEquipments": {
            "minItems": 1,
            "type": "array",
            "description": "List of `Requested Equipments`. Multiple containers can be requested within the same booking. For each Requested Equipment object with 2 or more units, it is a condition that the commodity (or list of commodities) defined within the same Requested Equipment object is the same for each requested unit.\n\n**Example:** 2 x 20' containing 50% shoes and 50% t-shirts can be requested within the same Requested Equipment object only if each 20' will contain 50% shoes and 50% t-shirts. If 1 x 20' will contain 100% shoes and the other 20' will be 100% t-shirts, 2 separate Requested Equipment objects must be defined.\n",
            "items": {
              "$ref": "#/components/schemas/RequestedEquipment"
            }
          },
          "confirmedEquipments": {
            "type": "array",
            "description": "A list of `Confirmed Equipments`\n\n**Condition:** Mandatory and non-empty for a `CONFIRMED` Booking\n",
            "items": {
              "$ref": "#/components/schemas/ConfirmedEquipment"
            }
          },
          "transportPlan": {
            "type": "array",
            "description": "A list of `Transport` objects (legs) describing the entire transport plan including transshipments.\n\n**Condition:** Mandatory and non-empty for a `CONFIRMED` Booking\n",
            "items": {
              "$ref": "#/components/schemas/Transport"
            }
          },
          "shipmentCutOffTimes": {
            "type": "array",
            "description": "A list of cut-off times provided by the carrier in the booking confirmation. A cut-off time indicates the latest deadline within which a task must be completed. The confirmed schedule cannot be guaranteed if a cut-off time is missed. Customs brokers may set additional cut-off times to receive the export customs documentation, which is not included in the shipment cut-off times of a carrier booking.\n\n**Condition:** Mandatory and non-empty for a `CONFIRMED` Booking\n",
            "items": {
              "$ref": "#/components/schemas/ShipmentCutOffTime"
            }
          },
          "advanceManifestFilings": {
            "type": "array",
            "description": "A list of `Advance Manifest Filings` provided by the carrier\n",
            "items": {
              "$ref": "#/components/schemas/AdvanceManifestFiling"
            }
          },
          "charges": {
            "type": "array",
            "description": "A list of `Charges`\n",
            "items": {
              "$ref": "#/components/schemas/Charge"
            }
          },
          "carrierClauses": {
            "type": "array",
            "description": "Additional clauses for a specific shipment added by the carrier to the Bill of Lading, subject to local rules / guidelines or certain mandatory information required to be shared with the customer.\n",
            "items": {
              "maxLength": 20000,
              "pattern": "^\\S(?:.*\\S)?$",
              "type": "string",
              "description": "The content of the clause.\n",
              "example": "It is not allowed to..."
            }
          },
          "requestedChanges": {
            "type": "array",
            "description": "A list of changes requirested by the carrier to the document in order for it to be accepted.\n",
            "items": {
              "$ref": "#/components/schemas/RequestedChange"
            }
          },
          "reason": {
            "maxLength": 5000,
            "type": "string",
            "description": "This field can be used to explain `bookingStatus` and/or `amendedBookingStatus`.\n",
            "example": "Rejected because of strike..."
          }
        }
      },
      "BookingRefStatus": {
        "title": "Booking Response",
        "required": [
          "bookingStatus"
        ],
        "type": "object",
        "properties": {
          "carrierBookingRequestReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference to the booking during the booking request phase.\n\n**Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` must be provided\n",
            "example": "24595eb0-5cfc-4381-9c3a-cedc1975e9aa"
          },
          "carrierBookingReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The `carrierBookingReference` if know. Often this will not be known until the booking has been confirmed. Is available during a booking amendment.\n\n**Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` must be provided\n",
            "example": "ABC709951"
          },
          "bookingStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Booking`. Possible values are:\n- `RECEIVED` (Booking request has been received)\n- `PENDING UPDATE` (An update is required to the Booking)\n- `UPDATE RECEIVED` (An update has been received and is awaiting to be processed)\n- `CONFIRMED` (Booking has been Confirmed)\n- `PENDING AMENDMENT` (An amendment is required to the Booking)\n- `REJECTED` (Booking discontinued by carrier before it has been Confirmed)\n- `DECLINED` (Booking discontinued by carrier after it has been Confirmed)\n- `CANCELLED` (Booking discontinued by consumer)\n- `COMPLETED` (The Transport Document this Booking is connected to has been Surrendered for Delivery)\n",
            "example": "RECEIVED"
          },
          "amendedBookingStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of latest amendment added to the `Booking`. If no amendment has been requested - then this field is empty. Possible values are:\n- `AMENDMENT RECEIVED` (An amendment has been received and is awaiting to be processed)\n- `AMENDMENT CONFIRMED` (Amendment is confirmed)\n- `AMENDMENT DECLINED` (Amendment discontinued by provider)\n- `AMENDMENT CANCELLED` (Amendment discontinued by consumer)\n",
            "example": "AMENDMENT RECEIVED"
          },
          "requestedChanges": {
            "type": "array",
            "description": "A list of changes requirested by the carrier to the document in order for it to be accepted.\n",
            "items": {
              "$ref": "#/components/schemas/RequestedChange"
            }
          },
          "reason": {
            "maxLength": 5000,
            "type": "string",
            "description": "This field can be used to explain `bookingStatus` and/or `amendedBookingStatus`.\n",
            "example": "Rejected because of strike..."
          }
        },
        "description": "The `carrierBookingReference` or `carrierBookingRequestReference` along with the `bookingStatus` and a possible list of **requsted changes** or a **reason** is returned.\n\n**Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` must be provided\n"
      },
      "BookingRefCancelledStatus": {
        "title": "Cancelled Booking Response",
        "required": [
          "bookingStatus"
        ],
        "type": "object",
        "properties": {
          "carrierBookingRequestReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference to the booking during the booking request phase.\n\n**Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` must be provided\n",
            "example": "24595eb0-5cfc-4381-9c3a-cedc1975e9aa"
          },
          "carrierBookingReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The `carrierBookingReference` if know. Often this will not be known until the booking has been confirmed. Is available during a booking amendment.\n\n**Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` must be provided\n",
            "example": "ABC709951"
          },
          "bookingStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Booking`. It can only be:\n- `CANCELLED` (in case the entire `Booking` has been cancelled)\n- `CONFIRMED` (in case the `Booking` is still confirmed)\n- `PENDING AMENDMENT` (in case the provider is still waithing for an amendment to a `Booking`)\n",
            "example": "CANCELLED"
          },
          "amendedBookingStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the amended `Booking`. It can only be `AMENDMENT CANCELLED`.\n",
            "example": "AMENDMENT CANCELLED"
          },
          "reason": {
            "maxLength": 5000,
            "type": "string",
            "description": "This field can be used to explain `bookingStatus` and/or `amendedBookingStatus`.\n",
            "example": "Rejected because of strike..."
          }
        },
        "description": "The `carrierBookingReference` and/or `carrierBookingRequestReference` along with the `bookingStatus`, `amendedBookingStatus` and a possible `reason` is returned.\n\n**Condition:** `carrierBookingReference` and/or `carrierBookingRequestReference` must be provided\n"
      },
      "ActiveReeferSettings": {
        "title": "Active Reefer Settings",
        "required": [
          "temperatureSetpoint",
          "temperatureUnit"
        ],
        "type": "object",
        "properties": {
          "temperatureSetpoint": {
            "type": "number",
            "description": "Target value of the temperature for the Reefer based on the cargo requirement.\n",
            "format": "float",
            "example": -15
          },
          "temperatureUnit": {
            "type": "string",
            "description": "The unit for temperature in Celsius or Fahrenheit\n- `CEL` (Celsius)\n- `FAH` (Fahrenheit)\n\n**Condition:** Mandatory to provide if `temperatureSetpoint` is provided\n",
            "example": "CEL",
            "enum": [
              "CEL",
              "FAH"
            ]
          },
          "o2Setpoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "The percentage of the controlled atmosphere CO<sub>2</sub> target value\n",
            "format": "float",
            "example": 25
          },
          "co2Setpoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "The percentage of the controlled atmosphere CO<sub>2</sub> target value\n",
            "format": "float",
            "example": 25
          },
          "humiditySetpoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "The percentage of the controlled atmosphere humidity target value\n",
            "format": "float",
            "example": 95.6
          },
          "airExchangeSetpoint": {
            "minimum": 0,
            "type": "number",
            "description": "Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container\n",
            "format": "float",
            "example": 15.4
          },
          "airExchangeUnit": {
            "type": "string",
            "description": "The unit for `airExchange` in metrics- or imperial- units per hour\n- `MQH` (Cubic metre per hour)\n- `FQH` (Cubic foot per hour)\n\n**Condition:** Mandatory to provide if `airExchange` is provided\n",
            "example": "MQH",
            "enum": [
              "MQH",
              "FQH"
            ]
          },
          "isVentilationOpen": {
            "type": "boolean",
            "description": "If `true` the ventilation orifice is `Open` - if `false` the ventilation orifice is `closed`\n",
            "example": true
          },
          "isDrainholesOpen": {
            "type": "boolean",
            "description": "Is drainholes open on the container\n",
            "example": true
          },
          "isBulbMode": {
            "type": "boolean",
            "description": "Is special container setting for handling flower bulbs active\n",
            "example": true
          },
          "isColdTreatmentRequired": {
            "type": "boolean",
            "description": "Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD\n",
            "example": true
          },
          "isControlledAtmosphereRequired": {
            "type": "boolean",
            "description": "Indicator of whether cargo requires Controlled Atmosphere.\n",
            "example": true
          },
          "isPreCoolingRequired": {
            "type": "boolean",
            "description": "Indicator whether reefer container should be pre-cooled to the temperature setting required at time of release from depot\n",
            "example": true
          },
          "isGeneratorSetRequired": {
            "type": "boolean",
            "description": "Indicator whether reefer container should have a generator set attached at time of release from depot\n",
            "example": true
          }
        },
        "description": "The specifications for a Reefer equipment.\n\n**Condition:** Only applicable when `isNonOperatingReefer` is set to `false`\n"
      },
      "PartyAddress": {
        "title": "Party Address",
        "required": [
          "city",
          "countryCode",
          "street"
        ],
        "type": "object",
        "properties": {
          "street": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the street of the party's address.",
            "example": "Ruijggoordweg"
          },
          "streetNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The number of the street of the party's address.",
            "example": "100"
          },
          "floor": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The floor of the party's street number.\n",
            "example": "2nd"
          },
          "postCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The post code of the party's address.",
            "example": "1047 HM"
          },
          "city": {
            "maxLength": 65,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The city name of the party's address.\n",
            "example": "Amsterdam"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the carrier booking office is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
            "example": "NLAMS"
          },
          "stateRegion": {
            "maxLength": 65,
            "type": "string",
            "description": "The state/region of the party's address.",
            "example": "North Holland"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "NL"
          }
        },
        "description": "An object for storing address related information\n"
      },
      "OtherDocumentParty": {
        "title": "Other Document Party",
        "required": [
          "party",
          "partyFunction"
        ],
        "type": "object",
        "properties": {
          "party": {
            "$ref": "#/components/schemas/Party"
          },
          "partyFunction": {
            "maxLength": 3,
            "type": "string",
            "description": "Specifies the role of the party in a given context. Possible values are:\n\n- `DDR` (Consignor's freight forwarder)\n- `DDS` (Consignee's freight forwarder)\n- `COW` (Invoice payer on behalf of the consignor (shipper))\n- `COX` (Invoice payer on behalf of the consignee)\n- `N1` (First Notify Party)\n- `N2` (Second Notify Party)\n- `NI` (Other Notify Party)\n",
            "example": "DDS"
          }
        },
        "description": "A list of document parties that can be optionally provided at booking stage\n"
      },
      "BookingAgent": {
        "title": "Booking Agent",
        "required": [
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "IKEA Denmark"
          },
          "address": {
            "$ref": "#/components/schemas/PartyAddress"
          },
          "partyContactDetails": {
            "minItems": 1,
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          },
          "bookingAgentsReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference linked to the `Booking Agent`.\n",
            "example": "HHL007"
          }
        },
        "description": "The party placing the booking request on behalf of the customer.\n"
      },
      "Shipper": {
        "title": "Shipper",
        "required": [
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "IKEA Denmark"
          },
          "address": {
            "$ref": "#/components/schemas/PartyAddress"
          },
          "partyContactDetails": {
            "minItems": 1,
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          },
          "shippersReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference linked to the `Shipper`.\n",
            "example": "HHL007"
          },
          "shippersPurchaseOrderReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference linked to the `Shipper Purchase Order`.\n",
            "example": "HHL007"
          }
        },
        "description": "The party by whom or in whose name or on whose behalf a contract of carriage of goods by sea has been concluded with a carrier, or the party by whom or in whose name, or on whose behalf, the goods are actually delivered to the carrier in relation to the contract of carriage by sea.\n"
      },
      "Consignee": {
        "title": "Consignee",
        "required": [
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "IKEA Denmark"
          },
          "address": {
            "$ref": "#/components/schemas/PartyAddress"
          },
          "partyContactDetails": {
            "minItems": 1,
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          },
          "consigneesReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference linked to the `Consignee`.\n",
            "example": "HHL007"
          },
          "consigneesPurchaseOrderReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference linked to the `Consignee Purchase Order`.\n",
            "example": "HHL007"
          }
        },
        "description": "The party to which goods are consigned in the Master Bill of Lading.\n"
      },
      "ServiceContractOwner": {
        "title": "Service Contract Owner",
        "required": [
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "IKEA Denmark"
          },
          "address": {
            "$ref": "#/components/schemas/PartyAddress"
          },
          "partyContactDetails": {
            "minItems": 1,
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          },
          "serviceContractOwnersReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference linked to the `Service Contract Owner`.\n",
            "example": "HHL007"
          }
        },
        "description": "The party signing the service contract with the carrier.\n"
      },
      "CarrierBookingOffice": {
        "title": "Carrier Booking Office",
        "required": [
          "UNLocationCode",
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "IKEA Denmark"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the carrier booking office is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
            "example": "NLAMS"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "partyContactDetails": {
            "minItems": 1,
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          }
        },
        "description": "The carrier office responsible for processing the booking.\n"
      },
      "Party": {
        "title": "Party",
        "required": [
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "IKEA Denmark"
          },
          "address": {
            "$ref": "#/components/schemas/PartyAddress"
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          },
          "partyContactDetails": {
            "minItems": 1,
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "reference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference linked to the `Party`.\n",
            "example": "HHL007"
          }
        },
        "description": "Refers to a company or a legal entity.\n"
      },
      "PartyContactDetail": {
        "title": "Party Contact Detail",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the contact\n",
            "example": "Henrik"
          }
        },
        "description": "The contact details of the person to contact. It is mandatory to provide either `phone` and/or `email` along with the `name`.\n",
        "example": {
          "name": "Henrik",
          "phone": "+45 51801234"
        },
        "anyOf": [
          {
            "title": "Phone required",
            "required": [
              "phone"
            ],
            "type": "object",
            "properties": {
              "phone": {
                "maxLength": 30,
                "pattern": "^\\S(?:.*\\S)?$",
                "type": "string",
                "description": "Phone number for the contact\n",
                "example": "+45 70262970"
              }
            },
            "description": "`Phone` is mandatory to provide\n"
          },
          {
            "title": "Email required",
            "required": [
              "email"
            ],
            "type": "object",
            "properties": {
              "email": {
                "maxLength": 100,
                "pattern": "^.+@\\S+$",
                "type": "string",
                "description": "`E-mail` address to be used\n",
                "example": "info@dcsa.org"
              }
            },
            "description": "`Email` is mandatory to provide\n"
          }
        ]
      },
      "IdentifyingCode": {
        "title": "Identifying Code",
        "required": [
          "codeListProvider",
          "partyCode"
        ],
        "type": "object",
        "properties": {
          "codeListProvider": {
            "maxLength": 100,
            "type": "string",
            "description": "A list of codes identifying a party. Possible values are:\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ESSD` (EssDOCS)\n- `IDT` (ICE Digital Trade)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGO)\n- `ETEU` (eTEU)\n- `TRAC` (TRACE Original)\n- `BRIT` (BRITC eBL)\n- `GSBN` (Global Shipping Business Network)\n- `WISE` (WiseTech)\n- `GLEIF` (Global Legal Entity Identifier Foundation)\n- `W3C` (World Wide Web Consortium)\n- `DNB` (Dun and Bradstreet)\n- `FMC` (Federal Maritime Commission)\n- `DCSA` (Digital Container Shipping Association)\n- `ZZZ` (Mutually defined)\n",
            "example": "W3C"
          },
          "partyCode": {
            "maxLength": 100,
            "type": "string",
            "description": "Code to identify the party as provided by the code list provider\n",
            "example": "MSK"
          },
          "codeListName": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the code list, code generation mechanism or code authority for the `partyCode`. Example values could be:\n- `DID` (Decentralized Identifier) for `codeListProvider` `W3C`\n- `LEI` (Legal Entity Identifier) for `codeListProvider` `GLEIF`\n- `DUNS` (Data Universal Numbering System) for `codeListProvider` `DNB`\n",
            "example": "DID"
          }
        }
      },
      "TaxLegalReference": {
        "title": "Tax & Legal Reference",
        "required": [
          "countryCode",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The reference type code as defined by the relevant tax and/or legal authority.\n",
            "example": "PAN"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "DK"
          },
          "value": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The value of the `taxLegalReference`\n",
            "example": "AAAAA0000A"
          }
        },
        "description": "Reference that uniquely identifies a party for tax and/or legal purposes in accordance with the relevant jurisdiction.\n\nA list of examples:\n\n| Type  | Country | Description |\n|-------|:-------:|-------------|\n|PAN|IN|Goods and Services Tax Identification Number in India|\n|GSTIN|IN|Goods and Services Tax Identification Number in India|\n|IEC|IN|Importer-Exported Code in India|\n|RUC|EC|Registro Único del Contribuyente in Ecuador|\n|RUC|PE|Registro Único del Contribuyente in Peru|\n|NIF|MG|Numéro d'Identification Fiscal in Madagascar|\n|NIF|DZ|Numéro d'Identification Fiscal in Algeria|\n\nAllowed combinations of `type` and `country` are maintained in [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/documentation/reference-data/taxandlegalreferences-v300.csv).\n"
      },
      "ReferenceShipper": {
        "title": "Reference (Shipper)",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 3,
            "type": "string",
            "description": "The reference type codes defined by DCSA. Possible values are:\n- `CR` (Customer's Reference)\n- `AKG` (Vehicle Identification Number)\n- `AEF` (Customer Load Reference)\n",
            "example": "CR"
          },
          "value": {
            "maxLength": 100,
            "type": "string",
            "description": "The value of the reference. \n",
            "example": "HHL00103004"
          }
        },
        "description": "References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\n"
      },
      "Reference": {
        "title": "Reference",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 3,
            "type": "string",
            "description": "The reference type codes defined by DCSA. Possible values are:\n- `CR` (Customer's Reference)\n- `ECR` (Empty container release reference)\n- `AKG` (Vehicle Identification Number)\n- `AEF` (Customer Load Reference)\n",
            "example": "CR"
          },
          "value": {
            "maxLength": 100,
            "type": "string",
            "description": "The value of the reference. \n",
            "example": "HHL00103004"
          }
        },
        "description": "References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\n"
      },
      "ShipmentLocation": {
        "title": "Shipment Location",
        "required": [
          "location",
          "locationTypeCode"
        ],
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "locationTypeCode": {
            "maxLength": 3,
            "type": "string",
            "description": "Links to the Location Type Code defined by DCSA. Possible values are:\n- `PRE` (Place of Receipt)\n- `POL` (Port of Loading)\n- `POD` (Port of Discharge)\n- `PDE` (Place of Delivery)\n- `PCF` (Pre-carriage From)\n- `OIR` (Onward In-land Routing)\n- `DRL` (Depot release location)\n- `ORI` (Origin of goods)\n- `IEL` (Container intermediate export stop off location)\n- `PTP` (Prohibited transshipment port)\n- `RTP` (Requested transshipment port)\n- `FCD` (Full container drop-off location)\n",
            "example": "PRE"
          }
        },
        "description": "Maps the relationship between `Shipment` and `Location`, e.g., the `Place of Receipt` and the `Place of Delivery` for a specific shipment. This is a reusable object between `Booking` and `Transport Document`\n"
      },
      "Location": {
        "title": "Location",
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "facility": {
            "$ref": "#/components/schemas/Facility"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
            "example": "NLAMS"
          },
          "geoCoordinate": {
            "$ref": "#/components/schemas/GeoCoordinate"
          }
        },
        "description": "The location can be specified using **any** of the nested structures:\n- `address` (used to specify the location via an Address)\n- `UNLocationCode`\n- `facility` (used to specify a location using a `facilityCode` and a `facilityCodeListProvider`)\n- `geoCoordinate` (used to specify a location using `latitude` and `longitude`)\n\nIt is expected that if a location is specified in multiple ways (both as an `Address` and as a `Facility`) that both ways point to the same location.\n",
        "example": {
          "locationName": "CMP Container Terminal Copenhagen",
          "UNLocationCode": "DKCPH",
          "facility": {
            "facilityCode": "CMPDK",
            "facilityCodeListProvider": "SMDG"
          }
        }
      },
      "RequestedEquipment": {
        "title": "Requested Equipment",
        "required": [
          "ISOEquipmentCode",
          "units"
        ],
        "type": "object",
        "properties": {
          "ISOEquipmentCode": {
            "maxLength": 4,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Unique code for the different equipment size and type used to transport commodities. The code can refer to either the ISO size type (e.g. 22G1) or the ISO type group (e.g. 22GP) following the [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346) standard.\n",
            "example": "22RT"
          },
          "units": {
            "minimum": 1,
            "type": "integer",
            "description": "Number of requested equipment units.\n",
            "format": "int32",
            "example": 3
          },
          "emptyContainerPositioningDateTime": {
            "type": "string",
            "description": "The date and time requested by the shipper for the positioning of the empty container(s) at the `Empty Container Positioning Location` (ECP), if provided, or the `Place of Receipt` (PRE) if ECP location is not provided.\n\n**Conditional:** Only applicable to carrier haulage service at origin (`Receipt type at origin = SD`).\n",
            "format": "date-time",
            "example": "2024-07-05T09:03:00-02:00"
          },
          "emptyContainerPositioningLocation": {
            "$ref": "#/components/schemas/EmptyContainerPositioningLocation"
          },
          "equipmentReferences": {
            "type": "array",
            "description": "A list of equipments to be used by the shipper if known at the time of booking\n",
            "items": {
              "maxLength": 11,
              "pattern": "^\\S(?:.*\\S)?$",
              "type": "string",
              "description": "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\n\nAccording to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
              "example": "APZU4812090"
            }
          },
          "isNonOperatingReefer": {
            "type": "boolean",
            "description": "If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.\n\n**Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.\n",
            "example": false
          },
          "activeReeferSettings": {
            "$ref": "#/components/schemas/ActiveReeferSettings"
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "commodities": {
            "type": "array",
            "description": "A list of `Commodities`\n",
            "items": {
              "$ref": "#/components/schemas/Commodity"
            }
          }
        },
        "description": "If needed - it is **only** possible to specify a single Reefer setting. If multiple settings are required for the same `equipmentSizeType` then multiple `requestedEquipment` should be specified (one for each Reefer setting).\n",
        "discriminator": {
          "propertyName": "isShipperOwned",
          "mapping": {
            "true": "#/components/schemas/SocEquipment",
            "false": "#/components/schemas/CocEquipment"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/SocEquipment"
          },
          {
            "$ref": "#/components/schemas/CocEquipment"
          }
        ]
      },
      "RequestedEquipmentShipper": {
        "title": "Requested Equipment (Shipper)",
        "required": [
          "ISOEquipmentCode",
          "units"
        ],
        "type": "object",
        "properties": {
          "ISOEquipmentCode": {
            "maxLength": 4,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Unique code for the different equipment size and type used to transport commodities. The code can refer to either the ISO size type (e.g. 22G1) or the ISO type group (e.g. 22GP) following the [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346) standard.\n",
            "example": "22RT"
          },
          "units": {
            "minimum": 1,
            "type": "integer",
            "description": "Number of requested equipment units.\n",
            "format": "int32",
            "example": 3
          },
          "emptyContainerPositioningDateTime": {
            "type": "string",
            "description": "The date and time requested by the shipper for the positioning of the empty container(s) at the `Empty Container Positioning Location` (ECP), if provided, or the `Place of Receipt` (PRE) if ECP location is not provided.\n\n**Conditional:** Only applicable to carrier haulage service at origin (`Receipt type at origin = SD`).\n",
            "format": "date-time",
            "example": "2024-07-05T09:03:00-02:00"
          },
          "emptyContainerPositioningLocation": {
            "$ref": "#/components/schemas/EmptyContainerPositioningLocation"
          },
          "equipmentReferences": {
            "type": "array",
            "description": "A list of equipments to be used by the shipper if known at the time of booking\n",
            "items": {
              "maxLength": 11,
              "pattern": "^\\S(?:.*\\S)?$",
              "type": "string",
              "description": "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\n\nAccording to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
              "example": "APZU4812090"
            }
          },
          "isNonOperatingReefer": {
            "type": "boolean",
            "description": "If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.\n\n**Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.\n",
            "example": false
          },
          "activeReeferSettings": {
            "$ref": "#/components/schemas/ActiveReeferSettings"
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/ReferenceShipper"
            }
          },
          "commodities": {
            "type": "array",
            "description": "A list of `Commodities`\n",
            "items": {
              "$ref": "#/components/schemas/CommodityShipper"
            }
          }
        },
        "description": "If needed - it is **only** possible to specify a single Reefer setting. If multiple settings are required for the same `equipmentSizeType` then multiple `requestedEquipment` should be specified (one for each Reefer setting).\n",
        "discriminator": {
          "propertyName": "isShipperOwned",
          "mapping": {
            "true": "#/components/schemas/SocEquipment",
            "false": "#/components/schemas/CocEquipment"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/SocEquipment"
          },
          {
            "$ref": "#/components/schemas/CocEquipment"
          }
        ]
      },
      "SocEquipment": {
        "title": "Shipper owned Equipment",
        "required": [
          "isShipperOwned",
          "tareWeight",
          "tareWeightUnit"
        ],
        "type": "object",
        "properties": {
          "tareWeight": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The weight of an empty container (gross container weight).\n",
            "format": "float",
            "example": 4800
          },
          "tareWeightUnit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          },
          "isShipperOwned": {
            "type": "boolean",
            "description": "Indicates whether the container is shipper owned (`SOC`).\n",
            "example": true
          }
        }
      },
      "CocEquipment": {
        "title": "Carrier owned Equipment",
        "required": [
          "isShipperOwned"
        ],
        "type": "object",
        "properties": {
          "isShipperOwned": {
            "type": "boolean",
            "description": "Indicates whether the container is shipper owned (`SOC`).\n",
            "example": false
          }
        }
      },
      "EmptyContainerPositioningLocation": {
        "title": "Empty Container Positioning Location",
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Shanghai Shengdong International Container Terminal"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "facility": {
            "$ref": "#/components/schemas/Facility"
          },
          "geoCoordinate": {
            "$ref": "#/components/schemas/GeoCoordinate"
          }
        },
        "description": "An object to capture the `Empty Container Positioning Location`.\n\nThe location of the customer facility where the empty container(s) will be loaded. If multiple `ECP` locations are provided, all locations must be within the same city.\n\n**Conditional:** Only applicable to carrier haulage service at origin (`Receipt type at origin = SD`).\n\nThe location can be specified in **any** of the following ways: `Address`, `Facility` or a `GeoCoordinate`.\n",
        "example": {
          "locationName": "Shanghai Shengdong International Container Terminal",
          "UNLocationCode": "CNSGH",
          "facility": {
            "facilityCode": "SHENG",
            "facilityCodeListProvider": "SMDG"
          }
        }
      },
      "CommodityShipper": {
        "title": "Commodity (Shipper)",
        "required": [
          "cargoGrossWeight",
          "cargoGrossWeightUnit",
          "commodityType"
        ],
        "type": "object",
        "properties": {
          "commodityType": {
            "maxLength": 550,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "High-level description of goods to be shipped which allow the carrier to confirm acceptance and commercial terms. To be replaced by \"description of goods\" upon submission of `Shipping Instructions`\n",
            "example": "Mobile phones"
          },
          "HSCodes": {
            "type": "array",
            "description": "A list of `HS Codes` that apply to this `commodity`\n",
            "items": {
              "maxLength": 10,
              "minLength": 6,
              "pattern": "^\\d{6,10}$",
              "type": "string",
              "description": "Used by customs to classify the product being shipped. The type of HS code depends on country and customs requirements. The code must be at least 6 and at most 10 digits.\n\nMore information can be found here: [HS Nomenclature 2022 edition](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools/hs-nomenclature-2022-edition/hs-nomenclature-2022-edition.aspx).\n\nThis standard is based on the 2022 revision.\n",
              "example": "851713"
            }
          },
          "cargoGrossWeight": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The estimated grand total gross weight of the cargo, including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.\n",
            "format": "float",
            "example": 36000
          },
          "cargoGrossWeightUnit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          },
          "cargoGrossVolume": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The grand total volume of the commodity\n",
            "format": "float",
            "example": 360
          },
          "cargoGrossVolumeUnit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in either imperial or metric terms\n\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n\n**Condition:** If the `cargoGrossVolume` is populated then the `cargoGrossVolumeUnit` is required\n",
            "example": "MTQ",
            "enum": [
              "MTQ",
              "FTQ"
            ]
          },
          "exportLicenseIssueDate": {
            "type": "string",
            "description": "Issue date of the export license applicable to the booking. Mandatory to provide in booking request for specific commodities\n",
            "format": "date",
            "example": "2021-05-14"
          },
          "exportLicenseExpiryDate": {
            "type": "string",
            "description": "Expiry date of the export license applicable to the booking.\n\nMandatory to provide in booking request for specific commodities.\n",
            "format": "date",
            "example": "2021-05-21"
          },
          "outerPackaging": {
            "$ref": "#/components/schemas/OuterPackaging"
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/ReferenceShipper"
            }
          }
        },
        "description": "Type of goods, defined by its commodity type\n"
      },
      "Commodity": {
        "title": "Commodity",
        "required": [
          "cargoGrossWeight",
          "cargoGrossWeightUnit",
          "commodityType"
        ],
        "type": "object",
        "properties": {
          "commoditySubreference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A unique reference for this commodity object assigned by the carrier in the booking confirmation. The reference must be provided by the shipper as part of the `Shipping Instructions` for the carrier to link the consignment item to this commodity. A commodity reference is only unique in the context of a booking.\n\n**Conditional:** Mandatory to provide for `CONFIRMED` bookings\n",
            "example": "COM-001"
          },
          "commodityType": {
            "maxLength": 550,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "High-level description of goods to be shipped which allow the carrier to confirm acceptance and commercial terms. To be replaced by \"description of goods\" upon submission of `Shipping Instructions`\n",
            "example": "Mobile phones"
          },
          "HSCodes": {
            "type": "array",
            "description": "A list of `HS Codes` that apply to this `commodity`\n",
            "items": {
              "maxLength": 10,
              "minLength": 6,
              "pattern": "^\\d{6,10}$",
              "type": "string",
              "description": "Used by customs to classify the product being shipped. The type of HS code depends on country and customs requirements. The code must be at least 6 and at most 10 digits.\n\nMore information can be found here: [HS Nomenclature 2022 edition](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools/hs-nomenclature-2022-edition/hs-nomenclature-2022-edition.aspx).\n\nThis standard is based on the 2022 revision.\n",
              "example": "851713"
            }
          },
          "cargoGrossWeight": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The estimated grand total gross weight of the cargo, including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.\n",
            "format": "float",
            "example": 36000
          },
          "cargoGrossWeightUnit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          },
          "cargoGrossVolume": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The grand total volume of the commodity\n",
            "format": "float",
            "example": 360
          },
          "cargoGrossVolumeUnit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in either imperial or metric terms\n\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n\n**Condition:** If the `cargoGrossVolume` is populated then the `cargoGrossVolumeUnit` is required\n",
            "example": "MTQ",
            "enum": [
              "MTQ",
              "FTQ"
            ]
          },
          "exportLicenseIssueDate": {
            "type": "string",
            "description": "Issue date of the export license applicable to the booking. Mandatory to provide in booking request for specific commodities\n",
            "format": "date",
            "example": "2021-05-14"
          },
          "exportLicenseExpiryDate": {
            "type": "string",
            "description": "Expiry date of the export license applicable to the booking.\n\nMandatory to provide in booking request for specific commodities.\n",
            "format": "date",
            "example": "2021-05-21"
          },
          "outerPackaging": {
            "$ref": "#/components/schemas/OuterPackaging"
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          }
        },
        "description": "Type of goods, defined by its commodity type\n"
      },
      "OuterPackaging": {
        "title": "Outer Packaging",
        "type": "object",
        "properties": {
          "packageCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z0-9]{2}$",
            "type": "string",
            "description": "A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation N°21 - Revision 12 Annexes V and VI](https://unece.org/sites/default/files/2021-06/rec21_Rev12e_Annex-V-VI_2021.xls)\n\n**Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.\n",
            "example": "5H"
          },
          "imoPackagingCode": {
            "maxLength": 5,
            "minLength": 1,
            "pattern": "^[A-Z0-9]{1,5}$",
            "type": "string",
            "description": "The code of the packaging as per IMO.\n\n**Condition:** only applicable to dangerous goods if specified in the IMO IMDG code amendment version 41-22. If not available, the `packageCode` as per UN recommendation 21 should be used.\n",
            "example": "1A2"
          },
          "numberOfPackages": {
            "minimum": 1,
            "type": "integer",
            "description": "Specifies the number of outer packagings/overpacks associated with this `Commodity`.\n\n**Condition:** In case this `OuterPackaging` includes `Dangerous Goods` the `numberOfPackages` is mandatory to provide\n",
            "format": "int32",
            "example": 18
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "description": "Description of the outer packaging/overpack.\n",
            "example": "Drum, steel"
          },
          "dangerousGoods": {
            "type": "array",
            "description": "A list of `Dangerous Goods` related to the `Commodity`\n",
            "items": {
              "$ref": "#/components/schemas/DangerousGoods"
            }
          }
        },
        "description": "Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.\n\n**Condition:** Mandatory for DG (Dangerous Goods) cargo.\n"
      },
      "DangerousGoods": {
        "title": "Dangerous Goods",
        "required": [
          "emergencyContactDetails",
          "grossWeight",
          "imoClass",
          "isCompetentAuthorityApprovalProvided",
          "isEmptyUncleanedResidue",
          "isExceptedQuantity",
          "isHot",
          "isLimitedQuantity",
          "isMarinePollutant",
          "isReportableQuantity",
          "isSalvagePackings",
          "isWaste",
          "properShippingName"
        ],
        "type": "object",
        "properties": {
          "codedVariantList": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "^[0-3][0-9A-Z]{3}$",
            "type": "string",
            "description": "Four-character code supplied by Exis Technologies that assists to remove ambiguities when identifying a variant within a single `UN number` or `NA number` that may occur when two companies exchange DG information.\n\nCharacter | Valid Characters | Description\n:--------:|------------------|------------\n1| 0, 1, 2, 3|The packing group. Code 0 indicates there is no packing group\n2|0 to 9 and A to Z|A sequence letter for the PSN, or 0 if there were no alternative PSNs\n3 and 4|0 to 9 and A to Z|Two sequence letters for other information, for the cases where the variant is required because of different in subrisks, packing instruction etc.\n",
            "example": "2200"
          },
          "properShippingName": {
            "maxLength": 250,
            "type": "string",
            "description": "The proper shipping name for goods under IMDG Code, or the product name for goods under IBC Code and IGC Code, or the bulk cargo shipping name for goods under IMSBC Code, or the name of oil for goods under Annex I to the MARPOL Convention.\n",
            "example": "Chromium Trioxide, anhydrous"
          },
          "technicalName": {
            "maxLength": 250,
            "type": "string",
            "description": "The recognized chemical or biological name or other name currently used for the referenced dangerous goods as described in chapter 3.1.2.8 of the IMDG Code.\n",
            "example": "xylene and benzene"
          },
          "imoClass": {
            "maxLength": 4,
            "type": "string",
            "description": "The hazard class code of the referenced dangerous goods according to the specified regulation. Examples of possible values are:\n- `1.1A` (Substances and articles which have a mass explosion hazard)\n- `1.6N` (Extremely insensitive articles which do not have a mass explosion hazard)\n- `2.1` (Flammable gases)\n- `8` (Corrosive substances)\n\nThe value must comply with one of the values in the [DG IMO Class value table](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/dcsa/reference-data/imoclasses-v3.1.0.csv)\n",
            "example": "1.4S"
          },
          "subsidiaryRisk1": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "^[0-9](\\.[0-9])?$",
            "type": "string",
            "description": "Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.\n",
            "example": "1.2"
          },
          "subsidiaryRisk2": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "^[0-9](\\.[0-9])?$",
            "type": "string",
            "description": "Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.\n",
            "example": "1.2"
          },
          "isMarinePollutant": {
            "type": "boolean",
            "description": "Indicates if the goods belong to the classification of Marine Pollutant.\n",
            "example": false
          },
          "packingGroup": {
            "maximum": 3,
            "minimum": 1,
            "type": "integer",
            "description": "The packing group according to the UN Recommendations on the Transport of Dangerous Goods and IMO IMDG Code.\n",
            "format": "int32",
            "example": 3
          },
          "isLimitedQuantity": {
            "type": "boolean",
            "description": "Indicates if the dangerous goods can be transported as limited quantity in accordance with Chapter 3.4 of the IMO IMDG Code.\n",
            "example": false
          },
          "isExceptedQuantity": {
            "type": "boolean",
            "description": "Indicates if the dangerous goods can be transported as excepted quantity in accordance with Chapter 3.5 of the IMO IMDG Code.\n",
            "example": false
          },
          "isSalvagePackings": {
            "type": "boolean",
            "description": "Indicates if the cargo has special packaging for the transport, recovery or disposal of damaged, defective, leaking or nonconforming hazardous materials packages, or hazardous materials that have spilled or leaked.\n",
            "example": false
          },
          "isEmptyUncleanedResidue": {
            "type": "boolean",
            "description": "Indicates if the cargo is residue.\n",
            "example": false
          },
          "isWaste": {
            "type": "boolean",
            "description": "Indicates if waste is being shipped\n",
            "example": false
          },
          "isHot": {
            "type": "boolean",
            "description": "Indicates if high temperature cargo is shipped.\n",
            "example": false
          },
          "isCompetentAuthorityApprovalProvided": {
            "type": "boolean",
            "description": "Indicates if the cargo require approval from authorities\n",
            "example": false
          },
          "competentAuthorityApproval": {
            "maxLength": 70,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name and reference number of the competent authority providing the approval.\n",
            "example": "{Name and reference...}"
          },
          "segregationGroups": {
            "type": "array",
            "description": "List of the segregation groups applicable to specific hazardous goods according to the IMO IMDG Code.\n\n**Condition:** only applicable to specific hazardous goods.\n",
            "items": {
              "maxLength": 2,
              "type": "string",
              "description": "Grouping of Dangerous Goods having certain similar chemical properties. Possible values are:\n- `1` (Acids)\n- `2` (Ammonium Compounds)\n- `3` (Bromates)\n- `4` (Chlorates)\n- `5` (Chlorites)\n- `6` (Cyanides)\n- `7` (Heavy metals and their salts)\n- `8` (Hypochlorites)\n- `9` (Lead and its compounds)\n- `10` (Liquid halogenated hydrocarbons)\n- `11` (Mercury and mercury compounds)\n- `12` (Nitrites and their mixtures)\n- `13` (Perchlorates)\n- `14` (Permanganates)\n- `15` (Powdered metals)\n- `16` (Peroxides),\n- `17` (Azides)\n- `18` (Alkalis)\n",
              "example": "12"
            }
          },
          "innerPackagings": {
            "type": "array",
            "description": "A list of `Inner Packings` contained inside this `outer packaging/overpack`.\n",
            "items": {
              "$ref": "#/components/schemas/InnerPackaging"
            }
          },
          "emergencyContactDetails": {
            "$ref": "#/components/schemas/EmergencyContactDetails"
          },
          "EMSNumber": {
            "maxLength": 7,
            "type": "string",
            "description": "The emergency schedule identified in the IMO EmS Guide - Emergency Response Procedures for Ships Carrying Dangerous Goods. Comprises 2 values; 1 for spillage and 1 for fire. Possible values spillage: S-A to S-Z. Possible values fire: F-A to F-Z.\n",
            "example": "F-A S-Q"
          },
          "endOfHoldingTime": {
            "type": "string",
            "description": "Date by when the refrigerated liquid needs to be delivered.\n",
            "format": "date",
            "example": "2021-09-03"
          },
          "fumigationDateTime": {
            "type": "string",
            "description": "Date & time when the container was fumigated\n",
            "format": "date-time",
            "example": "2021-09-03T09:03:00-02:00"
          },
          "isReportableQuantity": {
            "type": "boolean",
            "description": "Indicates if a container of hazardous material is at the reportable quantity level. If `TRUE`, a report to the relevant authority must be made in case of spill.\n",
            "example": false
          },
          "inhalationZone": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "The zone classification of the toxicity of the inhalant. Possible values are:\n- `A` (Hazard Zone A) can be asigned to specific gases and liquids\n- `B` (Hazard Zone B) can be asigned to specific gases and liquids\n- `C` (Hazard Zone C) can **only** be asigned to specific gases\n- `D` (Hazard Zone D) can **only** be asigned to specific gases\n",
            "example": "A"
          },
          "grossWeight": {
            "$ref": "#/components/schemas/Gross Weight"
          },
          "netWeight": {
            "$ref": "#/components/schemas/Net Weight"
          },
          "netExplosiveContent": {
            "$ref": "#/components/schemas/Net Explosive Content"
          },
          "volume": {
            "$ref": "#/components/schemas/Volume"
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          },
          "specialCertificateNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "Text field to indicate certificate number & segment for specific stowage requirements overulling IMDG code\n",
            "example": "22663:3"
          },
          "additionalContainerCargoHandling": {
            "maxLength": 255,
            "type": "string",
            "description": "Text field to provide cargo handling information already known at the booking stage.\n",
            "example": "To be handled with extreme care"
          }
        },
        "description": "Specification for `Dangerous Goods`. It is mandatory to either provide the `unNumber` or the `naNumber`. Dangerous Goods is based on **IMDG Amendment Version 41-22**.\n",
        "oneOf": [
          {
            "title": "UN Number",
            "required": [
              "unNumber"
            ],
            "type": "object",
            "properties": {
              "unNumber": {
                "maxLength": 4,
                "minLength": 4,
                "pattern": "^\\d{4}$",
                "type": "string",
                "description": "United Nations Dangerous Goods Identifier (UNDG) assigned by the UN Sub-Committee of Experts on the Transport of Dangerous Goods and shown in the IMO IMDG.\n",
                "example": "1463"
              }
            }
          },
          {
            "title": "NA Number",
            "required": [
              "naNumber"
            ],
            "type": "object",
            "properties": {
              "naNumber": {
                "maxLength": 4,
                "minLength": 4,
                "pattern": "^\\d{4}$",
                "type": "string",
                "description": "Four-digit number that is assigned to dangerous, hazardous, and harmful substances by the United States Department of Transportation.\n",
                "example": "9037"
              }
            }
          }
        ]
      },
      "InnerPackaging": {
        "title": "Inner Packaging",
        "required": [
          "description",
          "material",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Count of `Inner Packagings` of the referenced `Dangerous Goods`.\n",
            "format": "int32",
            "example": 20
          },
          "material": {
            "maxLength": 100,
            "type": "string",
            "description": "The `material` used for the `Inner Packaging` of the referenced `Dangerous Goods`.\n",
            "example": "Plastic"
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "description": "Description of the packaging.\n",
            "example": "Wowen plastic water resistant Bag"
          }
        },
        "description": "Object for inner packaging specification\n"
      },
      "EmergencyContactDetails": {
        "title": "Emergency Contact Details",
        "required": [
          "contact",
          "phone"
        ],
        "type": "object",
        "properties": {
          "contact": {
            "maxLength": 255,
            "type": "string",
            "description": "Name of the Contact person during an emergency.\n",
            "example": "Henrik Larsen"
          },
          "provider": {
            "maxLength": 255,
            "type": "string",
            "description": "Name of the third party vendor providing emergency support\n",
            "example": "GlobeTeam"
          },
          "phone": {
            "maxLength": 30,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Phone number for the contact\n",
            "example": "+45 70262970"
          },
          "referenceNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "Contract reference for the emergency support provided by an external third party vendor.\n",
            "example": "12234"
          }
        },
        "description": "24 hr emergency contact details\n"
      },
      "Limits": {
        "title": "Limits",
        "required": [
          "temperatureUnit"
        ],
        "type": "object",
        "properties": {
          "temperatureUnit": {
            "type": "string",
            "description": "The unit for **all attributes in the limits structure** in Celsius or Fahrenheit\n- `CEL` (Celsius)\n- `FAH` (Fahrenheit)\n",
            "example": "CEL",
            "enum": [
              "CEL",
              "FAH"
            ]
          },
          "flashPoint": {
            "type": "number",
            "description": "Lowest temperature at which a chemical can vaporize to form an ignitable mixture in air.\n\n**Condition:** only applicable to specific hazardous goods according to the IMO IMDG Code amendment version 41-22.\n",
            "format": "float",
            "example": 42
          },
          "transportControlTemperature": {
            "type": "number",
            "description": "Maximum temperature at which certain substance (such as organic peroxides and self-reactive and related substances) can be safely transported for a prolonged period.\n",
            "format": "float",
            "example": 24.1
          },
          "transportEmergencyTemperature": {
            "type": "number",
            "description": "Temperature at which emergency procedures shall be implemented\n",
            "format": "float",
            "example": 74.1
          },
          "SADT": {
            "type": "number",
            "description": "Lowest temperature in which self-accelerating decomposition may occur in a substance\n",
            "format": "float",
            "example": 54.1
          },
          "SAPT": {
            "type": "number",
            "description": "Lowest temperature in which self-accelerating polymerization may occur in a substance\n",
            "format": "float",
            "example": 70
          }
        },
        "description": "Limits for the `Dangerous Goods`. The same `Temperature Unit` needs to apply to all attributes in this structure.\n"
      },
      "ConfirmedEquipment": {
        "title": "Confirmed Equipment",
        "required": [
          "ISOEquipmentCode",
          "units"
        ],
        "type": "object",
        "properties": {
          "ISOEquipmentCode": {
            "maxLength": 4,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Unique code for the different equipment size and type used to transport commodities. The code can refer to either the ISO size type (e.g. 22G1) or the ISO type group (e.g. 22GP) following the [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346) standard.\n",
            "example": "22GP"
          },
          "units": {
            "minimum": 1,
            "type": "integer",
            "description": "Number of confirmed equipment units\n",
            "format": "int32",
            "example": 3
          },
          "estimatedEmptyContainerPositioningDateTime": {
            "type": "string",
            "description": "The estimated date and time for the positioning of the empty container(s) at the `Empty Container Positioning Location` (ECP), if provided, or the `Place of Receipt` (PRE) if ECP location is not provided.\n\n**Conditional:** Only applicable to carrier haulage service at origin (`Receipt type at origin = SD`).\n",
            "format": "date-time",
            "example": "2024-07-05T09:03:00-02:00"
          },
          "emptyContainerPositioningLocation": {
            "$ref": "#/components/schemas/EmptyContainerPositioningLocation"
          }
        },
        "description": "The confirmed equipments for the booking\n"
      },
      "Transport": {
        "title": "Transport",
        "required": [
          "dischargeLocation",
          "loadLocation",
          "plannedArrivalDate",
          "plannedDepartureDate",
          "transportPlanStage",
          "transportPlanStageSequenceNumber"
        ],
        "type": "object",
        "properties": {
          "transportPlanStage": {
            "type": "string",
            "description": "Code qualifying a specific stage of transport e.g. pre-carriage, main carriage transport or on-carriage transport\n- `PRC` (Pre-Carriage)\n- `MNC` (Main Carriage Transport)\n- `ONC` (On-Carriage Transport)\n",
            "example": "PRC",
            "enum": [
              "PRC",
              "MNC",
              "ONC"
            ]
          },
          "transportPlanStageSequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the transport plan stage\n",
            "format": "int32",
            "example": 5
          },
          "loadLocation": {
            "$ref": "#/components/schemas/LoadLocation"
          },
          "dischargeLocation": {
            "$ref": "#/components/schemas/DischargeLocation"
          },
          "plannedDepartureDate": {
            "type": "string",
            "description": "The planned date of departure.\n",
            "format": "date",
            "example": "2021-05-17"
          },
          "plannedArrivalDate": {
            "type": "string",
            "description": "The planned date of arrival.\n",
            "format": "date",
            "example": "2021-05-19"
          },
          "modeOfTransport": {
            "maxLength": 50,
            "type": "string",
            "description": "The mode of transport as defined by DCSA. The currently supported values include:\n- `VESSEL` (Vessel)\n- `RAIL` (Rail)\n- `TRUCK` (Truck)\n- `BARGE` (Barge)\n",
            "example": "VESSEL"
          },
          "vesselName": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the Vessel given by the Vessel Operator and registered with IMO.\n",
            "example": "King of the Seas"
          },
          "vesselIMONumber": {
            "maxLength": 8,
            "minLength": 7,
            "pattern": "^\\d{7,8}$",
            "type": "string",
            "description": "The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel\n",
            "example": "9321483"
          },
          "carrierServiceCode": {
            "maxLength": 11,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The carrier-specific code of the service for which the schedule details are published.\n",
            "example": "FE1"
          },
          "universalServiceReference": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "^SR\\d{5}[A-Z]$",
            "type": "string",
            "description": "A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.\n",
            "example": "SR12345A"
          },
          "carrierImportVoyageNumber": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The identifier of an import voyage. The carrier-specific identifier of the import Voyage.\n",
            "example": "2103N"
          },
          "universalImportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWSR]`\n- `2 digits` for the year\n- `2 alphanumeric characters` for the sequence number of the voyage\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).\n",
            "example": "2103N"
          },
          "carrierExportVoyageNumber": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The identifier of an export voyage. The carrier-specific identifier of the export Voyage.\n",
            "example": "2103S"
          },
          "universalExportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWSR]`\n- `2 digits` for the year\n- `2 alphanumeric characters` for the sequence number of the voyage\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).\n",
            "example": "2103N"
          }
        },
        "description": "A single `leg` of the `Transport Plan`\n"
      },
      "LoadLocation": {
        "title": "Load Location",
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "facility": {
            "$ref": "#/components/schemas/Facility"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
            "example": "NLAMS"
          }
        },
        "description": "An object to capture the `Load Location`.\n\nThe location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n",
        "example": {
          "locationName": "Shanghai Shengdong International Container Terminal",
          "UNLocationCode": "CNSGH",
          "facility": {
            "facilityCode": "SHENG",
            "facilityCodeListProvider": "SMDG"
          }
        }
      },
      "DischargeLocation": {
        "title": "Discharge Location",
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "facility": {
            "$ref": "#/components/schemas/Facility"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
            "example": "NLAMS"
          }
        },
        "description": "An object to capture the `Discharge Location`.\n\nThe location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n",
        "example": {
          "locationName": "Transnet Port Terminals Cape Town",
          "UNLocationCode": "ZACPT",
          "facility": {
            "facilityCode": "TNCT",
            "facilityCodeListProvider": "SMDG"
          }
        }
      },
      "ShipmentCutOffTime": {
        "title": "Shipment Cut-Off Time",
        "required": [
          "cutOffDateTime",
          "cutOffDateTimeCode"
        ],
        "type": "object",
        "properties": {
          "cutOffDateTimeCode": {
            "maxLength": 3,
            "type": "string",
            "description": "Code for the cut-off time. Possible values are:\n- `DCO` (Documentation cut-off)\n- `VCO` (VGM cut-off)\n- `FCO` (FCL delivery cut-off)\n- `LCO` (LCL delivery cut-off) **Condition:** only when the `Receipt Type at Origin` is `CFS`\n- `ECP` (Empty container pick-up date and time)\n- `EFC` (Earliest full-container delivery date)\n",
            "example": "DCO"
          },
          "cutOffDateTime": {
            "type": "string",
            "description": "Actual cut-off time\n",
            "format": "date-time",
            "example": "2019-11-12T07:41:00-08:30"
          }
        },
        "description": "`Cut off times` defined by the carrier\n"
      },
      "AdvanceManifestFiling": {
        "title": "Advance Manifest Filing",
        "required": [
          "countryCode",
          "manifestTypeCode"
        ],
        "type": "object",
        "properties": {
          "manifestTypeCode": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The Manifest type code as defined by the provider. A list of `manifestTypeCodes` together with `countryCode` is maintained in [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/documentation/reference-data/advancemanifestfilings-v300.csv)\n",
            "example": "ACE"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "DK"
          }
        },
        "description": "An Advance Maifest Filing defined by a Manifest type code in combination with a country code.\n\nA list of `manifestTypeCodes` together with `countryCode` is maintained in [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/documentation/reference-data/advancemanifestfilings-v300.csv). A (small) subset can be seen here:\n\n| manifestTypeCode | countryCode | Description |\n|-----------------------|:-------------:|-------------|\n|ACI|EG|Advance Cargo Information in Egypt|\n|ACE|US|Automated Commercial Environment in the United States|\n|AFR|JP|Cargo Summary Notification (CSN)|\n",
        "example": {
          "manifestTypeCode": "ACE",
          "countryCode": "US"
        }
      },
      "Charge": {
        "title": "Charge",
        "required": [
          "calculationBasis",
          "chargeName",
          "currencyAmount",
          "currencyCode",
          "paymentTermCode",
          "quantity",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "chargeName": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Free text field describing the charge to apply\n",
            "example": "Documentation fee - Destination"
          },
          "currencyAmount": {
            "minimum": 0,
            "type": "number",
            "description": "The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.\n",
            "format": "float",
            "example": 1012.12
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "^[A-Z]{3}$",
            "type": "string",
            "description": "The currency for the charge, using a 3-character code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)).\n",
            "example": "DKK"
          },
          "paymentTermCode": {
            "type": "string",
            "description": "An indicator of whether a charge is prepaid (PRE) or collect (COL). When prepaid, the charge is the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charge is the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "calculationBasis": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.\n",
            "example": "Per day"
          },
          "unitPrice": {
            "minimum": 0,
            "type": "number",
            "description": "The unit price of this charge item in the currency of the charge.\n",
            "format": "float",
            "example": 3456.6
          },
          "quantity": {
            "minimum": 0,
            "type": "number",
            "description": "The amount of unit for this charge item.\n",
            "format": "float",
            "example": 34.4
          }
        },
        "description": "Addresses the monetary value of freight and other service charges for a `Booking`.\n"
      },
      "bookings_bookingReference_body": {
        "type": "object",
        "properties": {
          "reason": {
            "maxLength": 5000,
            "type": "string",
            "description": "An optional property where a reason for cancelling the booking or the amendment can be given.\n",
            "example": "Booking cancelled due to internal problems"
          }
        },
        "oneOf": [
          {
            "title": "Cancel entire Booking",
            "required": [
              "bookingStatus"
            ],
            "type": "object",
            "properties": {
              "bookingStatus": {
                "maxLength": 50,
                "type": "string",
                "description": "Setting the `bookingStatus` to `CANCELLED` cancels the entire `Booking` (also any ongoing amendment requests). The `Booking` will discontinue if the request is accepted by the provider.\n\nOnly possible value to set is `CANCELLED`.\n",
                "example": "CANCELLED"
              }
            }
          },
          {
            "title": "Only cancel the amendment to a Booking",
            "required": [
              "amendedBookingStatus"
            ],
            "type": "object",
            "properties": {
              "amendedBookingStatus": {
                "maxLength": 50,
                "type": "string",
                "description": "Setting the `amendedBookingStatus` to `AMENDMENT CANCELLED` **only** cancels the amendment to the `Booking`. \n\nIt is a precondition that the `amendedBookingStatus` **is** `AMENDMENT RECEIVED` in order to cancel it. If this is not the case a `404` (Not Found) error response should be returned.\n\nOnly possible value to set is `AMENDMENT CANCELLED`.\n",
                "example": "AMENDMENT CANCELLED"
              }
            }
          }
        ]
      },
      "BookingNotification_data": {
        "required": [
          "bookingStatus"
        ],
        "type": "object",
        "properties": {
          "bookingStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Booking`. Possible values are:\n\n- `RECEIVED` (Booking request has been received)\n- `PENDING UPDATE` (An update is required to the Booking)\n- `UPDATE RECEIVED` (An update has been received and is awaiting to be processed)\n- `CONFIRMED` (Booking has been Confirmed)\n- `PENDING AMENDMENT` (An amendment is required to the Booking)\n- `REJECTED` (Booking discontinued by carrier before it has been Confirmed)\n- `DECLINED` (Booking discontinued by carrier after it has been Confirmed)\n- `CANCELLED` (Booking discontinued by consumer)\n- `COMPLETED` (The Transport Document this Booking is connected to has been Surrendered for Delivery)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/bookingstatuses.csv).\n",
            "example": "RECEIVED"
          },
          "amendedBookingStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of latest amendment added to the `Booking`. If no amendment has been requested - then this property is empty. Possible values are:\n\n- `AMENDMENT RECEIVED` (An amendment has been received and is awaiting to be processed)\n- `AMENDMENT CONFIRMED` (Amendment is confirmed)\n- `AMENDMENT DECLINED` (Amendment discontinued by provider)\n- `AMENDMENT CANCELLED` (Amendment discontinued by consumer)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/bookingstatuses.csv).\n",
            "example": "AMENDMENT RECEIVED"
          },
          "carrierBookingRequestReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference to the booking during the booking request phase.\n\n**Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` is required to provide\n",
            "example": "24595eb0-5cfc-4381-9c3a-cedc1975e9aa"
          },
          "carrierBookingReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The `carrierBookingReference` if know. Often this will not be known until the booking has been confirmed. Is available during a booking amendment.\n\n**Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` is required to provide\n",
            "example": "ABC709951"
          },
          "reason": {
            "maxLength": 5000,
            "type": "string",
            "description": "This property can be used to explain `bookingStatus`.\n",
            "example": "Rejected because of strike..."
          }
        },
        "description": "`Booking` specific properties for the `Notification`\n"
      },
      "Origin Charges Payment Term": {
        "title": "Origin Charges Payment Term",
        "type": "object",
        "properties": {
          "haulageChargesPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "portChargesPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether the origin port charges are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "otherChargesPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether origin charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          }
        },
        "description": "An indicator of whether origin charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n"
      },
      "Destination Charges Payment Term": {
        "title": "Destination Charges Payment Term",
        "type": "object",
        "properties": {
          "haulageChargesPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "portChargesPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether the destination port charges are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "otherChargesPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether destination charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          }
        },
        "description": "An indicator of whether destination charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n"
      },
      "Vessel": {
        "title": "Vessel",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the Vessel given by the Vessel Operator and registered with IMO.\n",
            "example": "King of the Seas"
          },
          "vesselIMONumber": {
            "maxLength": 8,
            "minLength": 7,
            "pattern": "^\\d{7,8}$",
            "type": "string",
            "description": "The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel\n",
            "example": "9321483"
          }
        },
        "description": "Vessels related to this booking request.\n\n**Condition:** Mandatory if `carrierExportVoyageNumber` is provided and `carrierServiceCode` or `carrierServiceName` are blank.\n"
      },
      "Invoice Payable At": {
        "title": "Invoice Payable At",
        "required": [
          "UNLocationCode"
        ],
        "type": "object",
        "properties": {
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
            "example": "NLAMS"
          }
        },
        "description": "Location where payment of ocean freight and charges for the main transport will take place by the customer.\n\nThe location must be provided as a `UN Location Code`\n"
      },
      "Document Parties": {
        "title": "Document Parties",
        "required": [
          "bookingAgent"
        ],
        "type": "object",
        "properties": {
          "bookingAgent": {
            "$ref": "#/components/schemas/BookingAgent"
          },
          "shipper": {
            "$ref": "#/components/schemas/Shipper"
          },
          "consignee": {
            "$ref": "#/components/schemas/Consignee"
          },
          "serviceContractOwner": {
            "$ref": "#/components/schemas/ServiceContractOwner"
          },
          "carrierBookingOffice": {
            "$ref": "#/components/schemas/CarrierBookingOffice"
          },
          "other": {
            "type": "array",
            "description": "A list of document parties that can be optionally provided at booking stage.",
            "items": {
              "$ref": "#/components/schemas/OtherDocumentParty"
            }
          }
        },
        "description": "All `Parties` with associated roles.\n"
      },
      "Document Parties_1": {
        "title": "Document Parties",
        "type": "object",
        "properties": {
          "bookingAgent": {
            "$ref": "#/components/schemas/BookingAgent"
          },
          "shipper": {
            "$ref": "#/components/schemas/Shipper"
          },
          "consignee": {
            "$ref": "#/components/schemas/Consignee"
          },
          "serviceContractOwner": {
            "$ref": "#/components/schemas/ServiceContractOwner"
          },
          "carrierBookingOffice": {
            "$ref": "#/components/schemas/CarrierBookingOffice"
          },
          "other": {
            "type": "array",
            "description": "A list of document parties that can be optionally provided at booking stage.",
            "items": {
              "$ref": "#/components/schemas/OtherDocumentParty"
            }
          }
        },
        "description": "All `Parties` with associated roles.\n"
      },
      "Gross Weight": {
        "title": "Gross Weight",
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The grand total weight of the DG cargo and weight per `UNNumber`/`NANumber` including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.\n",
            "format": "float",
            "example": 12000.3
          },
          "unit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          }
        },
        "description": "Total weight of the goods carried, including packaging.\n"
      },
      "Net Weight": {
        "title": "Net Weight",
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "Total weight of the goods carried, excluding packaging.\n",
            "format": "float",
            "example": 2.4
          },
          "unit": {
            "type": "string",
            "description": "Unit of measure used to describe the `netWeight`. Possible values are\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          }
        },
        "description": "Total weight of the goods carried, excluding packaging.\n"
      },
      "Net Explosive Content": {
        "title": "Net Explosive Content",
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The total weight of the explosive substances, without the packaging's, casings, etc.\n",
            "format": "float",
            "example": 2.4
          },
          "unit": {
            "type": "string",
            "description": "Unit of measure used to describe the `netExplosiveWeight`. Possible values are\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n- `GRM` (Grams)\n- `ONZ` (Ounce)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR",
              "GRM",
              "ONZ"
            ]
          }
        },
        "description": "The total weight of the explosive substances, without the packaging's, casings, etc.\n"
      },
      "Volume": {
        "title": "Volume",
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The volume of the referenced dangerous goods.\n",
            "format": "float",
            "example": 2.4
          },
          "unit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in either imperial or metric terms\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n- `LTR` (Litre)\n",
            "example": "MTQ",
            "enum": [
              "MTQ",
              "FTQ",
              "LTR"
            ]
          }
        },
        "description": "The volume of the referenced dangerous goods.\n\n**Condition:** only applicable to liquids and gas.\n"
      }
    },
    "parameters": {
      "Api-Version-Major": {
        "name": "API-Version",
        "in": "header",
        "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "2"
        }
      },
      "amendedContent": {
        "name": "amendedContent",
        "in": "query",
        "description": "Controls wether the content of this payload is the amendmended Booking (`amendedContent=true`) or the confirmed Booking (`amendedContent=false`).\n\nIf `amendedContent=true` and no amendment has been requested or if the provider is not able to send the amendment - the response will be a `404` Not Found\n",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "boolean",
          "example": false,
          "default": false
        }
      },
      "bookingReferencePathParam": {
        "name": "bookingReference",
        "in": "path",
        "description": "This can be one of:\n- `carrierBookingRequestReference` (in case no carrierBookingReference has yet been appointed to the booking)\n- `carrierBookingReference`\n",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "maxLength": 100,
          "pattern": "^\\S(?:.*\\S)?$",
          "type": "string",
          "example": "CBR001"
        }
      }
    },
    "headers": {
      "API-Version": {
        "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "2.0.0-Beta-2"
        }
      }
    }
  }
}
