{
  "openapi": "3.0.0",
  "info": {
    "title": "DCSA OpenAPI specification for Booking Notifications",
    "description": "API specification issued by DCSA.org.\n\nBooking Notifications for [DCSA OpenAPI specification for Booking](https://app.swaggerhub.com/apis/dcsaorg/DCSA_BKG/2.0.0-Beta-1) is a lightweight notification based on [CloudEvents](https://cloudevents.io/). The `POST` endPoint of the consumer is called whenever a Booking that is being subscribed to changes state.\n\nSubscribing to notification is done outside scope of this API.\n\nFor a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/bkg/notification/v2#v200B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\n",
    "contact": {
      "name": "Digital Container Shipping Association (DCSA)",
      "url": "https://dcsa.org",
      "email": "info@dcsa.org"
    },
    "version": "2.0.0-Beta-1"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "Notifications",
      "description": "Notification operations"
    }
  ],
  "paths": {
    "/v2/booking-notifications": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Send a new Booking Notification",
        "description": "Creates a new `Booking Notification`. This endPoint is called whenever a Booking that a cosumer has subscribed to changes state.\n",
        "operationId": "postBookingNotifications",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "2"
            }
          }
        ],
        "requestBody": {
          "description": "The payload used to create a `Booking Notification`\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingNotification"
              },
              "examples": {
                "receivedExample": {
                  "summary": "Booking request received\n",
                  "description": "A `Booking Request` received and stored in provider system (`bookingStatus='RECEIVED'`).\n",
                  "value": {
                    "specversion": "1.0",
                    "id": "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                    "source": "https://member.com/",
                    "type": "org.dcsa.booking-notification.v2",
                    "time": "2018-04-05T17:31:00Z",
                    "datacontenttype": "application/json",
                    "data": {
                      "bookingStatus": "RECEIVED",
                      "carrierBookingRequestReference": "24595eb0-5cfc-4381-9c3a-cedc1975e9aa"
                    }
                  }
                },
                "declinedExample": {
                  "summary": "Booking amendment declined\n",
                  "description": "An amendment to a Booking has been declined (`amendedBookingStatus='DECLINED'`)\n",
                  "value": {
                    "specversion": "1.0",
                    "id": "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                    "source": "https://member.com/",
                    "type": "org.dcsa.booking-notification.v2",
                    "time": "2018-04-05T17:31:00Z",
                    "datacontenttype": "application/json",
                    "data": {
                      "bookingStatus": "CONFIRMED",
                      "amendedBookingStatus": "DECLINED",
                      "carrierBookingRequestReference": "24595eb0-5cfc-4381-9c3a-cedc1975e9aa",
                      "carrierBookingReference": "ABC709951",
                      "reason": "Declined because of no equipment availability"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://localhost:3000"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BookingNotification": {
        "title": "BookingNotification",
        "required": [
          "data",
          "datacontenttype",
          "id",
          "source",
          "specversion",
          "time",
          "type"
        ],
        "type": "object",
        "properties": {
          "specversion": {
            "type": "string",
            "description": "The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.\n\nCurrently, this attribute will only have the 'major' and 'minor' version numbers included in it. This allows for 'patch' changes to the specification to be made without changing this property's value in the serialization. Note: for 'release candidate' releases a suffix might be used for testing purposes.\n",
            "example": "1.0",
            "enum": [
              "1.0"
            ]
          },
          "id": {
            "maxLength": 100,
            "type": "string",
            "description": "Identifies the event. Producers MUST ensure that `source` + `id` is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same `id`. Consumers MAY assume that Events with identical `source` and `id` are duplicates.\n",
            "example": "3cecb101-7a1a-43a4-9d62-e88a131651e2"
          },
          "source": {
            "maxLength": 4096,
            "type": "string",
            "description": "Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.\n\nProducers MUST ensure that `source` + `id` is unique for each distinct event.\n\nAn application MAY assign a unique `source` to each distinct producer, which makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique `source` identifiers.\n\nA source MAY include more than one producer. In that case the producers MUST collaborate to ensure that `source` + `id` is unique for each distinct event.\n",
            "example": "https://member.com/"
          },
          "type": {
            "type": "string",
            "description": "This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type - see [Versioning of CloudEvents in the Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents) for more information.\n",
            "example": "org.dcsa.bookingnotification.v2",
            "enum": [
              "org.dcsa.bookingnotification.v2"
            ]
          },
          "time": {
            "type": "string",
            "description": "Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same `source` MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.\n",
            "format": "date-time",
            "example": "2018-04-05T17:31:00Z"
          },
          "datacontenttype": {
            "type": "string",
            "description": "Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the [JSON envelope](formats/json-format.md#3-envelope) format might carry an XML payload in `data`, and the consumer is informed by this attribute being set to \"application/xml\". The rules for how `data` content is rendered for different `datacontenttype` values are defined in the event format specifications; for example, the JSON event format defines the relationship in [section 3.1](formats/json-format.md#31-handling-of-data).\n\nFor some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol.\n\nIn some event formats the `datacontenttype` attribute MAY be omitted. For example, if a JSON format event has no `datacontenttype` attribute, then it is implied that the `data` is a JSON value conforming to the \"application/json\" media type. In other words: a JSON-format event with no `datacontenttype` is exactly equivalent to one with `datacontenttype=\"application/json\"`.\n\nWhen translating an event message with no `datacontenttype` attribute to a different format or protocol binding, the target `datacontenttype` SHOULD be set explicitly to the implied `datacontenttype` of the source.\n",
            "example": "application/json",
            "enum": [
              "application/json"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/BookingNotification_data"
          }
        }
      },
      "BookingNotification_data": {
        "required": [
          "bookingStatus"
        ],
        "type": "object",
        "properties": {
          "bookingStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Booking`. Possible values are:\n- `RECEIVED` (Booking request has been received)\n- `PENDING UPDATE` (An update is required to the Booking)\n- `UPDATE RECEIVED` (An update has been received and is awaiting to be processed)\n- `CONFIRMED` (Booking has been Confirmed)\n- `PENDING AMENDMENT` (An amendment is required to the Booking)\n- `REJECTED` (Booking discontinued by carrier before it has been Confirmed)\n- `DECLINED` (Booking discontinued by carrier after it has been Confirmed)\n- `CANCELLED` (Booking discontinued by consumer)\n- `COMPLETED` (The Transport Document this Booking is connected to has been Surrendered for Delivery)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/bookingstatuses.csv).\n",
            "example": "RECEIVED"
          },
          "amendedBookingStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of latest amendment added to the `Booking`. If no amendment has been requested - then this field is empty. Possible values are:\n- `AMENDMENT RECEIVED` (An amendment has been received and is awaiting to be processed)\n- `CONFIRMED` (Amendment is confirmed)\n- `DECLINED` (Amendment discontinued by provider)\n- `CANCELLED` (Amendment discontinued by consumer)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/bookingstatuses.csv).\n",
            "example": "PENDING AMENDMENT APPROVAL"
          },
          "carrierBookingRequestReference": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "A reference to the booking during the booking request phase.\n\n**Conditional:** `carrierBookingRequestReference` and/or `carrierBookingReference` is required to provide\n",
            "example": "24595eb0-5cfc-4381-9c3a-cedc1975e9aa"
          },
          "carrierBookingReference": {
            "maxLength": 35,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The `carrierBookingReference` if know. Often this will not be known until the booking has been confirmed. Is available during a booking amendment.\n\n**Conditional:** `carrierBookingRequestReference` and/or `carrierBookingReference` is required to provide\n",
            "example": "ABC709951"
          },
          "reason": {
            "maxLength": 5000,
            "type": "string",
            "description": "This field can be used to explain `bookingStatus`.\n",
            "example": "Rejected because of strike..."
          }
        }
      }
    },
    "parameters": {
      "Api-Version-Major": {
        "name": "API-Version",
        "in": "header",
        "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "2"
        }
      }
    },
    "headers": {
      "API-Version": {
        "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "2.0.0-Beta-1"
        }
      }
    }
  }
}