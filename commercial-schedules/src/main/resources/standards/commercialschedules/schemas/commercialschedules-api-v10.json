{
  "openapi": "3.0.3",
  "info": {
    "title": "DCSA OpenAPI specification for Commercial Schedules",
    "description": "API specification issued by [Digital Container Shipping Association (DCSA)](https://dcsa.org/).\n\nThe Commercial Schedules API offers BCOs, LSPs, and Solution Platforms three different methods and endpoints to access schedules from carriers based on their specific needs: Point-to-Point Routings, Port Schedules, and Vessel Schedules. \n\n**Commercial schedules - point-to-point routings**: provides the product offering of single or multiple estimated end-to-end route options for a shipment in the pre-booking phase. This includes point-to-point specification of all transport legs, estimated timings, estimated schedules and interdependencies between transport legs.\n \n**Commercial schedules – port schedules**: provides, for a required specific port and starting date, the set of all vessels arriving and departing from the port with the corresponding estimated timestamps.\n \n**Commercial schedules – vessel schedules**: provides, for a required specific service and/or voyage and/or vessel and/or location, the timetable of estimated departure and arrival times for each port call on the rotation of the vessel(s).\n\n**All use cases mentioned in this API specification refer to use cases defined in the Commercial Schedules Interface Standard.**\n\nThe Commercial Schedules endpoints can be implemented independently:\n\n`1. GET /v1/point-to-point-routes # For Point to Point Routings`\n\n`2. GET /v1/port-schedules # For Port Schedules`\n\n`3. GET /v1/vessel-schedules # For Vessel Schedules`\n\nVisit the [DCSA Website](https://dcsa.org/standards/commercial-schedules/) to find other documentation related to the standard publication (i.e. Interface Standard, Information Model).\n\n\n**Stats API**\n\nThe Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to the Commercial Schedule API. Further details can be found [here](https://labs.dcsa.org/#/http/guides/api-guides/stats-api/introduction).\n\nFor a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/cs/v1#v100B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\n",
    "contact": {
      "name": "Digital Container Shipping Association (DCSA)",
      "url": "https://dcsa.org/",
      "email": "info@dcsa.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "Point To Point",
      "description": " "
    },
    {
      "name": "Port Schedule",
      "description": " "
    },
    {
      "name": "Vessel Schedule",
      "description": " "
    }
  ],
  "paths": {
    "/v1/point-to-point-routes": {
      "get": {
        "tags": [
          "Point To Point"
        ],
        "summary": "Point to Point Routing",
        "description": "Provides the product offering of single or multiple estimated end-to-end route options for a shipment in the pre-booking phase. This includes point-to-point specification of all transport legs, estimated timings, estimated schedules and interdependencies between transport legs.\n\nThe list of solutions returned in the response can be tailored to a specific need by combining available query parameters.\n\nThe minimum required query parameters are `placeOfReceipt` and `placeOfDelivery`. If no further query parameters are used to tailor the response, the provider of the GET endpoint will return their best suggestions in the response. \n\nThe `GET /v1/point-to-point-routes` endpoint can be implemented independently of having implemented the `GET /v1/port-schedules`  and `GET /v1/vessel-schedules`  endpoints.\n",
        "operationId": "get-v1-point-to-point",
        "parameters": [
          {
            "name": "placeOfReceipt",
            "in": "query",
            "description": "The `UNLocationCode` specifying where the place is located.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 5,
              "minLength": 5,
              "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
              "type": "string",
              "example": "NLAMS"
            }
          },
          {
            "name": "placeOfDelivery",
            "in": "query",
            "description": "The `UNLocationCode` specifying where the place is located.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 5,
              "minLength": 5,
              "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
              "type": "string",
              "example": "NLAMS"
            }
          },
          {
            "name": "departureStartDate",
            "in": "query",
            "description": "Limit the result based on the earliest departureDate. \n- If provided without departureEndDate, returns all routings with departures from the specified departureStartDate onwards.\n- If provided with departureEndDate, returns all routings with departures within the specified date range, inclusive of both dates.\n- If the same date is provided for both departureStartDate and departureEndDate, returns all routings with departures on that specific date.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-01"
            }
          },
          {
            "name": "departureEndDate",
            "in": "query",
            "description": "Limit the result based on the latest departureDate. \n- If provided without departureStartDate, returns all routings with departures up to the specified departureEndDate.\n- If provided with departureStartDate, returns all routings with departures within the specified date range, inclusive of both dates.\n- If the same date is provided for both departureStartDate and departureEndDate, returns all routings with departures on that specific date.    \n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-05-01"
            }
          },
          {
            "name": "arrivalStartDate",
            "in": "query",
            "description": "Limit the result based on the earliest arrivalDate.\n- If provided without arrivalEndDate, returns all routings with arrivals from the specified arrivalStartDate.\n- If provided with arrivalEndDate, returns all routings with arrivals within the specified date range, inclusive of both dates.\n- If the same date is provided for both arrivalStartDate and arrivalEndDate, returns all routings with arrivals on that specific date.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-01"
            }
          },
          {
            "name": "arrivalEndDate",
            "in": "query",
            "description": "Limit the result based on the latest arrivalDate.\n- If provided without arrivalStartDate, returns all routings with arrivals up to the specified arrivalEndDate.\n- If provided with arrivalStartDate, returns all routings with arrivals within the specified date range, inclusive of both dates.\n- If the same date is provided for both arrivalStartDate and arrivalEndDate, returns all routings with arrivals on that specific date.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-05-01"
            }
          },
          {
            "name": "maxTranshipment",
            "in": "query",
            "description": "Specifies the maximum number of transhipments that can have the proposed routings in the response. By default, transhipments are allowed and the responses can have either direct routings or routings with transhipment. The default value of maximum transhipments is defined by the carrier for when the consumer does not provide a value. If the user sets the number of transhipments to 0, only direct routings can be returned in the response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 1
            }
          },
          {
            "name": "receiptTypeAtOrigin",
            "in": "query",
            "description": "Indicates the type of service offered at Origin. **Carriers can choose to define a default value when the consumer does not provide it.**\n  - `CY` (Container yard (incl. rail ramp))  \n  - `SD` (Store Door)  \n  - `CFS` (Container Freight Station)\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 3,
              "type": "string",
              "example": "CY",
              "enum": [
                "CY",
                "SD",
                "CFS"
              ]
            }
          },
          {
            "name": "deliveryTypeAtDestination",
            "in": "query",
            "description": "Indicates the type of service offered at Destination. **Carriers can choose to define a default value when the consumer does not provide it.**\n  - `CY` (Container yard (incl. rail ramp))  \n  - `SD` (Store Door)  \n  - `CFS` (Container Freight Station)\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 3,
              "type": "string",
              "example": "CY",
              "enum": [
                "CY",
                "SD",
                "CFS"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "example": 100,
              "default": 100
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A server generated value to specify a specific point in a collection result, used for pagination.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "description": "SemVer used to indicate the version of the contract (API version) returned\n",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "example": "1.0.0"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PointToPoint"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "API-Version": {
                "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "example": "1.0.0"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "https://dcsa.org/cs/v1/point-to-point",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2019-11-12T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7005,
                          "property": "placeOfDelivery",
                          "value": "SG",
                          "errorCodeText": "invalidQuery",
                          "errorCodeMessage": "PlaceOfDelivery does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "API-Version": {
                "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "example": "1.0.0"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "https://dcsa.org/cs/v1/point-to-point",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Unable to process request",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2019-11-12T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7007,
                          "property": "UNLocationCode",
                          "value": "NA",
                          "errorCodeText": "invalidQuery",
                          "errorCodeMessage": "UNLocationCode does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/port-schedules": {
      "get": {
        "tags": [
          "Port Schedule"
        ],
        "summary": "Port Schedule",
        "description": "Provides, for a required specific port and starting date, the set of all vessels arriving and departing from the port with the corresponding estimated timestamps.\n\nThe port must be identified by its UN Location Code. \n\nThe required query parameters are `UNLocationCode` and `date`. \n\nIf the requested port (identified with UNLocationCode) has multiple terminals (identified with facilitySMDGCode), the response will include a sorted list that provides all the arrivals and departures of the vessels for each terminal of the port (UNLocationCode). \n\nThe `GET /v1/port-schedules` endpoint can be implemented independently of having implemented the  `GET /v1/point-to-point-routes`  and `GET /v1/vessel-schedules`  endpoints. \n",
        "operationId": "get-v1-port-schedules",
        "parameters": [
          {
            "name": "UNLocationCode",
            "in": "query",
            "description": "The UN Location code specifying where the place is located. Specifying this filter will only return the set of all vessels arriving and departing from the port and its terminals with the corresponding estimated.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 5,
              "minLength": 5,
              "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
              "type": "string",
              "example": "NLAMS"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date since when the estimated arrival and departures of vessels in a given port is required.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
              "type": "string",
              "format": "date",
              "example": "2023-07-01"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "example": 100,
              "default": 100
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A server generated value to specify a specific point in a collection result, used for pagination.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string",
              "example": "fE9mZnNldHw9MTAmbGltaXQ9MTA="
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "example": "1.0.0"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortSchedule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "API-Version": {
                "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "example": "1.0.0"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "https://dcsa.org/cs/v1/port-schedule",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2019-11-12T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7005,
                          "property": "port",
                          "value": "SG",
                          "errorCodeText": "invalidQuery",
                          "errorCodeMessage": "Port does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "API-Version": {
                "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "example": "1.0.0"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "https://dcsa.org/cs/v1/port-schedule",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Cannot process request.",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2019-11-12T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7007,
                          "property": "UNLocationCode",
                          "value": "NA",
                          "errorCodeText": "invalidQuery",
                          "errorCodeMessage": "UNLocationCode does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/vessel-schedules": {
      "get": {
        "tags": [
          "Vessel Schedule"
        ],
        "summary": "Vessel Schedule",
        "description": "Provides, for a required specific service and/or voyage and/or vessel and/or location, the timetable of estimated departure and arrival times for each port call on the rotation of the vessel(s).\n\nThe list of schedules returned in the response can be tailored to specific needs by combining available query parameters. \n\nExamples of typical query parameters and expected payload returned in the response: \n\n- a) `carrierServiceCode`: Get all vessels and their full voyages within a service   \n\n- b) `carrierServiceCode` **&** `carrierVoyageNumber`: Get a specific full voyage within a service\n\n- c) `carrierServiceCode` **&** `vesselIMONumber`: Get a specific vessel’s full voyages within a service. \n\n- d) `vesselIMONumber`: Get all full voyages for a specific vessel across all the services in which it is involved.\n\n- e) `UNLocationCode`: Get all vessels and their full voyages where the specific UNLocationCode is involved\n\n- f) `UNLocationCode` **&** `facilitySMDGCode`: Get all vessels and their full voyages where the specific UNLocationCode and facilitySMDGCode is involved\n\nOther combinations using `vesselName`, `universalServiceReference`, `universalVoyageReference`, `vesselOperatorCarrierCode`, `startDate`, `endDate` are possible. \n\nThe resulting payload returned in the responses will always include **entire voyage(s) being matched**. This means that even though a filter only matches a single `Port` (UNLocationCode) in a `Voyage` or a single `Timestamp` within a `Port` in a `Voyage` - **the entire Voyage matched** is returned. If the `carrierImportVoyageNumber` of the `Port` differs from the `carrierExportVoyageNumber` of the `Port` then the **entire Voyage** for both these Voyage numbers are included. An example of this is when `&UNLocationCode=DEHAM` is used as a filter parameter. In this case **entire Voyages** would be listed where `DEHAM` is a `Port`.\n\nBe aware that it is possible to specify filters that are mutually exclusive resulting in an empty response list. An example of this could be when both using `vesselIMONumber` and `vesselName` filters at the same time: &vesselIMONumber=9321483&vesselName=King of the Seas. If no `Vessel` exists where `vesselIMONumber` is **9321483** and `vesselName` is **King of the Seas** then the result will be an empty list. \n\nIf no `startDate` filter is provided, then **3 months** before the request date should be used as default. If no `endDate` filter is provided, then **6 months** after the request date should be used as default. The endpoint provider can customize these based on their business definitions and inform the consumers what to expect in a response when these filters are not used. \n\nThe `GET /v1/vessel-schedules` endpoint can be implemented independently of having implemented the  `GET /v1/point-to-point-routes`  and `GET /v1/port-schedules`  endpoints. \n\n**IMPORTANT**: This endpoint is for carriers to make available vessel schedules to BCO, LSP, and Solution Platforms, with a commercial purpose; this is out of the boundaries of their vessel schedules alignment with other carriers and terminals for operational purposes for which the Operational Vessel Schedules [API](https://app.swaggerhub.com/apis/dcsaorg/DCSA_OVS/3.0.0) is used between carriers, and carriers and terminals. \n",
        "operationId": "get-v1-vessel-schedule",
        "parameters": [
          {
            "name": "vesselIMONumber",
            "in": "query",
            "description": "The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 8,
              "minLength": 7,
              "pattern": "^\\d{7,8}$",
              "type": "string",
              "example": "9321483"
            }
          },
          {
            "name": "vesselName",
            "in": "query",
            "description": "The name of a vessel. The result will only return schedules including the vessel with the specified name.  Be aware that the vesselName is not unique and might match multiple vessels.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "pattern": "^\\S(?:.*\\S)?$",
              "type": "string",
              "example": "King of the Seas"
            }
          },
          {
            "name": "carrierServiceCode",
            "in": "query",
            "description": "The carrier specific service code to filter by. The result will only return schedules including the service code.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 11,
              "type": "string",
              "example": "FE1"
            }
          },
          {
            "name": "universalServiceReference",
            "in": "query",
            "description": "The Universal Service Reference (USR) as defined by DCSA to filter by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 8,
              "minLength": 8,
              "pattern": "^SR\\d{5}[A-Z]$",
              "type": "string",
              "example": "SR12345A"
            }
          },
          {
            "name": "carrierVoyageNumber",
            "in": "query",
            "description": "The carrier specific identifier of a Voyage - can be both `importVoyageNumber` and `exportVoyageNumber`. The result will only return schedules including the Ports where `carrierVoyageNumber` is either `carrierImportVoyageNumber` or `carrierExportVoyageNumber`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "2103S"
            }
          },
          {
            "name": "universalVoyageReference",
            "in": "query",
            "description": "The Universal Reference of a Voyage - can be both `importUniversalVoyageReference` and `exportUniversalVoyageReference`. The result will only return schedules including the Ports where `universalVoyageReference` is either `importUniversalVoyageReference` or `exportUniversalVoyageReference`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 5,
              "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
              "type": "string",
              "example": "2201N"
            }
          },
          {
            "name": "UNLocationCode",
            "in": "query",
            "description": "The UN Location Code specifying where a port is located.  Specifying this filter will only return schedules including entire Voyages related to this particular UN Location Code.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 5,
              "minLength": 5,
              "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
              "type": "string",
              "example": "NLAMS"
            }
          },
          {
            "name": "facilitySMDGCode",
            "in": "query",
            "description": "The facilitySMDGCode specifying a specific facility (using SMDG Code). Be aware that the `facilitySMDGCode` does not contain a `UNLocationCode` - this must be specified in the `UNLocationCode` filter.  Specifying this filter will only return schedules including entire Voyages related to this particular `facilitySMDGCode`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "APM"
            }
          },
          {
            "name": "vesselOperatorCarrierCode",
            "in": "query",
            "description": "The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 10,
              "type": "string",
              "example": "MAEU"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date of the period for which schedule information is requested. If a date of any Timestamp (ATA, ETA or PTA) inside a PortCall matches a date on or after (≥) the `startDate` the entire Voyage (import- and export-Voyage) matching the PortCall will be included in the result. All matching is done towards local Date at the place of the port call.\nIf this filter is not provided the default value is `3 months` prior to request time.  The value is populated in `ISO 8601` date format.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-04-06"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date of the period for which schedule information is requested. If a date of any Timestamp (ATA, ETA or PTA) inside a PortCall matches a date on or before (≤) the `endDate` the entire Voyage(import- and export-Voyage) matching the PortCall will be included in the result. All matching is done towards local Date at the place of the port call.  \nIf this filter is not provided the default value is `6 months` after request time.  The value is populated in `ISO 8601` date format.\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-04-10"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "example": 100,
              "default": 100
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A server generated value to specify a specific point in a collection result, used for pagination.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string",
              "example": "fE9mZnNldHw9MTAmbGltaXQ9MTA="
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "example": "1.0.0"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceSchedule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "API-Version": {
                "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "example": "1.0.0"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "https://dcsa.org/cs/v1/vessel-schedule",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2019-11-12T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7007,
                          "property": "UNLocationCode",
                          "value": "NA",
                          "errorCodeText": "invalidQuery",
                          "errorCodeMessage": "UNLocationCode does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "API-Version": {
                "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string",
                  "example": "1.0.0"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "https://dcsa.org/cs/v1/vessel-schedule",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Cannot process request.",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2019-11-12T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7007,
                          "property": "UNLocationCode",
                          "value": "NA",
                          "errorCodeText": "invalidQuery",
                          "errorCodeMessage": "UNLocationCode does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PlaceOfReceipt": {
        "title": "Place of Receipt",
        "required": [
          "dateTime",
          "facilityTypeCode",
          "location"
        ],
        "type": "object",
        "properties": {
          "facilityTypeCode": {
            "maxLength": 4,
            "type": "string",
            "description": "The code to identify the specific type of facility. The code indicates which role the facility plays during the transportCall.\n- `BORD` (Border)\n- `CLOC` (Customer Location)\n- `COFS` (Container Freight Station)\n- `OFFD` (Off Dock Storage)\n- `DEPO` (Depot)\n- `INTE` (Inland Terminal)\n- `POTE` (Port Terminal)\n- `PBPL` (Pilot Boarding Place)\n- `BRTH` (Berth)\n- `RAMP` (Ramp)\n- `WAYP` (Waypoint)\n",
            "example": "POTE"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "dateTime": {
            "type": "string",
            "description": "The local date and time, when the event will take place, in ISO 8601 format specifying the offset.",
            "format": "date-time",
            "example": "2025-01-14T09:21:00+01:00"
          }
        },
        "description": "The Location specifying where the place of receipt is located.\n"
      },
      "PlaceOfDelivery": {
        "title": "Place of Delivery",
        "required": [
          "dateTime",
          "facilityTypeCode",
          "location"
        ],
        "type": "object",
        "properties": {
          "facilityTypeCode": {
            "maxLength": 4,
            "type": "string",
            "description": "The code to identify the specific type of facility. The code indicates which role the facility plays during the transportCall.\n- `BORD` (Border)\n- `CLOC` (Customer Location)\n- `COFS` (Container Freight Station)\n- `OFFD` (Off Dock Storage)\n- `DEPO` (Depot)\n- `INTE` (Inland Terminal)\n- `POTE` (Port Terminal)\n- `PBPL` (Pilot Boarding Place)\n- `BRTH` (Berth)\n- `RAMP` (Ramp)\n- `WAYP` (Waypoint)\n",
            "example": "POTE"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "dateTime": {
            "type": "string",
            "description": "The local date and time, when the event will take place, in ISO 8601 format specifying the offset.",
            "format": "date-time",
            "example": "2025-01-14T09:21:00+01:00"
          }
        },
        "description": "The Location specifying where the place of delivery is located.\n"
      },
      "PlaceOfArrival": {
        "title": "Place of Arrival",
        "required": [
          "dateTime",
          "facilityTypeCode",
          "location"
        ],
        "type": "object",
        "properties": {
          "facilityTypeCode": {
            "maxLength": 4,
            "type": "string",
            "description": "The code to identify the specific type of facility. The code indicates which role the facility plays during the transportCall.\n- `BORD` (Border)\n- `CLOC` (Customer Location)\n- `COFS` (Container Freight Station)\n- `OFFD` (Off Dock Storage)\n- `DEPO` (Depot)\n- `INTE` (Inland Terminal)\n- `POTE` (Port Terminal)\n- `PBPL` (Pilot Boarding Place)\n- `BRTH` (Berth)\n- `RAMP` (Ramp)\n- `WAYP` (Waypoint)\n",
            "example": "POTE"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "dateTime": {
            "type": "string",
            "description": "The local date and time, when the event will take place, in ISO 8601 format specifying the offset.",
            "format": "date-time",
            "example": "2025-01-14T09:21:00+01:00"
          }
        },
        "description": "The Location specifying where the place of arrival is located.\n"
      },
      "PlaceOfDeparture": {
        "title": "Place of Departure",
        "required": [
          "dateTime",
          "facilityTypeCode",
          "location"
        ],
        "type": "object",
        "properties": {
          "facilityTypeCode": {
            "maxLength": 4,
            "type": "string",
            "description": "The code to identify the specific type of facility. The code indicates which role the facility plays during the transportCall.\n- `BORD` (Border)\n- `CLOC` (Customer Location)\n- `COFS` (Container Freight Station)\n- `OFFD` (Off Dock Storage)\n- `DEPO` (Depot)\n- `INTE` (Inland Terminal)\n- `POTE` (Port Terminal)\n- `PBPL` (Pilot Boarding Place)\n- `BRTH` (Berth)\n- `RAMP` (Ramp)\n- `WAYP` (Waypoint)\n",
            "example": "POTE"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "dateTime": {
            "type": "string",
            "description": "The local date and time, when the event will take place, in ISO 8601 format specifying the offset.",
            "format": "date-time",
            "example": "2025-01-14T09:21:00+01:00"
          }
        },
        "description": "The Location specifying where the place of departure is located.\n"
      },
      "pointToPointRoutings": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PointToPoint"
        }
      },
      "PointToPoint": {
        "title": "Point to Point",
        "required": [
          "legs",
          "placeOfDelivery",
          "placeOfReceipt"
        ],
        "type": "object",
        "properties": {
          "placeOfReceipt": {
            "$ref": "#/components/schemas/PlaceOfReceipt"
          },
          "placeOfDelivery": {
            "$ref": "#/components/schemas/PlaceOfDelivery"
          },
          "receiptTypeAtOrigin": {
            "maxLength": 3,
            "type": "string",
            "description": "Indicates the type of service offered at `Origin`. The options are:\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
            "example": "CY",
            "enum": [
              "CY",
              "SD",
              "CFS"
            ]
          },
          "deliveryTypeAtDestination": {
            "maxLength": 3,
            "type": "string",
            "description": "Indicates the type of service offered at `Destination`. The options are:\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
            "example": "CY",
            "enum": [
              "CY",
              "SD",
              "CFS"
            ]
          },
          "cutOffTimes": {
            "type": "array",
            "description": "A list of cut-offs times provided by the carrier when available. A cut-off time indicates the latest deadline within which a task must be completed.",
            "items": {
              "$ref": "#/components/schemas/CutOffTime"
            }
          },
          "solutionNumber": {
            "minimum": 1,
            "type": "integer",
            "description": "Solution number, starting with 1. Used to group and identify similar or same routings in the response as per the carrier commercial definitions.",
            "format": "int32",
            "example": 1
          },
          "transitTime": {
            "type": "integer",
            "description": "The estimated total time in **days** that it takes a shipment to move from place of receipt to place of delivery. Transit time includes stop-over time during transshipments and waiting time at connection points.",
            "format": "int32",
            "example": 10
          },
          "legs": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Leg"
            }
          }
        }
      },
      "portSchedules": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PortSchedule"
        }
      },
      "PortSchedule": {
        "title": "Port Schedule",
        "required": [
          "location"
        ],
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/PortScheduleLocation"
          },
          "vesselSchedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Schedule"
            }
          }
        }
      },
      "Schedule": {
        "title": "Schedule",
        "required": [
          "isDummyVessel",
          "servicePartners",
          "timestamps"
        ],
        "type": "object",
        "properties": {
          "universalServiceReference": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "^SR\\d{5}[A-Z]$",
            "type": "string",
            "description": "A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: SR\\d{5}[A-Z]. The letters SR followed by 5 digits, followed by a checksum-character as a capital letter from A to Z.",
            "example": "SR12345A"
          },
          "servicePartners": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServicePartnerSchedules"
            }
          },
          "vessel": {
            "$ref": "#/components/schemas/Vessel"
          },
          "isDummyVessel": {
            "type": "boolean",
            "description": "Is this a dummy vessel. In case no vessel has been asigned yet - this property can be set to `true` indicating that the vesselIMONumber does not exist."
          },
          "universalImportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage.",
            "example": "2103N"
          },
          "universalExportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage.",
            "example": "2103N"
          },
          "timestamps": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Timestamp"
            }
          },
          "cutOffTimes": {
            "type": "array",
            "description": "A list of cut-offs times provided by the carrier when available. A cut-off time indicates the latest deadline within which a task must be completed.",
            "items": {
              "$ref": "#/components/schemas/CutOffTime"
            }
          }
        }
      },
      "TransportCall": {
        "title": "Transport Call",
        "required": [
          "carrierImportVoyageNumber",
          "timestamps",
          "transportCallReference"
        ],
        "type": "object",
        "properties": {
          "portVisitReference": {
            "maxLength": 50,
            "type": "string",
            "description": "The unique reference that can be used to link different `transportCallReferences` to the same port visit. The reference is provided by the port to uniquely identify a port call.",
            "example": "NLRTM1234589"
          },
          "transportCallReference": {
            "maxLength": 100,
            "type": "string",
            "description": "The unique reference for a transport call. It’s the vessel operator’s responsibility to provide the Transport Call Reference, other parties are obliged to pick it up and use it. It can take the form of Port Call References as defined in OVS Definitions Document, or alternatively a reference as defined by the vessel operator.",
            "example": "SR11111X-9321483-2107W-NLRTM-HPD2-1-1"
          },
          "carrierImportVoyageNumber": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The identifier of an import voyage. The carrier-specific identifier of the import Voyage.",
            "example": "2103N"
          },
          "carrierExportVoyageNumber": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The identifier of an export voyage. The carrier-specific identifier of the export Voyage.",
            "example": "2103S"
          },
          "universalImportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage.",
            "example": "2103N"
          },
          "universalExportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "example": "2103N"
          },
          "cutOffTimes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CutOffTime"
            }
          },
          "location": {
            "$ref": "#/components/schemas/TransportCallLocation"
          },
          "timestamps": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Timestamp"
            }
          }
        }
      },
      "Timestamp": {
        "title": "Timestamp",
        "required": [
          "eventClassifierCode",
          "eventDateTime",
          "eventTypeCode"
        ],
        "type": "object",
        "properties": {
          "eventTypeCode": {
            "type": "string",
            "description": "Identifier for type of transportEvent\r\n\r\n- ARRI (Arrived)\r\n- DEPA (Departed)",
            "enum": [
              "ARRI",
              "DEPA"
            ]
          },
          "eventClassifierCode": {
            "type": "string",
            "description": "Code for the event classifier. Values can vary depending on eventType.\n\nPossible values are:\n- `ACT` (Actual)\n- `EST` (Estimated)\n- `PLN` (Planned)\n",
            "enum": [
              "PLN",
              "EST",
              "ACT"
            ]
          },
          "eventDateTime": {
            "type": "string",
            "description": "The local date and time, when the event takes place, in ISO 8601 format specifying the offset.",
            "format": "date-time",
            "example": "2025-01-14T09:21:00+01:00"
          }
        }
      },
      "serviceSchedules": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ServiceSchedule"
        }
      },
      "ServiceSchedule": {
        "title": "Service Schedule",
        "required": [
          "carrierServiceCode",
          "carrierServiceName",
          "vesselSchedules"
        ],
        "type": "object",
        "properties": {
          "carrierServiceName": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the service.",
            "example": "Great Lion Service"
          },
          "carrierServiceCode": {
            "maxLength": 11,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The carrier-specific code of the service for which the schedule details are published.",
            "example": "FE1"
          },
          "universalServiceReference": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "^SR\\d{5}[A-Z]$",
            "type": "string",
            "description": "A global unique service reference, as per DCSA standard, agreed by VSA partners for the service.",
            "example": "SR12345A"
          },
          "vesselSchedules": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VesselSchedule"
            }
          }
        }
      },
      "VesselSchedule": {
        "title": "Vessel Schedule",
        "required": [
          "isDummyVessel"
        ],
        "type": "object",
        "properties": {
          "vessel": {
            "$ref": "#/components/schemas/Vessel"
          },
          "isDummyVessel": {
            "type": "boolean",
            "description": "Is this a dummy vessel. In case no vessel has been asigned yet - this property can be set to `true` indicating that the vesselIMONumber does not exist."
          },
          "transportCalls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportCall"
            }
          }
        }
      },
      "CutOffTime": {
        "title": "Cut-Off Time",
        "required": [
          "cutOffDateTime",
          "cutOffDateTimeCode"
        ],
        "type": "object",
        "properties": {
          "cutOffDateTimeCode": {
            "maxLength": 3,
            "type": "string",
            "description": "Code for the cut-off time. Possible values are:\r\n- `DCO` (Documentation cut-off)\r\n- `VCO` (VGM cut-off)\r\n- `FCO` (FCL delivery cut-off)\r\n- `LCO` (LCL delivery cut-off)\r\n- `PCO` (Port cut-off)\r\n- `ECP` (Empty container pick-up date and time)\r\n- `EFC` (Earliest full-container delivery date)\r\n- `RCO` (Reefer cut-off)\r\n- `DGC` (Dangerous Goods cut-off)\r\n- `OBC` (OOG/BB cut-off)\r\n- `TCO` (Transhipment cut-off)\r\n- `STA` (Standard booking acceptance)\r\n- `SPA` (Special booking acceptance)\r\n- `CUA` (Customs Acceptance)\r\n- `AFC` (Advanced filling cut-off)\r\n\r\n**LCL Condition** : Only applicable when the `Receipt Type at Origin` is `CFS`.\r\n\r\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/reference-data/CutOffDateTimeCodeList-CS_v1.0.0.csv)",
            "example": "DCO"
          },
          "cutOffDateTime": {
            "type": "string",
            "description": "Estimated cut-off time expressed in local time with offset following ISO 8601 format.",
            "format": "date-time",
            "example": "2019-11-12T07:41:00-08:30"
          }
        },
        "description": "Cut Off Times."
      },
      "Address": {
        "title": "Address",
        "required": [
          "countryCode"
        ],
        "type": "object",
        "properties": {
          "street": {
            "maxLength": 100,
            "type": "string",
            "example": "Ruijggoordweg"
          },
          "streetNumber": {
            "maxLength": 50,
            "type": "string",
            "example": "100"
          },
          "floor": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "example": "N/A"
          },
          "postCode": {
            "maxLength": 10,
            "type": "string",
            "example": "1047 HM"
          },
          "city": {
            "maxLength": 65,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "example": "Amsterdam"
          },
          "stateRegion": {
            "maxLength": 65,
            "type": "string",
            "example": "North Holland"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "NL"
          }
        },
        "description": "An object for storing address related information."
      },
      "ErrorResponse": {
        "title": "Error Response",
        "required": [
          "errorDateTime",
          "errors",
          "httpMethod",
          "requestUri",
          "statusCode",
          "statusCodeText"
        ],
        "type": "object",
        "properties": {
          "httpMethod": {
            "type": "string",
            "description": "The HTTP method used to make the request e.g. `GET`, `POST`, etc",
            "example": "POST",
            "enum": [
              "GET",
              "HEAD",
              "POST",
              "PUT",
              "DELETE",
              "OPTION",
              "PATCH"
            ]
          },
          "requestUri": {
            "type": "string",
            "description": "The URI that was requested.",
            "example": "/v1/events"
          },
          "statusCode": {
            "type": "integer",
            "description": "The HTTP status code returned.",
            "format": "int32",
            "example": 400
          },
          "statusCodeText": {
            "maxLength": 50,
            "type": "string",
            "description": "A standard short description corresponding to the HTTP status code.",
            "example": "Bad Request"
          },
          "statusCodeMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "A long description corresponding to the HTTP status code with additional information.",
            "example": "The supplied data could not be accepted"
          },
          "providerCorrelationReference": {
            "maxLength": 100,
            "type": "string",
            "description": "A unique identifier to the HTTP request within the scope of the API provider.",
            "example": "4426d965-0dd8-4005-8c63-dc68b01c4962"
          },
          "errorDateTime": {
            "type": "string",
            "description": "The DateTime corresponding to the error occuring. Must be formatted using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.",
            "format": "date-time",
            "example": "2019-11-12T07:41:00Z"
          },
          "errors": {
            "minItems": 1,
            "type": "array",
            "description": "An array of errors provding more detail about the root cause.",
            "items": {
              "$ref": "#/components/schemas/DetailedError"
            }
          }
        }
      },
      "Vessel": {
        "title": "Vessel",
        "type": "object",
        "properties": {
          "vesselIMONumber": {
            "maxLength": 8,
            "minLength": 7,
            "pattern": "^\\d{7,8}$",
            "type": "string",
            "description": "The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel.",
            "example": "9321483"
          },
          "MMSINumber": {
            "maxLength": 9,
            "minLength": 9,
            "pattern": "^\\d{9}$",
            "type": "string",
            "description": "Maritime Mobile Service Identities (MMSIs) are nine-digit numbers used by maritime digital selective calling (DSC), automatic identification systems (AIS) and certain other equipment to uniquely identify a ship or a coast radio station.",
            "example": "278111222"
          },
          "name": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the Vessel given by the Vessel Operator and registered with IMO.",
            "example": "King of the Seas"
          },
          "flag": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The flag of the nation whose laws the vessel is registered under. This is the ISO 3166 two-letter country code.",
            "example": "DE"
          },
          "callSign": {
            "maxLength": 10,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a threeletter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.",
            "example": "NCVV"
          },
          "operatorCarrierCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists.",
            "example": "MAEU"
          },
          "operatorCarrierCodeListProvider": {
            "type": "string",
            "description": "Identifies the code list provider used for the operator and partner carriercodes.",
            "example": "NMFTA",
            "enum": [
              "SMDG",
              "NMFTA"
            ]
          }
        }
      },
      "Barge": {
        "title": "Barge",
        "type": "object",
        "properties": {
          "vesselIMONumber": {
            "maxLength": 8,
            "minLength": 7,
            "pattern": "^\\d{7,8}$",
            "type": "string",
            "description": "The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel.",
            "example": "9321483"
          },
          "MMSINumber": {
            "maxLength": 9,
            "minLength": 9,
            "pattern": "^\\d{9}$",
            "type": "string",
            "description": "Maritime Mobile Service Identities (MMSIs) are nine-digit numbers used by maritime digital selective calling (DSC), automatic identification systems (AIS) and certain other equipment to uniquely identify a ship or a coast radio station.",
            "example": "278111222"
          },
          "name": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the Vessel given by the Vessel Operator and registered with IMO.",
            "example": "King of the Seas"
          },
          "flag": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The flag of the nation whose laws the vessel is registered under. This is the ISO 3166 two-letter country code.",
            "example": "DE"
          },
          "callSign": {
            "maxLength": 10,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a threeletter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.",
            "example": "NCVV"
          },
          "operatorCarrierCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists.",
            "example": "MAEU"
          },
          "operatorCarrierCodeListProvider": {
            "type": "string",
            "description": "Identifies the code list provider used for the operator and partner carriercodes.",
            "example": "NMFTA",
            "enum": [
              "SMDG",
              "NMFTA"
            ]
          }
        }
      },
      "VesselTransport": {
        "title": "Vessel Transport",
        "required": [
          "modeOfTransport"
        ],
        "type": "object",
        "properties": {
          "modeOfTransport": {
            "type": "string",
            "description": "The mode of transport as defined by DCSA. For the Vessel Transport mode this needs to be VESSEL.",
            "enum": [
              "VESSEL"
            ]
          },
          "portVisitReference": {
            "maxLength": 50,
            "type": "string",
            "description": "The unique reference that can be used to link different `transportCallReferences` to the same port visit. The reference is provided by the port to uniquely identify a port call.",
            "example": "NLAMS1234589"
          },
          "transportCallReference": {
            "maxLength": 100,
            "type": "string",
            "description": "The unique reference for a transport call. It’s the vessel operator’s responsibility to provide the Transport Call Reference, other parties are obliged to pick it up and use it. It can take the form of Port Call References as defined in OVS Definitions Document, or alternatively a reference as defined by the vessel operator.",
            "example": "SR11111X-9321483-2107W-NLAMS-ACT-1-1"
          },
          "servicePartners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServicePartner"
            }
          },
          "universalServiceReference": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "^SR\\d{5}[A-Z]$",
            "type": "string",
            "description": "A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: SR\\d{5}[A-Z]. The letters SR followed by 5 digits, followed by a checksum-character as a capital letter from A to Z.",
            "example": "SR12345A"
          },
          "universalExportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage.",
            "example": "2103N"
          },
          "universalImportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage.",
            "example": "2103N"
          },
          "vessel": {
            "$ref": "#/components/schemas/Vessel"
          }
        },
        "description": "Transport mode Vessel."
      },
      "BargeTransport": {
        "title": "Barge Transport",
        "required": [
          "modeOfTransport"
        ],
        "type": "object",
        "properties": {
          "modeOfTransport": {
            "type": "string",
            "description": "The mode of transport as defined by DCSA. For the Barge Transport mode this needs to be BARGE.",
            "enum": [
              "BARGE"
            ]
          },
          "portVisitReference": {
            "maxLength": 50,
            "type": "string",
            "description": "The unique reference that can be used to link different `transportCallReferences` to the same port visit. The reference is provided by the port to uniquely identify a port call.",
            "example": "NLAMS1234589"
          },
          "transportCallReference": {
            "maxLength": 100,
            "type": "string",
            "description": "The unique reference for a transport call. It’s the vessel operator’s responsibility to provide the Transport Call Reference, other parties are obliged to pick it up and use it. It can take the form of Port Call References as defined in OVS Definitions Document, or alternatively a reference as defined by the vessel operator.",
            "example": "SR11111X-9321483-2107W-NLAMS-ACT-1-1"
          },
          "servicePartners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServicePartner"
            }
          },
          "universalServiceReference": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "^SR\\d{5}[A-Z]$",
            "type": "string",
            "description": "A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: SR\\d{5}[A-Z]. The letters SR followed by 5 digits, followed by a checksum-character as a capital letter from A to Z.",
            "example": "SR12345A"
          },
          "universalExportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage.",
            "example": "2103N"
          },
          "universalImportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage.",
            "example": "2103N"
          },
          "barge": {
            "$ref": "#/components/schemas/Barge"
          }
        },
        "description": "Transport mode Barge."
      },
      "OtherTransport": {
        "title": "Other Transport",
        "required": [
          "modeOfTransport"
        ],
        "type": "object",
        "properties": {
          "modeOfTransport": {
            "type": "string",
            "description": "The mode of transport as defined by DCSA. The allowed values for the Other Transport mode are:\n- `RAIL` (When the transport mode is Rail)\n- `TRUCK`(When the transport mode is Truck)\n- `RAIL_TRUCK`(When rail and truck are expected to be the mode of transport in a leg of a proposed routing)\n- `BARGE_TRUCK`(When barge and truck are expected to be the mode of transport in a leg of a proposed routing)\n- `BARGE_RAIL`(When barge and rail are expected to be the mode of transport in a leg of a proposed routing)\n- `MULTIMODAL`(When mode of transport is not really defined or unknown at this stage)\n",
            "enum": [
              "RAIL_TRUCK",
              "BARGE_TRUCK",
              "BARGE_RAIL",
              "MULTIMODAL",
              "RAIL",
              "TRUCK"
            ]
          }
        },
        "additionalProperties": false,
        "description": "Other Transport modes."
      },
      "FacilityLocation": {
        "title": "Facility Location",
        "required": [
          "facilityCode",
          "facilityCodeListProvider"
        ],
        "type": "object",
        "properties": {
          "facilityCode": {
            "maxLength": 6,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The code used for identifying the specific facility. This code does not include the UN Location Code.The definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:\r\n\r\n- for `SMDG` - the codeList used is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)\r\n- for `BIC`  - the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/)",
            "example": "ADT"
          },
          "facilityCodeListProvider": {
            "type": "string",
            "description": "The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`.\r\n- `BIC` (Requires a UN Location Code) \r\n- `SMDG` (Requires a UN Location Code)",
            "example": "SMDG",
            "enum": [
              "BIC",
              "SMDG"
            ]
          }
        },
        "description": "A way to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute."
      },
      "ServicePartner": {
        "title": "Service Partners",
        "type": "object",
        "properties": {
          "carrierCode": {
            "maxLength": 4,
            "pattern": "^\\S+$",
            "type": "string",
            "description": "The carrier code based on either the SMDG or SCAC code lists.",
            "example": "MAEU"
          },
          "carrierCodeListProvider": {
            "type": "string",
            "description": "Identifies the code list provider used for the carriercodes.",
            "example": "NMFTA",
            "enum": [
              "SMDG",
              "NMFTA"
            ]
          },
          "carrierServiceName": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the service.",
            "example": "Great Lion Service"
          },
          "carrierServiceCode": {
            "maxLength": 11,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The carrier-specific code of the service for which the schedule details are published.",
            "example": "FE1"
          },
          "carrierImportVoyageNumber": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The identifier of an import voyage. The carrier-specific identifier of the import Voyage.",
            "example": "2103S"
          },
          "carrierExportVoyageNumber": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The identifier of an export voyage. The carrier-specific identifier of the export Voyage.",
            "example": "2103N"
          }
        },
        "description": "The service code and voyage number as identified by the carriers that are partners in the service."
      },
      "ServicePartnerSchedules": {
        "title": "Service Partner Schedules",
        "required": [
          "carrierExportVoyageNumber",
          "carrierImportVoyageNumber",
          "carrierServiceCode",
          "carrierServiceName"
        ],
        "type": "object",
        "properties": {
          "carrierCode": {
            "maxLength": 4,
            "pattern": "^\\S+$",
            "type": "string",
            "description": "The carrier code based on either the SMDG or SCAC code lists.",
            "example": "MAEU"
          },
          "carrierCodeListProvider": {
            "type": "string",
            "description": "Identifies the code list provider used for the carriercodes.",
            "example": "NMFTA",
            "enum": [
              "SMDG",
              "NMFTA"
            ]
          },
          "carrierServiceName": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the service.",
            "example": "Great Lion Service"
          },
          "carrierServiceCode": {
            "maxLength": 11,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The carrier-specific code of the service for which the schedule details are published.",
            "example": "FE1"
          },
          "carrierImportVoyageNumber": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The identifier of an import voyage. The carrier-specific identifier of the import Voyage.",
            "example": "2103S"
          },
          "carrierExportVoyageNumber": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The identifier of an export voyage. The carrier-specific identifier of the export Voyage.",
            "example": "2103N"
          }
        },
        "description": "The service code and voyage number as identified by the carriers that are partners in the service."
      },
      "Leg": {
        "title": "Leg",
        "required": [
          "arrival",
          "departure"
        ],
        "type": "object",
        "properties": {
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the leg.",
            "format": "int32"
          },
          "transport": {
            "description": "The mode of transport as defined by DCSA.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/VesselTransport"
              },
              {
                "$ref": "#/components/schemas/BargeTransport"
              },
              {
                "$ref": "#/components/schemas/OtherTransport"
              }
            ]
          },
          "departure": {
            "$ref": "#/components/schemas/PlaceOfDeparture"
          },
          "arrival": {
            "$ref": "#/components/schemas/PlaceOfArrival"
          }
        },
        "description": "Leg of the Point-to-Point routing. The object \"Legs\" can be conformed by as many legs as needed and this legs must be identified with a sequence number."
      },
      "Location": {
        "title": "Location",
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "An optional name for the location.",
            "example": "Port of Amsterdam"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\r\n\r\n - 2 characters for the country code using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\r\n - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\r\n\r\nMore info can be found here: [UN/LOCODE](https://en.wikipedia.org/wiki/UN/LOCODE)",
            "example": "NLAMS"
          },
          "facility": {
            "$ref": "#/components/schemas/FacilityLocation"
          }
        },
        "description": "The location can be specified using **any** of the nested structures:\n  - `Address` (used to specify the location via an Address)\n  - `UNLocationCode`\n  - `Facility` (used to specify a location using a `facilityCode` and a 'facilityCodeListProvider')\n  It is expected that if a location is specified in multiple ways (both as an `Address` and as a `Facility`) that both ways point to the same location.\n"
      },
      "TransportCallLocation": {
        "title": "TransportCall Location",
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "An optional name for the location.",
            "example": "Port of Amsterdam"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\r\n\r\n - 2 characters for the country code using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\r\n - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\r\n\r\nMore info can be found here: [UN/LOCODE](https://en.wikipedia.org/wiki/UN/LOCODE)",
            "example": "NLAMS"
          },
          "facilitySMDGCode": {
            "maxLength": 6,
            "type": "string",
            "description": "The code used for identifying the specific facility. This code does not include the UN Location Code.\r\n\r\nThe codeList used by SMDG is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)",
            "example": "ACT"
          }
        },
        "description": "General purpose object to capture location-related data, the location can be specified in **any** of the following ways:\n  - `Address` (used to specify the location via an Address)\n  - `UNLocationCode`\n  - `FacilitySMDGCode` (used to specify a location using a `facilitySMDGCode`)\n  It is expected that if a location is specified in multiple ways (both as an `Address` and as a `Facility`) that both ways point to the same location.\n"
      },
      "PortScheduleLocation": {
        "title": "Port Schedule Location",
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "An optional name for the location.",
            "example": "Port of Amsterdam"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\r\n\r\n - 2 characters for the country code using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\r\n - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\r\n\r\nMore info can be found here: [UN/LOCODE](https://en.wikipedia.org/wiki/UN/LOCODE)",
            "example": "NLAMS"
          },
          "facilitySMDGCode": {
            "maxLength": 6,
            "type": "string",
            "description": "The code used for identifying the specific facility. This code does not include the UN Location Code.\r\n\r\nThe codeList used by SMDG is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)",
            "example": "ACT"
          }
        },
        "description": "General purpose object to capture location-related data, the location can be specified in **any** of the following ways:\n  - `UNLocationCode`\n  - `FacilitySMDGCode` (used to specify a location using a `facilitySMDGCode`)\n  It is expected that if a location is specified in multiple ways (both as a `UNLocationCode` and as a `facilitySMDGCode`) that both ways point to the same location.\n"
      },
      "DetailedError": {
        "title": "Detailed Error",
        "required": [
          "errorCodeMessage",
          "errorCodeText"
        ],
        "type": "object",
        "properties": {
          "errorCode": {
            "maximum": 9999,
            "minimum": 7000,
            "type": "integer",
            "description": "The detailed error code returned.\r\n\r\n  - `7000-7999` Technical error codes\r\n  - `8000-8999` Functional error codes\r\n  - `9000-9999` API provider-specific error codes            \r\n\r\n[Error codes as specified by DCSA](https://dcsa.atlassian.net/wiki/spaces/DTG/pages/197132308/Standard+Error+Codes).",
            "format": "int32",
            "example": 7003
          },
          "property": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the property causing the error.",
            "example": "facilityCode"
          },
          "value": {
            "maxLength": 500,
            "type": "string",
            "description": "The value of the property causing the error serialised as a string exactly as in the original request.",
            "example": "SG SIN WHS"
          },
          "jsonPath": {
            "maxLength": 500,
            "type": "string",
            "description": "A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).",
            "example": "$.location.facilityCode"
          },
          "errorCodeText": {
            "maxLength": 100,
            "type": "string",
            "description": "A standard short description corresponding to the `errorCode`.",
            "example": "invalidData"
          },
          "errorCodeMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "A long description corresponding to the `errorCode` with additional information.",
            "example": "Spaces not allowed in facility code"
          }
        },
        "description": "A detailed description of what has caused the error."
      }
    },
    "parameters": {
      "Api-Version-Major": {
        "name": "API-Version",
        "in": "header",
        "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "1"
        }
      }
    }
  }
}
