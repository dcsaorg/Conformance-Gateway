{
  "openapi": "3.0.0",
  "info": {
    "title": "DCSA OpenAPI specification for Issuance an EBL to an EBL platform.\n",
    "description": "This API is intended as an API between a carrier (the client) and a EBL Solution Platform (the server).\n\nThis API is a counter part to the [DCSA_EBL_ISS_RSP](https://app.swaggerhub.com/apis/dcsaorg/DCSA_EBL_ISS_RSP/2.0-beta1) API.\n\nWhen the document is to be surrendered, it should happen via a version of the [DCSA_EBL_SUR API](https://app.swaggerhub.com/apis/dcsaorg/DCSA_EBL_SUR/2.0-beta1).\n\nAPI specification issued by DCSA.org.\n\n### Stats API\nThe Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to the Electronic Bill of Lading API. Further details can be found [here](https://developer.dcsa.org/#/http/guides/api-guides/stats-api)\n",
    "contact": {
      "name": "Digital Container Shipping Association (DCSA)",
      "url": "https://dcsa.org",
      "email": "info@dcsa.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "2.0-beta1"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/dcsaorg/DCSA_EBL_ISS/2.0-beta1",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "paths": {
    "/v2/ebl-issuance-requests": {
      "put": {
        "tags": [
          "Issuance EBL"
        ],
        "summary": "Request issuance of an EBL",
        "description": "Submit a transport document (EBL) for issuance\n",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/issuanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Platform acknowledges the issuance request and will follow up later with a response via the DCSA_ISS_RSP API. Please see the API description for the concrete link and version.\n\nNote that the platform MUST NOT accept an issuance request twice. If the client misbehaves and attempts to complete the same transaction more than once, then the platform must ensure that at most one of these requests sees a successful response.  The rest should an error instead.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            }
          },
          "409": {
            "description": "An Issuance Request is made with a Transport Document Reference (TDR), that was used previously to request the issuance of a Transport Document (TD). The document is either already issued or an TD with the same TDR. \n\nThe eBL platform will inform the carrier when the carrier needs to act on this document again. If the issuance is pending, then the carrier will be notified via the DCSA_EBL_ISS_RSP API once the issuance process completes. If the issuance has already succeeded, the eBL platform will notify the carrier when there is a surrender request via the DCSA_EBL_SUR API.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "default": {
            "description": "Request failed for some reason.",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "legalName": {
        "maxLength": 100,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "Legal name of the party/user as shown on the endorsement chain",
        "example": "Digital Container Shipping Association"
      },
      "registrationNumber": {
        "maxLength": 100,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "Company registration number of this party. E.g. registration number on the local chamber of commerse.",
        "example": "74567837"
      },
      "locationOfRegistration": {
        "maxLength": 2,
        "minLength": 2,
        "pattern": "^[A-Z]+$",
        "type": "string",
        "description": "Country code of the location of registration according to ISO 3166-1 alpha-2",
        "example": "NL"
      },
      "transactionReference": {
        "maxLength": 100,
        "type": "string",
        "description": "Opaque server provided identifier for a given transaction.\n",
        "example": "4TkP5nvgTly0MwFrDxfIkR2rvOjkUIgzibBoKABU"
      },
      "issuanceRequest": {
        "required": [
          "document",
          "issueTo"
        ],
        "type": "object",
        "properties": {
          "document": {
            "$ref": "#/components/schemas/transportDocument"
          },
          "issueTo": {
            "$ref": "#/components/schemas/party"
          },
          "eBLVisualisationByCarrier": {
            "$ref": "#/components/schemas/supportingDocument"
          }
        },
        "description": "Details of the eBL that the carrier requests to have issued.\n\nThe `eBLVisualisationByCarrier` is an optional document, where the carrier can provide its own visualization of the eBL for the end user.  The carrier is the sole responsible party for ensuring there are no discrepencies between the eBL (the `document` attribute) and the provided visualization (the `eBLVisualisationByCarrier` attribute).\n"
      },
      "supportingDocument": {
        "required": [
          "content",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "example": "Carrier rendered copy of the EBL.pdf"
          },
          "content": {
            "type": "string",
            "description": "The actual contents of the visual rendering.",
            "format": "byte"
          }
        }
      },
      "party": {
        "required": [
          "legalName",
          "sendToPlatform"
        ],
        "type": "object",
        "properties": {
          "sendToPlatform": {
            "maxLength": 4,
            "pattern": "\\S+",
            "type": "string",
            "description": "The sendToPlatform is the EBL platform the eBL is issued to/the eBL platform of the shipper. Must be a code from https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/eblsolutionproviders.csv.",
            "example": "BOLE"
          },
          "legalName": {
            "$ref": "#/components/schemas/legalName"
          },
          "registrationNumber": {
            "$ref": "#/components/schemas/registrationNumber"
          },
          "locationOfRegistration": {
            "$ref": "#/components/schemas/locationOfRegistration"
          },
          "taxReference": {
            "pattern": "^\\S+$",
            "type": "string",
            "description": "Tax reference used in the location of registration",
            "example": "NL859951480B01"
          },
          "partyCodes": {
            "$ref": "#/components/schemas/partyCodes"
          }
        }
      },
      "partyCodes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/partyCodes_inner"
        }
      },
      "error": {
        "required": [
          "errorDateTime",
          "errors",
          "httpMethod",
          "requestUri",
          "statusCode",
          "statusCodeText"
        ],
        "type": "object",
        "properties": {
          "httpMethod": {
            "type": "string",
            "description": "The http request method type e.g. GET, POST\n",
            "example": "POST",
            "enum": [
              "GET",
              "HEAD",
              "POST",
              "PUT",
              "DELETE",
              "OPTION",
              "PATCH"
            ]
          },
          "requestUri": {
            "type": "string",
            "description": "The request URI as it was sent\n",
            "example": "/v1/events"
          },
          "statusCode": {
            "type": "integer",
            "description": "The HTTP status code\n",
            "format": "int32",
            "example": 400
          },
          "statusCodeText": {
            "maxLength": 50,
            "type": "string",
            "description": "The textual representation of the status code\n",
            "example": "Bad Request"
          },
          "errorMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "Other error information\n",
            "example": "The supplied data could not be accepted"
          },
          "providerCorrelationID": {
            "maxLength": 100,
            "type": "string",
            "description": "A unique identifier for the transaction, e.g. a UUID\n",
            "example": "4426d965-0dd8-4005-8c63-dc68b01c4962"
          },
          "errorDateTime": {
            "type": "string",
            "description": "The date and time (in ISO 8601 format) the error occurred.\n",
            "format": "date-time",
            "example": "2019-11-12T07:41:00+08:30"
          },
          "errors": {
            "minItems": 1,
            "type": "array",
            "description": "List of detailed errors, e.g. fields that could not pass validation\n",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/detailedError"
                }
              ]
            }
          }
        }
      },
      "detailedError": {
        "required": [
          "message",
          "reason"
        ],
        "type": "object",
        "properties": {
          "errorCode": {
            "maximum": 9999,
            "minimum": 7000,
            "type": "integer",
            "description": "Standard error code see http://dcsa.org/error-codes (to be created). Examples: 7003 – out or range value, 7004 -  invalid type\n",
            "format": "int32",
            "example": 7003
          },
          "field": {
            "maxLength": 500,
            "type": "string",
            "description": "The field that caused the error, e.g. a failed validation. The field can be expressed as a [JSONpath](https://github.com/json-path/JsonPath)\n",
            "example": "location.facilityCode"
          },
          "value": {
            "maxLength": 500,
            "type": "string",
            "description": "The value of the field that caused the error\n",
            "example": "SG SIN WHS"
          },
          "reason": {
            "maxLength": 100,
            "type": "string",
            "description": "High level error message\n",
            "example": "invalidData"
          },
          "message": {
            "maxLength": 200,
            "type": "string",
            "description": "Additional information as to why the error occured\n",
            "example": "Spaces not allowed in facility code"
          }
        }
      },
      "transportDocument": {
        "required": [
          "shippingInstruction"
        ],
        "type": "object",
        "description": "The document that governs the terms of carriage between shipper and carrier for maritime transportation. Two distinct types of transport documents exist:\n- Bill of Lading\n- Sea Waybill. \n",
        "allOf": [
          {
            "$ref": "#/components/schemas/transportDocumentRoot"
          },
          {
            "type": "object",
            "properties": {
              "termsAndConditions": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/termsAndConditions"
                  }
                ]
              }
            }
          },
          {
            "$ref": "#/components/schemas/bookingCore"
          },
          {
            "type": "object",
            "properties": {
              "invoicePayableAt": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/addressLocation"
                  },
                  {
                    "$ref": "#/components/schemas/unLocationLocation"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "invoicePayableAt": {
                "description": "General purpose object to capture `Invoice Payable At` location. The location can be specified in **any** of the following ways: `UN Location Code` and/or an `Address`.\n",
                "example": {
                  "locationName": "Eiffel Tower",
                  "UNLocationCode": "FRPAR"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "placeOfIssue": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/addressLocation"
                  },
                  {
                    "$ref": "#/components/schemas/unLocationLocation"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "placeOfIssue": {
                "description": "General purpose object to capture where the original Transport Document (`Bill of Lading`) will be issued. The location can be specified in **any** of the following ways: `UN Location Code` and/or an `Address`.\n",
                "example": {
                  "locationName": "DCSA Headquarters",
                  "UNLocationCode": "NLAMS"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "shippingInstruction": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/shippingInstructionResponse"
                  }
                ]
              }
            }
          },
          {
            "$ref": "#/components/schemas/charges"
          },
          {
            "$ref": "#/components/schemas/carrierClauses"
          }
        ]
      },
      "transportDocumentRoot": {
        "required": [
          "carrierCode",
          "carrierCodeListProvider",
          "issuingParty",
          "transportDocumentReference"
        ],
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "transportDocumentReference": {
                "$ref": "#/components/schemas/transportDocumentReference"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "transportDocumentCreatedDateTime": {
                "$ref": "#/components/schemas/transportDocumentCreatedDateTime"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "transportDocumentUpdatedDateTime": {
                "$ref": "#/components/schemas/transportDocumentUpdatedDateTime"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "issueDate": {
                "$ref": "#/components/schemas/issueDate"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "shippedOnBoardDate": {
                "$ref": "#/components/schemas/shippedOnBoardDate"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "receivedForShipmentDate": {
                "$ref": "#/components/schemas/receivedForShipmentDate"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "carrierCode": {
                "$ref": "#/components/schemas/carrierCode"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "carrierCodeListProvider": {
                "$ref": "#/components/schemas/carrierCodeListProvider"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "issuingParty": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/party_1"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "numberOfRiderPages": {
                "$ref": "#/components/schemas/numberOfRiderPages"
              }
            }
          }
        ]
      },
      "transportDocumentReference": {
        "maxLength": 20,
        "type": "string",
        "description": "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n"
      },
      "transportDocumentCreatedDateTime": {
        "type": "string",
        "description": "Date and time when the TransportDocument was created\n",
        "format": "date-time",
        "example": "2019-11-12T07:41:00+08:30"
      },
      "transportDocumentUpdatedDateTime": {
        "type": "string",
        "description": "Date and time when the TransportDocument was updated\n",
        "format": "date-time",
        "example": "2019-11-12T07:41:00+08:30"
      },
      "issueDate": {
        "type": "string",
        "description": "Local date when the transport document has been issued",
        "format": "date",
        "example": "2020-12-12"
      },
      "shippedOnBoardDate": {
        "type": "string",
        "description": "Date when the last container that is linked to the transport document is physically loaded onboard the vessel indicated on the transport document.",
        "format": "date",
        "example": "2020-12-12"
      },
      "receivedForShipmentDate": {
        "type": "string",
        "description": "Date when the last container linked to the transport document is physically in the terminal (customers cleared against the intended vessel).",
        "format": "date",
        "example": "2020-12-12"
      },
      "carrierCode": {
        "maxLength": 4,
        "type": "string",
        "description": "The code containing the SCAC and/or the SMDG code to specify the issuing carrier.  Details about the issuer can be given in the Document Parties entity using the party function code MS.\n",
        "example": "MMCU"
      },
      "carrierCodeListProvider": {
        "type": "string",
        "description": "The provider used for identifying the issuer Code\n",
        "example": "NMFTA",
        "enum": [
          "SMDG",
          "NMFTA"
        ]
      },
      "party_1": {
        "required": [
          "partyContactDetails",
          "partyName"
        ],
        "type": "object",
        "description": "refers to a company or a legal entity.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "partyName": {
                "$ref": "#/components/schemas/partyName"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "taxReference1": {
                "$ref": "#/components/schemas/taxReference1"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "taxReference2": {
                "$ref": "#/components/schemas/taxReference2"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "publicKey": {
                "$ref": "#/components/schemas/publicKey"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/address"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "partyContactDetails": {
                "minItems": 1,
                "type": "array",
                "description": "A list of contact details - the list cannot be empty\n",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/partyContactDetail"
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "identifyingCodes": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/identifyingCode"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "partyName": {
        "maxLength": 100,
        "type": "string",
        "description": "Name of the party.",
        "example": "Asseco Denmark"
      },
      "taxReference1": {
        "maxLength": 20,
        "type": "string",
        "description": "The identifying number of the consignee or shipper (Individual or entity) used for tax purposes.",
        "example": "CVR-25645774"
      },
      "taxReference2": {
        "maxLength": 20,
        "type": "string",
        "description": "Optional second identifying number of the consignee or shipper (Individual or entity) used for tax purposes.",
        "example": "CVR-25645774"
      },
      "publicKey": {
        "maxLength": 500,
        "type": "string",
        "description": "The public key used for a digital signature.",
        "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkFzaW"
      },
      "address": {
        "type": "object",
        "description": "An object for storing address related information\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/components/schemas/addressName"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "street": {
                "$ref": "#/components/schemas/streetName"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "floor": {
                "$ref": "#/components/schemas/floor"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "postCode": {
                "$ref": "#/components/schemas/postCode"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "city": {
                "$ref": "#/components/schemas/cityName"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "stateRegion": {
                "$ref": "#/components/schemas/stateRegion"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "country": {
                "$ref": "#/components/schemas/country"
              }
            }
          }
        ]
      },
      "addressName": {
        "maxLength": 100,
        "type": "string",
        "description": "Name of the address",
        "example": "Henrik"
      },
      "streetName": {
        "maxLength": 100,
        "type": "string",
        "description": "The name of the street of the party’s address.",
        "example": "Kronprinsessegade"
      },
      "streetNumber": {
        "maxLength": 50,
        "type": "string",
        "description": "The number of the street of the party’s address.",
        "example": "54"
      },
      "floor": {
        "maxLength": 50,
        "type": "string",
        "description": "The floor of the party’s street number.",
        "example": "5. sal"
      },
      "postCode": {
        "maxLength": 50,
        "type": "string",
        "description": "The post code of the party’s address.",
        "example": "1306"
      },
      "cityName": {
        "maxLength": 65,
        "type": "string",
        "description": "The city name of the party’s address.",
        "example": "København"
      },
      "stateRegion": {
        "maxLength": 65,
        "type": "string",
        "description": "The state/region of the party’s address.",
        "example": "N/A"
      },
      "country": {
        "maxLength": 75,
        "type": "string",
        "description": "The country of the party’s address.",
        "example": "Denmark"
      },
      "partyContactDetail": {
        "required": [
          "name"
        ],
        "type": "object",
        "description": "Contact information for a Party\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/components/schemas/name"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "phone": {
                "$ref": "#/components/schemas/phone"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "email": {
                "$ref": "#/components/schemas/email"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "$ref": "#/components/schemas/url"
              }
            }
          }
        ]
      },
      "name": {
        "maxLength": 100,
        "type": "string",
        "description": "Name of the contact",
        "example": "Henrik"
      },
      "phone": {
        "maxLength": 30,
        "type": "string",
        "description": "Phone number for the contact",
        "example": "+45 33364660"
      },
      "email": {
        "maxLength": 100,
        "type": "string",
        "description": "E-mail address for the contact",
        "example": "info@dcsa.org"
      },
      "url": {
        "maxLength": 100,
        "type": "string",
        "description": "URL for the contact",
        "example": "https://www.dcsa.org"
      },
      "identifyingCode": {
        "required": [
          "DCSAResponsibleAgencyCode",
          "partyCode"
        ],
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "DCSAResponsibleAgencyCode": {
                "$ref": "#/components/schemas/DCSAResponsibleAgencyCode"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "partyCode": {
                "$ref": "#/components/schemas/partyCode"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "codeListName": {
                "$ref": "#/components/schemas/codeListName"
              }
            }
          }
        ]
      },
      "DCSAResponsibleAgencyCode": {
        "type": "string",
        "description": "A DCSA provided code for [UN/CEFACT](https://unece.org/fileadmin/DAM/trade/untdid/d16b/tred/tred3055.htm) code list providers:\n- ISO (International Standards Organization)\n- UNECE (United Nations Economic Commission for Europe)\n- LLOYD (Lloyd's register of shipping)\n- BIC (Bureau International des Containeurs)\n- IMO (International Maritime Organization)\n- SCAC (Standard Carrier Alpha Code)\n- ITIGG (International Transport Implementation Guidelines Group)\n- ITU (International Telecommunication Union)\n- SMDG (Shipplanning Message Development Group)\n- EXIS (Exis Technologies Ltd.)\n- FMC (Federal Maritime Commission)\n- CBSA (Canada Border Services Agency)\n- DID (Decentralized Identifier)\n- LEI (Legal Entity Identifier)\n- EPI (EBL Platform Identifier)\n- ZZZ (Mutually defined)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/codelistresponsibleagencycodes.csv).\n",
        "example": "SMDG",
        "enum": [
          "ISO",
          "UNECE",
          "LLOYD",
          "BIC",
          "IMO",
          "SCAC",
          "ITIGG",
          "ITU",
          "SMDG",
          "EXIS",
          "FMC",
          "CBSA",
          "DID",
          "LEI",
          "EPI",
          "ZZZ"
        ]
      },
      "partyCode": {
        "maxLength": 100,
        "type": "string",
        "description": "Code to identify the party as provided by the agency\n",
        "example": "MSK"
      },
      "codeListName": {
        "maxLength": 100,
        "type": "string",
        "description": "The name of the list, provided by the responsible agency\n",
        "example": "LCL"
      },
      "numberOfRiderPages": {
        "type": "integer",
        "description": "The number of additional pages required to contain the goods description on a transport document. Only applicable for physical transport documents.",
        "format": "int32",
        "example": 2
      },
      "termsAndConditions": {
        "type": "string",
        "description": "Carrier general terms and conditions for the booking.\n"
      },
      "bookingCore": {
        "type": "object",
        "description": "Fields needed in both `Booking` and `TransportDocument`\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/bookingShallowCore"
          },
          {
            "$ref": "#/components/schemas/transports"
          },
          {
            "$ref": "#/components/schemas/shipmentLocations"
          }
        ]
      },
      "bookingShallowCore": {
        "type": "object",
        "description": "Fields needed in both `Booking` and `TransportDocument`\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "receiptTypeAtOrigin": {
                "$ref": "#/components/schemas/receiptTypeAtOrigin"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "deliveryTypeAtDestination": {
                "$ref": "#/components/schemas/deliveryTypeAtDestination"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "cargoMovementTypeAtOrigin": {
                "$ref": "#/components/schemas/cargoMovementTypeAtOrigin"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "cargoMovementTypeAtDestination": {
                "$ref": "#/components/schemas/cargoMovementTypeAtDestination"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "serviceContractReference": {
                "$ref": "#/components/schemas/serviceContractReference"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "vesselName": {
                "$ref": "#/components/schemas/vesselName"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "carrierServiceName": {
                "$ref": "#/components/schemas/carrierServiceName"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "carrierServiceCode": {
                "$ref": "#/components/schemas/carrierServiceCode"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "universalServiceReference": {
                "$ref": "#/components/schemas/universalServiceReference"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "carrierExportVoyageNumber": {
                "$ref": "#/components/schemas/carrierExportVoyageNumber"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "universalExportVoyageReference": {
                "$ref": "#/components/schemas/universalExportVoyageReference"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "declaredValue": {
                "$ref": "#/components/schemas/declaredValue"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "declaredValueCurrency": {
                "$ref": "#/components/schemas/declaredValueCurrency"
              }
            }
          }
        ]
      },
      "receiptTypeAtOrigin": {
        "maxLength": 3,
        "type": "string",
        "description": "Indicates the type of service offered at Origin. Options are defined in the Receipt/Delivery entity.\n- CY (Container yard (incl. rail ramp))\n- SD (Store Door)\n- CFS (Container Freight Station)\n",
        "example": "CY",
        "enum": [
          "CY",
          "SD",
          "CFS"
        ]
      },
      "deliveryTypeAtDestination": {
        "maxLength": 3,
        "type": "string",
        "description": "Indicates the type of service offered at Destination. Options are defined in the Receipt/Delivery entity.\n- CY (Container yard (incl. rail ramp))\n- SD (Store Door)\n- CFS (Container Freight Station)\n",
        "example": "CY",
        "enum": [
          "CY",
          "SD",
          "CFS"
        ]
      },
      "cargoMovementTypeAtOrigin": {
        "maxLength": 3,
        "type": "string",
        "description": "Refers to the shipment term at the loading of the cargo into the container. Options are defined in the Cargo Movement Type entity.\n- FCL (Full Container Load)\n- LCL (Less than Container Load)\n- BB (Break Bulk)\n",
        "example": "FCL",
        "enum": [
          "FCL",
          "LCL",
          "BB"
        ]
      },
      "cargoMovementTypeAtDestination": {
        "maxLength": 3,
        "type": "string",
        "description": "Refers to the shipment term at the unloading of the cargo out of the container. Options are defined in the Cargo Movement Type entity.\n- FCL (Full Container Load)\n- LCL (Less than Container Load)\n- BB (Break Bulk)\n",
        "example": "FCL",
        "enum": [
          "FCL",
          "LCL",
          "BB"
        ]
      },
      "serviceContractReference": {
        "maxLength": 30,
        "type": "string",
        "description": "Reference number for agreement between shipper and carrier through which the shipper commits to provide a certain minimum quantity of cargo over a fixed period, and the carrier commits to a certain rate or rate schedule."
      },
      "vesselName": {
        "maxLength": 35,
        "type": "string",
        "description": "The name of the Vessel given by the Vessel Operator and registered with IMO.\n",
        "example": "King of the Seas"
      },
      "carrierServiceName": {
        "maxLength": 50,
        "type": "string",
        "description": "The name of a service as specified by the carrier\n",
        "example": "Great Lion Service"
      },
      "carrierServiceCode": {
        "maxLength": 5,
        "type": "string",
        "description": "The Carrier specific code of the service for which the schedule details are published.\n",
        "example": "FE1"
      },
      "universalServiceReference": {
        "maxLength": 8,
        "pattern": "SR\\d{5}[A-Z]",
        "type": "string",
        "description": "A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.\n",
        "example": "SR12345A"
      },
      "carrierExportVoyageNumber": {
        "maxLength": 50,
        "type": "string",
        "description": "The identifier of an export voyage. The vessel operator-specific identifier of the export Voyage.\n",
        "example": "2103S"
      },
      "universalExportVoyageReference": {
        "pattern": "\\d{2}[0-9A-Z]{2}[NEWS]",
        "type": "string",
        "description": "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWS]`\n- `2 digits` for the year\n- `2 alphanumeric characters` for the sequence number of the voyage\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est or `S`outh).\n",
        "example": "2103N"
      },
      "declaredValue": {
        "type": "number",
        "description": "The value of the cargo that the shipper declares to avoid the carrier&apos;s limitation of liability and \"Ad Valorem\" freight, i.e. freight which is calculated based on the value of the goods declared by the shipper.",
        "format": "float",
        "example": 1231.1
      },
      "declaredValueCurrency": {
        "maxLength": 3,
        "type": "string",
        "description": "The currency used for the declared value, using the 3-character code defined by ISO 4217.",
        "example": "DKK"
      },
      "transports": {
        "type": "object",
        "properties": {
          "transports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/transport"
            }
          }
        }
      },
      "transport": {
        "required": [
          "dischargeLocation",
          "loadLocation",
          "plannedArrivalDate",
          "plannedDepartureDate",
          "transportPlanStage",
          "transportPlanStageSequenceNumber"
        ],
        "type": "object",
        "description": "A list of transports sorted by ShipmentTransport sequenceNumber",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "transportPlanStage": {
                "$ref": "#/components/schemas/transportPlanStage"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "transportPlanStageSequenceNumber": {
                "$ref": "#/components/schemas/transportPlanStageSequenceNumber"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "loadLocation": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/addressLocation"
                  },
                  {
                    "$ref": "#/components/schemas/unLocationLocation"
                  },
                  {
                    "$ref": "#/components/schemas/facilityLocation"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "loadLocation": {
                "description": "General purpose object to capture the `Load Location`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\n",
                "example": {
                  "locationName": "Shanghai Shengdong International Container Terminal",
                  "UNLocationCode": "CNSGH",
                  "facilityCode": "SHENG",
                  "facilityCodeListProvider": "SMDG"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "dischargeLocation": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/addressLocation"
                  },
                  {
                    "$ref": "#/components/schemas/unLocationLocation"
                  },
                  {
                    "$ref": "#/components/schemas/facilityLocation"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "dischargeLocation": {
                "description": "General purpose object to capture the `Discharge Location`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\n",
                "example": {
                  "locationName": "Transnet Port Terminals Cape Town",
                  "UNLocationCode": "ZACPT",
                  "facilityCode": "TNCT",
                  "facilityCodeListProvider": "SMDG"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "plannedDepartureDate": {
                "$ref": "#/components/schemas/plannedDepartureDate"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "plannedArrivalDate": {
                "$ref": "#/components/schemas/plannedArrivalDate"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "modeOfTransport": {
                "$ref": "#/components/schemas/modeOfTransport"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "vesselName": {
                "$ref": "#/components/schemas/vesselName"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "vesselIMONumber": {
                "$ref": "#/components/schemas/vesselIMONumber"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "carrierImportVoyageNumber": {
                "$ref": "#/components/schemas/carrierImportVoyageNumber"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "universalImportVoyageReference": {
                "$ref": "#/components/schemas/universalImportVoyageReference"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "carrierExportVoyageNumber": {
                "$ref": "#/components/schemas/carrierExportVoyageNumber"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "universalExportVoyageReference": {
                "$ref": "#/components/schemas/universalExportVoyageReference"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "isUnderShippersResponsibility": {
                "$ref": "#/components/schemas/isUnderShippersResponsibility"
              }
            }
          }
        ]
      },
      "transportPlanStage": {
        "type": "string",
        "description": "Code qualifying a specific stage of transport e.g. pre-carriage, main carriage transport or on-carriage transport\n- PRC (Pre-Carriage)\n- MNC (Main Carriage Transport)\n- ONC (On-Carriage Transport)\n",
        "example": "PRC",
        "enum": [
          "PRC",
          "MNC",
          "ONC"
        ]
      },
      "transportPlanStageSequenceNumber": {
        "type": "integer",
        "description": "Sequence number of the transport plan stage\n",
        "format": "int32",
        "example": 5
      },
      "addressLocation": {
        "required": [
          "address"
        ],
        "type": "object",
        "description": "An interface used to express a location using an `Address` object\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "locationName": {
                "$ref": "#/components/schemas/locationName"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "description": "Address related information",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/address"
                  }
                ]
              }
            }
          }
        ]
      },
      "locationName": {
        "maxLength": 100,
        "type": "string",
        "description": "The name of the location.",
        "example": "Port of Amsterdam"
      },
      "unLocationLocation": {
        "required": [
          "UNLocationCode"
        ],
        "type": "object",
        "description": "An interface used to express a location using a `Un Location Code`\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "locationName": {
                "$ref": "#/components/schemas/locationName"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "UNLocationCode": {
                "$ref": "#/components/schemas/UNLocationCode"
              }
            }
          }
        ]
      },
      "UNLocationCode": {
        "maxLength": 5,
        "type": "string",
        "description": "The UN Location code specifying where the place is located.",
        "example": "FRPAR"
      },
      "facilityLocation": {
        "required": [
          "facilityCode",
          "facilityCodeListProvider"
        ],
        "type": "object",
        "description": "An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "locationName": {
                "$ref": "#/components/schemas/locationName"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "UNLocationCode": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UNLocationCode"
                  },
                  {
                    "description": "The UN Location code specifying where the place is located. This field is conditionally mandatory depending on the value of the `facilityCodeListProvider` field.\n"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "facilityCode": {
                "$ref": "#/components/schemas/facilityCode"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "facilityCodeListProvider": {
                "$ref": "#/components/schemas/facilityCodeListProvider"
              }
            }
          }
        ]
      },
      "facilityCode": {
        "maxLength": 6,
        "type": "string",
        "description": "The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\n",
        "nullable": false,
        "example": "ADT"
      },
      "facilityCodeListProvider": {
        "type": "string",
        "description": "The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\n- BIC (Requires a UN Location Code)\n- SMDG (Requires a UN Location Code)\n",
        "example": "SMDG",
        "enum": [
          "BIC",
          "SMDG"
        ]
      },
      "plannedDepartureDate": {
        "type": "string",
        "description": "The planned date of departure.\n",
        "format": "date"
      },
      "plannedArrivalDate": {
        "type": "string",
        "description": "The planned date of arrival.\n",
        "format": "date"
      },
      "modeOfTransport": {
        "type": "string",
        "description": "The mode of transport as defined by DCSA.\n",
        "enum": [
          "VESSEL",
          "RAIL",
          "TRUCK",
          "BARGE"
        ]
      },
      "vesselIMONumber": {
        "maxLength": 7,
        "type": "string",
        "description": "The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel\n",
        "example": "9321483"
      },
      "carrierImportVoyageNumber": {
        "maxLength": 50,
        "type": "string",
        "description": "The identifier of an import voyage. The vessel operator-specific identifier of the import Voyage.\n",
        "example": "2103N"
      },
      "universalImportVoyageReference": {
        "pattern": "\\d{2}[0-9A-Z]{2}[NEWS]",
        "type": "string",
        "description": "A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWS]`\n- `2 digits` for the year\n- `2 alphanumeric characters` for the sequence number of the voyage\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est or `S`outh).\n",
        "example": "2103N"
      },
      "isUnderShippersResponsibility": {
        "type": "boolean",
        "description": "Indicator whether mode of transportation for pre-carriage (e.g. truck, barge, rail) is under shipper's responsibility\n",
        "example": false
      },
      "shipmentLocations": {
        "type": "object",
        "properties": {
          "shipmentLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/shipmentLocation"
            }
          }
        }
      },
      "shipmentLocation": {
        "required": [
          "location",
          "shipmentLocationTypeCode"
        ],
        "type": "object",
        "description": "maps the relationship between Shipment and Location, e.g., the `Place of Receipt` and the `Place of Delivery` for a specific shipment. This is a reusable object between `Booking` and `Transport Document`\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "location": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/addressLocation"
                  },
                  {
                    "$ref": "#/components/schemas/unLocationLocation"
                  },
                  {
                    "$ref": "#/components/schemas/facilityLocation"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "location": {
                "description": "General purpose object to capture the location in the `ShipmentLocation`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\n",
                "example": {
                  "locationName": "CMP Container Terminal Copenhagen",
                  "UNLocationCode": "DKCPH",
                  "facilityCode": "CMPDK",
                  "facilityCodeListProvider": "SMDG"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "shipmentLocationTypeCode": {
                "$ref": "#/components/schemas/shipmentLocationTypeCode"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "eventDateTime": {
                "$ref": "#/components/schemas/eventLocationDateTime"
              }
            }
          }
        ]
      },
      "shipmentLocationTypeCode": {
        "type": "string",
        "description": "Links to the Location Type Code defined by DCSA.\n- PRE (Place of Receipt)\n- POL (Port of Loading)\n- POD (Port of Discharge)\n- PDE (Place of Delivery)\n- PCF (Pre-carriage From)\n- PSR (Pre-carriage under shipper’s responsibility)\n- OIR (Onward In-land Routing)\n- DRL (Depot release location)\n- ORI (Origin of goods)\n- IEL (Container intermediate export stop off location)\n- PTP (Prohibited transshipment port)\n- RTP (Requested transshipment port)\n- FCD (Full container drop-off location)\n- ECP (Empty container pick-up location)\n",
        "example": "PRE",
        "enum": [
          "PRE",
          "POL",
          "POD",
          "PDE",
          "PCF",
          "PSR",
          "OIR",
          "DRL",
          "ORI",
          "IEL",
          "PTP",
          "RTP",
          "FCD",
          "ECP"
        ]
      },
      "eventLocationDateTime": {
        "type": "string",
        "description": "A date when the event is taking place at the location\n",
        "format": "date-time",
        "example": "2021-11-03T10:23:00+01:00"
      },
      "shippingInstructionResponse": {
        "type": "object",
        "description": "The entire Shipping Instruction object with all nested objects including the confirmed booking(s).\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/shippingInstructionRefStatus"
          },
          {
            "$ref": "#/components/schemas/shippingInstructionRequest"
          }
        ]
      },
      "shippingInstructionRefStatus": {
        "required": [
          "documentStatus",
          "shippingInstructionCreatedDateTime",
          "shippingInstructionReference",
          "shippingInstructionUpdatedDateTime"
        ],
        "type": "object",
        "description": "The `shippingInstructionReference` along with the `documentStatus`, created and updated timestamps is returned\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "shippingInstructionReference": {
                "$ref": "#/components/schemas/shippingInstructionReference"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "documentStatus": {
                "$ref": "#/components/schemas/eblDocumentStatus"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "shippingInstructionCreatedDateTime": {
                "$ref": "#/components/schemas/shippingInstructionCreatedDateTime"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "shippingInstructionUpdatedDateTime": {
                "$ref": "#/components/schemas/shippingInstructionUpdatedDateTime"
              }
            }
          }
        ]
      },
      "shippingInstructionReference": {
        "maxLength": 100,
        "type": "string",
        "description": "The identifier for a shipping instruction provided by the carrier for system purposes.\n",
        "example": "e0559d83-00e2-438e-afd9-fdd610c1a008"
      },
      "eblDocumentStatus": {
        "type": "string",
        "description": "The status of the Bill of Lading. Possible values are:\n- RECE (Received)\n- PENU (Pending Update)\n- DRFT (Draft)\n- PENA (Pending Approval)\n- APPR (Approved)\n- ISSU (Issued)\n- SURR (Surrendered)\n- VOID (Void)\n\nMore details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.\n",
        "example": "RECE",
        "enum": [
          "RECE",
          "PENU",
          "DRFT",
          "PENA",
          "APPR",
          "ISSU",
          "SURR",
          "VOID"
        ]
      },
      "shippingInstructionCreatedDateTime": {
        "type": "string",
        "description": "Date and time when the ShippingInstruction was created\n",
        "format": "date-time",
        "example": "2019-11-12T07:41:00+08:30"
      },
      "shippingInstructionUpdatedDateTime": {
        "type": "string",
        "description": "Date and time when the ShippingInstruction was updated\n",
        "format": "date-time",
        "example": "2019-11-12T07:41:00+08:30"
      },
      "shippingInstructionRequest": {
        "type": "object",
        "description": "The Shipping Instruction is an enrichment to the original booking shared by the shipper to the carrier. The shipping instruction includes volume or weight, cargo items, shipping dates, origin, destination, and other special instructions. The information given by the shipper through the shipping instruction is the information required to create a Transport Document.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/shippingInstructionShallow"
          },
          {
            "type": "object",
            "properties": {
              "carrierBookingReference": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/carrierBookingReference"
                  },
                  {
                    "description": "The associated booking number provided by the carrier. To be used if **all** `Consignment Items` belong to the same Booking.\n\n**Cannot** be used in combination with `Consignment Item` carrierBookingReference\n"
                  }
                ]
              }
            }
          },
          {
            "$ref": "#/components/schemas/shippingInstructionDeep"
          }
        ]
      },
      "shippingInstructionShallow": {
        "required": [
          "isElectronic",
          "isShippedOnBoardType",
          "isToOrder"
        ],
        "type": "object",
        "description": "The part of the ShippingInstruction that contains simple fields (no nested objects)\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "amendToTransportDocument": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/amendToTransportDocument"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "transportDocumentTypeCode": {
                "$ref": "#/components/schemas/transportDocumentTypeCode"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "isShippedOnBoardType": {
                "$ref": "#/components/schemas/isShippedOnBoardType"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "numberOfCopiesWithCharges": {
                "$ref": "#/components/schemas/numberOfCopiesWithCharges"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "numberOfCopiesWithoutCharges": {
                "$ref": "#/components/schemas/numberOfCopiesWithoutCharges"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "numberOfOriginalsWithCharges": {
                "$ref": "#/components/schemas/numberOfOriginalsWithCharges"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "numberOfOriginalsWithoutCharges": {
                "$ref": "#/components/schemas/numberOfOriginalsWithoutCharges"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "isElectronic": {
                "$ref": "#/components/schemas/isElectronic"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "isToOrder": {
                "$ref": "#/components/schemas/isToOrder"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "displayedNameForPlaceOfReceipt": {
                "maxItems": 5,
                "type": "array",
                "description": "The address of the `Place of Receipt` to be displayed on the transport document.\n",
                "items": {
                  "$ref": "#/components/schemas/displayedName"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "displayedNameForPortOfLoad": {
                "maxItems": 5,
                "type": "array",
                "description": "The address of the `Port of Load` to be displayed on the transport document.\n",
                "items": {
                  "$ref": "#/components/schemas/displayedName"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "displayedNameForPortOfDischarge": {
                "maxItems": 5,
                "type": "array",
                "description": "The address of the `Port of Discharge` to be displayed on the transport document.\n",
                "items": {
                  "$ref": "#/components/schemas/displayedName"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "displayedNameForPlaceOfDelivery": {
                "maxItems": 5,
                "type": "array",
                "description": "The address of the `Place of Delivery` to be displayed on the transport document.\n",
                "items": {
                  "$ref": "#/components/schemas/displayedName"
                }
              }
            }
          }
        ]
      },
      "amendToTransportDocument": {
        "maxLength": 20,
        "type": "string",
        "description": "This field can be used to reference a Transport Document that is issued (documentStatus = `ISSU`) in order to amend changes.\n\nThe field cannot be modified once set.\n"
      },
      "transportDocumentTypeCode": {
        "type": "string",
        "description": "Specifies the type of the transport document\n- BOL (Bill of Lading)\n- SWB (Sea Waybill)\n",
        "example": "SWB",
        "enum": [
          "BOL",
          "SWB"
        ]
      },
      "isShippedOnBoardType": {
        "type": "boolean",
        "description": "Specifies whether the Transport document is a received for shipment, or shipped on board.",
        "example": true
      },
      "numberOfCopiesWithCharges": {
        "type": "integer",
        "description": "The requested number of copies of the Transport document to be issued by the carrier including charges. Only applicable for physical documents",
        "format": "int32",
        "example": 2
      },
      "numberOfCopiesWithoutCharges": {
        "type": "integer",
        "description": "The requested number of copies of the Transport document to be issued by the carrier **NOT** including charges. Only applicable for physical documents",
        "format": "int32",
        "example": 2
      },
      "numberOfOriginalsWithCharges": {
        "type": "integer",
        "description": "Number of original copies of the negotiable bill of lading that has been requested by the customer with Charges.\n",
        "format": "int32",
        "example": 1
      },
      "numberOfOriginalsWithoutCharges": {
        "type": "integer",
        "description": "Number of original copies of the negotiable bill of lading that has been requested by the customer without Charges.\n",
        "format": "int32",
        "example": 1
      },
      "isElectronic": {
        "type": "boolean",
        "description": "An indicator whether the transport document is electronically transferred.",
        "example": true
      },
      "isToOrder": {
        "type": "boolean",
        "description": "Indicates whether the transport document is issued `to order` or not\n",
        "example": false
      },
      "displayedName": {
        "maxLength": 35,
        "type": "string",
        "description": "A line of the address to be displayed on the transport document.\n"
      },
      "carrierBookingReference": {
        "maxLength": 35,
        "type": "string",
        "description": "A set of unique characters provided by carrier to identify a booking.",
        "example": "ABC709951"
      },
      "shippingInstructionDeep": {
        "required": [
          "consignmentItems",
          "utilizedTransportEquipments"
        ],
        "type": "object",
        "description": "The part of the ShippingInstruction that contains the nested objects.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "placeOfIssue": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/addressLocation"
                  },
                  {
                    "$ref": "#/components/schemas/unLocationLocation"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "placeOfIssue": {
                "description": "General purpose object to capture where the original Transport Document (`Bill of Lading`) will be issued. The location can be specified in **any** of the following ways: `UN Location Code` and/or an `Address`.\n",
                "example": {
                  "locationName": "DCSA Headquarters",
                  "UNLocationCode": "NLAMS"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/consignmentItems"
          },
          {
            "$ref": "#/components/schemas/utilizedTransportEquipments"
          },
          {
            "$ref": "#/components/schemas/documentParties"
          },
          {
            "$ref": "#/components/schemas/references"
          }
        ]
      },
      "consignmentItems": {
        "type": "object",
        "properties": {
          "consignmentItems": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/consignmentItem"
            }
          }
        }
      },
      "consignmentItem": {
        "required": [
          "HSCode",
          "cargoItems",
          "descriptionOfGoods"
        ],
        "type": "object",
        "description": "Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "carrierBookingReference": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/carrierBookingReference"
                  },
                  {
                    "description": "The associated booking number provided by the carrier for this `Consignment Item`.\n\nWhen multiple `carrierBookingReferences` are used then the bookings referred to must all contain the same:\n- transportPlan\n- shipmentLocations\n- receiptTypeAtOrigin\n- deliveryTypeAtDestination\n- cargoMovementTypeAtOrigin\n- cargoMovementTypeAtDestination\n- serviceContractReference\n- termsAndConditions\n\n**Cannot** be used in combination with Shipping Instruction header level carrierBookingReference\n"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "weight": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/weight"
                  },
                  {
                    "description": "The total weight of all the `CargoItems` listed in the `ConsignmentItem`. Excludes the tare weight of the container(s).\n"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "volume": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/volume"
                  },
                  {
                    "description": "The total volume of all the `CargoItems` listed in the `ConsignmentItem`.\n"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "weightUnit": {
                "$ref": "#/components/schemas/weightUnit"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "volumeUnit": {
                "$ref": "#/components/schemas/volumeUnit"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "descriptionOfGoods": {
                "$ref": "#/components/schemas/descriptionOfGoods"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "HSCode": {
                "$ref": "#/components/schemas/HSCode"
              }
            }
          },
          {
            "$ref": "#/components/schemas/cargoItems"
          },
          {
            "$ref": "#/components/schemas/references"
          }
        ]
      },
      "weight": {
        "type": "number",
        "description": "The total weight of the cargo including packaging items being carried in the container(s). Excludes the tare weight of the container(s).\n",
        "format": "float",
        "example": 13000.3
      },
      "volume": {
        "type": "number",
        "description": "Calculated by multiplying the width, height, and length of the packed cargo.\n",
        "format": "float",
        "example": 12
      },
      "weightUnit": {
        "type": "string",
        "description": "The unit of measure which can be expressed in imperial or metric terms\n- KGM (Kilograms)\n- LBR (Pounds)\n",
        "example": "KGM",
        "enum": [
          "KGM",
          "LBR"
        ]
      },
      "volumeUnit": {
        "type": "string",
        "description": "The unit of measure which can be expressed in either imperial or metric terms\n- FTQ (Cubic meter)\n- MTQ (Cubic foot)\n",
        "example": "MTQ",
        "enum": [
          "MTQ",
          "FTQ"
        ]
      },
      "descriptionOfGoods": {
        "type": "string",
        "description": "The cargo description are details which accurately and properly describe the cargo being shipped in the container(s) as provided by the shipper."
      },
      "HSCode": {
        "maxLength": 10,
        "type": "string",
        "description": "Used by customs to classify the product being shipped."
      },
      "cargoItems": {
        "type": "object",
        "properties": {
          "cargoItems": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cargoItem"
            }
          }
        }
      },
      "cargoItem": {
        "required": [
          "equipmentReference",
          "numberOfPackages",
          "packageCode",
          "weight",
          "weightUnit"
        ],
        "type": "object",
        "description": "A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.",
        "allOf": [
          {
            "$ref": "#/components/schemas/cargoLineItems"
          },
          {
            "type": "object",
            "properties": {
              "equipmentReference": {
                "$ref": "#/components/schemas/equipmentReference"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "weight": {
                "$ref": "#/components/schemas/weight"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "volume": {
                "$ref": "#/components/schemas/volume"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "weightUnit": {
                "$ref": "#/components/schemas/weightUnit"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "volumeUnit": {
                "$ref": "#/components/schemas/volumeUnit"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "numberOfPackages": {
                "$ref": "#/components/schemas/numberOfPackages"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "packageCode": {
                "$ref": "#/components/schemas/packageCode"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "packageNameOnBL": {
                "$ref": "#/components/schemas/packageNameOnBL"
              }
            }
          }
        ]
      },
      "cargoLineItems": {
        "type": "object",
        "properties": {
          "cargoLineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cargoLineItem"
            }
          }
        }
      },
      "cargoLineItem": {
        "required": [
          "cargoLineItemID",
          "shippingMarks"
        ],
        "type": "object",
        "description": "identifies the specific details of packages within a cargo item.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "cargoLineItemID": {
                "$ref": "#/components/schemas/cargoLineItemID"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "shippingMarks": {
                "$ref": "#/components/schemas/shippingMarks"
              }
            }
          }
        ]
      },
      "cargoLineItemID": {
        "type": "string",
        "description": "Identifies the cargo line item (package) within the cargo. The cargo line item ID is provided by the shipper and is used to define the stuffing. Cargo line items belonging to the same cargo items are stuffed in the same container."
      },
      "shippingMarks": {
        "type": "string",
        "description": "The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the shipper."
      },
      "equipmentReference": {
        "maxLength": 15,
        "type": "string",
        "description": "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 “Container with non-ISO identification” from SMDG.\n",
        "example": "APZU4812090"
      },
      "numberOfPackages": {
        "type": "integer",
        "description": "Specifies the number of packages associated with this cargo item",
        "format": "int32",
        "example": 18
      },
      "packageCode": {
        "maxLength": 3,
        "type": "string",
        "description": "The unique identifier for the package type",
        "example": "5H4"
      },
      "packageNameOnBL": {
        "maxLength": 50,
        "type": "string",
        "description": "To provide package description displayed on the BL\n",
        "example": "Bags"
      },
      "references": {
        "type": "object",
        "properties": {
          "references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reference"
            }
          }
        }
      },
      "reference": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "description": "references provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "$ref": "#/components/schemas/referenceType"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "$ref": "#/components/schemas/referenceValue"
              }
            }
          }
        ]
      },
      "referenceType": {
        "type": "string",
        "description": "The reference type codes defined by DCSA.\n- FF (Freight Forwarder’s Reference)\n- SI (Shipper’s Reference)\n- PO (Purchase Order Reference)\n- CR (Customer’s Reference)\n- AAO (Consignee’s Reference)\n- ECR (Empty container release reference)\n- CSI (Customer shipment ID)\n- BPR (Booking party reference number)\n- BID (Booking Request ID)\n- RUC (Registro Único del Contribuyente)\n- DUE (Declaração Única de Exportação)\n- CER (Canadian Export Reporting System)\n- AES (Automated Export System)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv). Be aware that the list is a subset of the possible values.\n",
        "example": "FF",
        "enum": [
          "FF",
          "SI",
          "PO",
          "CR",
          "AAO",
          "ECR",
          "CSI",
          "BPR",
          "BID",
          "RUC",
          "DUE",
          "CER",
          "AES"
        ]
      },
      "referenceValue": {
        "maxLength": 100,
        "type": "string",
        "description": "The actual value of the reference."
      },
      "utilizedTransportEquipments": {
        "type": "object",
        "properties": {
          "utilizedTransportEquipments": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/utilizedTransportEquipment"
            }
          }
        }
      },
      "utilizedTransportEquipment": {
        "required": [
          "cargoGrossWeight",
          "cargoGrossWeightUnit",
          "equipment",
          "isShipperOwned"
        ],
        "type": "object",
        "description": "Specifies the container (`equipment`), the total weight and the `seals` used\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "equipment": {
                "$ref": "#/components/schemas/equipment"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "cargoGrossWeight": {
                "$ref": "#/components/schemas/cargoGrossWeight"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "cargoGrossWeightUnit": {
                "$ref": "#/components/schemas/weightUnit"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "cargoGrossVolume": {
                "$ref": "#/components/schemas/cargoGrossVolume"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "cargoGrossVolume": {
                "description": "The grand total volume of the cargo per container, which can be expressed in imperial or metric terms, as provided by the carrier.\n"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "cargoGrossVolumeUnit": {
                "$ref": "#/components/schemas/volumeUnit"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "numberOfPackages": {
                "$ref": "#/components/schemas/numberOfPackages"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "numberOfPackages": {
                "description": "Specifies the number of packages associated with an equipment (container)\n"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "isShipperOwned": {
                "$ref": "#/components/schemas/isShipperOwned"
              }
            }
          },
          {
            "$ref": "#/components/schemas/seals"
          }
        ]
      },
      "equipment": {
        "required": [
          "equipmentReference"
        ],
        "type": "object",
        "description": "used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' Dry Freight Container, but several different versions exist.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "equipmentReference": {
                "$ref": "#/components/schemas/equipmentReference"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "ISOEquipmentCode": {
                "$ref": "#/components/schemas/ISOEquipmentCode"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "tareWeight": {
                "$ref": "#/components/schemas/tareWeight"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "weightUnit": {
                "$ref": "#/components/schemas/weightUnit"
              }
            }
          }
        ]
      },
      "ISOEquipmentCode": {
        "maxLength": 4,
        "type": "string",
        "description": "Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.",
        "example": "22GP"
      },
      "tareWeight": {
        "type": "number",
        "description": "The weight of an empty container (gross container weight).",
        "format": "float",
        "example": 4800
      },
      "cargoGrossWeight": {
        "type": "number",
        "description": "The grand total weight of the cargo and weight per container(s) including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper. Excludes the tare weight of the container(s).'\n",
        "format": "float",
        "example": 12000
      },
      "cargoGrossVolume": {
        "type": "number",
        "description": "The grand total volume of the commodity\n",
        "format": "float",
        "example": 120
      },
      "isShipperOwned": {
        "type": "boolean",
        "description": "Indicates whether the container is shipper owned (SOC).",
        "example": true
      },
      "seals": {
        "type": "object",
        "properties": {
          "seals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/seal"
            }
          }
        }
      },
      "seal": {
        "required": [
          "number"
        ],
        "type": "object",
        "description": "addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This seal is meant to stay on until the shipment equipment reaches its final destination.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "number": {
                "$ref": "#/components/schemas/sealNumber"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "$ref": "#/components/schemas/sealSource"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "$ref": "#/components/schemas/sealType"
              }
            }
          }
        ]
      },
      "sealNumber": {
        "maxLength": 15,
        "type": "string",
        "description": "Identifies a seal affixed to the container."
      },
      "sealSource": {
        "type": "string",
        "description": "The source of the seal, namely who has affixed the seal. This attribute links to the Seal Source ID defined in the Seal Source reference data entity.\n- CAR (Carrier)\n- SHI (Shipper)\n- PHY (Phytosanitary)\n- VET (Veterinary)\n- CUS (Customs)\n",
        "example": "CUS",
        "enum": [
          "CAR",
          "SHI",
          "PHY",
          "VET",
          "CUS"
        ]
      },
      "sealType": {
        "type": "string",
        "description": "The type of seal. This attribute links to the Seal Type ID defined in the Seal Type reference data entity.\n- KLP (Keyless padlock)\n- BLT (Bolt)\n- WIR (Wire)\n",
        "example": "WIR",
        "enum": [
          "KLP",
          "BLT",
          "WIR"
        ]
      },
      "documentParties": {
        "type": "object",
        "properties": {
          "documentParties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/documentParty"
            }
          }
        }
      },
      "documentParty": {
        "required": [
          "isToBeNotified",
          "party",
          "partyFunction"
        ],
        "type": "object",
        "description": "stores the parties involved in the transport document.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "party": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/party_1"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "partyFunction": {
                "$ref": "#/components/schemas/partyFunction"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "displayedAddress": {
                "maxItems": 5,
                "type": "array",
                "description": "If switch to paper is needed then the `displayedAddress` object **MUST** be provided. In case it is missing it is not possible to switch the B/L to paper later in the process.\n",
                "items": {
                  "$ref": "#/components/schemas/addressLine"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "isToBeNotified": {
                "$ref": "#/components/schemas/isToBeNotified"
              }
            }
          }
        ]
      },
      "partyFunction": {
        "type": "string",
        "description": "Specifies the role of the party in the context of the given Shipping Instruction.\n- OS (Original shipper)\n- CN (Consignee)\n- COW (Invoice payer on behalf of the consignor (shipper))\n- COX (Invoice payer on behalf of the consignee)\n- MS (Document/message issuer/sender)\n- N1 (First Notify Party)\n- N2 (Second Notify Party)\n- NI (Other Notify Party)\n- DDR (Consignor's freight forwarder)\n- DDS (Consignee's freight forwarder)\n- HE (Carrier booking office (transportation office))\n- SCO (Service contract owner - Defined by DCSA)\n- BA (Booking Agency)\n- ENR (Envelope Receiver)\n",
        "example": "DDS",
        "enum": [
          "OS",
          "CN",
          "COW",
          "COX",
          "MS",
          "N1",
          "N2",
          "NI",
          "DDR",
          "DDS",
          "HE",
          "SCO",
          "BA",
          "ENR"
        ]
      },
      "addressLine": {
        "maxLength": 35,
        "type": "string",
        "description": "A single address line to be used when a B/L needs to be printed.\n",
        "example": "Kronprincessegade 54"
      },
      "isToBeNotified": {
        "type": "boolean",
        "description": "Used to decide whether the party will be notified of the arrival of the cargo.",
        "example": true
      },
      "charges": {
        "type": "object",
        "properties": {
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/charge"
            }
          }
        }
      },
      "charge": {
        "required": [
          "calculationBasis",
          "chargeType",
          "currencyAmount",
          "currencyCode",
          "paymentTermCode",
          "quantity",
          "unitPrice"
        ],
        "type": "object",
        "description": "addresses the monetary value of freight and other service charges for a transport document.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "chargeType": {
                "$ref": "#/components/schemas/chargeType"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "currencyAmount": {
                "$ref": "#/components/schemas/currencyAmount"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "currencyCode": {
                "$ref": "#/components/schemas/currencyCode"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "paymentTermCode": {
                "$ref": "#/components/schemas/paymentTermCode"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "calculationBasis": {
                "$ref": "#/components/schemas/calculationBasis"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "unitPrice": {
                "$ref": "#/components/schemas/unitPrice"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "quantity": {
                "$ref": "#/components/schemas/quantity"
              }
            }
          }
        ]
      },
      "chargeType": {
        "maxLength": 20,
        "type": "string",
        "description": "Free text field describing the charge type to apply\n"
      },
      "currencyAmount": {
        "type": "number",
        "description": "The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.",
        "format": "float",
        "example": 1012.12
      },
      "currencyCode": {
        "maxLength": 3,
        "type": "string",
        "description": "The currency for the charge, using a 3-character code (ISO 4217).",
        "example": "DKK"
      },
      "paymentTermCode": {
        "type": "string",
        "description": "Indicates whether freight & charges are due for payment before the shipment is effected, practically before the transport document is released to shipper (Prepaid) or before the shipment is finalized meaning cargo released to consignee (Collect)\n- PRE (Prepaid)\n- COL (Collect)\n",
        "example": "PRE",
        "enum": [
          "PRE",
          "COL"
        ]
      },
      "calculationBasis": {
        "maxLength": 50,
        "type": "string",
        "description": "The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.",
        "example": "Per day"
      },
      "unitPrice": {
        "type": "number",
        "description": "The unit price of this charge item in the currency of the charge.",
        "format": "float",
        "example": 3456.6
      },
      "quantity": {
        "type": "number",
        "description": "The amount of unit for this charge item.",
        "format": "float",
        "example": 34.4
      },
      "carrierClauses": {
        "type": "object",
        "properties": {
          "carrierClauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/carrierClause"
            }
          }
        }
      },
      "carrierClause": {
        "type": "object",
        "description": "comprises clauses, added by the carrier to the Transport Document, which are subject to local rules/guidelines or certain mandatory information required to be shared with the customer. Usually printed below the cargo description.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "clauseContent": {
                "$ref": "#/components/schemas/clauseContent"
              }
            }
          }
        ]
      },
      "clauseContent": {
        "type": "string",
        "description": "The content of the clause."
      },
      "partyCodes_inner": {
        "required": [
          "partyCode",
          "partyCodeListProvider"
        ],
        "type": "object",
        "properties": {
          "partyCode": {
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string"
          },
          "partyCodeListProvider": {
            "type": "string",
            "description": "Describes the organisation that provides the party code.\n\n - `EPUI`:The party code is an EBL Platform User Identifier (that is, an identifier provided by a platform, used to transfer eBLs). EPIU should be combined with the `codeListName`, to identify the platform that issued the identifier.\n - `GLEIF`: The party code is issued by Global Legal Entity Identifier Foundation (GLEIF). See https://www.gleif.org/en. The `codeNameList` (if omitted) defaults to `LEI`.\n - `W3C`: The party code is issued by a standard created by World Wide Web Consortium (W3C). See https://www.w3.org/. The `codeNameList` (if omitted) defaults to `DID`.\n",
            "enum": [
              "GLEIF",
              "W3C",
              "EPUI"
            ]
          },
          "codeListName": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The name of the code list / code generation mechanism / code authority for the party code.\n\nFor `EPUI`:\n * `Wave`: An identifier provided by Wave BL.\n * `CargoX`: An identifier provided by CargoX\n * `EdoxOnline`: An identifier provided by EdoxOnline\n * `IQAX`: An identifier provided by IQAX\n * `EssDOCS`: An identifier provided by essDOCS\n * `Bolero`: An identifier provided by Bolero\n * `TradeGO`: An identifierprovided by TradeGo\n * `Secro`: An identifier provided by Secro\n * `GSBN`: An identifier provided by GSBN\n * `WiseTech`: An identifier provided by WiseTech\n\nFor `W3C`:\n * `DID`: The party code is a Decentralized Identifier (see https://www.w3.org/TR/did-core/).\n\nFor `GLEIF`:\n * `LEI`: The party code is a Legal Entity Identifier (LEI) as issued by Global Legal Entity Identifier Foundation (GLEIF). See https://www.gleif.org/en\n"
          }
        }
      }
    },
    "responses": {
      "documentIssuancePendingOrComplete": {
        "description": "An Issuance Request is made with a Transport Document Reference (TDR), that was used previously to request the issuance of a Transport Document (TD). The document is either already issued or an TD with the same TDR. \n\nThe eBL platform will inform the carrier when the carrier needs to act on this document again. If the issuance is pending, then the carrier will be notified via the DCSA_EBL_ISS_RSP API once the issuance process completes. If the issuance has already succeeded, the eBL platform will notify the carrier when there is a surrender request via the DCSA_EBL_SUR API.\n",
        "headers": {
          "API-Version": {
            "$ref": "#/components/headers/API-Version"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      }
    },
    "parameters": {
      "transactionReference": {
        "name": "transactionReference",
        "in": "path",
        "description": "The transaction reference for the issuance transaction.\n",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/transactionReference"
        },
        "example": "4TkP5nvgTly0MwFrDxfIkR2rvOjkUIgzibBoKABU"
      },
      "Api-Version-Major": {
        "name": "API-Version",
        "in": "header",
        "description": "An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.\n",
        "required": false,
        "schema": {
          "type": "string",
          "example": "1"
        }
      }
    },
    "headers": {
      "API-Version": {
        "description": "SemVer used to indicate the version of the contract (API version) returned.",
        "schema": {
          "type": "string",
          "example": "1.0.0"
        }
      }
    }
  }
}