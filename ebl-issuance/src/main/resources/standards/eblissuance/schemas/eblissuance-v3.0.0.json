{
   "components" : {
      "headers" : {
         "API-Version" : {
            "description" : "SemVer used to indicate the version of the contract (API version) returned.\n",
            "explode" : false,
            "schema" : {
               "example" : "3.0.0",
               "type" : "string"
            },
            "style" : "simple"
         }
      },
      "parameters" : {
         "Api-Version-Major" : {
            "description" : "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "explode" : false,
            "in" : "header",
            "name" : "API-Version",
            "required" : false,
            "schema" : {
               "example" : "3",
               "type" : "string"
            },
            "style" : "simple"
         }
      },
      "schemas" : {
         "ActiveReeferSettings" : {
            "description" : "The specifications for a Reefer equipment.\n\n**Condition:** Only applicable when `isNonOperatingReefer` is set to `false`\n",
            "properties" : {
               "airExchangeSetpoint" : {
                  "description" : "Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container\n",
                  "example" : 15.4,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               },
               "airExchangeUnit" : {
                  "description" : "The unit for `airExchange` in metrics- or imperial- units per hour\n- `MQH` (Cubic metre per hour)\n- `FQH` (Cubic foot per hour)\n\n**Condition:** Mandatory to provide if `airExchange` is provided\n",
                  "enum" : [
                     "MQH",
                     "FQH"
                  ],
                  "example" : "MQH",
                  "type" : "string"
               },
               "co2Setpoint" : {
                  "description" : "The percentage of the controlled atmosphere CO<sub>2</sub> target value\n",
                  "example" : 25,
                  "format" : "float",
                  "maximum" : 100,
                  "minimum" : 0,
                  "type" : "number"
               },
               "humiditySetpoint" : {
                  "description" : "The percentage of the controlled atmosphere humidity target value\n",
                  "example" : 95.6,
                  "format" : "float",
                  "maximum" : 100,
                  "minimum" : 0,
                  "type" : "number"
               },
               "isBulbMode" : {
                  "description" : "Is special container setting for handling flower bulbs active\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isColdTreatmentRequired" : {
                  "description" : "Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isControlledAtmosphereRequired" : {
                  "description" : "Indicator of whether cargo requires Controlled Atmosphere.\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isDrainholesOpen" : {
                  "description" : "Is drain holes open on the container\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isVentilationOpen" : {
                  "description" : "If `true` the ventilation orifice is `Open` - if `false` the ventilation orifice is `closed`\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "o2Setpoint" : {
                  "description" : "The percentage of the controlled atmosphere CO<sub>2</sub> target value\n",
                  "example" : 25,
                  "format" : "float",
                  "maximum" : 100,
                  "minimum" : 0,
                  "type" : "number"
               },
               "temperatureSetpoint" : {
                  "description" : "Target value of the temperature for the Reefer based on the cargo requirement.\n",
                  "example" : -15,
                  "format" : "float",
                  "type" : "number"
               },
               "temperatureUnit" : {
                  "description" : "The unit for temperature in Celsius or Fahrenheit\n\n- `CEL` (Celsius)\n- `FAH` (Fahrenheit)\n\n**Condition:** Mandatory to provide if `temperatureSetpoint` is provided\n",
                  "enum" : [
                     "CEL",
                     "FAH"
                  ],
                  "example" : "CEL",
                  "type" : "string"
               }
            },
            "title" : "Active Reefer Settings",
            "type" : "object"
         },
         "Address" : {
            "description" : "An object for storing address related information\n",
            "properties" : {
               "POBox" : {
                  "description" : "A numbered box at a post office where a person or business can have mail or parcels delivered.",
                  "example" : "123",
                  "maxLength" : 20,
                  "type" : "string"
               },
               "city" : {
                  "description" : "The name of the city.\n",
                  "example" : "Amsterdam",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "countryCode" : {
                  "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "example" : "NL",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z]{2}$",
                  "type" : "string"
               },
               "floor" : {
                  "description" : "The floor of the street number.\n",
                  "example" : "N/A",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "postCode" : {
                  "description" : "The post code.",
                  "example" : "1047 HM",
                  "maxLength" : 10,
                  "type" : "string"
               },
               "stateRegion" : {
                  "description" : "The name of the state/region.",
                  "example" : "North Holland",
                  "maxLength" : 65,
                  "type" : "string"
               },
               "street" : {
                  "description" : "The name of the street.",
                  "example" : "Ruijggoordweg",
                  "maxLength" : 70,
                  "type" : "string"
               },
               "streetNumber" : {
                  "description" : "The number of the street.",
                  "example" : "100",
                  "maxLength" : 50,
                  "type" : "string"
               }
            },
            "required" : [
               "city",
               "countryCode",
               "street"
            ],
            "title" : "Address",
            "type" : "object"
         },
         "Cargo Gross Volume" : {
            "description" : "Calculated by multiplying the width, height, and length of the packed cargo.\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in either imperial or metric terms\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n",
                  "enum" : [
                     "MTQ",
                     "FTQ"
                  ],
                  "example" : "MTQ",
                  "type" : "string"
               },
               "value" : {
                  "description" : "Calculated by multiplying the width, height, and length of the packed cargo. A maximum of 4 decimals should be provided.\n",
                  "example" : 2.4,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Cargo Gross Volume",
            "type" : "object"
         },
         "Cargo Gross Weight" : {
            "description" : "The weight of the cargo item including packaging being carried in the container. Excludes the tare weight of the container.\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
                  "enum" : [
                     "KGM",
                     "LBR"
                  ],
                  "example" : "KGM",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The weight of the cargo item including packaging being carried in the container. Excludes the tare weight of the container. A maximum of 3 decimals should be provided.\n",
                  "example" : 2400,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Cargo Gross Weight",
            "type" : "object"
         },
         "Cargo Net Volume" : {
            "description" : "Calculated by multiplying the width, height, and length of the packed cargo, excluding packaging.\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in either imperial or metric terms\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n",
                  "enum" : [
                     "MTQ",
                     "FTQ"
                  ],
                  "example" : "MTQ",
                  "type" : "string"
               },
               "value" : {
                  "description" : "Calculated by multiplying the width, height, and length of the packed cargo, excluding packaging.\n",
                  "example" : 2.4,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Cargo Net Volume",
            "type" : "object"
         },
         "Cargo Net Weight" : {
            "description" : "The weight of the cargo item excluding packaging being carried in the container. Excludes the tare weight of the container.\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
                  "enum" : [
                     "KGM",
                     "LBR"
                  ],
                  "example" : "KGM",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The weight of the cargo item excluding packaging being carried in the container. Excludes the tare weight of the container. A maximum of 3 decimals should be provided.\n",
                  "example" : 2400,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Cargo Net Weight",
            "type" : "object"
         },
         "CargoItem" : {
            "description" : "A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.\n",
            "properties" : {
               "cargoGrossVolume" : {
                  "$ref" : "#/components/schemas/Cargo Gross Volume"
               },
               "cargoGrossWeight" : {
                  "$ref" : "#/components/schemas/Cargo Gross Weight"
               },
               "cargoNetVolume" : {
                  "$ref" : "#/components/schemas/Cargo Net Volume"
               },
               "cargoNetWeight" : {
                  "$ref" : "#/components/schemas/Cargo Net Weight"
               },
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "equipmentReference" : {
                  "description" : "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
                  "example" : "APZU4812090",
                  "maxLength" : 11,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "nationalCommodityCodes" : {
                  "description" : "A list of `National Commodity Codes` that apply to this `cargoItem`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/NationalCommodityCode"
                  },
                  "type" : "array"
               },
               "outerPackaging" : {
                  "$ref" : "#/components/schemas/OuterPackaging"
               }
            },
            "required" : [
               "cargoGrossWeight",
               "equipmentReference",
               "outerPackaging"
            ],
            "title" : "Cargo Item",
            "type" : "object"
         },
         "CarriersAgentAtDestination" : {
            "description" : "The party on the import side assigned by the carrier to whom the customer need to reach out to for cargo release.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/Address"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "address",
               "partyContactDetails",
               "partyName"
            ],
            "title" : "Carrier's Agent At Destination",
            "type" : "object"
         },
         "Charge" : {
            "description" : "Addresses the monetary value of freight and other service charges for a `Booking`.\n",
            "properties" : {
               "calculationBasis" : {
                  "description" : "The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.\n",
                  "example" : "Per day",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "chargeName" : {
                  "description" : "Free text field describing the charge to apply\n",
                  "example" : "Documentation fee - Destination",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "currencyAmount" : {
                  "description" : "The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.\n",
                  "example" : 1012.12,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               },
               "currencyCode" : {
                  "description" : "The currency for the charge, using a 3-character code ([ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)).\n",
                  "example" : "DKK",
                  "maxLength" : 3,
                  "minLength" : 3,
                  "pattern" : "^[A-Z]{3}$",
                  "type" : "string"
               },
               "paymentTermCode" : {
                  "description" : "An indicator of whether a charge is prepaid (PRE) or collect (COL). When prepaid, the charge is the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charge is the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
                  "enum" : [
                     "PRE",
                     "COL"
                  ],
                  "example" : "PRE",
                  "type" : "string"
               },
               "quantity" : {
                  "description" : "The amount of unit for this charge item.\n",
                  "example" : 34.4,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               },
               "unitPrice" : {
                  "description" : "The unit price of this charge item in the currency of the charge.\n",
                  "example" : 3456.6,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "calculationBasis",
               "chargeName",
               "currencyAmount",
               "currencyCode",
               "paymentTermCode",
               "quantity",
               "unitPrice"
            ],
            "title" : "Charge",
            "type" : "object"
         },
         "City" : {
            "description" : "An object for storing city, state/region and country related information\n",
            "properties" : {
               "city" : {
                  "description" : "The name of the city.\n",
                  "example" : "Amsterdam",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "countryCode" : {
                  "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "example" : "NL",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z]{2}$",
                  "type" : "string"
               },
               "stateRegion" : {
                  "description" : "The name of the state/region.\n",
                  "example" : "North Holland",
                  "maxLength" : 65,
                  "type" : "string"
               }
            },
            "required" : [
               "city",
               "countryCode"
            ],
            "title" : "City",
            "type" : "object"
         },
         "Consignee" : {
            "description" : "The party to which goods are consigned in the `Master Bill of Lading`.\n\n**Condition:** Mandatory for non-negotiable BL (`isToOrder=false`)\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "displayedAddress" : {
                  "description" : "The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.\n\n**Conditions:** if provided\n  - the displayed address must be included in the Transport Document.\n  - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters\n  - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters\n",
                  "items" : {
                     "description" : "A single address line\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 6,
                  "type" : "array"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "purchaseOrderReferences" : {
                  "description" : "A list of `Purchase Order Reference`s linked to the `Consignee`.\n",
                  "items" : {
                     "description" : "A purchase order reference linked to the `Consignee`.\n",
                     "example" : "HHL007",
                     "maxLength" : 35,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "reference" : {
                  "description" : "A reference linked to the `Consignee`.\n",
                  "example" : "HHL007",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               },
               "typeOfPerson" : {
                  "description" : "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
                  "example" : "NATURAL_PERSON",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Consignee",
            "type" : "object"
         },
         "ConsignmentItem" : {
            "description" : "Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`\n",
            "properties" : {
               "HSCodes" : {
                  "description" : "A list of `HS Codes` that apply to this `consignmentItem`\n",
                  "items" : {
                     "description" : "Used by customs to classify the product being shipped. The type of HS code depends on country and customs requirements. The code must be at least 6 and at most 10 digits.\n\nMore information can be found here: [HS Nomenclature](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools).\n",
                     "example" : "851713",
                     "maxLength" : 10,
                     "minLength" : 6,
                     "pattern" : "^\\d{6,10}$",
                     "type" : "string"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "cargoItems" : {
                  "description" : "A list of all `cargoItems`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CargoItem"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "carrierBookingReference" : {
                  "description" : "The associated booking number provided by the carrier for this `Consignment Item`.\n\nWhen multiple `carrierBookingReferences` are used then the bookings referred to must all contain the same:\n- transportPlan\n- shipmentLocations\n- receiptTypeAtOrigin\n- deliveryTypeAtDestination\n- cargoMovementTypeAtOrigin\n- cargoMovementTypeAtDestination\n- serviceContractReference\n- termsAndConditions\n- Place of B/L Issue (if provided)\n",
                  "example" : "ABC709951",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "descriptionOfGoods" : {
                  "description" : "An array of lines accurately and properly describing the cargo being shipped in the container(s) as provided by the shipper.\n",
                  "items" : {
                     "description" : "A line describing the cargo",
                     "example" : "blue shoes size 47",
                     "maxLength" : 35,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "maxItems" : 150,
                  "type" : "array"
               },
               "nationalCommodityCodes" : {
                  "description" : "A list of `National Commodity Codes` that apply to this `commodity`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/NationalCommodityCode"
                  },
                  "type" : "array"
               },
               "references" : {
                  "description" : "A list of `References`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/ReferenceConsignmentItem"
                  },
                  "type" : "array"
               },
               "shippingMarks" : {
                  "description" : "A list of the `ShippingMarks` applicable to this `consignmentItem`\n",
                  "items" : {
                     "description" : "The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.\n",
                     "example" : "Made in China",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 50,
                  "type" : "array"
               }
            },
            "required" : [
               "HSCodes",
               "cargoItems",
               "carrierBookingReference",
               "descriptionOfGoods"
            ],
            "title" : "Consignment Item",
            "type" : "object"
         },
         "CustomsReference" : {
            "description" : "Reference associated with customs and/or excise purposes required by the relevant authorities for the import, export, or transit of the goods.\n\nA small list of **potential** examples:\n\n| Type  | Country | Description |\n|-------|:-------:|-------------|\n|ACID|EG|Advance Cargo Information Declaration in Egypt|\n|CERS|CA|Canadian Export Reporting System|\n|ITN|US|Internal Transaction Number in US|\n|PEB|ID|PEB reference number|\n|CSN|IN|Cargo Summary Notification (CSN)|\n",
            "properties" : {
               "countryCode" : {
                  "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "example" : "EG",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z]{2}$",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The reference type code as defined in the relevant customs jurisdiction.\n",
                  "example" : "ACID",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "values" : {
                  "items" : {
                     "description" : "The value of the `customsReference`\n",
                     "example" : "4988470982020120017",
                     "maxLength" : 35,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "minItems" : 1,
                  "type" : "array"
               }
            },
            "required" : [
               "countryCode",
               "type",
               "values"
            ],
            "title" : "Customs Reference",
            "type" : "object"
         },
         "DangerousGoods" : {
            "description" : "Specification for `Dangerous Goods`. It is mandatory to either provide the `unNumber` or the `naNumber`. Dangerous Goods is based on **IMDG Amendment Version 41-22**.\n",
            "oneOf" : [
               {
                  "properties" : {
                     "unNumber" : {
                        "description" : "United Nations Dangerous Goods Identifier (UNDG) assigned by the UN Sub-Committee of Experts on the Transport of Dangerous Goods and shown in the IMO IMDG.\n",
                        "example" : "1463",
                        "maxLength" : 4,
                        "minLength" : 4,
                        "pattern" : "^\\d{4}$",
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "unNumber"
                  ],
                  "title" : "UN Number",
                  "type" : "object"
               },
               {
                  "properties" : {
                     "naNumber" : {
                        "description" : "Four-digit number that is assigned to dangerous, hazardous, and harmful substances by the United States Department of Transportation.\n",
                        "example" : "9037",
                        "maxLength" : 4,
                        "minLength" : 4,
                        "pattern" : "^\\d{4}$",
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "naNumber"
                  ],
                  "title" : "NA Number",
                  "type" : "object"
               }
            ],
            "properties" : {
               "EMSNumber" : {
                  "description" : "The emergency schedule identified in the IMO EmS Guide – Emergency Response Procedures for Ships Carrying Dangerous Goods. Comprises 2 values; 1 for spillage and 1 for fire. Possible values spillage: S-A to S-Z. Possible values fire: F-A to F-Z.\n",
                  "example" : "F-A S-Q",
                  "maxLength" : 7,
                  "type" : "string"
               },
               "codedVariantList" : {
                  "description" : "Four-character code supplied by Exis Technologies that assists to remove ambiguities when identifying a variant within a single UN number or NA number that may occur when two companies exchange DG information.\n\nCharacter | Valid Characters | Description\n:--------:|------------------|------------\n1| 0, 1, 2, 3|The packing group. Code 0 indicates there is no packing group\n2|0 to 9 and A to Z|A sequence letter for the PSN, or 0 if there were no alternative PSNs\n3 and 4|0 to 9 and A to Z|Two sequence letters for other information, for the cases where the variant is required because of different in subrisks, packing instruction etc.\n",
                  "example" : "2200",
                  "maxLength" : 4,
                  "minLength" : 4,
                  "pattern" : "^[0-3][0-9A-Z]{3}$",
                  "type" : "string"
               },
               "competentAuthorityApproval" : {
                  "description" : "Name and reference number of the competent authority providing the approval.\n",
                  "example" : "{Name and reference...}",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "emergencyContactDetails" : {
                  "$ref" : "#/components/schemas/EmergencyContactDetails"
               },
               "endOfHoldingTime" : {
                  "description" : "Date by when the refrigerated liquid needs to be delivered.\n",
                  "example" : "2021-09-03",
                  "format" : "date",
                  "type" : "string"
               },
               "fumigationDateTime" : {
                  "description" : "Date & time when the container was fumigated\n",
                  "example" : "2024-09-04T09:41:00Z",
                  "format" : "date-time",
                  "type" : "string"
               },
               "grossWeight" : {
                  "$ref" : "#/components/schemas/Gross Weight"
               },
               "imoClass" : {
                  "description" : "The hazard class code of the referenced dangerous goods according to the specified regulation. Examples of possible values are:\n\n- `1.1A` (Substances and articles which have a mass explosion hazard)\n- `1.6N` (Extremely insensitive articles which do not have a mass explosion hazard)\n- `2.1` (Flammable gases)\n- `8` (Corrosive substances)\n",
                  "example" : "1.4S",
                  "maxLength" : 4,
                  "type" : "string"
               },
               "inhalationZone" : {
                  "description" : "The zone classification of the toxicity of the inhalant. Possible values are:\n\n- `A` (Hazard Zone A) can be assigned to specific gases and liquids\n- `B` (Hazard Zone B) can be assigned to specific gases and liquids\n- `C` (Hazard Zone C) can **only** be assigned to specific gases\n- `D` (Hazard Zone D) can **only** be assigned to specific gases\n",
                  "example" : "A",
                  "maxLength" : 1,
                  "minLength" : 1,
                  "type" : "string"
               },
               "innerPackagings" : {
                  "description" : "A list of `Inner Packings` contained inside this `outer packaging/overpack`.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/InnerPackaging"
                  },
                  "type" : "array"
               },
               "isCompetentAuthorityApprovalRequired" : {
                  "description" : "Indicates if the cargo require approval from authorities\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isEmptyUncleanedResidue" : {
                  "description" : "Indicates if the cargo is residue.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isExceptedQuantity" : {
                  "description" : "Indicates if the dangerous goods can be transported as excepted quantity in accordance with Chapter 3.5 of the IMO IMDG Code.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isHot" : {
                  "description" : "Indicates if high temperature cargo is shipped.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isLimitedQuantity" : {
                  "description" : "Indicates if the dangerous goods can be transported as limited quantity in accordance with Chapter 3.4 of the IMO IMDG Code.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isMarinePollutant" : {
                  "description" : "Indicates if the goods belong to the classification of Marine Pollutant.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isReportableQuantity" : {
                  "description" : "Indicates if a container of hazardous material is at the reportable quantity level. If `TRUE`, a report to the relevant authority must be made in case of spill.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isSalvagePackings" : {
                  "description" : "Indicates if the cargo has special packaging for the transport, recovery or disposal of damaged, defective, leaking or nonconforming hazardous materials packages, or hazardous materials that have spilled or leaked.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isWaste" : {
                  "description" : "Indicates if waste is being shipped\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "limits" : {
                  "$ref" : "#/components/schemas/Limits"
               },
               "netExplosiveContent" : {
                  "$ref" : "#/components/schemas/Net Explosive Content"
               },
               "netVolume" : {
                  "$ref" : "#/components/schemas/Net Volume"
               },
               "netWeight" : {
                  "$ref" : "#/components/schemas/Net Weight"
               },
               "packingGroup" : {
                  "description" : "The packing group according to the UN Recommendations on the Transport of Dangerous Goods and IMO IMDG Code.\n",
                  "example" : 3,
                  "format" : "int32",
                  "maximum" : 3,
                  "minimum" : 1,
                  "type" : "integer"
               },
               "properShippingName" : {
                  "description" : "The proper shipping name for goods under IMDG Code, or the product name for goods under IBC Code and IGC Code, or the bulk cargo shipping name for goods under IMSBC Code, or the name of oil for goods under Annex I to the MARPOL Convention.\n",
                  "example" : "Chromium Trioxide, anhydrous",
                  "maxLength" : 250,
                  "type" : "string"
               },
               "segregationGroups" : {
                  "description" : "List of the segregation groups applicable to specific hazardous goods according to the IMO IMDG Code.\n\n**Condition:** only applicable to specific hazardous goods.\n",
                  "items" : {
                     "description" : "Grouping of Dangerous Goods having certain similar chemical properties. Possible values are:\n\n- `1` (Acids)\n- `2` (Ammonium Compounds)\n- `3` (Bromates)\n- `4` (Chlorates)\n- `5` (Chlorites)\n- `6` (Cyanides)\n- `7` (Heavy metals and their salts)\n- `8` (Hypochlorites)\n- `9` (Lead and its compounds)\n- `10` (Liquid halogenated hydrocarbons)\n- `11` (Mercury and mercury compounds)\n- `12` (Nitrites and their mixtures)\n- `13` (Perchlorates)\n- `14` (Permanganates)\n- `15` (Powdered metals)\n- `16` (Peroxides),\n- `17` (Azides)\n- `18` (Alkalis)\n",
                     "example" : "12",
                     "maxLength" : 2,
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "subsidiaryRisk1" : {
                  "description" : "Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.\n",
                  "example" : "1.2",
                  "maxLength" : 3,
                  "minLength" : 1,
                  "pattern" : "^[0-9](\\.[0-9])?$",
                  "type" : "string"
               },
               "subsidiaryRisk2" : {
                  "description" : "Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.\n",
                  "example" : "1.2",
                  "maxLength" : 3,
                  "minLength" : 1,
                  "pattern" : "^[0-9](\\.[0-9])?$",
                  "type" : "string"
               },
               "technicalName" : {
                  "description" : "The recognized chemical or biological name or other name currently used for the referenced dangerous goods as described in chapter 3.1.2.8 of the IMDG Code.\n",
                  "example" : "xylene and benzene",
                  "maxLength" : 250,
                  "type" : "string"
               }
            },
            "required" : [
               "imoClass",
               "properShippingName"
            ],
            "title" : "Dangerous Goods",
            "type" : "object"
         },
         "DetailedError" : {
            "description" : "A detailed description of what has caused the error.\n",
            "properties" : {
               "errorCode" : {
                  "description" : "The detailed error code returned.\n\n  - `7000-7999` Technical error codes\n  - `8000-8999` Functional error codes\n  - `9000-9999` API provider-specific error codes            \n\n[Error codes as specified by DCSA](https://developer.dcsa.org/standard-error-codes).\n",
                  "example" : 7003,
                  "format" : "int32",
                  "maximum" : 9999,
                  "minimum" : 7000,
                  "type" : "integer"
               },
               "errorCodeMessage" : {
                  "description" : "A long description corresponding to the `errorCode` with additional information.\n",
                  "example" : "Spaces not allowed in facility code",
                  "maxLength" : 5000,
                  "type" : "string"
               },
               "errorCodeText" : {
                  "description" : "A standard short description corresponding to the `errorCode`.\n",
                  "example" : "invalidData",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "jsonPath" : {
                  "description" : "A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).\n",
                  "example" : "$.location.facilityCode",
                  "maxLength" : 500,
                  "type" : "string"
               },
               "property" : {
                  "description" : "The name of the property causing the error.\n",
                  "example" : "facilityCode",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "value" : {
                  "description" : "The value of the property causing the error serialised as a string exactly as in the original request.\n",
                  "example" : "SG SIN WHS",
                  "maxLength" : 500,
                  "type" : "string"
               }
            },
            "required" : [
               "errorCodeMessage",
               "errorCodeText"
            ],
            "title" : "Detailed Error",
            "type" : "object"
         },
         "Document Parties" : {
            "description" : "All `Parties` with associated roles.\n",
            "properties" : {
               "carriersAgentAtDestination" : {
                  "$ref" : "#/components/schemas/CarriersAgentAtDestination"
               },
               "consignee" : {
                  "$ref" : "#/components/schemas/Consignee"
               },
               "endorsee" : {
                  "$ref" : "#/components/schemas/Endorsee"
               },
               "issuingParty" : {
                  "$ref" : "#/components/schemas/IssuingParty"
               },
               "notifyParties" : {
                  "description" : "List of up to 3 `Notify Parties`. The first item in the list is the **First Notify Party** (`N1`), the second item is the **Second Notify Party** (`N2`) and the last item is the **Other Notify Party** (`NI`).\n\n**Condition:** Mandatory for To Order BLs, `isToOrder=true`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/NotifyParty"
                  },
                  "maxItems" : 3,
                  "type" : "array"
               },
               "other" : {
                  "description" : "A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.",
                  "items" : {
                     "$ref" : "#/components/schemas/OtherDocumentParty"
                  },
                  "type" : "array"
               },
               "shipper" : {
                  "$ref" : "#/components/schemas/Shipper"
               }
            },
            "required" : [
               "issuingParty",
               "shipper"
            ],
            "title" : "Document Parties",
            "type" : "object"
         },
         "EmergencyContactDetails" : {
            "description" : "24 hr emergency contact details\n",
            "properties" : {
               "contact" : {
                  "description" : "Name of the Contact person during an emergency.\n",
                  "example" : "Henrik Larsen",
                  "maxLength" : 255,
                  "type" : "string"
               },
               "phone" : {
                  "description" : "Phone number for the contact. Phone **must** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).\n",
                  "example" : "+45 70262970",
                  "maxLength" : 30,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "provider" : {
                  "description" : "Name of the third party vendor providing emergency support\n",
                  "example" : "GlobeTeam",
                  "maxLength" : 255,
                  "type" : "string"
               },
               "referenceNumber" : {
                  "description" : "Contract reference for the emergency support provided by an external third party vendor.\n",
                  "example" : "12234",
                  "maxLength" : 255,
                  "type" : "string"
               }
            },
            "required" : [
               "contact",
               "phone"
            ],
            "title" : "Emergency Contact Details",
            "type" : "object"
         },
         "Endorsee" : {
            "description" : "The party to whom the title to the goods is transferred by means of endorsement.\n\n**Condition:** Can only be provided for negotiable BLs (`isToOrder=true`). If a negotiable BL does not have an `Endorsee`, the BL is said to be \"blank endorsed\". Note `Consignee` and `Endorsee` are mutually exclusive.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "displayedAddress" : {
                  "description" : "The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.\n\n**Conditions:** if provided\n  - the displayed address must be included in the Transport Document.\n  - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters\n  - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters\n",
                  "items" : {
                     "description" : "A single address line\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 6,
                  "type" : "array"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Endorsee",
            "type" : "object"
         },
         "Equipment" : {
            "description" : "Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.\n",
            "properties" : {
               "ISOEquipmentCode" : {
                  "description" : "Unique code for the different equipment size and type used to transport commodities. The code can refer to either the ISO size type (e.g. 22G1) or the ISO type group (e.g. 22GP) following the [ISO 6346](https://www.iso.org/standard/83558.html) standard.\n",
                  "example" : "22G1",
                  "maxLength" : 4,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "equipmentReference" : {
                  "description" : "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
                  "example" : "APZU4812090",
                  "maxLength" : 11,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "tareWeight" : {
                  "$ref" : "#/components/schemas/Tare Weight"
               }
            },
            "required" : [
               "equipmentReference"
            ],
            "title" : "Equipment",
            "type" : "object"
         },
         "ErrorResponse" : {
            "description" : "Unexpected error",
            "properties" : {
               "errorDateTime" : {
                  "description" : "The DateTime corresponding to the error occurring. Must be formatted using [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.\n",
                  "example" : "2024-09-04T09:41:00Z",
                  "format" : "date-time",
                  "type" : "string"
               },
               "errors" : {
                  "description" : "An array of errors providing more detail about the root cause.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/DetailedError"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "httpMethod" : {
                  "description" : "The HTTP method used to make the request e.g. `GET`, `POST`, etc\n",
                  "enum" : [
                     "GET",
                     "HEAD",
                     "POST",
                     "PUT",
                     "DELETE",
                     "OPTION",
                     "PATCH"
                  ],
                  "example" : "POST",
                  "type" : "string"
               },
               "providerCorrelationReference" : {
                  "description" : "A unique identifier to the HTTP request within the scope of the API provider.\n",
                  "example" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "requestUri" : {
                  "description" : "The URI that was requested.\n",
                  "example" : "/v1/events",
                  "type" : "string"
               },
               "statusCode" : {
                  "description" : "The HTTP status code returned.\n",
                  "example" : 400,
                  "format" : "int32",
                  "type" : "integer"
               },
               "statusCodeMessage" : {
                  "description" : "A long description corresponding to the HTTP status code with additional information.\n",
                  "example" : "The supplied data could not be accepted",
                  "maxLength" : 200,
                  "type" : "string"
               },
               "statusCodeText" : {
                  "description" : "A standard short description corresponding to the HTTP status code.\n",
                  "example" : "Bad Request",
                  "maxLength" : 50,
                  "type" : "string"
               }
            },
            "required" : [
               "errorDateTime",
               "errors",
               "httpMethod",
               "requestUri",
               "statusCode",
               "statusCodeText"
            ],
            "title" : "Error Response",
            "type" : "object"
         },
         "Facility" : {
            "description" : "An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\n",
            "properties" : {
               "facilityCode" : {
                  "description" : "The code used for identifying the specific facility. This code does not include the UN Location Code.\nThe definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:\n- `SMDG` (the codeList used is the [SMDG Terminal Code List](https://smdg.org/documents/smdg-code-lists/))\n- `BIC` (the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/))",
                  "example" : "ADT",
                  "maxLength" : 6,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "facilityCodeListProvider" : {
                  "description" : "The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\n- `BIC` (Requires a UN Location Code)\n- `SMDG` (Requires a UN Location Code)\n",
                  "enum" : [
                     "BIC",
                     "SMDG"
                  ],
                  "example" : "SMDG",
                  "type" : "string"
               }
            },
            "required" : [
               "facilityCode",
               "facilityCodeListProvider"
            ],
            "title" : "Facility",
            "type" : "object"
         },
         "GeoCoordinate" : {
            "description" : "An object used to express a location using `latitude` and `longitude`.\n",
            "properties" : {
               "latitude" : {
                  "description" : "Geographic coordinate that specifies the north–south position of a point on the Earth's surface.",
                  "example" : "48.8585500",
                  "maxLength" : 10,
                  "type" : "string"
               },
               "longitude" : {
                  "description" : "Geographic coordinate that specifies the east–west position of a point on the Earth's surface.",
                  "example" : "2.294492036",
                  "maxLength" : 11,
                  "type" : "string"
               }
            },
            "required" : [
               "latitude",
               "longitude"
            ],
            "title" : "Geo Coordinate",
            "type" : "object"
         },
         "Gross Weight" : {
            "description" : "Total weight of the goods carried, including packaging.\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in imperial or metric terms\n\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
                  "enum" : [
                     "KGM",
                     "LBR"
                  ],
                  "example" : "KGM",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The grand total weight of the DG cargo and weight per `UNNumber`/`NANumber` including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.\n",
                  "example" : 12000.3,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Gross Weight",
            "type" : "object"
         },
         "IdentifyingCode" : {
            "properties" : {
               "codeListName" : {
                  "description" : "The name of the code list, code generation mechanism or code authority for the `partyCode`. Example values could be:\n\n- `DID` (Decentralized Identifier) for `codeListProvider` `W3C`\n- `LEI` (Legal Entity Identifier) for `codeListProvider` `GLEIF`\n- `DUNS` (Data Universal Numbering System) for `codeListProvider` `DNB`\n- `EORI` (Economic Operators Registration and Identification) for codeListProvider `EU`\n",
                  "example" : "DID",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "codeListProvider" : {
                  "description" : "A list of codes identifying a party. Possible values are:\n\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ESSD` (EssDOCS)\n- `IDT` (ICE Digital Trade)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGO)\n- `ETEU` (eTEU)\n- `TRAC` (TRACE Original)\n- `BRIT` (BRITC eBL)\n- `GSBN` (Global Shipping Business Network)\n- `WISE` (WiseTech)\n- `GLEIF` (Global Legal Entity Identifier Foundation)\n- `W3C` (World Wide Web Consortium)\n- `DNB` (Dun and Bradstreet)\n- `FMC` (Federal Maritime Commission)\n- `DCSA` (Digital Container Shipping Association)\n- `EU` (European Union Member State Customs Authority)\n- `ZZZ` (Mutually defined)\n",
                  "example" : "W3C",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "partyCode" : {
                  "description" : "Code to identify the party as provided by the code list provider\n",
                  "example" : "MSK",
                  "maxLength" : 150,
                  "type" : "string"
               }
            },
            "required" : [
               "codeListProvider",
               "partyCode"
            ],
            "title" : "Identifying Code",
            "type" : "object"
         },
         "InnerPackaging" : {
            "description" : "Object for inner packaging specification\n",
            "properties" : {
               "description" : {
                  "description" : "Description of the packaging.\n",
                  "example" : "Woven plastic water resistant Bag",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "material" : {
                  "description" : "The `material` used for the `Inner Packaging` of the referenced `Dangerous Goods`.\n",
                  "example" : "Plastic",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "quantity" : {
                  "description" : "Count of `Inner Packagings` of the referenced `Dangerous Goods`.\n",
                  "example" : 20,
                  "format" : "int32",
                  "type" : "integer"
               }
            },
            "required" : [
               "description",
               "material",
               "quantity"
            ],
            "title" : "Inner Packaging",
            "type" : "object"
         },
         "IssuanceError" : {
            "properties" : {
               "errorCode" : {
                  "description" : "A vendor provided error code.\n\nThe meaning of each code is agreed bilaterally between the vendor.\n",
                  "example" : "ERR-1234",
                  "maxLength" : 50,
                  "pattern" : "^\\S+$",
                  "type" : "string"
               },
               "reason" : {
                  "description" : "Human readable description of the rationale for an unsuccessful issuance.\n\nThe `reason` should be omitted when the `issuanceResponseCode` is `ISSU`. If the platform for some reason chooses to deviate from this and provide the field anyway, they should use canned phrased like `Issued` that matches the meaning of the `issuanceResponseCode`.\n",
                  "example" : "Cannot get...",
                  "maxLength" : 255,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Issuance Error",
            "type" : "object"
         },
         "IssuanceManifest" : {
            "description" : "Checksums of the carrier provided documents from the issuance time.\n",
            "properties" : {
               "documentChecksum" : {
                  "description" : "The checksum of the `document` attribute computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234). The transport document must be in the [RFC 8785](https://datatracker.ietf.org/doc/html/rfc8785) canonical form before the checksum is computed.\n",
                  "example" : "76a7d14c83d7268d643ae7345c448de60701f955d264a743e6928a0b8268b24f",
                  "maxLength" : 64,
                  "minLength" : 64,
                  "pattern" : "^[0-9a-f]+$",
                  "type" : "string"
               },
               "eBLVisualisationByCarrierChecksum" : {
                  "description" : "The checksum of the `content` attribute of the `eBLVisualisationByCarrier` attribute computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234). The checksum is computed on the `content` field in its decoded form.\n",
                  "example" : "76a7d14c83d7268d643ae7345c448de60701f955d264a743e6928a0b8268b24f",
                  "maxLength" : 64,
                  "minLength" : 64,
                  "pattern" : "^[0-9a-f]+$",
                  "type" : "string"
               },
               "issueToChecksum" : {
                  "description" : "The checksum of the `issueTo` attribute computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234). The value must be in the [RFC 8785](https://datatracker.ietf.org/doc/html/rfc8785) canonical form before the checksum is computed.\n",
                  "example" : "76a7d14c83d7268d643ae7345c448de60701f955d264a743e6928a0b8268b24f",
                  "maxLength" : 64,
                  "minLength" : 64,
                  "pattern" : "^[0-9a-f]+$",
                  "type" : "string"
               }
            },
            "required" : [
               "documentChecksum",
               "issueToChecksum"
            ],
            "title" : "Issuance Manifest",
            "type" : "object"
         },
         "IssuanceRequest" : {
            "description" : "Details of the eBL that the carrier requests to have issued.\n\nThe `eBLVisualisationByCarrier` is an optional document, where the carrier can provide its own visualization of the eBL for the end user.  The carrier is the sole responsible party for ensuring there are no discrepancies between the eBL (the `document` attribute) and the provided visualization (the `eBLVisualisationByCarrier` attribute).\n",
            "properties" : {
               "document" : {
                  "$ref" : "#/components/schemas/TransportDocument"
               },
               "eBLVisualisationByCarrier" : {
                  "$ref" : "#/components/schemas/SupportingDocument"
               },
               "issuanceManifestSignedContent" : {
                  "description" : "JWS content with compact serialization according to [RFC 7515](https://datatracker.ietf.org/doc/html/rfc7515#section-7.1). JWS-signed payload is defined in schema [IssuanceManifest](#/IssuanceManifest).\nThis attribute is used to provide integrity of various parts of the payload that enable parties to\nvalidate whether a payload matches what the carrier issued originally. Accordingly, the payload is\nsigned by the carrier.\n",
                  "example" : "eyJhbGciOiJSUzI1NiIsImtpZCI6IlVhRVdLNmt2ZkRITzNZT2NwUGl2M1RCT2JQTzk2SFZhR2U0czFhUUxBZU0ifQ.eyJkb2N1bWVudEhhc2giOiI4ZGM5OWQ4YWM5MjIyNDBjNTVjMDM4NDVmNDlkZWY2NDE4NzE0NjY1MWJhZTRmOWE2MzEzMTI3N2NmMDBkOWRmIiwicHJldmlvdXNFbnZlbG9wZUhhc2giOm51bGwsInRyYW5zYWN0aW9ucyI6W3siYWN0aW9uIjoiSVNTVSIsImNvbW1lbnRzIjoiVGhlIEIvTCBoYXMgYmVlbiBpc3N1ZWQuIiwidGltZXN0YW1wIjoxNjU4Mzg1MTY2MzAyNDQyMjAwLCJpc1RvT3JkZXIiOnRydWUsInBsYXRmb3JtSG9zdCI6ImxvY2FsaG9zdDo4NDQzIiwidHJhbnNmZXJlZSI6IjQzNTQ5ODUwMjQ4QGxvY2FsaG9zdDo4NDQzIn1dfQ.c4SJ9-61fE6RmeIuZ3EI-TSM0M6qXuOudtr3YhpDjqVMaYk_RYpaWYvw75ssTbjgGFKTBKCy5lpmOfb8Fq--Qu2k0MWbH6qdX5jTYwl0DX946RQg-hnmVTg9np3bmqVeKqKURyV-UUdG-KK_XCGzPZ-lZkeUlpMcIthQFs0pCODR9GPytv7ZXLPZFOmHM9fn3FD2yRqVhQzcs7HdcxMjCx6hkBW8Z-jW4qteVy2_E9uqjkKwlu_cQLoY83Z0mcjn0PZNQvKF10x7q1_Jjf_Su19UigTUu3pFMrzo4iPS_jcrFoIb3TSZNSzbgAwtujSBFOufPDyEmxlx1sH0ZowMvA",
                  "pattern" : "^[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+$",
                  "type" : "string"
               },
               "issueTo" : {
                  "$ref" : "#/components/schemas/IssueToParty"
               }
            },
            "required" : [
               "document",
               "issuanceManifestSignedContent",
               "issueTo"
            ],
            "title" : "Issuance Request",
            "type" : "object"
         },
         "IssuanceResponse" : {
            "properties" : {
               "errors" : {
                  "description" : "A list of errors if the issuance failed for some reason.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/IssuanceError"
                  },
                  "maxItems" : 255,
                  "type" : "array"
               },
               "issuanceResponseCode" : {
                  "description" : "The platforms verdict on the issuance of the EBL  identified by the `transportDocumentReference`\n\nOptions are:\n  - `ISSU`: The document was successfully `ISSU` and successfully delivered to the initial possessor.\n  - `BREQ`: The platform reviewed the document and believe they cannot issue the document due to an error/issue with the content of the issuance request.\n  - `REFU`: The eBL issuance is rejected for a reason that the issuing eBL platform cannot resolve (for example when an Interoperable transfer fails, due to a reject of the receiving eBL platform via the `BENV` code from the interoperability standard). One reason could be that the `issueTo` referenced a valid eBL platform but the receiving platform did not recognise the recipient specified.\n\nRegardless of the response code, the issuance request is now considered handled. In case of successful issuance, the platform will still have some responsibility but that is covered by other processes and APIs (e.g., the DCSA_SUR API mentioned in the description of this API). In case of failed issuance, it is up to the carrier to resolve the issue and, if needed, submit a revised issuance request.\n",
                  "enum" : [
                     "ISSU",
                     "BREQ",
                     "REFU"
                  ],
                  "example" : "ISSU",
                  "type" : "string"
               },
               "reason" : {
                  "description" : "Human readable description of the rationale for an unsuccessful issuance.\n\nThe `reason` should be omitted when the `issuanceResponseCode` is `ISSU`. If the platform for some reason chooses to deviate from this and provide the field anyway, they should use canned phrased like `Issued` that matches the meaning of the `issuanceResponseCode`.\n",
                  "example" : "Cannot get...",
                  "maxLength" : 255,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "transportDocumentReference" : {
                  "description" : "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
                  "example" : "HHL71800000",
                  "maxLength" : 20,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "issuanceResponseCode",
               "transportDocumentReference"
            ],
            "title" : "Issuance Response",
            "type" : "object"
         },
         "IssueToParty" : {
            "description" : "The party to whom the electronic Bill of Lading (eBL) must be issued.\n",
            "properties" : {
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "Globeteam",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "sendToPlatform" : {
                  "description" : "The EBL platform of the transaction party. \nThe value **MUST** be one of:\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ESSD` (EssDOCS)\n- `IDT` (ICE Digital Trade)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGO)\n- `ETEU` (eTEU)\n- `TRAC` (TRACE Original)\n- `BRIT` (BRITC eBL)\n",
                  "example" : "BOLE",
                  "maxLength" : 4,
                  "pattern" : "^\\S+$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "partyName",
               "sendToPlatform"
            ],
            "title" : "Issue To Party",
            "type" : "object"
         },
         "IssuingParty" : {
            "description" : "Refers to a company or a legal entity.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "Asseco Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "address",
               "partyName"
            ],
            "title" : "Issuing Party",
            "type" : "object"
         },
         "Limits" : {
            "description" : "Limits for the `Dangerous Goods`. The same `Temperature Unit` needs to apply to all attributes in this structure.\n",
            "properties" : {
               "SADT" : {
                  "description" : "Lowest temperature in which self-accelerating decomposition may occur in a substance\n",
                  "example" : 54.1,
                  "format" : "float",
                  "type" : "number"
               },
               "SAPT" : {
                  "description" : "Lowest temperature in which self-accelerating polymerization may occur in a substance\n",
                  "example" : 70,
                  "format" : "float",
                  "type" : "number"
               },
               "flashPoint" : {
                  "description" : "Lowest temperature at which a chemical can vaporize to form an ignitable mixture in air.\n\n**Condition:** only applicable to specific hazardous goods according to the IMO IMDG Code.\n",
                  "example" : 42,
                  "format" : "float",
                  "type" : "number"
               },
               "temperatureUnit" : {
                  "description" : "The unit for **all attributes in the limits structure** in Celsius or Fahrenheit\n\n- `CEL` (Celsius)\n- `FAH` (Fahrenheit)\n",
                  "enum" : [
                     "CEL",
                     "FAH"
                  ],
                  "example" : "CEL",
                  "type" : "string"
               },
               "transportControlTemperature" : {
                  "description" : "Maximum temperature at which certain substance (such as organic peroxides and self-reactive and related substances) can be safely transported for a prolonged period.\n",
                  "example" : 24.1,
                  "format" : "float",
                  "type" : "number"
               },
               "transportEmergencyTemperature" : {
                  "description" : "Temperature at which emergency procedures shall be implemented\n",
                  "example" : 74.1,
                  "format" : "float",
                  "type" : "number"
               }
            },
            "required" : [
               "temperatureUnit"
            ],
            "title" : "Limits",
            "type" : "object"
         },
         "NationalCommodityCode" : {
            "description" : "The national commodity classification code linked to a country with a value.\n\nAn example could look like this:\n\n| Type  | Country | Value |\n|-------|:-------:|-------------|\n|NCM|BR|['1515', '2106', '2507', '2512']|\n",
            "properties" : {
               "countryCode" : {
                  "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "example" : "BR",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z]{2}$",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The national commodity classification code, which can be one of the following values defined by DCSA:\n- `NCM` (Nomenclatura Comum do Mercosul)\n- `HTS` (Harmonized Tariff Schedule)\n- `SCHEDULE_B` ( Schedule B)\n- `TARIC` (Integrated Tariff of the European Communities)\n- `CN` (Combined Nomenclature)\n- `CUS` (Customs Union and Statistics)\n",
                  "example" : "NCM",
                  "maxLength" : 10,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "values" : {
                  "description" : "A list of `national commodity codes` values.\n",
                  "example" : [
                     "1515",
                     "2106",
                     "2507",
                     "2512"
                  ],
                  "items" : {
                     "description" : "The value of the `National Commodity Code`\n",
                     "example" : "1515",
                     "maxLength" : 10,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "minItems" : 1,
                  "type" : "array"
               }
            },
            "required" : [
               "countryCode",
               "type",
               "values"
            ],
            "title" : "National Commodity Code",
            "type" : "object"
         },
         "Net Explosive Content" : {
            "description" : "The total weight of the explosive substances, without the packaging’s, casings, etc.\n",
            "properties" : {
               "unit" : {
                  "description" : "Unit of measure used to describe the `netExplosiveWeight`. Possible values are\n\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n- `GRM` (Grams)\n- `ONZ` (Ounce)\n",
                  "enum" : [
                     "KGM",
                     "LBR",
                     "GRM",
                     "ONZ"
                  ],
                  "example" : "KGM",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The total weight of the explosive substances, without the packaging’s, casings, etc.\n",
                  "example" : 2.4,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Net Explosive Content",
            "type" : "object"
         },
         "Net Volume" : {
            "description" : "The volume of the referenced dangerous goods.\n\n**Condition:** only applicable to liquids and gas.\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in either imperial or metric terms\n\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n- `LTR` (Litre)\n",
                  "enum" : [
                     "MTQ",
                     "FTQ",
                     "LTR"
                  ],
                  "example" : "MTQ",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The volume of the referenced dangerous goods.\n",
                  "example" : 2.4,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Net Volume",
            "type" : "object"
         },
         "Net Weight" : {
            "description" : "Total weight of the goods carried, excluding packaging.\n",
            "properties" : {
               "unit" : {
                  "description" : "Unit of measure used to describe the `netWeight`. Possible values are\n\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
                  "enum" : [
                     "KGM",
                     "LBR"
                  ],
                  "example" : "KGM",
                  "type" : "string"
               },
               "value" : {
                  "description" : "Total weight of the goods carried, excluding packaging.\n",
                  "example" : 2.4,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Net Weight",
            "type" : "object"
         },
         "NotifyParty" : {
            "description" : "The person to be notified when a shipment arrives at its destination.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "displayedAddress" : {
                  "description" : "The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.\n\n**Conditions:** if provided\n  - the displayed address must be included in the Transport Document.\n  - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters\n  - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters\n",
                  "items" : {
                     "description" : "A single address line\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 6,
                  "type" : "array"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "reference" : {
                  "description" : "A reference linked to the `NotifyParty`.\n",
                  "example" : "HHL007",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               },
               "typeOfPerson" : {
                  "description" : "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
                  "example" : "NATURAL_PERSON",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Notify Party",
            "type" : "object"
         },
         "OnwardInlandRouting" : {
            "description" : "An object to capture `Onward Inland Routing` location specified as the end location of the inland movement that takes place after the container(s) being delivered to the port of discharge/place of delivery for account and risk of merchant (merchant haulage).\n\nThe location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.\n",
            "example" : {
               "UNLocationCode" : "DEHAM",
               "locationName" : "Hamburg"
            },
            "properties" : {
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "address" : {
                  "$ref" : "#/components/schemas/Address"
               },
               "facility" : {
                  "$ref" : "#/components/schemas/Facility"
               },
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Onward Inland Routing",
            "type" : "object"
         },
         "OtherDocumentParty" : {
            "description" : "A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.\n",
            "properties" : {
               "party" : {
                  "$ref" : "#/components/schemas/Party"
               },
               "partyFunction" : {
                  "description" : "Specifies the role of the party in a given context. Possible values are:\n\n- `SCO` (Service Contract Owner)\n- `DDR` (Consignor's freight forwarder)\n- `DDS` (Consignee's freight forwarder)\n- `COW` (Invoice payer on behalf of the consignor (shipper))\n- `COX` (Invoice payer on behalf of the consignee)\n",
                  "example" : "DDS",
                  "maxLength" : 3,
                  "type" : "string"
               }
            },
            "required" : [
               "party",
               "partyFunction"
            ],
            "title" : "Other Document Party",
            "type" : "object"
         },
         "OuterPackaging" : {
            "description" : "Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.\n",
            "properties" : {
               "dangerousGoods" : {
                  "description" : "A list of `Dangerous Goods`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/DangerousGoods"
                  },
                  "type" : "array"
               },
               "description" : {
                  "description" : "Description of the outer packaging/overpack.\n",
                  "example" : "Drum, steel",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "imoPackagingCode" : {
                  "description" : "The code of the packaging as per IMO.\n\n**Condition:** only applicable to dangerous goods if specified in the [IMO IMDG code](https://www.imo.org/en/publications/Pages/IMDG%20Code.aspx). If not available, the `packageCode` as per UN recommendation 21 should be used.\n",
                  "example" : "1A2",
                  "maxLength" : 5,
                  "minLength" : 1,
                  "pattern" : "^[A-Z0-9]{1,5}$",
                  "type" : "string"
               },
               "numberOfPackages" : {
                  "description" : "Specifies the number of outer packagings/overpacks associated with this `Cargo Item`.\n",
                  "example" : 18,
                  "format" : "int32",
                  "maximum" : 99999999,
                  "minimum" : 1,
                  "type" : "integer"
               },
               "packageCode" : {
                  "description" : "A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation N°21](https://unece.org/trade/uncefact/cl-recommendations)\n\n**Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.\n",
                  "example" : "5H",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z0-9]{2}$",
                  "type" : "string"
               },
               "woodDeclaration" : {
                  "description" : "Property to clearly indicate if the products, packaging and any other items are made of wood. Possible values include:\n- `NOT_APPLICABLE` (if no wood or any other wood product such as packaging and supports are being shipped)\n- `NOT_TREATED_AND_NOT_CERTIFIED` (if the wood or wooden materials have not been treated nor fumigated and do not include a certificate)\n- `PROCESSED` (if the wood or wooden materials are entirely made of processed wood, such as plywood, particle board, sliver plates of wood and wood laminate sheets produced using glue, heat, pressure or a combination of these)\n- `TREATED_AND_CERTIFIED` (if the wood or wooden materials have been treated and/or fumigated and include a certificate)\n",
                  "example" : "TREATED_AND_CERTIFIED",
                  "maxLength" : 30,
                  "type" : "string"
               }
            },
            "required" : [
               "description",
               "numberOfPackages"
            ],
            "title" : "Outer Packaging",
            "type" : "object"
         },
         "Party" : {
            "description" : "Refers to a company or a legal entity.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "Asseco Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "reference" : {
                  "description" : "A reference linked to the `Party`.\n",
                  "example" : "HHL007",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Party",
            "type" : "object"
         },
         "PartyAddress" : {
            "description" : "An object for storing address related information\n",
            "properties" : {
               "POBox" : {
                  "description" : "A numbered box at a post office where a person or business can have mail or parcels delivered.",
                  "example" : "123",
                  "maxLength" : 20,
                  "type" : "string"
               },
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the carrier booking office is located. The pattern used must be\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "city" : {
                  "description" : "The city name of the party’s address.\n",
                  "example" : "Amsterdam",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "countryCode" : {
                  "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "example" : "NL",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z]{2}$",
                  "type" : "string"
               },
               "floor" : {
                  "description" : "The floor of the party’s street number.\n",
                  "example" : "2nd",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "postCode" : {
                  "description" : "The post code of the party’s address.",
                  "example" : "1047 HM",
                  "maxLength" : 10,
                  "type" : "string"
               },
               "stateRegion" : {
                  "description" : "The state/region of the party’s address.",
                  "example" : "North Holland",
                  "maxLength" : 65,
                  "type" : "string"
               },
               "street" : {
                  "description" : "The name of the street of the party’s address.",
                  "example" : "Ruijggoordweg",
                  "maxLength" : 70,
                  "type" : "string"
               },
               "streetNumber" : {
                  "description" : "The number of the street of the party’s address.",
                  "example" : "100",
                  "maxLength" : 50,
                  "type" : "string"
               }
            },
            "required" : [
               "city",
               "countryCode",
               "street"
            ],
            "title" : "Party Address",
            "type" : "object"
         },
         "PartyContactDetail" : {
            "anyOf" : [
               {
                  "description" : "`Phone` is mandatory to provide\n",
                  "properties" : {
                     "phone" : {
                        "description" : "Phone number for the contact. Phone **must** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).\n",
                        "example" : "+45 70262970",
                        "maxLength" : 30,
                        "pattern" : "^\\S(?:.*\\S)?$",
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "phone"
                  ],
                  "title" : "Phone required",
                  "type" : "object"
               },
               {
                  "description" : "`Email` is mandatory to provide\n",
                  "properties" : {
                     "email" : {
                        "description" : "`E-mail` address to be used\n",
                        "example" : "info@dcsa.org",
                        "maxLength" : 100,
                        "pattern" : "^.+@\\S+$",
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "email"
                  ],
                  "title" : "Email required",
                  "type" : "object"
               }
            ],
            "description" : "The contact details of the person to contact. It is mandatory to provide either `phone` and/or `email` along with the `name`.\n",
            "example" : {
               "name" : "Henrik",
               "phone" : "+45 51801234"
            },
            "properties" : {
               "name" : {
                  "description" : "Name of the contact\n",
                  "example" : "Henrik",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "name"
            ],
            "title" : "Party Contact Detail",
            "type" : "object"
         },
         "Place of Issue" : {
            "description" : "An object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified either as a `UN Location Code` or as a `CountryCode`.\n",
            "oneOf" : [
               {
                  "properties" : {
                     "UNLocationCode" : {
                        "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
                        "example" : "NLAMS",
                        "maxLength" : 5,
                        "minLength" : 5,
                        "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "UNLocationCode"
                  ],
                  "title" : "UN Location Code",
                  "type" : "object"
               },
               {
                  "properties" : {
                     "countryCode" : {
                        "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                        "example" : "NL",
                        "maxLength" : 2,
                        "minLength" : 2,
                        "pattern" : "^[A-Z]{2}$",
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "countryCode"
                  ],
                  "title" : "Country Code",
                  "type" : "object"
               }
            ],
            "properties" : {
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Place of Issue",
            "type" : "object"
         },
         "PlaceOfDelivery" : {
            "description" : "An object to capture `Place of Delivery` location specified as: the location where the cargo is handed over to the consignee, or his agent, by the shipping line and where responsibility of the shipping line ceases.\n\n**Condition:** Only when onward transport is done by the carrier\n\nThe location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.\n",
            "example" : {
               "UNLocationCode" : "DEHAM",
               "locationName" : "Hamburg"
            },
            "properties" : {
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "address" : {
                  "$ref" : "#/components/schemas/Address"
               },
               "facility" : {
                  "$ref" : "#/components/schemas/Facility"
               },
               "geoCoordinate" : {
                  "$ref" : "#/components/schemas/GeoCoordinate"
               },
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Place of Delivery",
            "type" : "object"
         },
         "PlaceOfReceipt" : {
            "description" : "An object to capture `Place of Receipt` location specified as: the location where the cargo is handed over by the shipper, or his agent, to the shipping line. This indicates the point at which the shipping line takes on responsibility for carriage of the container.\n\n**Condition:** Only when pre-carriage is done by the carrier.\n\nThe location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.\n",
            "example" : {
               "UNLocationCode" : "DEHAM",
               "locationName" : "Hamburg"
            },
            "properties" : {
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "address" : {
                  "$ref" : "#/components/schemas/Address"
               },
               "facility" : {
                  "$ref" : "#/components/schemas/Facility"
               },
               "geoCoordinate" : {
                  "$ref" : "#/components/schemas/GeoCoordinate"
               },
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Place of Receipt",
            "type" : "object"
         },
         "PortOfDischarge" : {
            "description" : "An object to capture `Port of Discharge` location specified as: the location where the cargo is discharged from the last sea-going vessel.\n\nThe location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.\n",
            "example" : {
               "UNLocationCode" : "DEHAM",
               "locationName" : "Hamburg"
            },
            "properties" : {
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "city" : {
                  "$ref" : "#/components/schemas/City"
               },
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Port of Discharge",
            "type" : "object"
         },
         "PortOfLoading" : {
            "description" : "An object to capture `Port of Loading` location specified as: the location where the cargo is loaded onto a first sea-going vessel for water transportation.\n\nThe location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.\n",
            "example" : {
               "UNLocationCode" : "DEHAM",
               "locationName" : "Hamburg"
            },
            "properties" : {
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "city" : {
                  "$ref" : "#/components/schemas/City"
               },
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Port of Loading",
            "type" : "object"
         },
         "Reference" : {
            "description" : "References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\n",
            "properties" : {
               "type" : {
                  "description" : "The reference type codes defined by DCSA. Possible values are:\n- `CR` (Customer’s Reference)\n- `AKG` (Vehicle Identification Number)\n",
                  "example" : "CR",
                  "maxLength" : 3,
                  "type" : "string"
               },
               "value" : {
                  "description" : "The value of the reference. \n",
                  "example" : "HHL00103004",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "type",
               "value"
            ],
            "title" : "Reference",
            "type" : "object"
         },
         "ReferenceConsignmentItem" : {
            "description" : "References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\n",
            "properties" : {
               "type" : {
                  "description" : "The reference type codes defined by DCSA. Possible values are:\n- `CR` (Customer’s Reference)\n- `AKG` (Vehicle Identification Number)\n- `SPO` (Shipper's Purchase Order)\n- `CPO` (Consignee's Purchase Order)\n",
                  "example" : "CR",
                  "maxLength" : 3,
                  "type" : "string"
               },
               "values" : {
                  "description" : "List of `referenceValues` for a given `referenceType`.\n",
                  "items" : {
                     "description" : "The value of the reference. \n",
                     "example" : "HHL00103004",
                     "maxLength" : 35,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "minItems" : 1,
                  "type" : "array"
               }
            },
            "required" : [
               "type",
               "values"
            ],
            "title" : "Reference (Consignment Item)",
            "type" : "object"
         },
         "Seal" : {
            "description" : "Addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This `Seal` is meant to stay on until the shipment equipment reaches its final destination.\n",
            "properties" : {
               "number" : {
                  "description" : "Identifies a seal affixed to the container.",
                  "example" : "VET123",
                  "maxLength" : 15,
                  "type" : "string"
               },
               "source" : {
                  "description" : "The source of the seal, namely who has affixed the seal.\n- `CAR` (Carrier)\n- `SHI` (Shipper)\n- `VET` (Veterinary)\n- `CUS` (Customs)\n\n**Condition:** Seal source may be required depending on the type of commodity being shipped.\n",
                  "enum" : [
                     "CAR",
                     "SHI",
                     "VET",
                     "CUS"
                  ],
                  "example" : "CUS",
                  "type" : "string"
               }
            },
            "required" : [
               "number"
            ],
            "title" : "Seal",
            "type" : "object"
         },
         "Shipper" : {
            "description" : "The party by whom or in whose name or on whose behalf a contract of carriage of goods by sea has been concluded with a carrier, or the party by whom or in whose name, or on whose behalf, the goods are actually delivered to the carrier in relation to the contract of carriage by sea.\n\n**Condition:** Either the `address` or the `displayedAddress` must be included in the `Transport Document`.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "displayedAddress" : {
                  "description" : "The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.\n\n**Conditions:** if provided\n  - the displayed address must be included in the Transport Document.\n  - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters\n  - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters\n",
                  "items" : {
                     "description" : "A single address line\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 6,
                  "type" : "array"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "purchaseOrderReferences" : {
                  "description" : "A list of `Purchase Order Reference`s linked to the `Shipper`.\n",
                  "items" : {
                     "description" : "A purchase order reference linked to the `Shipper`.\n",
                     "example" : "HHL007",
                     "maxLength" : 35,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "reference" : {
                  "description" : "A reference linked to the `Shipper`.\n",
                  "example" : "HHL007",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               },
               "typeOfPerson" : {
                  "description" : "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
                  "example" : "NATURAL_PERSON",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Shipper",
            "type" : "object"
         },
         "SupportingDocument" : {
            "properties" : {
               "content" : {
                  "description" : "The actual contents of the visual rendering.",
                  "example" : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAGaSURBVDhPnZO/S0JRFMe/zygxwgqcfZtz0N7SFNgPaKlJpTFLCqwotV9qRYN/gIOL1FK22NISWENT0BTUkNLgIL2iHxYRnc697/kKzdA+cOD8uOec77uXB/oHngMPnd2eSb/pAf5DP2EWhGlQ8ChIikiiQa7vruFacwHdHHwC9nY7mhqgRBTdsbDdA/nVvHQbYnxvHHhnp4XtFZjon4DapTam4Lx4jt7NXlO6WEsreltDA5RFlt4qHDaWXlgrwNnplDX5CcWnIo5vjmWimsGdQV7HjjjJ0gMDAbNZopU1wgwfmQSlL9JCkEkunyMEuLbMFgZZ161G5RsFES5WNrC8lC8Fb49XDlcWWLNVOHqttFGCo90haxUsyeEk8GhEfEm+lA/ZqyyGdof0ocJegMhIpKZZIC8xfhLH0v6SfstCzRubeK42tg9Od3RDm9c4qMV8hWguinAmDHTJvC5bVB6A8nYZtlabTFcjX0EQ6gshNhqTDSbPQGIsUbdZIhT8ZOt0izDFu+dAakI1svX59W/MXGbIveM2or8g+gL+Fn3DwcYf+gAAAABJRU5ErkJggg==",
                  "format" : "byte",
                  "type" : "string"
               },
               "contentType" : {
                  "default" : "application/pdf",
                  "description" : "The `Media Type` of the content being transmitted as defined by [Iana](https://www.iana.org/assignments/media-types/media-types.xhtml). Can be left out if the content is `application/pdf` (PDF).\n\n**Conditional:** This property is mandatory to provide if it differs from `application/pdf`\n",
                  "example" : "application/msword",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "name" : {
                  "example" : "Carrier rendered copy of the EBL.pdf",
                  "maxLength" : 100,
                  "type" : "string"
               }
            },
            "required" : [
               "content",
               "name"
            ],
            "title" : "Supporting Document",
            "type" : "object"
         },
         "Tare Weight" : {
            "description" : "The weight of an empty container (gross container weight).\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
                  "enum" : [
                     "KGM",
                     "LBR"
                  ],
                  "example" : "KGM",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The weight of an empty container (gross container weight).\n",
                  "example" : 4800,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Tare Weight",
            "type" : "object"
         },
         "TaxLegalReference" : {
            "description" : "Reference that uniquely identifies a party for tax and/or legal purposes in accordance with the relevant jurisdiction.\n\nA small list of **potential** examples:\n\n| Type  | Country | Description |\n|-------|:-------:|-------------|\n|PAN|IN|Goods and Services Tax Identification Number in India|\n|GSTIN|IN|Goods and Services Tax Identification Number in India|\n|IEC|IN|Importer-Exported Code in India|\n|RUC|EC|Registro Único del Contribuyente in Ecuador|\n|RUC|PE|Registro Único del Contribuyente in Peru|\n|NIF|MG|Numéro d'Identification Fiscal in Madagascar|\n|NIF|DZ|Numéro d'Identification Fiscal in Algeria|\n",
            "properties" : {
               "countryCode" : {
                  "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "example" : "IN",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z]{2}$",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The reference type code as defined by the relevant tax and/or legal authority.\n",
                  "example" : "PAN",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The value of the `taxLegalReference`\n",
                  "example" : "AAAAA0000A",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "countryCode",
               "type",
               "value"
            ],
            "title" : "Tax & Legal Reference",
            "type" : "object"
         },
         "TransportDocument" : {
            "description" : "The document that governs the terms of carriage between shipper and carrier for maritime transportation. Two distinct types of transport documents exist:\n- Bill of Lading\n- Sea Waybill. \n",
            "properties" : {
               "cargoMovementTypeAtDestination" : {
                  "description" : "Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:\n\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
                  "example" : "FCL",
                  "maxLength" : 3,
                  "type" : "string"
               },
               "cargoMovementTypeAtOrigin" : {
                  "description" : "Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:\n\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
                  "example" : "FCL",
                  "maxLength" : 3,
                  "type" : "string"
               },
               "carrierClauses" : {
                  "description" : "Additional clauses for a specific shipment added by the carrier to the Bill of Lading, subject to local rules / guidelines or certain mandatory information required to be shared with the customer.\n",
                  "items" : {
                     "description" : "The content of the clause.\n",
                     "example" : "It is not allowed to...",
                     "maxLength" : 20000,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "carrierCode" : {
                  "description" : "The `SCAC` code (provided by [NMFTA](https://nmfta.org/scac/)) or `SMDG` code (provided by [SMDG](https://smdg.org/documents/smdg-code-lists/smdg-liner-code-list/)) of the issuing carrier of the `Transport Document`. `carrierCodeListProvider` defines which list the `carrierCode` is based upon.\n",
                  "example" : "MMCU",
                  "maxLength" : 4,
                  "pattern" : "^\\S+$",
                  "type" : "string"
               },
               "carrierCodeListProvider" : {
                  "description" : "The code list provider for the `carrierCode`. Possible values are:\n- `SMDG` (Ship Message Design Group)\n- `NMFTA` (National Motor Freight Traffic Association)\n",
                  "enum" : [
                     "SMDG",
                     "NMFTA"
                  ],
                  "example" : "NMFTA",
                  "type" : "string"
               },
               "charges" : {
                  "description" : "A list of `Charges`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Charge"
                  },
                  "type" : "array"
               },
               "consignmentItems" : {
                  "description" : "A list of `ConsignmentItems`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/ConsignmentItem"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "contractQuotationReference" : {
                  "description" : "Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference.\n",
                  "example" : "HHL1401",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "declaredValue" : {
                  "description" : "The value of the cargo that the shipper declares in order to avoid the carrier's limitation of liability and \"Ad Valorem\" freight, i.e., freight which is calculated based on the value of the goods declared by the shipper.\n\n**Condition:** Included in the transport document upon customer request. If customers want the value to show, evidence is required, and customers need to approve additional insurance fee charge from the carrier (very exceptional).\n",
                  "example" : 1231.1,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               },
               "declaredValueCurrency" : {
                  "description" : "The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html).\n",
                  "example" : "DKK",
                  "maxLength" : 3,
                  "minLength" : 3,
                  "pattern" : "^[A-Z]{3}$",
                  "type" : "string"
               },
               "deliveryTypeAtDestination" : {
                  "description" : "Indicates the type of service offered at `Destination`. The options are:\n\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
                  "enum" : [
                     "CY",
                     "SD",
                     "CFS"
                  ],
                  "example" : "CY",
                  "maxLength" : 3,
                  "type" : "string"
               },
               "displayedNameForPlaceOfDelivery" : {
                  "description" : "The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPlaceOfReceipt" : {
                  "description" : "The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPortOfDischarge" : {
                  "description" : "The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPortOfLoad" : {
                  "description" : "The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedShippedOnBoardReceivedForShipment" : {
                  "description" : "The text to be displayed on the `Transport Document` as evidence that the goods have been received for shipment or shipped on board.\n",
                  "example" : "Received for Shipment CMA CGM CONCORDE 28-Jul-2022 CMA CGM Agences France SAS As agents for the Carrier",
                  "maxLength" : 250,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "documentParties" : {
                  "$ref" : "#/components/schemas/Document Parties"
               },
               "freightPaymentTermCode" : {
                  "description" : "An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
                  "enum" : [
                     "PRE",
                     "COL"
                  ],
                  "example" : "PRE",
                  "type" : "string"
               },
               "invoicePayableAt" : {
                  "description" : "Location where payment of ocean freight and charges for the main transport will take place by the customer.\n\nThe location can be provided as a `UN Location Code` or as a fallback - a `freeText` field\n",
                  "oneOf" : [
                     {
                        "properties" : {
                           "UNLocationCode" : {
                              "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
                              "example" : "NLAMS",
                              "maxLength" : 5,
                              "minLength" : 5,
                              "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                              "type" : "string"
                           }
                        },
                        "required" : [
                           "UNLocationCode"
                        ],
                        "title" : "UN Location Code",
                        "type" : "object"
                     },
                     {
                        "properties" : {
                           "freeText" : {
                              "description" : "The name of the location where payment will be rendered by the customer.\n",
                              "example" : "DCSA Headquarters",
                              "maxLength" : 35,
                              "type" : "string"
                           }
                        },
                        "required" : [
                           "freeText"
                        ],
                        "title" : "Free text",
                        "type" : "object"
                     }
                  ],
                  "title" : "Invoice Payable At",
                  "type" : "object"
               },
               "isElectronic" : {
                  "description" : "An indicator whether the transport document is electronically transferred.\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isShippedOnBoardType" : {
                  "description" : "Specifies whether the Transport Document is a received for shipment, or shipped on board.\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isToOrder" : {
                  "description" : "Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).\n\n`isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "issueDate" : {
                  "description" : "Local date when the transport document has been issued.\n\nCan be omitted on draft transport documents, but must be provided when the document has been issued.\n",
                  "example" : "2020-12-12",
                  "format" : "date",
                  "type" : "string"
               },
               "numberOfCopiesWithCharges" : {
                  "description" : "The requested number of copies of the `Transport Document` to be issued by the carrier including charges.\n\n**Conditions:** The following table defines the conditions for the `numberOfCopiesWithCharges` property:\n| Transport Document Type Code | Is Electronic | Meaning |\n|-------|:-------:|-------|\n|`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier with charges|\n|`BOL`|`true`|Not applicable, there are no copies|\n|`SWB`|`false`|Indicates that charges should be included in the `SWB` (pdf or other formats)|\n|`SWB`|`true`|Indicates that charges should be included in the electronic `SWB`|\n",
                  "example" : 2,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfCopiesWithoutCharges" : {
                  "description" : "The requested number of copies of the `Transport Document` to be issued by the carrier **NOT** including charges.\n\n**Conditions:** The following table defines the conditions for the `numberOfCopiesWithoutCharges` property:\n| Transport Document Type Code | Is Electronic | Meaning |\n|-------|:-------:|-------|\n|`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier without charges|\n|`BOL`|`true`|Not applicable, there are no copies|\n|`SWB`|`false`|Indicates that charges should NOT be included in the `SWB` (pdf or other formats)|\n|`SWB`|`true`|Indicates that charges NOT should be included in the electronic `SWB`|\n",
                  "example" : 2,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfOriginalsWithCharges" : {
                  "description" : "Number of originals of the Bill of Lading that has been requested by the customer with charges.\n\n**Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)\n",
                  "example" : 1,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfOriginalsWithoutCharges" : {
                  "description" : "Number of originals of the Bill of Lading that has been requested by the customer without charges.\n\n**Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)\n",
                  "example" : 1,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfRiderPages" : {
                  "description" : "The number of additional pages required to contain the goods description on a transport document. Only applicable for physical transport documents.\n",
                  "example" : 2,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "partyContactDetails" : {
                  "description" : "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "placeOfIssue" : {
                  "$ref" : "#/components/schemas/Place of Issue"
               },
               "receiptTypeAtOrigin" : {
                  "description" : "Indicates the type of service offered at `Origin`. The options are:\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
                  "enum" : [
                     "CY",
                     "SD",
                     "CFS"
                  ],
                  "example" : "CY",
                  "maxLength" : 3,
                  "type" : "string"
               },
               "receivedForShipmentDate" : {
                  "description" : "Date when the last container linked to the transport document is physically in the terminal (customers cleared against the intended vessel).\n\nWhen provided on a transport document, the transportDocument is a `Received For Shipment` B/L.\n\nExactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.\n",
                  "example" : "2020-12-12",
                  "format" : "date",
                  "type" : "string"
               },
               "references" : {
                  "description" : "A list of `References`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Reference"
                  },
                  "type" : "array"
               },
               "routingOfConsignmentCountries" : {
                  "description" : "A list of countries the goods will be routed through from origin to destination defined by the 2 characters country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "items" : {
                     "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                     "example" : "NL",
                     "maxLength" : 2,
                     "minLength" : 2,
                     "pattern" : "^[A-Z]{2}$",
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "serviceContractReference" : {
                  "description" : "Reference number for agreement between shipper and carrier, which optionally includes a certain minimum quantity commitment (usually referred as “MQC”) of cargo that the shipper commits to over a fixed period, and the carrier commits to a certain rate or rate schedule.\n",
                  "example" : "HHL51800000",
                  "maxLength" : 30,
                  "type" : "string"
               },
               "shippedOnBoardDate" : {
                  "description" : "Date when the last container that is linked to the transport document is physically loaded onboard the vessel indicated on the transport document.\n\nWhen provided on a transport document, the transportDocument is a `Shipped On Board` B/L.\n\nExactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.\n",
                  "example" : "2020-12-12",
                  "format" : "date",
                  "type" : "string"
               },
               "shippingInstructionsReference" : {
                  "description" : "The identifier for a `Shipping Instructions` provided by the carrier for system purposes.\n",
                  "example" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "termsAndConditions" : {
                  "description" : "Carrier terms and conditions of transport.\n",
                  "example" : "Any reference in...",
                  "maxLength" : 50000,
                  "type" : "string"
               },
               "transportDocumentReference" : {
                  "description" : "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
                  "example" : "HHL71800000",
                  "maxLength" : 20,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "transportDocumentStatus" : {
                  "description" : "The status of the `Transport Document`. Possible values are:\n- DRAFT\n- APPROVED\n- ISSUED\n- PENDING_SURRENDER_FOR_AMENDMENT\n- SURRENDERED_FOR_AMENDMENT\n- PENDING_SURRENDER_FOR_DELIVERY\n- SURRENDERED_FOR_DELIVERY\n- VOIDED\n",
                  "example" : "DRAFT",
                  "maxLength" : 50,
                  "type" : "string"
               },
               "transportDocumentTypeCode" : {
                  "description" : "Specifies the type of the transport document\n- `BOL` (Bill of Lading)\n- `SWB` (Sea Waybill)\n",
                  "enum" : [
                     "BOL",
                     "SWB"
                  ],
                  "example" : "SWB",
                  "type" : "string"
               },
               "transports" : {
                  "$ref" : "#/components/schemas/Transports"
               },
               "utilizedTransportEquipments" : {
                  "description" : "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/UtilizedTransportEquipment"
                  },
                  "minItems" : 1,
                  "type" : "array"
               }
            },
            "required" : [
               "cargoMovementTypeAtDestination",
               "cargoMovementTypeAtOrigin",
               "carrierCode",
               "carrierCodeListProvider",
               "consignmentItems",
               "deliveryTypeAtDestination",
               "documentParties",
               "invoicePayableAt",
               "isElectronic",
               "isShippedOnBoardType",
               "isToOrder",
               "partyContactDetails",
               "receiptTypeAtOrigin",
               "termsAndConditions",
               "transportDocumentReference",
               "transportDocumentStatus",
               "transportDocumentTypeCode",
               "transports",
               "utilizedTransportEquipments"
            ],
            "title" : "Transport Document",
            "type" : "object"
         },
         "Transports" : {
            "properties" : {
               "onCarriageBy" : {
                  "description" : "Mode of transportation for on-carriage when transport from the port of discharge is organized by the carrier. If this attributes is populated, then a Place of Delivery must also be defined. The currently supported values include:\n- `VESSEL` (Vessel)\n- `RAIL` (Rail)\n- `TRUCK` (Truck)\n- `BARGE` (Barge)\n- `MULTIMODAL` (if multiple modes are used)\n",
                  "example" : "TRUCK",
                  "maxLength" : 50,
                  "type" : "string"
               },
               "onwardInlandRouting" : {
                  "$ref" : "#/components/schemas/OnwardInlandRouting"
               },
               "placeOfDelivery" : {
                  "$ref" : "#/components/schemas/PlaceOfDelivery"
               },
               "placeOfReceipt" : {
                  "$ref" : "#/components/schemas/PlaceOfReceipt"
               },
               "plannedArrivalDate" : {
                  "description" : "The planned date of arrival.\n",
                  "example" : "2024-06-07",
                  "format" : "date",
                  "type" : "string"
               },
               "plannedDepartureDate" : {
                  "description" : "The planned date of departure.\n",
                  "example" : "2024-06-03",
                  "format" : "date",
                  "type" : "string"
               },
               "portOfDischarge" : {
                  "$ref" : "#/components/schemas/PortOfDischarge"
               },
               "portOfLoading" : {
                  "$ref" : "#/components/schemas/PortOfLoading"
               },
               "preCarriageBy" : {
                  "description" : "Mode of transportation for pre-carriage when transport to the port of loading is organized by the carrier. If this attributes is populated, then a Place of Receipt must also be defined. The currently supported values include:\n- `VESSEL` (Vessel)\n- `RAIL` (Rail)\n- `TRUCK` (Truck)\n- `BARGE` (Barge)\n- `MULTIMODAL` (if multiple modes are used)\n",
                  "example" : "RAIL",
                  "maxLength" : 50,
                  "type" : "string"
               },
               "vesselVoyages" : {
                  "description" : "Allow the possibility to include multiple vessels/voyages in the `Transport Document` (e.g. the first sea going vessel and the mother vessel). At least one is mandatory to provide.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/VesselVoyage"
                  },
                  "minItems" : 1,
                  "type" : "array"
               }
            },
            "required" : [
               "plannedArrivalDate",
               "plannedDepartureDate",
               "portOfDischarge",
               "portOfLoading",
               "vesselVoyages"
            ],
            "title" : "Transports",
            "type" : "object"
         },
         "UtilizedTransportEquipment" : {
            "description" : "Specifies the container (`equipment`), the total `weight`, total `volume`, possible `ActiveReeferSettings`, `seals` and `references`\n",
            "properties" : {
               "activeReeferSettings" : {
                  "$ref" : "#/components/schemas/ActiveReeferSettings"
               },
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "equipment" : {
                  "$ref" : "#/components/schemas/Equipment"
               },
               "isNonOperatingReefer" : {
                  "description" : "If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.\n\n**Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isShipperOwned" : {
                  "description" : "Indicates whether the container is shipper owned (SOC).\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "references" : {
                  "description" : "A list of `References`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Reference"
                  },
                  "type" : "array"
               },
               "seals" : {
                  "description" : "A list of `Seals`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Seal"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "shippingMarks" : {
                  "description" : "A list of the `ShippingMarks` applicable to this `UtilizedTransportEquipment`\n",
                  "items" : {
                     "description" : "The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.\n",
                     "example" : "Made in China",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 50,
                  "type" : "array"
               }
            },
            "required" : [
               "equipment",
               "isShipperOwned",
               "seals"
            ],
            "title" : "Utilized Transport Equipment",
            "type" : "object"
         },
         "VesselVoyage" : {
            "description" : "Vessel and export voyage",
            "properties" : {
               "carrierExportVoyageNumber" : {
                  "description" : "The identifier of an export voyage. The carrier-specific identifier of the export Voyage.\n",
                  "example" : "2103S",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "universalExportVoyageReference" : {
                  "description" : "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWSR]`\n- `2 digits` for the year\n- `2 alphanumeric characters` for the sequence number of the voyage\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).\n",
                  "example" : "2103N",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
                  "type" : "string"
               },
               "vesselName" : {
                  "description" : "The name of the first sea going Vessel on board which the cargo is loaded or intended to be loaded\n",
                  "example" : "King of the Seas",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "carrierExportVoyageNumber",
               "vesselName"
            ],
            "title" : "Vessel/Voyage",
            "type" : "object"
         }
      }
   },
   "info" : {
      "contact" : {
         "email" : "info@dcsa.org",
         "name" : "Digital Container Shipping Association (DCSA)",
         "url" : "https://dcsa.org"
      },
      "description" : "This API is intended as an API between a carrier and a EBL Solution Platform.\n\nThe EBL Solution Provider is to implement\n\n    /v3/ebl-issuance-requests\n\nfor the carrier to call and the carrier is to implement\n\n    /v3/ebl-issuance-responses\n\nfor the EBL Solution Provider to call.\n\nWhen the document is to be surrendered, it should happen via a version of the [DCSA EBL Surrender](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_EBL_SUR/3.0.0) API.\n\nAPI specification issued by DCSA.org.\n\n### API Design & Implementation Principles\nThis API follows the guidelines defined in version 2.1 of the API Design & Implementation Principles which can be found on the [DCSA Developer page](https://developer.dcsa.org/api_design)\n\nFor a changelog, please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/ebl/v3/issuance#v300). Please [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\n",
      "license" : {
         "name" : "Apache 2.0",
         "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "title" : "DCSA OpenAPI specification for Issuance an EBL to an EBL platform.\n",
      "version" : "3.0.0"
   },
   "openapi" : "3.0.3",
   "paths" : {
      "/v3/ebl-issuance-requests" : {
         "put" : {
            "description" : "Submit a transport document (EBL) for issuance\n\n**This endPoint is to be implemented by an EBL Solution Provider for the carrier to call**\n",
            "operationId" : "put-ebl-issuance-requests",
            "parameters" : [
               {
                  "description" : "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
                  "explode" : false,
                  "in" : "header",
                  "name" : "API-Version",
                  "required" : false,
                  "schema" : {
                     "example" : "3",
                     "type" : "string"
                  },
                  "style" : "simple"
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "schema" : {
                        "$ref" : "#/components/schemas/IssuanceRequest"
                     }
                  }
               },
               "required" : true
            },
            "responses" : {
               "204" : {
                  "description" : "Platform acknowledges the issuance request and will follow up later with a response via the DCSA_ISS_RSP API. Please see the API description for the concrete link and version.\n\nNote that the platform MUST NOT accept an issuance request twice. If the client misbehaves and attempts to complete the same transaction more than once, then the platform must ensure that at most one of these requests sees a successful response.  The rest should an error instead.\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "409" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "An Issuance Request is made with a Transport Document Reference (TDR), that was used previously to request the issuance of a Transport Document (TD). The document is either already issued or an TD with the same TDR. \n\nThe eBL platform will inform the carrier when the carrier needs to act on this document again. If the issuance is pending, then the carrier will be notified via the DCSA_EBL_ISS_RSP API once the issuance process completes. If the issuance has already succeeded, the eBL platform will notify the carrier when there is a surrender request via the DCSA_EBL_SUR API.\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "default" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Request failed for some reason.",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               }
            },
            "summary" : "Request issuance of an EBL",
            "tags" : [
               "Issuance EBL"
            ]
         }
      },
      "/v3/ebl-issuance-responses" : {
         "post" : {
            "description" : "Submit a response to a carrier issuance request.\n\n**This endPoint is to be implemented by a carrier for the EBL Solution Provider to call**\n",
            "operationId" : "create-ebl-issuance-response",
            "parameters" : [
               {
                  "description" : "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
                  "explode" : false,
                  "in" : "header",
                  "name" : "API-Version",
                  "required" : false,
                  "schema" : {
                     "example" : "3",
                     "type" : "string"
                  },
                  "style" : "simple"
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "schema" : {
                        "$ref" : "#/components/schemas/IssuanceResponse"
                     }
                  }
               },
               "required" : true
            },
            "responses" : {
               "204" : {
                  "description" : "Carrier's acknowledgement of the Issuance Response",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "default" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "Request successful",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               }
            },
            "summary" : "Respond to a transport document issuance request",
            "tags" : [
               "Issuance Response"
            ]
         }
      }
   },
   "servers" : [
      {
         "description" : "SwaggerHub API Auto Mocking",
         "url" : "https://virtserver.swaggerhub.com/dcsaorg/DCSA_EBL_ISS/3.0.0"
      }
   ],
   "tags" : [
      {
         "description" : "Issuance EBL **implemented** by EBL Solution Platform\n",
         "name" : "Issuance EBL"
      },
      {
         "description" : "Issuance Response **implemented** by carrier\n",
         "name" : "Issuance Response"
      }
   ]
}
