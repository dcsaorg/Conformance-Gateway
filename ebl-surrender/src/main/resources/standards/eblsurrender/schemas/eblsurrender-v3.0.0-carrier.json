{
  "openapi": "3.0.3",
  "info": {
    "title": "DCSA EBL Surrender API",
    "description": "This API is intended as an API between a carrier (the server) and a EBL Solution Platform (the client).\n\nThe EBL Solution Platform will submit surrender requests to the carrier, which will be processed asynchronously. Responses to the surrender reqests will be submitted by the carrier via the [DCSA EBL Surrender Response API](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_EBL_SUR_RSP/3.0.0-Beta-2) API.\n\nWhen the platform submits a surrender request, the platform guarantees *all* of the following:\n\n1) The surrender request was submitted by the sole possessor of the EBL.\n2) Depending on the eBL type:\n   * For non-negoitable (\"straight\") eBLs, the surrender request was submitted by either the original shipper OR the consignee.\n   * For negotiable eBLs with a named titleholder, the surrender request was submitted by the named titleholder.\n   * For negotiable eBLs without a named titleholder / blank eBLs, possession is sufficient for the entity surrendering the eBL.\n3) The platform has the EBL in custody while the carrier is evaluating this surrender request. I.e., neither possession nor title holder changes can occur until the carrier responds to this surrender request.\n\nPlease see the [Surrender Request](#/SurrenderRequestDetails) for details on what data the platform will provide.\n\n### Stats API\nThe Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to this API. Further details can be found [here](https://labs.dcsa.org/#/http/guides/api-guides/stats-api/introduction)\n\nFor a changelog, please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/ebl/v3/surrender#v300B2). Please [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\n",
    "contact": {
      "name": "Digital Container Shipping Association (DCSA)",
      "url": "https://dcsa.org",
      "email": "info@dcsa.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "3.0.0-Beta-2"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/dcsaorg/DCSA_EBL_SUR/3.0.0-Beta-2",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "tags": [
    {
      "name": "Surrender Requests",
      "description": "The Surrender Requests\n"
    }
  ],
  "paths": {
    "/v3/ebl-surrender-requests": {
      "post": {
        "tags": [
          "Surrender Requests"
        ],
        "summary": "Creates a Surrender Request\n",
        "description": "The EBL Solution Platform uses this endpoint to submit a surrender request.\n\nThe carrier's answer to the surrender request will be returned via a callback response (see the `Callbacks` tab)\n",
        "operationId": "create-surrender-request",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "3"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurrenderRequestDetails"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Submission registered successfully.\n\nThe carrier will later follow up via the callback with a response.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SurrenderRequestAcknowledgement"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TransactionParty": {
        "title": "Transaction Party",
        "required": [
          "eblPlatform",
          "partyName"
        ],
        "type": "object",
        "properties": {
          "eblPlatform": {
            "maxLength": 4,
            "pattern": "\\S+",
            "type": "string",
            "description": "The EBL platform of the transaction party. The value **MUST** be one of:\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ESSD` (EssDOCS)\n- `IDT` (ICE Digital Trade)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGO)\n- `ETEU` (eTEU)\n\nMust be a code this list [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/reference-data/eblsolutionproviders-v3.0.0-Beta-2.csv).\n"
          },
          "partyName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "Globeteam"
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          }
        },
        "description": "Refers to a company or a legal entity."
      },
      "SurrenderRequestedBy": {
        "title": "Surrender Requested By",
        "required": [
          "eblPlatform",
          "partyName"
        ],
        "type": "object",
        "properties": {
          "eblPlatform": {
            "maxLength": 4,
            "pattern": "\\S+",
            "type": "string",
            "description": "The EBL platform of the transaction party. The value **MUST** be one of:\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ESSD` (EssDOCS)\n- `IDT` (ICE Digital Trade)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGO)\n- `ETEU` (eTEU)\n\nMust be a code this list [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/reference-data/eblsolutionproviders-v3.0.0-Beta-2.csv).\n"
          },
          "partyName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "Globeteam"
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          }
        },
        "description": "The party that requested the surrender of the EBL.\n\nThe EBL platform has verified that the party submitting the surrender request was in possion of the EBL and was entitled to perform the surrender ([see description of surrenderRequestDetails](#/components/schemas/surrenderRequestDetails)).\n"
      },
      "EndorsementChainLink": {
        "required": [
          "actionDateTime",
          "actor",
          "recipient"
        ],
        "type": "object",
        "properties": {
          "actionDateTime": {
            "type": "string",
            "description": "Date time when the action occured.",
            "format": "date-time"
          },
          "actor": {
            "$ref": "#/components/schemas/TransactionParty"
          },
          "recipient": {
            "$ref": "#/components/schemas/TransactionParty"
          }
        },
        "description": "Entry in the endorsement chain.\n"
      },
      "SurrenderRequestAcknowledgement": {
        "type": "object",
        "properties": {
          "surrenderRequestReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A server defined reference for a concrete surrender request. Surrender request references MUST NOT be reused.\n",
            "example": "Z12345"
          },
          "transportDocumentReference": {
            "maxLength": 20,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
            "example": "HHL71800000"
          }
        }
      },
      "SurrenderRequestDetails": {
        "required": [
          "surrenderRequestCode",
          "surrenderRequestReference",
          "surrenderRequestedBy",
          "transportDocumentReference"
        ],
        "type": "object",
        "properties": {
          "surrenderRequestReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A server defined reference for a concrete surrender request. Surrender request references MUST NOT be reused.\n",
            "example": "Z12345"
          },
          "transportDocumentReference": {
            "maxLength": 20,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
            "example": "HHL71800000"
          },
          "surrenderRequestCode": {
            "type": "string",
            "description": "Surrender Request codes:\n- `SREQ` (Requested to surrender for Delivery)\n- `AREQ` (Requested to surrender for Amendment)\n\nThe surrender request code determines the type of surrender request. Any parallel negotiation between the consignee and the carrier related to any of these type surrender are handled outside this API. Examples could be the shipment release related to a surrender for delivery or the actual contents of the admendment in a surrender related to an amendment.\n\nNote that \"Switch to paper\" is considered an amendment in how it is modelled via the DCSA eBL data standard.\n",
            "example": "SREQ",
            "enum": [
              "SREQ",
              "AREQ"
            ]
          },
          "reason": {
            "maxLength": 4,
            "type": "string",
            "description": "A code defined by DCSA indicating the reason for requesting a surrender for amendment. Possible values are:\n-  `SWTP` (Switch to paper)\n",
            "example": "SWTP"
          },
          "comments": {
            "maxLength": 255,
            "type": "string",
            "description": "Optional free text comment associated with the surrender request transaction.",
            "example": "As requested..."
          },
          "surrenderRequestedBy": {
            "$ref": "#/components/schemas/SurrenderRequestedBy"
          },
          "endorsementChain": {
            "minItems": 0,
            "type": "array",
            "description": "The endorsement chain consist of (a number of) endorsement actions that were performed **after** the eBL bill was issued.\n\nFor straight B/Ls, the endorsement chain can be omitted. For negotiable eBLs, the endorsement chain must be present, as the carrier receiving the surrender request and will check all endorsements before accepting the eBL. The endorsement chain is the electronic version of the \"back side\" of the paper world B/L.\n",
            "items": {
              "$ref": "#/components/schemas/EndorsementChainLink"
            }
          }
        },
        "description": "A concrete surrender request related to a transport document.\n\nThe platform guarantees *all* of the following:\n\n  1) The surrender request was submitted by the sole possessor of the EBL.\n  2) Depending on the eBL type:\n   * For non-negoitable (\"straight\") eBLs, the surrender request was submitted by either the original shipper OR the consignee.\n   * For negotiable eBLs with a named titleholder, the surrender request was submitted by the named titleholder.\n   * For negotiable eBLs without a named titleholder / blank eBLs, possession is sufficient for the entity surrendering the eBL.\n  3) The platform has the EBL in custody while the carrier is evaluating this surrender request. I.e., neither possession nor title holder changes can occur until the carrier responds to this surrender request.\n"
      },
      "IdentifyingCode": {
        "title": "Identifying Code",
        "required": [
          "codeListProvider",
          "partyCode"
        ],
        "type": "object",
        "properties": {
          "codeListProvider": {
            "maxLength": 100,
            "type": "string",
            "description": "A list of codes identifying a party. Possible values are:\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ESSD` (EssDOCS)\n- `IDT` (ICE Digital Trade)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGO)\n- `ETEU` (eTEU)\n- `GSBN` (Global Shipping Business Network)\n- `WISE` (WiseTech)\n- `GLEIF` (Global Legal Entity Identifier Foundation)\n- `W3C` (World Wide Web Consortium)\n- `DNB` (Dun and Bradstreet)\n- `FMC` (Federal Maritime Commission)\n- `DCSA` (Digitial Container Shipping Association)\n- `ZZZ` (Mutually defined)\n",
            "example": "W3C"
          },
          "partyCode": {
            "maxLength": 100,
            "type": "string",
            "description": "Code to identify the party as provided by the `codeListProvider`\n",
            "example": "MSK"
          },
          "codeListName": {
            "description": "The name of the code list, code generation mechanism or code authority for the `partyCode`. Example values could be:\n- `DID` (Decenbtralized Identifier) for `codeListProvider` `W3C`\n- `LEI` (Legal Entity Identifier) for `codeListProvider` `GLEIF`\n- `DUNS` (Data Universal Numbering System) for `codeListProvider` `DNB`\n",
            "example": "DID"
          }
        }
      },
      "TaxLegalReference": {
        "title": "Tax & Legal Reference",
        "required": [
          "countryCode",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The reference type code as defined by the relevant tax and/or legal authority.\n",
            "example": "PAN"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "DK"
          },
          "value": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The value of the `taxLegalReference`\n",
            "example": "AAAAA0000A"
          }
        },
        "description": "Reference that uniquely identifies a party for tax and/or legal purposes in accordance with the relevant jurisdiction.\nA list of examples:\n\n| Type  | Country | Description |\n|-------|:-------:|-------------|\n|PAN|IN|Goods and Services Tax Identification Number in India|\n|GSTIN|IN|Goods and Services Tax Identification Number in India|\n|IEC|IN|Importer-Exported Code in India|\n|RUC|EC|Registro Único del Contribuyente in Ecuador|\n|RUC|PE|Registro Único del Contribuyente in Peru|\n|NIF|MG|Numéro d’Identification Fiscal in Madagascar|\n|NIF|DZ|Numéro d’Identification Fiscal in Algeria|\n\nAllowed combinations of `type` and `country` are maintained in [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/documentation/reference-data/taxandlegalreferences-v300.csv).\n"
      },
      "ErrorResponse": {
        "title": "Error Response",
        "required": [
          "errorDateTime",
          "errors",
          "httpMethod",
          "requestUri",
          "statusCode",
          "statusCodeText"
        ],
        "type": "object",
        "properties": {
          "httpMethod": {
            "type": "string",
            "description": "The HTTP method used to make the request e.g. `GET`, `POST`, etc\n",
            "example": "POST",
            "enum": [
              "GET",
              "HEAD",
              "POST",
              "PUT",
              "DELETE",
              "OPTION",
              "PATCH"
            ]
          },
          "requestUri": {
            "type": "string",
            "description": "The URI that was requested.\n",
            "example": "/v1/events"
          },
          "statusCode": {
            "type": "integer",
            "description": "The HTTP status code returned.\n",
            "format": "int32",
            "example": 400
          },
          "statusCodeText": {
            "maxLength": 50,
            "type": "string",
            "description": "A standard short description corresponding to the HTTP status code.\n",
            "example": "Bad Request"
          },
          "statusCodeMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "A long description corresponding to the HTTP status code with additional information.\n",
            "example": "The supplied data could not be accepted"
          },
          "providerCorrelationReference": {
            "maxLength": 100,
            "type": "string",
            "description": "A unique identifier to the HTTP request within the scope of the API provider.\n",
            "example": "4426d965-0dd8-4005-8c63-dc68b01c4962"
          },
          "errorDateTime": {
            "type": "string",
            "description": "The DateTime corresponding to the error occurring. Must be formatted using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\n",
            "format": "date-time",
            "example": "2019-11-12T07:41:00+08:30"
          },
          "errors": {
            "minItems": 1,
            "type": "array",
            "description": "An array of errors providing more detail about the root cause.\n",
            "items": {
              "$ref": "#/components/schemas/Detailed Error"
            }
          }
        },
        "description": "Unexpected error"
      },
      "Detailed Error": {
        "title": "Detailed Error",
        "required": [
          "errorCodeMessage",
          "errorCodeText"
        ],
        "type": "object",
        "properties": {
          "errorCode": {
            "maximum": 9999,
            "minimum": 7000,
            "type": "integer",
            "description": "The detailed error code returned.\n\n  - `7000-7999` Technical error codes\n  - `8000-8999` Functional error codes\n  - `9000-9999` API provider-specific error codes            \n\n[Error codes as specified by DCSA](https://dcsa.atlassian.net/wiki/spaces/DTG/pages/197132308/Standard+Error+Codes).\n",
            "format": "int32",
            "example": 7003
          },
          "property": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the property causing the error.\n",
            "example": "facilityCode"
          },
          "value": {
            "maxLength": 500,
            "type": "string",
            "description": "The value of the property causing the error serialised as a string exactly as in the original request.\n",
            "example": "SG SIN WHS"
          },
          "jsonPath": {
            "maxLength": 500,
            "type": "string",
            "description": "A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).\n",
            "example": "$.location.facilityCode"
          },
          "errorCodeText": {
            "maxLength": 100,
            "type": "string",
            "description": "A standard short description corresponding to the `errorCode`.\n",
            "example": "invalidData"
          },
          "errorCodeMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "A long description corresponding to the `errorCode` with additional information.\n",
            "example": "Spaces not allowed in facility code"
          }
        }
      }
    },
    "parameters": {
      "Api-Version-Major": {
        "name": "API-Version",
        "in": "header",
        "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "3"
        }
      }
    },
    "headers": {
      "API-Version": {
        "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "3.0.0-Beta-2"
        }
      }
    }
  }
}
