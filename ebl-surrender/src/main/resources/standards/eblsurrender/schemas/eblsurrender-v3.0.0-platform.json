{
  "openapi": "3.0.3",
  "info": {
    "title": "DCSA EBL Surrender Response API",
    "description": "This API is intended as an API between a carrier (the client) and a EBL Solution Platform (the server).\n\nThis API is used to respond to requests that were submitted via the [DCSA EBL Surrender API](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_EBL_SUR/3.0.0-Beta-2) API.\n\n### Stats API\nThe Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to this API. Further details can be found [here](https://labs.dcsa.org/#/http/guides/api-guides/stats-api/introduction)\n\nFor a changelog, please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/ebl/v3/surrender_response#v300B2). Please [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\n",
    "contact": {
      "name": "Digital Container Shipping Association (DCSA)",
      "url": "https://dcsa.org",
      "email": "info@dcsa.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "3.0.0-Beta-2"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/dcsaorg/DCSA_EBL_SUR_RSP/3.0.0-Beta-2",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "tags": [
    {
      "name": "Surrender Request responses",
      "description": "The Surrender Request responses\n"
    }
  ],
  "paths": {
    "/v3/ebl-surrender-responses": {
      "post": {
        "tags": [
          "Surrender Request responses"
        ],
        "description": "The carrier uses this endpoint to inform the EBL Solution Platform about the verdict for a given surrender request.\n",
        "operationId": "post-ebl-surrender-responses",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "3"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurrenderRequestAnswer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Request successful",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            }
          },
          "409": {
            "description": "A carrier may only answer once to a surrender request. Subsequent attempts to answer are considered an error and should be rejected with a 409 Conflict code.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "title": "Error Response",
        "required": [
          "errorDateTime",
          "errors",
          "httpMethod",
          "requestUri",
          "statusCode",
          "statusCodeText"
        ],
        "type": "object",
        "properties": {
          "httpMethod": {
            "type": "string",
            "description": "The HTTP method used to make the request e.g. `GET`, `POST`, etc\n",
            "example": "POST",
            "enum": [
              "GET",
              "HEAD",
              "POST",
              "PUT",
              "DELETE",
              "OPTION",
              "PATCH"
            ]
          },
          "requestUri": {
            "type": "string",
            "description": "The URI that was requested.\n",
            "example": "/v1/events"
          },
          "statusCode": {
            "type": "integer",
            "description": "The HTTP status code returned.\n",
            "format": "int32",
            "example": 400
          },
          "statusCodeText": {
            "maxLength": 50,
            "type": "string",
            "description": "A standard short description corresponding to the HTTP status code.\n",
            "example": "Bad Request"
          },
          "statusCodeMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "A long description corresponding to the HTTP status code with additional information.\n",
            "example": "The supplied data could not be accepted"
          },
          "providerCorrelationReference": {
            "maxLength": 100,
            "type": "string",
            "description": "A unique identifier to the HTTP request within the scope of the API provider.\n",
            "example": "4426d965-0dd8-4005-8c63-dc68b01c4962"
          },
          "errorDateTime": {
            "type": "string",
            "description": "The DateTime corresponding to the error occurring. Must be formatted using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\n",
            "format": "date-time",
            "example": "2019-11-12T07:41:00+08:30"
          },
          "errors": {
            "minItems": 1,
            "type": "array",
            "description": "An array of errors providing more detail about the root cause.\n",
            "items": {
              "$ref": "#/components/schemas/Detailed Error"
            }
          }
        },
        "description": "Unexpected error"
      },
      "SurrenderRequestAnswer": {
        "required": [
          "action",
          "surrenderRequestReference"
        ],
        "type": "object",
        "properties": {
          "surrenderRequestReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The surrender request provided by the EBL solution in the surrender request.\n",
            "example": "Z12345"
          },
          "action": {
            "type": "string",
            "description": "Action performed:\n- `SURR` (Surrendered)\n- `SREJ` (Surrender rejected)\n\nWhen the carrier accepts the surrender (`SURR`), the platform will inform the party that submitted the surrender request that the surrender has been accepted.  If the surrender is due to an admendment, the carrier will follow up with issuing the admended document to the party that submitted the surrender. The carrier will immediately become the possessor of the bill and can now void it.\n\nWhen the carrier rejects the surrender (`SREJ`), the EBL is returned to the party that submitted the surrender request.\n",
            "enum": [
              "SURR",
              "SREJ"
            ]
          },
          "comments": {
            "maxLength": 255,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Free text comment associated with the surrender request transaction.  Must be provided for rejections but should be omitted when accepting the surrender.",
            "example": "Comments..."
          }
        }
      },
      "Detailed Error": {
        "title": "Detailed Error",
        "required": [
          "errorCodeMessage",
          "errorCodeText"
        ],
        "type": "object",
        "properties": {
          "errorCode": {
            "maximum": 9999,
            "minimum": 7000,
            "type": "integer",
            "description": "The detailed error code returned.\n\n  - `7000-7999` Technical error codes\n  - `8000-8999` Functional error codes\n  - `9000-9999` API provider-specific error codes            \n\n[Error codes as specified by DCSA](https://dcsa.atlassian.net/wiki/spaces/DTG/pages/197132308/Standard+Error+Codes).\n",
            "format": "int32",
            "example": 7003
          },
          "property": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the property causing the error.\n",
            "example": "facilityCode"
          },
          "value": {
            "maxLength": 500,
            "type": "string",
            "description": "The value of the property causing the error serialised as a string exactly as in the original request.\n",
            "example": "SG SIN WHS"
          },
          "jsonPath": {
            "maxLength": 500,
            "type": "string",
            "description": "A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).\n",
            "example": "$.location.facilityCode"
          },
          "errorCodeText": {
            "maxLength": 100,
            "type": "string",
            "description": "A standard short description corresponding to the `errorCode`.\n",
            "example": "invalidData"
          },
          "errorCodeMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "A long description corresponding to the `errorCode` with additional information.\n",
            "example": "Spaces not allowed in facility code"
          }
        }
      }
    },
    "parameters": {
      "Api-Version-Major": {
        "name": "API-Version",
        "in": "header",
        "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "3"
        }
      }
    },
    "headers": {
      "API-Version": {
        "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "3.0.0-Beta-2"
        }
      }
    }
  }
}
