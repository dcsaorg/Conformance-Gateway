{
  "openapi": "3.0.0",
  "info": {
    "title": "DCSA EBL Surrender API",
    "description": "This API is intended as an API between a carrier (the server) and a EBL Solution Platform (the client).\n\nThe EBL Solution Platform will submit surrender requests to the carrier, which will be processed asynchronously. Responses to the surrender reqests will be submitted by the carrier via the [DCSA_EBL_SUR_RSP](https://app.swaggerhub.com/apis/dcsaorg/DCSA_EBL_SUR_RSP/3.0-beta1) API.\n\n\nWhen the platform submits a surrender request, the platform guarantees *all* of the following:\n\n1) The surrender request was submitted by the sole possessor of the EBL.\n2) Depending on the eBL type:\n   * For non-negoitable (\"straight\") eBLs, the surrender request was submitted by either the original shipper OR the consignee.\n   * For negotiable eBLs with a named titleholder, the surrender request was submitted by the named titleholder.\n   * For negotiable eBLs without a named titleholder / blank eBLs, possession is sufficient for the entity surrendering the eBL.\n3) The platform has the EBL in custody while the carrier is evaluating this surrender request. I.e., neither possession nor title holder changes can occur until the carrier responds to this surrender request.\n\nPlease see the [Surrender Request](#/surrenderRequestDetails) for details on what data the platform will provide.\n",
    "contact": {
      "name": "Digital Container Shipping Association (DCSA)",
      "url": "https://dcsa.org",
      "email": "info@dcsa.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "3.0-beta1"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/dcsaorg/DCSA_EBL_SUR/3.0-beta1",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "paths": {
    "/v3/ebl-surrender-requests": {
      "post": {
        "tags": [
          "Surrender Requests"
        ],
        "description": "The EBL Solution Platform uses this endpoint to submit a surrender request.\n\nThe carrier's answer to the surrender request will be returned via a callback response (see the `Callbacks` tab)\n",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/surrenderRequestDetails"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Submission registered successfully.\n\nThe carrier will later follow up via the callback with a response.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/surrenderRequestAcknowledgement"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "legalName": {
        "maxLength": 100,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "Legal name of the party/user as shown on the endorsement chain",
        "example": "Digital Container Shipping Association"
      },
      "registrationNumber": {
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "Company registration number of this party. E.g. registration number on the local chamber of commerse.",
        "example": "74567837"
      },
      "locationOfRegistration": {
        "maxLength": 2,
        "minLength": 2,
        "pattern": "^[A-Z]+$",
        "type": "string",
        "description": "Country code of the location of registration according to ISO 3166-1 alpha-2",
        "example": "NL"
      },
      "surrenderRequestReference": {
        "maxLength": 100,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "A server defined reference for a concrete surrender request. Surrender request references MUST NOT be reused.\n",
        "example": "Z12345"
      },
      "comments": {
        "maxLength": 255,
        "type": "string",
        "description": "Optional free text comment associated with the surrender request transaction."
      },
      "surrenderRequestCode": {
        "type": "string",
        "description": "Surrender Request codes:\n- SREQ (Requested to surrender for Delivery)\n- AREQ (Requested to surrender for Amendment)\n\nThe surrender request code determines the type of surrender request. Any parallel negotiation between the consignee and the carrier related to any of these type surrender are handled outside this API. Examples could be the shipment release related to a surrender for delivery or the actual contents of the admendment in a surrender related to an amendment.\n\nNote that \"Switch to paper\" is considered an amendment in how it is modelled via the DCSA eBL data standard.\n",
        "enum": [
          "SREQ",
          "AREQ"
        ]
      },
      "transactionParty": {
        "required": [
          "eblPlatform",
          "legalName"
        ],
        "type": "object",
        "properties": {
          "eblPlatform": {
            "maxLength": 4,
            "pattern": "\\S+",
            "type": "string",
            "description": "The EBL platform of the transaction party. Should be a code from https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/eblsolutionproviders.csv.",
            "example": "BOLE"
          },
          "legalName": {
            "$ref": "#/components/schemas/legalName"
          },
          "registrationNumber": {
            "$ref": "#/components/schemas/registrationNumber"
          },
          "locationOfRegistration": {
            "$ref": "#/components/schemas/locationOfRegistration"
          },
          "taxReference": {
            "pattern": "^\\S+$",
            "type": "string",
            "description": "Tax reference used in the location of registration",
            "example": "NL859951480B01"
          },
          "partyCodes": {
            "$ref": "#/components/schemas/partyCodes"
          }
        },
        "description": "refers to a company or a legal entity."
      },
      "partyCodes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/partyCodes_inner"
        }
      },
      "endorsementChainLink": {
        "required": [
          "actionDateTime",
          "actor",
          "recipient"
        ],
        "type": "object",
        "properties": {
          "actionDateTime": {
            "type": "string",
            "description": "Date time when the action occured.",
            "format": "date-time"
          },
          "actor": {
            "$ref": "#/components/schemas/transactionParty"
          },
          "recipient": {
            "$ref": "#/components/schemas/transactionParty"
          }
        },
        "description": "Entry in the endorsement chain.\n"
      },
      "surrenderRequestAcknowledgement": {
        "type": "object",
        "properties": {
          "surrenderRequestReference": {
            "$ref": "#/components/schemas/surrenderRequestReference"
          },
          "transportDocumentReference": {
            "$ref": "#/components/schemas/transportDocumentReference"
          }
        }
      },
      "surrenderRequestDetails": {
        "required": [
          "endorsementChain",
          "surrenderRequestCode",
          "surrenderRequestReference",
          "surrenderRequestedBy",
          "transportDocumentReference"
        ],
        "type": "object",
        "properties": {
          "surrenderRequestReference": {
            "$ref": "#/components/schemas/surrenderRequestReference"
          },
          "transportDocumentReference": {
            "$ref": "#/components/schemas/transportDocumentReference"
          },
          "surrenderRequestCode": {
            "$ref": "#/components/schemas/surrenderRequestCode"
          },
          "comments": {
            "$ref": "#/components/schemas/comments"
          },
          "surrenderRequestedBy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/transactionParty"
              },
              {
                "type": "object",
                "additionalProperties": true,
                "description": "The party that requested the surrender of the EBL.\n\nThe EBL platform has verified that the party submitting the surrender request was in possion of the EBL and was entitled to perform the surrender ([see description of surrenderRequestDetails](#/components/schemas/surrenderRequestDetails)).\n"
              }
            ]
          },
          "endorsementChain": {
            "minItems": 0,
            "type": "array",
            "description": "The endorsement chain consist of a number of endorsement related actions that were performed as and after the bill was issued. For straight B/Ls, the endorsement chain can be empty or omitted as the consignee is generally not required to stamp/sign the bill.  For negotiable B/Ls, the endorsement chain must be present as the endorsee surrendering the bill must stamp/sign the bill to confirm the endorsement (even when they are the original endorsee).\n\nIt is the electronic version of the \"back side\" of the paper world B/L.\n",
            "items": {
              "$ref": "#/components/schemas/endorsementChainLink"
            }
          }
        },
        "description": "A concrete surrender request related to a transport document.\n\nThe platform guarantees *all* of the following:\n\n  1) The surrender request was submitted by the sole possessor of the EBL.\n  2) Depending on the eBL type:\n   * For non-negoitable (\"straight\") eBLs, the surrender request was submitted by either the original shipper OR the consignee.\n   * For negotiable eBLs with a named titleholder, the surrender request was submitted by the named titleholder.\n   * For negotiable eBLs without a named titleholder / blank eBLs, possession is sufficient for the entity surrendering the eBL.\n  3) The platform has the EBL in custody while the carrier is evaluating this surrender request. I.e., neither possession nor title holder changes can occur until the carrier responds to this surrender request.\n"
      },
      "error": {
        "required": [
          "errorDateTime",
          "errors",
          "httpMethod",
          "requestUri",
          "statusCode",
          "statusCodeText"
        ],
        "type": "object",
        "properties": {
          "httpMethod": {
            "type": "string",
            "description": "The http request method type e.g. GET, POST\n",
            "example": "POST",
            "enum": [
              "GET",
              "HEAD",
              "POST",
              "PUT",
              "DELETE",
              "OPTION",
              "PATCH"
            ]
          },
          "requestUri": {
            "type": "string",
            "description": "The request URI as it was sent\n",
            "example": "/v1/events"
          },
          "statusCode": {
            "type": "integer",
            "description": "The HTTP status code\n",
            "format": "int32",
            "example": 400
          },
          "statusCodeText": {
            "maxLength": 50,
            "type": "string",
            "description": "The textual representation of the status code\n",
            "example": "Bad Request"
          },
          "errorMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "Other error information\n",
            "example": "The supplied data could not be accepted"
          },
          "providerCorrelationID": {
            "maxLength": 100,
            "type": "string",
            "description": "A unique identifier for the transaction, e.g. a UUID\n",
            "example": "4426d965-0dd8-4005-8c63-dc68b01c4962"
          },
          "errorDateTime": {
            "type": "string",
            "description": "The date and time (in ISO 8601 format) the error occurred.\n",
            "format": "date-time",
            "example": "2019-11-12T07:41:00+08:30"
          },
          "errors": {
            "minItems": 1,
            "type": "array",
            "description": "List of detailed errors, e.g. fields that could not pass validation\n",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/detailedError"
                }
              ]
            }
          }
        }
      },
      "detailedError": {
        "required": [
          "message",
          "reason"
        ],
        "type": "object",
        "properties": {
          "errorCode": {
            "maximum": 9999,
            "minimum": 7000,
            "type": "integer",
            "description": "Standard error code see http://dcsa.org/error-codes (to be created). Examples: 7003 – out or range value, 7004 -  invalid type\n",
            "format": "int32",
            "example": 7003
          },
          "field": {
            "maxLength": 500,
            "type": "string",
            "description": "The field that caused the error, e.g. a failed validation. The field can be expressed as a [JSONpath](https://github.com/json-path/JsonPath)\n",
            "example": "location.facilityCode"
          },
          "value": {
            "maxLength": 500,
            "type": "string",
            "description": "The value of the field that caused the error\n",
            "example": "SG SIN WHS"
          },
          "reason": {
            "maxLength": 100,
            "type": "string",
            "description": "High level error message\n",
            "example": "invalidData"
          },
          "message": {
            "maxLength": 200,
            "type": "string",
            "description": "Additional information as to why the error occured\n",
            "example": "Spaces not allowed in facility code"
          }
        }
      },
      "transportDocumentReference": {
        "maxLength": 20,
        "type": "string",
        "description": "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n"
      },
      "partyCodes_inner": {
        "required": [
          "partyCode",
          "partyCodeListProvider"
        ],
        "type": "object",
        "properties": {
          "partyCode": {
            "maxLength": 100,
            "minLength": 1,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string"
          },
          "partyCodeListProvider": {
            "type": "string",
            "description": "Describes the organisation that provides the party code.\n\n - `EPUI`:The party code is an EBL Platform User Identifier (that is, an identifier provided by a platform, used to transfer eBLs). EPIU should be combined with the `codeListName`, to identify the platform that issued the identifier.\n - `GLEIF`: The party code is issued by Global Legal Entity Identifier Foundation (GLEIF). See https://www.gleif.org/en. The `codeNameList` (if omitted) defaults to `LEI`.\n - `W3C`: The party code is issued by a standard created by World Wide Web Consortium (W3C). See https://www.w3.org/. The `codeNameList` (if omitted) defaults to `DID`.\n",
            "enum": [
              "GLEIF",
              "W3C",
              "EPUI"
            ]
          },
          "codeListName": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The name of the code list / code generation mechanism / code authority for the party code.\n\nFor `EPUI`:\n * `Wave`: An identifier provided by Wave BL.\n * `CargoX`: An identifier provided by CargoX\n * `EdoxOnline`: An identifier provided by EdoxOnline\n * `IQAX`: An identifier provided by IQAX\n * `EssDOCS`: An identifier provided by essDOCS\n * `Bolero`: An identifier provided by Bolero\n * `TradeGO`: An identifierprovided by TradeGo\n * `Secro`: An identifier provided by Secro\n * `GSBN`: An identifier provided by GSBN\n * `WiseTech`: An identifier provided by WiseTech\n\nFor `W3C`:\n * `DID`: The party code is a Decentralized Identifier (see https://www.w3.org/TR/did-core/).\n\nFor `GLEIF`:\n * `LEI`: The party code is a Legal Entity Identifier (LEI) as issued by Global Legal Entity Identifier Foundation (GLEIF). See https://www.gleif.org/en\n"
          }
        }
      }
    },
    "parameters": {
      "Api-Version-Major": {
        "name": "API-Version",
        "in": "header",
        "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
        "required": false,
        "schema": {
          "type": "string",
          "example": "1"
        }
      }
    },
    "headers": {
      "API-Version": {
        "description": "SemVer used to indicate the version of the contract (API version) returned.",
        "schema": {
          "type": "string",
          "example": "1.0.0"
        }
      }
    }
  }
}