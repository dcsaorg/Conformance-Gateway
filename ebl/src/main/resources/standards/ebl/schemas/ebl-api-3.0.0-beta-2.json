{
  "openapi": "3.0.3",
  "info": {
    "title": "DCSA OpenAPI specification for Electronic Bill of Lading",
    "description": "API specification issued by DCSA.org.\n\nFor explanation of specific values or objects please refer to the [Information Model v2023.Q4 (to be updated)](https://dcsa.org/wp-content/uploads/2024/01/DCSA-Information-Model-2023.Q4.pdf). This API specification does not define the allowable updates and their timing in accordance with the established business rules. Refer to the [DCSA Interface Standard for the Bill of Lading 3.0 Beta 2 (to be updated)](https://dcsa.atlassian.net/wiki/external/Y2MwYmRiMmE4MTc2NGJmOGI3ZDczZTQ1ZTM0NzQxYWY) to address this. **All use cases mentioned in this API specification refer to use cases defined in the eBL IFS**.\n\nAll other documents related to the Electronic Bill of Lading publication can be found [here](https://dcsa.org/standards/ebill-of-lading/)\n\nIt is possible to use the eBL API as a standalone API. In that case use one of the poll endPoints:\n\n    GET /v3/shipping-instructions/{documentReference}  # For Shipping Instructions status\n    GET /v3/transport-documents/{transportDocumentReference}  # For Transport Document status\n\nin order to poll information about status changes.\n\n### Notifications\nIt is possible to have notifications pushed to you whenever the provider needs input and/or a state change. The format of the notification is defined by the [Electronic Bill of Lading Notification API](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_EBL_NTF/3.0.0-Beta-2). Signing up for notifications is defined outside the scope of this API specification.\n\n### Stats API\nThe Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to the Electronic Bill of Lading API. Further details can be found [here](https://labs.dcsa.org/#/http/guides/api-guides/stats-api/introduction)\n\nFor a changelog, please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/ebl/v3#v300B1). Please [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\n",
    "contact": {
      "name": "Digital Container Shipping Association (DCSA)",
      "url": "https://dcsa.org",
      "email": "info@dcsa.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "3.0.0-Beta-2"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "Shipping Instructions",
      "description": "The Shipping Instructions\n"
    },
    {
      "name": "Transport Document",
      "description": "The Transport Document\n"
    }
  ],
  "paths": {
    "/v3/shipping-instructions": {
      "post": {
        "tags": [
          "Shipping Instructions"
        ],
        "summary": "Creates a Shipping Instructions\n",
        "description": "Creates a new `Shipping Instructions`. This endPoint corresponds with **UseCase 1 - Submit Shipping Instructions**.\n\n## Precondition\nThe consumer has information for a `Shipping Instructions`. The empty equipment has been released to the shipper. The `Booking` is in state `CONFIRMED`.\n\n## Postcondition\nThe provider has received the `Shipping Instructions`.\n\nThe consumer will receive a `201` (Created) if the payload schema validates or a `400` (Bad Request) if it does not.\n\n## Flow\nThe following occurs when a provider receives a `Shipping Instructions`:\n1. The payload (`Shipping Instructions`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n   **The process stops here!**\n\n2. The payload is schema-valid which means:\n    - all required properties are provided.\n    - all values provided have correct data type.\n\n   A `shippingInstructionsReference` (as a reference to the `Shipping Instructions`) is created and stored along with the payload in the provider system.\n  \n   **For the rest of this description and in all examples the value `si-123` will be used as `shippingInstructionsReference`**\n\n3. A `201` (Created) response is returned with the following payload:\n    ```\n    {\n      shippingInstructionsReference: 'si-123',\n      shippingInstructionsStatus: 'RECEIVED'\n    }\n    ```\n4. All '_relevant_' subscribers will be notified via a [Shipping Instructions Notification](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_EBL_NTF/3.0.0-Beta-2#/Notifications/shipping-instructions-notifications).\n\nFor `POST` `Shipping Instructions` the process ends here. The `Shipping Instructions`\n\n  - is now stored in the provider system\n  - has status `RECEIVED`\n  - awaits further processing by the provider\n  - a `201` (Created) response is sent to the consumer with a payload containing `documentStatus=RECEIVED`\n  - '_relevant_' subscribers have been notified.\n\nThe provider wil now start asynchronous processing. Once processed, the new status of the `Shipping Instructions` will be communicated via a `Shipping Instructions Notification`. In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the\n\n    GET /v3/shipping-instructions/{documentReference}\n    \n  endPoint to check if the `shippingInstructionsStatus` of the `Shipping Instructions` has changed.\n",
        "operationId": "create-shipping-instructions",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "3"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters used to create the `Shipping Instructions`\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShippingInstructions"
              },
              "examples": {
                "regularSTDExample": {
                  "summary": "Create a Shipping Instructions\n",
                  "description": "A new `Shipping Instructions` with standard Dry cargo: `Black shoes`. The shoes are packed in 400 `Fibreboard boxes` and stuffed inside a single container (`NARU3472484`). The shipment has been booked via `carrierBookingReference` = `CBR_123_REGULAR`\n\nThe `Shipping Instructions` now awaits the provider to `DRAFT` a `Transport Document`.\n",
                  "value": {
                    "transportDocumentTypeCode": "BOL",
                    "isShippedOnBoardType": true,
                    "freightPaymentTermCode": "PRE",
                    "isElectronic": true,
                    "isToOrder": true,
                    "invoicePayableAt": {
                      "UNLocationCode": "DKAAR"
                    },
                    "partyContactDetails": [
                      {
                        "name": "DCSA test person",
                        "email": "no-reply@dcsa.example.org"
                      }
                    ],
                    "documentParties": [
                      {
                        "party": {
                          "partyName": "DCSA CTK",
                          "partyContactDetails": [
                            {
                              "name": "DCSA test person",
                              "email": "no-reply@dcsa.example.org"
                            }
                          ]
                        },
                        "partyFunction": "OS",
                        "isToBeNotified": false
                      }
                    ],
                    "consignmentItems": [
                      {
                        "carrierBookingReference": "CBR_123_REGULAR",
                        "descriptionOfGoods": "Shoes - black",
                        "HSCodes": [
                          "640510"
                        ],
                        "commoditySubreference": "RegSubRef001",
                        "cargoItems": [
                          {
                            "equipmentReference": "NARU3472484",
                            "weight": 12000,
                            "weightUnit": "KGM",
                            "outerPackaging": {
                              "numberOfPackages": 400,
                              "packageCode": "4G",
                              "description": "Fibreboard boxes"
                            }
                          }
                        ]
                      }
                    ],
                    "utilizedTransportEquipments": [
                      {
                        "isShipperOwned": false,
                        "seals": [
                          {
                            "number": "DCSA-CTK-1234"
                          }
                        ],
                        "equipmentReference": "NARU3472484"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The `Shipping Instructions` has been successfully created in the provider system. The status of the `Shipping Instructions` is now `RECEIVED`. The consumer is now awaiting provider to process the `Shipping Instructions` asynchronously.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingInstructionsRefStatus"
                },
                "examples": {
                  "receExample": {
                    "summary": "Shipping Instructions received\n",
                    "description": "A `Shipping Instructions` has been received (`shippingInstructionsStatus='RECEIVED'`), schema validated and stored in provider system\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "shippingInstructionsStatus": "RECEIVED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "In case the `Shipping Instructions` does not schema validate a `400` (Bad Request) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "badRequestExample": {
                    "summary": "Shipping Instructions missing isElectronic\n",
                    "description": "`isElectronic` is a mandatory property in the `Shipping Instructions`. In case this property is missing an error objet is created.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v3/shipping-instructions",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "statusCodeMessage": "isElectronic not found - it is a mandatory property in Shipping Instructions",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-10-03T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "property": "isElectronic",
                          "errorCodeText": "mandatory property missing",
                          "errorCodeMessage": "isElectronic must be provided as part of a Shipping Instructions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "internalServerErrorExample": {
                    "summary": "Internal Server Error while processing Shipping Instructions\n",
                    "description": "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v3/shipping-instructions",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Internal Server Error occurred while processing Booking request",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Internal Error occurred",
                          "errorCodeMessage": "Internal Error occurred"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "tooManyRequestsExample": {
                    "summary": "Making too many Shipping Instructions\n",
                    "description": "Calling the endPoint\n\n    POST /v3/shipping-instructions\n    \ntoo many times within a time period results in an error.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v3/shipping-instructions",
                      "statusCode": 429,
                      "statusCodeText": "Too Many Requests",
                      "statusCodeMessage": "Too many request to create a Shipping Instructions has been requested. Please try again in 1 hour",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Max Shipping Instructions reached",
                          "errorCodeMessage": "A maximum of 10 Shipping Instructions can be created per hour"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/shipping-instructions/{documentReference}": {
      "get": {
        "tags": [
          "Shipping Instructions"
        ],
        "summary": "Gets the Shipping Instructions\n",
        "description": "Retrieves the `Shipping Instructions` with the `documentReference`. The path can contain a `shippingInstructionsReference` or a `transportDocumentReference`. It is recommended to use this endPoint to `GET` data before an update is made to make sure latest version is being updated.\n\nThe default payload when calling this endPoint is the \"original\" `Shipping Instructions`. It is also possible to get the latest update to a `Shipping Instructions` called the `Updated Shipping Instructions`. In order to get the `Update Shipping Instructions`, it is necessary to use the query parameter `updatedContent` and set it to `true`.\n\n    GET /v3/shipping-instructions/{documentReference}?updatedContent=true\n\nThe `status` of the \"original\" `Shipping Instructions` is included in both payloads as `shippingInstructionsStatus`. `updatedShippingInstructionsStatus` and related content is only available after a consumer has requested an update via **UseCase 3: Submit updated Shipping Instructions** and until:\n- the provider requests for a new update (**UseCase 2: Request to update Shipping Instructions**) in which case the \"old update\" is no longer accessable.\n- the consumer submits a new update (**UseCase 3: Submit updated Shipping Instructions**) in which case the \"new update\" provided **replaces** the \"old update\".\n\nIf `updatedContent=true` is requested but no update has yet been provided by the consumer **or** the state of the \"original\" `Shipping Instructions` is `PENDING UPDATE`, then a `404` (Not Found) is returned.\n\nIf the provider is requesting some changes to the `Shipping Instructions` this will also be part of the \"original\" `Shipping Instructions` payload in the `requestedChanges` property. This property is **conditional** on the `shippingInstructionsStatus='PENDING UPDATE'`.\n\nIn case no subscription (`Notification`) has been set up - it is possible to use this endPoint to poll on in order to detect if `shippingInstructionsStatus` and/or `updatedShippingInstructionsStatus` has changed.\n",
        "operationId": "get-shipping-instructions",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "3"
            }
          },
          {
            "name": "updatedContent",
            "in": "query",
            "description": "If set to `true`, the payload returned is the content of the `Updated Shipping Instructions`.\n\nDefault value is `false` in which case the content of the \"original\" `Shipping Instructions` is returned.\n\n**Condition:** Can only be used if an update has been made by the consumer (via **UseCase 3: Submit updated Shipping Instructions**) and **until** a new updated is requested by the provider. If no updates have been made a `404` (Not Found) response will be returned\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "example": false,
              "default": false
            }
          },
          {
            "name": "documentReference",
            "in": "path",
            "description": "An identifier for a `Shipping Instructions`. It can either be a `shippingInstructionsReference` or a `transportDocumentReference`.\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "pattern": "^\\S+(\\s+\\S+)*$",
              "type": "string",
              "example": "e0559d83-00e2-438e-afd9-fdd610c1a008"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetching the content of either the \"original\" `Shipping Instructions` or the `Updated Shipping Instructions`\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingInstructions"
                },
                "examples": {
                  "regularSTDExample": {
                    "summary": "Fetch Shipping Instruction with standard Dry cargo\n",
                    "description": "A `RECEIVED` `Shipping Instructions` with standard Dry cargo waiting for the provider to `DRAFT` a `Transport Document`.\n",
                    "value": {
                      "shippingInstructionsReference": "fc5009a7-25ad-4bb0-9892-4e2dea6bcdd9",
                      "shippingInstructionsStatus": "RECEIVED",
                      "transportDocumentTypeCode": "BOL",
                      "isShippedOnBoardType": true,
                      "freightPaymentTermCode": "PRE",
                      "isElectronic": true,
                      "isToOrder": true,
                      "invoicePayableAt": {
                        "UNLocationCode": "DKAAR"
                      },
                      "partyContactDetails": [
                        {
                          "name": "DCSA test person",
                          "email": "no-reply@dcsa.example.org"
                        }
                      ],
                      "documentParties": [
                        {
                          "party": {
                            "partyName": "DCSA CTK",
                            "partyContactDetails": [
                              {
                                "name": "DCSA test person",
                                "email": "no-reply@dcsa.example.org"
                              }
                            ]
                          },
                          "partyFunction": "OS",
                          "isToBeNotified": false
                        }
                      ],
                      "consignmentItems": [
                        {
                          "carrierBookingReference": "CBR_123_REGULAR",
                          "weight": 12000,
                          "weightUnit": "KGM",
                          "descriptionOfGoods": "Shoes - black",
                          "HSCodes": [
                            "640510"
                          ],
                          "commoditySubreference": "RegSubRef001",
                          "cargoItems": [
                            {
                              "equipmentReference": "NARU3472484",
                              "weight": 12000,
                              "weightUnit": "KGM",
                              "outerPackaging": {
                                "numberOfPackages": 400,
                                "packageCode": "4G",
                                "description": "Fibreboard boxes"
                              }
                            }
                          ]
                        }
                      ],
                      "utilizedTransportEquipments": [
                        {
                          "isShipperOwned": false,
                          "seals": [
                            {
                              "number": "DCSA-CTK-1234"
                            }
                          ],
                          "equipmentReference": "NARU3472484"
                        }
                      ]
                    }
                  },
                  "reeferExample": {
                    "summary": "Shipping Instructions with reefer cargo\n",
                    "description": "A `Shipping Instructions` with reefer cargo (`Diary products`) with US as destination. The provider requests that the `Advance Manifest Filing` be updated by the consumer.\n\n**Notice** that there are no Reefer info in the `Shipping Instructions`. If any reefer info need to be modified - then a `Booking` amendment must be applied to booking: `CBR_123_REEFER`.\n",
                    "value": {
                      "transportDocumentReference": "D8931B95625E4B339F2A",
                      "shippingInstructionsReference": "9051da7d-4099-4930-af35-7add4e68c635",
                      "shippingInstructionsStatus": "PENDING UPDATE",
                      "transportDocumentTypeCode": "BOL",
                      "isShippedOnBoardType": true,
                      "freightPaymentTermCode": "PRE",
                      "isElectronic": true,
                      "isToOrder": true,
                      "invoicePayableAt": {
                        "UNLocationCode": "DKAAR"
                      },
                      "partyContactDetails": [
                        {
                          "name": "DCSA test person",
                          "email": "no-reply@dcsa.example.org"
                        }
                      ],
                      "documentParties": [
                        {
                          "party": {
                            "partyName": "DCSA CTK",
                            "partyContactDetails": [
                              {
                                "name": "DCSA test person",
                                "email": "no-reply@dcsa.example.org"
                              }
                            ]
                          },
                          "partyFunction": "OS",
                          "isToBeNotified": false
                        }
                      ],
                      "consignmentItems": [
                        {
                          "carrierBookingReference": "CBR_123_REEFER",
                          "descriptionOfGoods": "Dairy products",
                          "HSCodes": [
                            "04052090"
                          ],
                          "commoditySubreference": "ReeferSubRef002",
                          "cargoItems": [
                            {
                              "equipmentReference": "KKFU6671914",
                              "weight": 12000,
                              "weightUnit": "KGM",
                              "outerPackaging": {
                                "numberOfPackages": 400,
                                "packageCode": "BQ",
                                "description": "Bottles"
                              }
                            }
                          ]
                        }
                      ],
                      "utilizedTransportEquipments": [
                        {
                          "isShipperOwned": false,
                          "seals": [
                            {
                              "number": "DCSA-CTK-1234"
                            }
                          ],
                          "equipmentReference": "KKFU6671914"
                        }
                      ],
                      "advanceManifestFilings": [
                        {
                          "manifestTypeCode": "AFR",
                          "countryCode": "US",
                          "advanceManifestFilingsHouseBLPerformedBy": "SHIPPER",
                          "selfFilerCode": "HHL007"
                        }
                      ],
                      "requestedChanges": [
                        {
                          "field": "$.advanceManifestFilings[0]",
                          "message": "Not a legal combination of \"manifestTypeCode\" (AFR) and \"countryCode\" (US)"
                        },
                        {
                          "field": "$.advanceManifestFilings",
                          "message": "Missing \"ACI\" filing required for import to US"
                        }
                      ]
                    }
                  },
                  "dgExample": {
                    "summary": "Updated Shipping Instructions with DG cargo\n",
                    "description": "A `Shipping Instructions` with `Environmentally hazardous substance, liquid, N.O.S (Propiconazole)` which is transported in steel Jarricans.\n\nThe `Shipping Instructions` has already been applied an update which has been confirmed by the provider (`updatedShippingInstructions='UPDATE CONFIRMED'`). The `Shipping Instructions` is now waiting for the provider to `DRAFT` a `Transport Document`.\n\n**Notice** that there are no DG (Dangerous Goods) info in the `Shipping Instructions`. If any DG info need to be modified - then a `Booking` amendment must be applied to booking: `RTM1234567`.\n",
                    "value": {
                      "transportDocumentReference": "4AD3FA470BB541B980CE",
                      "shippingInstructionsReference": "b36484d0-1115-43c2-93e4-a378823a8386",
                      "shippingInstructionsStatus": "RECEIVED",
                      "updatedShippingInstructionsStatus": "UPDATE CONFIRMED",
                      "transportDocumentTypeCode": "BOL",
                      "isShippedOnBoardType": true,
                      "freightPaymentTermCode": "PRE",
                      "isElectronic": true,
                      "isToOrder": true,
                      "invoicePayableAt": {
                        "UNLocationCode": "DKAAR"
                      },
                      "partyContactDetails": [
                        {
                          "name": "DCSA test person",
                          "email": "no-reply@dcsa.example.org"
                        }
                      ],
                      "documentParties": [
                        {
                          "party": {
                            "partyName": "DCSA CTK",
                            "partyContactDetails": [
                              {
                                "name": "DCSA test person",
                                "email": "no-reply@dcsa.example.org"
                              }
                            ]
                          },
                          "partyFunction": "OS",
                          "isToBeNotified": false
                        }
                      ],
                      "consignmentItems": [
                        {
                          "carrierBookingReference": "RTM1234567",
                          "descriptionOfGoods": "Environmentally hazardous substance, liquid, N.O.S (Propiconazole)",
                          "HSCodes": [
                            "293499"
                          ],
                          "commoditySubreference": "DGSubRef003",
                          "cargoItems": [
                            {
                              "equipmentReference": "HLXU1234567",
                              "weight": 12000,
                              "weightUnit": "KGM",
                              "outerPackaging": {
                                "numberOfPackages": 400,
                                "description": "Jerrican, steel"
                              }
                            }
                          ]
                        }
                      ],
                      "utilizedTransportEquipments": [
                        {
                          "isShipperOwned": false,
                          "seals": [
                            {
                              "number": "DCSA-CTK-1234"
                            }
                          ],
                          "equipment": {
                            "ISOEquipmentCode": "22GP",
                            "equipmentReference": "HLXU1234567",
                            "tareWeight": 2370,
                            "weightUnit": "KGM"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "In case the consumer is requesting the content of the `UpdatedShipping Instructions`, and no update has yet been requested.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "notFoundExample": {
                    "summary": "Shipping Instructions update not found\n",
                    "description": "The `Update Shipping Instructions` does not exist. No updates have been requested by the consumer.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "/v3/shipping-instructions/si-123?updatedContent=true",
                      "statusCode": 404,
                      "statusCodeText": "Not Found",
                      "statusCodeMessage": "No update accessable",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Shipping Instructions does not contain an update",
                          "errorCodeMessage": "The Shipping Instructions has not yet been updated - no update exists"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "internalServerErrorExample": {
                    "summary": "Internal Server Error while fetching the Shipping Instructions\n",
                    "description": "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Internal Server Error occurred while fetching the Shipping Instructions",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Internal Error occurred",
                          "errorCodeMessage": "Internal Error occurred"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "getError": {
                    "summary": "GET non-existing Shipping Instructions\n",
                    "description": "Calling\n\n    GET /v3/shipping-instructions/si-123\n    \nresults in an error as `Shipping Instructions` `si-123` does not exist.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 404,
                      "statusCodeText": "Not Found",
                      "statusCodeMessage": "The requested shippingInstructionsReference does not exist",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Non existent shippingInstructionsReference",
                          "errorCodeMessage": "shippingInstructionsReference `si-123` does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Shipping Instructions"
        ],
        "summary": "Updates the Shipping Instructions\n",
        "description": "Updates the `Shipping Instructions` with the `documentReference`. The path can contain either a `shippingInstructionsReference` or a `transportDocumentReference`. This endPoint corresponds with **UseCase 3 - Submit updated Shipping Instructions**\n\n### Precondition\nIn order to update a `Shipping Instructions`, the status of the `Shipping Instructions` needs to be in state:\n\n- `RECEIVED` in case the consumer has updated information for the `Shipping Instructions`\n- `PENDING UPDATE` in case the provider has requested the consumer to update the `Shipping Instructions` (a result of **UseCase 2 - Request to update Shipping Instructions**)\n\n## Postcondition\nThe provider has received an update to the `Shipping Instructions` (**UseCase 3 - Submit updated Shipping Instructions**), from now on called the `Updated Shipping Instructions`.\n\nThe `Updated Shipping Instructions` and the \"original\" `Shipping Instructions` **co-exist** until a new update is submitted by the consumer (via **UseCase 3: Submit updated Shipping Instructions**) or until the provider requests an update (sets the `shippingInstructionsStatus='PENDING UPDATE'` via **UseCase 2: Request to update Shipping Instructions**). The `Updated Shipping Instructions` always represents the latest version of an update received by the provider.\n\nThe consumer will receive a `200` (OK) if the payload schema-validates or a `400` (Bad Request) if it does not.\n\n## Flow\nThe following occurs when a provider receives an **update** to a `Shipping Instructions`\n1. The payload (`Updated Shipping Instructions`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n   **The process stops here!**\n2. The payload is schema-valid which means:\n    - all required properties are provided\n    - all values provided have correct data type.\n  \n    The `Updated Shipping Instructions` is stored in the provider system alongside the \"original\" `Shipping Instructions`.\n\n   **For the rest of this description and in all examples the value `si-123` will be used as `shippingInstructionsReference`**\n\n3. The response depends on which use case is the reason for calling this endPoint (what the `shippingInstructionsStatus` is):\n\n    - If `shippingInstructionsStatus` **is** `RECEIVED`, then this endPoint is being used in addition to **UseCase 1 - Submit Shipping Instructions**. In this case the consumer would like to make an update to an already sent `Shipping Instructions`. This is done via **UseCase 3 - Submit updated Shipping Instructions**. The `shippingInstructionsStatus` stays as `RECEIVED`, `updatedShippingInstructionsStatus` is set to `UPDATE RECEIVED`\n    \n      A `200` (OK) response corresponding to the following payload is returned:\n      ```\n      {\n        shippingInstructionsReference: 'si-123',\n        shippingInstructionsStatus: 'RECEIVED',\n        updatedShippingInstructionsStatus: 'UPDATE RECEIVED'\n      }\n      ```\n\n    - If `shippingInstructionsStatus` is `PENDING UPDATE`, then this endPoint is being used as a response to **UseCase 2 - Request to update Shipping Instructions** in this case the provider has requested an update to a `Shipping Instructions`. The `shippingInstructionsStatus` remains `PENDING UPDATE`, `updatedShippingInstructionsStatus` is set to `UPDATE RECEIVED`.\n      \n      A `200` (OK) response corresponding to the following payload is returned:\n      ```\n      {\n        shippingInstructionsReference: 'si-123',\n        shippingInstructionsStatus: 'PENDING UPDATE',\n        updateShippingInstructionsStatus: 'UPDATE RECEIVED'\n      }\n      ```\n4. All '_relevant_' subscribers will be notified via a [Shipping Instructions Notification](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_EBL_NTF/3.0.0-Beta-2#/Notifications/shipping-instructions-notifications).\n\nFor `PUT` `Shipping Instructions` the process ends here. The `Updated Shipping Instructions`\n\n  - is now stored in the provider system\n  - a `200` (OK) response is sent to the consumer with the status of the `Shipping Instructions` and the `Updated Shipping Instructions` with one of the following combinations (depending on the use case):\n    - `shippingInstructionsStatus='RECEIVED'` and `updateShippingInstructionsStatus='UPDATE RECEIVED'` (if endPoint used to make an update to a Submitted Shipping Instructions - **UseCase 1 - Submit Shipping Instructions**)\n    - `shippingInstructionsStatus='PENDING UPDATE'` and `updatedShippingInstructionsStatus='UPDATE RECEIVED'` (if endPoint used as a response to **UseCase 2 - Request to update Shipping Instructions**)\n  - awaits further processing by the provider\n  - '_relevant_' subscribers have been notified.\n\nThe provider wil now start asynchronous processing. Once processed, the new status of the `Shipping Instructions` and `Updated Shipping Instructions` will be communicated via a `Shipping Instructions Notification`. In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the\n\n    GET /v3/shipping-instructions/{documentReference}\n    \n  endPoint to check if the `shippingInstructionsStatus` and `updatedShippingInstructionsStatus` of the `Shipping Instructions` has changed.\n  \n  If the consumer wants to get the content of the `Update Shipping Instructions` provided via this `PUT` endPoint,  the `GET` endPoint needs to be used in combination with the `?updatedContent=true` queryParameter:\n  \n    GET /v3/shipping-instructions/{documentReference}?updatedContent=true\n    \n  It is possible to `GET` the content of the `Updated Shipping Instructions` via the example above until either:\n  - the provider requests for a new update (**UseCase 2: Request to update Shipping Instructions**) in which case the \"old update\" is no longer accessible\n  - the consumer submits a new update (**UseCase 3: Submit updated Shipping Instructions**) in which case the \"new update\" provided **replaces** the \"old update\".\n",
        "operationId": "update-shipping-instructions",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "3"
            }
          },
          {
            "name": "documentReference",
            "in": "path",
            "description": "An identifier for a `Shipping Instructions`. It can either be a `shippingInstructionsReference` or a `transportDocumentReference`.\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "pattern": "^\\S+(\\s+\\S+)*$",
              "type": "string",
              "example": "e0559d83-00e2-438e-afd9-fdd610c1a008"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters used to update the `Shipping Instructions`\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShippingInstructions"
              },
              "examples": {
                "regularSTDExample": {
                  "summary": "Update Shipping Instructions\n",
                  "description": "An update for a `Shipping Instructions` with standard Dry cargo. The `Shipping Instructions` update now wait to be confirmed by the provider.\n",
                  "value": {
                    "shippingInstructionsReference": "fc5009a7-25ad-4bb0-9892-4e2dea6bcdd9",
                    "transportDocumentTypeCode": "BOL",
                    "isShippedOnBoardType": true,
                    "freightPaymentTermCode": "PRE",
                    "isElectronic": true,
                    "isToOrder": true,
                    "invoicePayableAt": {
                      "UNLocationCode": "DKAAR"
                    },
                    "partyContactDetails": [
                      {
                        "name": "DCSA test person",
                        "email": "no-reply@dcsa.example.org"
                      }
                    ],
                    "documentParties": [
                      {
                        "party": {
                          "partyName": "DCSA CTK",
                          "partyContactDetails": [
                            {
                              "name": "DCSA test person",
                              "email": "no-reply@dcsa.example.org"
                            }
                          ]
                        },
                        "partyFunction": "OS",
                        "isToBeNotified": false
                      }
                    ],
                    "consignmentItems": [
                      {
                        "carrierBookingReference": "CBR_123_REGULAR",
                        "descriptionOfGoods": "Shoes - black",
                        "HSCodes": [
                          "640510"
                        ],
                        "commoditySubreference": "RegSubRef001",
                        "cargoItems": [
                          {
                            "equipmentReference": "NARU3472484",
                            "weight": 12000,
                            "weightUnit": "KGM",
                            "outerPackaging": {
                              "numberOfPackages": 400,
                              "packageCode": "4G",
                              "description": "Fibreboard boxes"
                            }
                          }
                        ]
                      }
                    ],
                    "utilizedTransportEquipments": [
                      {
                        "isShipperOwned": false,
                        "seals": [
                          {
                            "number": "DCSA-CTK-1234"
                          }
                        ],
                        "equipmentReference": "NARU3472484"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The `Updated Shipping Instructions` has been successfully stored in the provider system with one of the following combinations (depending on the use case):\n- `shippingInstructionsStatus='RECEIVED'` and `updateShippingInstructionsStatus='UPDATE RECEIVED'` (if endPoint is used to make an update to a Submitted Shipping Instructions - **UseCase 1 - Submit Shipping Instructions**)\n- `shippingInstructionsStatus='PENDING UPDATE'` and `updatedShippingInstructionsStatus='UPDATE RECEIVED'` (if endPoint is used as a response to **UseCase 2 - Request to update Shipping Instructions**)\n\nThe status of the `Updated Shipping Instructions` can be monitored on the\n\n    GET /v3/shipping-instructions/{documentReference}\n\nendPoint where the \"original\" `Shipping Instructions` is returned by the consumer.\n\nIf the consumer wants to get the content of the `Update Shipping Instructions`  the `GET` endPoint needs to be used in combination with the `?updatedContent=true` queryParameter:\n\n    GET /v3/shipping-instructions/{documentReference}?updatedContent=true\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingInstructionsRefStatus"
                },
                "examples": {
                  "receivedExample": {
                    "summary": "Shipping Instructions updated by consumer\n",
                    "description": "An `Updated Shipping Instructions` is received and stored in provider system, the `Updated Shipping Instructions` now awaits provider action.\n\n    shippingInstructionsStatus='RECEIVED'\n    updatedShippingInstructionsStatus='UPDATE RECEIVED'\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "shippingInstructionsStatus": "RECEIVED",
                      "updatedShippingInstructionsStatus": "UPDATE RECEIVED"
                    }
                  },
                  "pendingUpdateExample": {
                    "summary": "Shipping Instructions updated because of consumer requirement\n",
                    "description": "An updated `Shipping Instructions` received and stored in provider system as a response to a provider initiated update request (a response to **UseCase 2 - Request to update Shipping Instructions**). The `Updated Shipping Instructions` now awaits provider action\n\n    shippingInstructionsStatus='PENDING UPDATE'\n    updatedShippingInstructionsStatus='UPDATE RECEIVED'\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "shippingInstructionsStatus": "PENDING UPDATE",
                      "updatedShippingInstructionsStatus": "UPDATE RECEIVED"
                    }
                  },
                  "amendmentExample": {
                    "summary": "Request amendment to Transport Document\n",
                    "description": "An `Updated Shipping Instructions` received and stored in provider system as an amendment to a `Transport Document` with `transportDocumentReference='td-987'`. The `Updated Shipping Instructions` now awaits provider action\n\n    shippingInstructionsStatus='RECEIVED'\n    updatedShippingInstructionsStatus='UPDATE RECEIVED'\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "transportDocumentReference": "td-987",
                      "shippingInstructionsStatus": "RECEIVED",
                      "updatedShippingInstructionsStatus": "UPDATE RECEIVED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "In case the updated `Shipping Instructions` does not schema validate a `400` (Bad Request) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "badRequestExample": {
                    "summary": "Shipping Instructions missing isElectronic\n",
                    "description": "`isElectronic` is a mandatory property in the `Shipping Instructions`. In case this property is missing an error object is created.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "PUT",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "statusCodeMessage": "isElectronic not found - it is a mandatory property in Shipping Instructions",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "property": "isElectronic",
                          "errorCodeText": "mandatory property missing",
                          "errorCodeMessage": "isElectronic must be provided as part of a Shipping Instructions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "In case the provider is already processing the `Shipping Instructions` matching `shippingInstructionsReference='si-123'` or for any other reason cannot process the request, it is possible to reject the `PUT` request with a `409` (Conflict) response\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "conflictExample": {
                    "summary": "Conflicting Shipping Instructions update\n",
                    "description": "The `Shipping Instructions` referenced in the `PUT` request is being processed by the provider. The provider does not support breaking this processing and must complete the processing of the `Shipping Instructions` prior to receiving a new request to update.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "PUT",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 409,
                      "statusCodeText": "Conflict",
                      "statusCodeMessage": "Is being processed",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Shipping Instructions is being processed",
                          "errorCodeMessage": "The Shipping Instructions cannot be updated while it is being processed. Please try again later"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "internalServerErrorExample": {
                    "summary": "Internal Server Error while processing `Shipping Instructions`\n",
                    "description": "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "PUT",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Internal Server Error occurred while processing Shipping Instructions",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Internal Error occurred",
                          "errorCodeMessage": "Internal Error occurred"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "For other errors the error object should be populated with relevant information\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "tooManyRequestsExample": {
                    "summary": "Updating too many Shipping Instructions\n",
                    "description": "Calling the endPoint\n\n    PUT /v3/shipping-instructions/si-123\n  \ntoo many times within a time period.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "PUT",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 429,
                      "statusCodeText": "Too Many Requests",
                      "statusCodeMessage": "Too many request to update a Shipping Instructions has been requested. Please try again in 1 hour",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Max Shipping Instructions requests reached",
                          "errorCodeMessage": "A maximum of 10 Shipping Instructions can be updated per hour"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Shipping Instructions"
        ],
        "summary": "Cancels an update to a Shipping Instructions\n",
        "description": "A way for the consumer to Cancel an `Updated Shipping Instructions`. This endPoint corresponds with **UseCase 5 - Cancel update to Shipping Instructions**.\n\n## Precondition\nIn order to cancel an `Updated Shipping Instructions`, the status of the `Updated Shipping Instructions` must be in in status `UPDATE RECEIVED`. The status of the `Shipping Instructions` can be either `RECEIVED` or `PENDING UPDATE`.\n\n## Postcondition\nThe provider has received a cancellation from the consumer for an `Updated Shipping Instructions` that is in state `UPDATE RECEIVED`.\n\nThe consumer will receive a `200` (OK) if the payload schema-validates or a `400` (Bad Request) if it does not.\n\n## Flow\nThe following occurs when a provider receives a cancellation:\n1. The payload is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n   **The process stops here!**\n2. The payload is schema-valid\n3. The `updatedShippingInstructionsStatus` is set to `UPDATE CANCELLED`.\n4. All '_relevant_' subscribers will be notified via a [Shipping Instructions Notification](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_EBL_NTF/3.0.0-Beta-2#/Notifications/shipping-instructions-notifications).\n",
        "operationId": "patch-shipping-instructions",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "3"
            }
          },
          {
            "name": "documentReference",
            "in": "path",
            "description": "An identifier for a `Shipping Instructions`. It can either be a `shippingInstructionsReference` or a `transportDocumentReference`.\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "pattern": "^\\S+(\\s+\\S+)*$",
              "type": "string",
              "example": "e0559d83-00e2-438e-afd9-fdd610c1a008"
            }
          }
        ],
        "requestBody": {
          "description": "Cancel the `Update Shipping Instructions`\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shippinginstructions_documentReference_body"
              },
              "examples": {
                "cancelUpdateExample": {
                  "summary": "Cancel a Shipping Instructions update\n",
                  "description": "Consumer wants to cancel an update provided to a `Shipping Instructions`. The `updatedShippingInstructionsStatus` is set to `UPDATE CANCELLED`\n",
                  "value": {
                    "updatedShippingInstructionsStatus": "UPDATE CANCELLED"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The `Updated Shipping Instructions` is now cancelled. The `updatedShippingInstructionsStatus` is now `UPDATE CANCELLED`. The `shippingInstructionsStatus` is left unchanged.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingInstructionsRefCancelStatus"
                },
                "examples": {
                  "cancelUpdateExample": {
                    "summary": "Cancel a Shipping Instructions update\n",
                    "description": "Consumer wants to cancel an update provided to a `Shipping Instructions`. In this case the `shippingInstructionsStatus` stays as `RECEIVED` and the `updatedShippingInstructionsStatus` is set to `UPDATE CANCELLED`. An optional `reason` can be provided.\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "shippingInstructionsStatus": "RECEIVED",
                      "updatedShippingInstructionsStatus": "UPDATE CANCELLED"
                    }
                  },
                  "cancelRequestedUpdateExample": {
                    "summary": "Cancel a Shipping Instructions update requested by provider\n",
                    "description": "Consumer wants to cancel an update provided to a `Shipping Instructions`. The update was requested by the provider. The `shippingInstructionsStatus` stays as `PENDING UPDATE` and the `updatedShippingInstructionsStatus` is set to `UPDATE CANCELLED`. An optional `reason` can be provided.\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "shippingInstructionsStatus": "PENDING UPDATE",
                      "updatedShippingInstructionsStatus": "UPDATE CANCELLED",
                      "reason": "Wrong update provided"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "In case the Cancel payload does not schema validate a `400` (Bad Request) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "badRequestExample": {
                    "summary": "Wrong Update Shipping Instructions status\n",
                    "description": "`APPROVE` is not a possible value when PATCHING an `Updated Shipping Instructions`.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "PATCH",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "statusCodeMessage": "APPROVE is not a valid status to set",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-10-03T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "property": "updatedShippingInstructionsStatus",
                          "value": "APPROVE",
                          "errorCodeText": "incorrect value",
                          "errorCodeMessage": "Only UPDATE CANCELLED is an allowed value: APPROVE was inserted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "In case the consumer is trying to cancel a `Shipping Instructions` that does not have an ongoing update request, an `Updated Shipping Instructions` that is in state `UPDATE RECEIVED`.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "notUpdateFoundExample": {
                    "summary": "Shipping Instructions update not found\n",
                    "description": "The `Update Shipping Instructions` does not exist. No updates have been requested by the consumer.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "PATCH",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 404,
                      "statusCodeText": "Not Found",
                      "statusCodeMessage": "No update exists",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Shipping Instructions does not contain an update",
                          "errorCodeMessage": "The Shipping Instructions has no update request - nothing to cancel"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "In case the provider is already processing the `Updated Shipping Instructions` matching `shippingInstructionsReference='si-123'` it is possible to reject the `PATCH` request with a `409` (Conflict) response\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "conflictExample": {
                    "summary": "Conflicting Shipping Instructions cancellation\n",
                    "description": "The `Updated Shipping Instructions` referenced in the `PATCH` request is being processed by the provider. The provider does not support breaking this processing and must complete the processing of the `Updated Shipping Instructions`. The cancellation will not be possible.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "PATCH",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 409,
                      "statusCodeText": "Conflict",
                      "statusCodeMessage": "Is being processed",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Shipping Instructions is being processed",
                          "errorCodeMessage": "The Shipping Instructions cannot be cancelled while it is being processed"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "internalServerErrorExample": {
                    "summary": "Internal Server Error while cancelling the `Shipping Instructions`\n",
                    "description": "An Internal Server Error has occurred, the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "PATCH",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Internal Server Error occurred while cancelling the Shipping Instructions",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Internal Error occurred",
                          "errorCodeMessage": "Internal Error occurred"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "getError": {
                    "summary": "GET non-existing Shipping Instructions\n",
                    "description": "Calling\n\n    PATCH /v3/shipping-instructions/si-123\n    \nresults in an error as `Shipping Instructions` `si-123` does not exist.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "PATCH",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 404,
                      "statusCodeText": "Not Found",
                      "statusCodeMessage": "The requested shippingInstructionsReference does not exist",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Non existent shippingInstructionsReference",
                          "errorCodeMessage": "shippingInstructionsReference `si-123` does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/transport-documents/{transportDocumentReference}": {
      "get": {
        "tags": [
          "Transport Document"
        ],
        "summary": "Gets the Transport Document\n",
        "description": "Retrieves the `Transport Document` with the `transportDocumentReference` in the path.\n",
        "operationId": "get-transport-document",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "3"
            }
          },
          {
            "name": "transportDocumentReference",
            "in": "path",
            "description": "The `transportDocumentReference` of the `Transport Document`\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 20,
              "pattern": "^\\S+(\\s+\\S+)*$",
              "type": "string",
              "description": "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
              "example": "HHL71800000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `Transport Document`\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransportDocument"
                },
                "examples": {
                  "regularSTDExample": {
                    "summary": "Draft Transport Document with regular Dry cargo\n",
                    "description": "A `DRAFT` Transport Document waiting for consumer approval.\n",
                    "value": {
                      "transportDocumentReference": "62CD536BA8D34C469AFD",
                      "shippingInstructionsReference": "fc5009a7-25ad-4bb0-9892-4e2dea6bcdd9",
                      "transportDocumentStatus": "DRAFT",
                      "transportDocumentTypeCode": "BOL",
                      "isShippedOnBoardType": true,
                      "freightPaymentTermCode": "PRE",
                      "isElectronic": true,
                      "isToOrder": true,
                      "shippedOnBoardDate": "2023-12-20",
                      "termsAndConditions": "You agree that this transport document exist is name only for the sake of\ntesting your conformance with the DCSA EBL API. This transport document is NOT backed\nby a real shipment with ANY carrier and NONE of the requested services will be\ncarried out in real life.\n\nUnless required by applicable law or agreed to in writing, DCSA provides\nthis JSON data on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\nANY KIND, either express or implied, including, without limitation, any\nwarranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY,\nor FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for\ndetermining the appropriateness of using or redistributing this JSON\ndata and assume any risks associated with Your usage of this data.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall DCSA be liable to\nYou for damages, including any direct, indirect, special, incidental, or\nconsequential damages of any character arising as a result of this terms or conditions\nor out of the use or inability to use the provided JSON data (including but not limited\nto damages for loss of goodwill, work stoppage, computer failure or malfunction, or any\nand all other commercial damages or losses), even if DCSA has been advised of the\npossibility of such damages.\n",
                      "receiptTypeAtOrigin": "CY",
                      "deliveryTypeAtDestination": "CY",
                      "cargoMovementTypeAtOrigin": "FCL",
                      "cargoMovementTypeAtDestination": "FCL",
                      "serviceContractReference": "SCR-1234-REGULAR",
                      "carrierCode": "MSC",
                      "carrierCodeListProvider": "SMDG",
                      "issuingParty": {
                        "partyName": "Mediterranean Shipping Company",
                        "identifyingCodes": [
                          {
                            "codeListProvider": "SMDG",
                            "codeListName": "LCL",
                            "partyCode": "MSC"
                          }
                        ]
                      },
                      "transports": {
                        "plannedDepartureDate": "2023-12-20",
                        "plannedArrivalDate": "2023-12-22",
                        "portOfLoading": {
                          "locationType": "UNCO",
                          "UNLocationCode": "DKAAR"
                        },
                        "portOfDischarge": {
                          "locationType": "UNLO",
                          "UNLocationCode": "DEBRV"
                        },
                        "vesselVoyage": [
                          {
                            "vesselName": "MSC Gülsün",
                            "carrierExportVoyageNumber": "402E"
                          }
                        ]
                      },
                      "charges": [
                        {
                          "chargeName": "Fictive transport document fee",
                          "currencyAmount": 1,
                          "currencyCode": "EUR",
                          "paymentTermCode": "COL",
                          "calculationBasis": "Per transport document",
                          "unitPrice": 1,
                          "quantity": 1
                        }
                      ],
                      "invoicePayableAt": {
                        "UNLocationCode": "DKAAR"
                      },
                      "partyContactDetails": [
                        {
                          "name": "DCSA test person",
                          "email": "no-reply@dcsa.example.org"
                        }
                      ],
                      "documentParties": [
                        {
                          "party": {
                            "partyName": "DCSA CTK",
                            "partyContactDetails": [
                              {
                                "name": "DCSA test person",
                                "email": "no-reply@dcsa.example.org"
                              }
                            ]
                          },
                          "partyFunction": "OS",
                          "isToBeNotified": false
                        }
                      ],
                      "consignmentItems": [
                        {
                          "carrierBookingReference": "CBR_123_REGULAR",
                          "descriptionOfGoods": "Shoes - black",
                          "HSCodes": [
                            "640510"
                          ],
                          "cargoItems": [
                            {
                              "equipmentReference": "NARU3472484",
                              "weight": 12000,
                              "weightUnit": "KGM",
                              "outerPackaging": {
                                "numberOfPackages": 400,
                                "packageCode": "4G",
                                "description": "Fibreboard boxes"
                              }
                            }
                          ]
                        }
                      ],
                      "utilizedTransportEquipments": [
                        {
                          "isShipperOwned": false,
                          "seals": [
                            {
                              "number": "DCSA-CTK-1234"
                            }
                          ],
                          "equipment": {
                            "ISOEquipmentCode": "22G1",
                            "equipmentReference": "NARU3472484"
                          }
                        }
                      ]
                    }
                  },
                  "reeferExample": {
                    "summary": "Approved Transport Document with reefer cargo\n",
                    "description": "An `APPROVED` Transport Document by the consumer waiting to be Issued by the provider. The cargo is `Diary products` which need to be transported using a `Reefer` container at -18° CEL.\n",
                    "value": {
                      "transportDocumentReference": "D8931B95625E4B339F2A",
                      "shippingInstructionsReference": "9051da7d-4099-4930-af35-7add4e68c635",
                      "transportDocumentStatus": "APPROVED",
                      "transportDocumentTypeCode": "BOL",
                      "isShippedOnBoardType": true,
                      "freightPaymentTermCode": "PRE",
                      "isElectronic": true,
                      "isToOrder": true,
                      "shippedOnBoardDate": "2023-12-20",
                      "termsAndConditions": "You agree that this transport document exist is name only for the sake of\ntesting your conformance with the DCSA EBL API. This transport document is NOT backed\nby a real shipment with ANY carrier and NONE of the requested services will be\ncarried out in real life.\n\nUnless required by applicable law or agreed to in writing, DCSA provides\nthis JSON data on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\nANY KIND, either express or implied, including, without limitation, any\nwarranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY,\nor FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for\ndetermining the appropriateness of using or redistributing this JSON\ndata and assume any risks associated with Your usage of this data.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall DCSA be liable to\nYou for damages, including any direct, indirect, special, incidental, or\nconsequential damages of any character arising as a result of this terms or conditions\nor out of the use or inability to use the provided JSON data (including but not limited\nto damages for loss of goodwill, work stoppage, computer failure or malfunction, or any\nand all other commercial damages or losses), even if DCSA has been advised of the\npossibility of such damages.\n",
                      "receiptTypeAtOrigin": "CY",
                      "deliveryTypeAtDestination": "CY",
                      "cargoMovementTypeAtOrigin": "FCL",
                      "cargoMovementTypeAtDestination": "FCL",
                      "serviceContractReference": "SCR-1234-REEFER",
                      "carrierCode": "MSC",
                      "carrierCodeListProvider": "SMDG",
                      "issuingParty": {
                        "partyName": "Mediterranean Shipping Company",
                        "identifyingCodes": [
                          {
                            "codeListProvider": "SMDG",
                            "codeListName": "LCL",
                            "partyCode": "MSC"
                          }
                        ]
                      },
                      "transports": {
                        "plannedDepartureDate": "2023-12-20",
                        "plannedArrivalDate": "2023-12-22",
                        "portOfLoading": {
                          "locationType": "UNCO",
                          "UNLocationCode": "DKAAR"
                        },
                        "portOfDischarge": {
                          "locationType": "UNLO",
                          "UNLocationCode": "DEBRV"
                        },
                        "vesselVoyage": [
                          {
                            "vesselName": "Ever Ace",
                            "carrierExportVoyageNumber": "402E"
                          }
                        ]
                      },
                      "charges": [
                        {
                          "chargeName": "Fictive transport document fee",
                          "currencyAmount": 1,
                          "currencyCode": "EUR",
                          "paymentTermCode": "COL",
                          "calculationBasis": "Per transport document",
                          "unitPrice": 1,
                          "quantity": 1
                        }
                      ],
                      "invoicePayableAt": {
                        "UNLocationCode": "DKAAR"
                      },
                      "partyContactDetails": [
                        {
                          "name": "DCSA test person",
                          "email": "no-reply@dcsa.example.org"
                        }
                      ],
                      "documentParties": [
                        {
                          "party": {
                            "partyName": "DCSA CTK",
                            "partyContactDetails": [
                              {
                                "name": "DCSA test person",
                                "email": "no-reply@dcsa.example.org"
                              }
                            ]
                          },
                          "partyFunction": "OS",
                          "isToBeNotified": false
                        }
                      ],
                      "consignmentItems": [
                        {
                          "carrierBookingReference": "CBR_123_REEFER",
                          "descriptionOfGoods": "Dairy products",
                          "HSCodes": [
                            "04052090"
                          ],
                          "cargoItems": [
                            {
                              "equipmentReference": "KKFU6671914",
                              "weight": 12000,
                              "weightUnit": "KGM",
                              "outerPackaging": {
                                "numberOfPackages": 400,
                                "packageCode": "BQ",
                                "description": "Bottles"
                              }
                            }
                          ]
                        }
                      ],
                      "utilizedTransportEquipments": [
                        {
                          "isShipperOwned": false,
                          "seals": [
                            {
                              "number": "DCSA-CTK-1234"
                            }
                          ],
                          "equipment": {
                            "ISOEquipmentCode": "45R1",
                            "equipmentReference": "KKFU6671914"
                          },
                          "isNonOperatingReefer": false,
                          "activeReeferSettings": {
                            "temperatureSetpoint": -18,
                            "temperatureUnit": "CEL"
                          }
                        }
                      ]
                    }
                  },
                  "dgExample": {
                    "summary": "Issued Transport Document with DG (Dangerous Goods) cargo\n",
                    "description": "An `ISSUED` Transport Document by the provider containing DG (Dangerous Goods). The cargo is `Environmentally hazardous substance, liquid, N.O.S (Propiconazole)` which is transported in steel Jarricans.\n",
                    "value": {
                      "transportDocumentReference": "4AD3FA470BB541B980CE",
                      "shippingInstructionsReference": "b36484d0-1115-43c2-93e4-a378823a8386",
                      "transportDocumentStatus": "ISSUED",
                      "transportDocumentTypeCode": "BOL",
                      "isShippedOnBoardType": true,
                      "freightPaymentTermCode": "PRE",
                      "isElectronic": true,
                      "isToOrder": true,
                      "shippedOnBoardDate": "2023-12-20",
                      "termsAndConditions": "You agree that this transport document exist is name only for the sake of\ntesting your conformance with the DCSA EBL API. This transport document is NOT backed\nby a real shipment with ANY carrier and NONE of the requested services will be\ncarried out in real life.\n\nUnless required by applicable law or agreed to in writing, DCSA provides\nthis JSON data on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\nANY KIND, either express or implied, including, without limitation, any\nwarranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY,\nor FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for\ndetermining the appropriateness of using or redistributing this JSON\ndata and assume any risks associated with Your usage of this data.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall DCSA be liable to\nYou for damages, including any direct, indirect, special, incidental, or\nconsequential damages of any character arising as a result of this terms or conditions\nor out of the use or inability to use the provided JSON data (including but not limited\nto damages for loss of goodwill, work stoppage, computer failure or malfunction, or any\nand all other commercial damages or losses), even if DCSA has been advised of the\npossibility of such damages.\n",
                      "receiptTypeAtOrigin": "CY",
                      "deliveryTypeAtDestination": "CY",
                      "cargoMovementTypeAtOrigin": "FCL",
                      "cargoMovementTypeAtDestination": "FCL",
                      "serviceContractReference": "SCR-1234-DG",
                      "carrierCode": "HLC",
                      "carrierCodeListProvider": "SMDG",
                      "issuingParty": {
                        "partyName": "Hapag Lloyd",
                        "identifyingCodes": [
                          {
                            "codeListProvider": "SMDG",
                            "codeListName": "LCL",
                            "partyCode": "HLC"
                          }
                        ]
                      },
                      "transports": {
                        "plannedDepartureDate": "2023-12-20",
                        "plannedArrivalDate": "2023-12-22",
                        "portOfLoading": {
                          "locationType": "UNCO",
                          "UNLocationCode": "DKAAR"
                        },
                        "portOfDischarge": {
                          "locationType": "UNLO",
                          "UNLocationCode": "DEBRV"
                        },
                        "vesselVoyage": [
                          {
                            "vesselName": "Berlin Express",
                            "carrierExportVoyageNumber": "402E"
                          }
                        ]
                      },
                      "charges": [
                        {
                          "chargeName": "Fictive transport document fee",
                          "currencyAmount": 1,
                          "currencyCode": "EUR",
                          "paymentTermCode": "COL",
                          "calculationBasis": "Per transport document",
                          "unitPrice": 1,
                          "quantity": 1
                        }
                      ],
                      "invoicePayableAt": {
                        "UNLocationCode": "DKAAR"
                      },
                      "partyContactDetails": [
                        {
                          "name": "DCSA test person",
                          "email": "no-reply@dcsa.example.org"
                        }
                      ],
                      "documentParties": [
                        {
                          "party": {
                            "partyName": "DCSA CTK",
                            "partyContactDetails": [
                              {
                                "name": "DCSA test person",
                                "email": "no-reply@dcsa.example.org"
                              }
                            ]
                          },
                          "partyFunction": "OS",
                          "isToBeNotified": false
                        }
                      ],
                      "consignmentItems": [
                        {
                          "carrierBookingReference": "RTM1234567",
                          "descriptionOfGoods": "Environmentally hazardous substance, liquid, N.O.S (Propiconazole)",
                          "HSCodes": [
                            "293499"
                          ],
                          "cargoItems": [
                            {
                              "equipmentReference": "HLXU1234567",
                              "weight": 12000,
                              "weightUnit": "KGM",
                              "outerPackaging": {
                                "numberOfPackages": 400,
                                "imoPackagingCode": "3A1",
                                "description": "Jerrican, steel",
                                "dangerousGoods": [
                                  {
                                    "unNumber": "3082",
                                    "properShippingName": "Environmentally hazardous substance, liquid, N.O.S",
                                    "imoClass": "9",
                                    "packingGroup": 3,
                                    "EMSNumber": "F-A S-F"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      ],
                      "utilizedTransportEquipments": [
                        {
                          "isShipperOwned": false,
                          "seals": [
                            {
                              "number": "DCSA-CTK-1234"
                            }
                          ],
                          "cargoGrossWeight": 12000,
                          "cargoGrossWeightUnit": "KGM",
                          "equipment": {
                            "ISOEquipmentCode": "22GP",
                            "equipmentReference": "HLXU1234567"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "internalServerErrorExample": {
                    "summary": "Internal Server Error while fetching the Transport Document\n",
                    "description": "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "/v3/transport-documents/td-987",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Internal Server Error occurred while fetching the Transport Document",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Internal Error occurred",
                          "errorCodeMessage": "Internal Error occurred"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "getError": {
                    "summary": "GET non-existing Transport Document\n",
                    "description": "Calling\n\n    GET /v3/transport-documents/td-987\n    \nresults in an error as `Transport Document` `td-987` does not exist.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "/v3/transport-documents/td-987",
                      "statusCode": 404,
                      "statusCodeText": "Not Found",
                      "statusCodeMessage": "The requested transportDocumentReference does not exist",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Non existent transportDocumentReference",
                          "errorCodeMessage": "transportDocumentReference `td-987` does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Transport Document"
        ],
        "summary": "Approve a Transport Document\n",
        "description": "A way for the consumer to Approve the `Draft Transport Document`. This endPoint corresponds with **UseCase 7 - Approve Draft Transport Document**.\n\n## Precondition\nIn order to approve a `Draft Transport Document`, the status of the `Transport Document` needs to be in status `DRAFT`\n\n## Postcondition\nThe provider has received an approval from the consumer for a `Transport Document` that is in state `DRAFT`.\n\nThe consumer will receive a `200` (OK) if the payload schema-validates or a `400` (Bad Request) if it does not.\n\n## Flow\nThe following occurs when a provider receives an approval:\n1. The payload is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n   **The process stops here!**\n2. The payload is schema-valid\n3. The `transportDocumentStatus` is set to `APPROVED`.\n4. All '_relevant_' subscribers will be notified via a [Transport Document Notification](https://app.swaggerhub.com/apis/dcsaorg/DCSA_EBL_NTF/3.0.0-Beta-2#/Notifications/transport-document-notifications).\n\nThe provider wil now start asynchronous processing. Once processed, the new status of the `Transport Document` (`ISSUED`) will be communicated via a `Transport Document Notification`. In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the\n\n    GET /v3/transport-documents/{transportDocumentReference}\n\nendPoint to check if the `transportDocumentStatus` in the `Transport Document` has changed.\n",
        "operationId": "approve-transport-document",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "3"
            }
          },
          {
            "name": "transportDocumentReference",
            "in": "path",
            "description": "The `transportDocumentReference` of the `Transport Document`\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 20,
              "pattern": "^\\S+(\\s+\\S+)*$",
              "type": "string",
              "description": "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
              "example": "HHL71800000"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transportdocuments_transportDocumentReference_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The `Transport Document` has been successfully `APPROVED`\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransportDocumentRefStatus"
                },
                "examples": {
                  "approveExample": {
                    "summary": "Approve Draft Transport Document\n",
                    "description": "Consumer approves the drafted `Transport Document`.\n",
                    "value": {
                      "transportDocumentReference": "td-987",
                      "transportDocumentStatus": "APPROVED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "In case the Approve payload does not schema validate a `400` (Bad Request) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "badRequestExample": {
                    "summary": "Wrong Transport Document status\n",
                    "description": "`ISSUE` is not a possible value when PATCHING a `Transport Document`.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "PATCH",
                      "requestUri": "/v3/transport-documents/td-987",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "statusCodeMessage": "ISSUE is not a valid status to set",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-10-03T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "property": "transportDocumentStatus",
                          "value": "ISSUE",
                          "errorCodeText": "incorrect value",
                          "errorCodeMessage": "Only APPROVED is an allowed value: ISSUE was inserted"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "internalServerErrorExample": {
                    "summary": "Internal Server Error while approving the `Draft Transport Document`\n",
                    "description": "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "PATCH",
                      "requestUri": "/v3/transport-documents/td-987",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Internal Server Error occurred while approving the Transport Document",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Internal Error occurred",
                          "errorCodeMessage": "Internal Error occurred"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "getError": {
                    "summary": "GET non-existing Transport Document\n",
                    "description": "Calling\n\n    PATCH /v3/transport-documents/td-987\n    \nresults in an error as `Transport Document` `td-987` does not exist.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                    "value": {
                      "httpMethod": "PATCH",
                      "requestUri": "/v3/transport-documents/td-987",
                      "statusCode": 404,
                      "statusCodeText": "Not Found",
                      "statusCodeMessage": "The requested transportDocumentReference does not exist",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "errorCodeText": "Non existent transportDocumentReference",
                          "errorCodeMessage": "transportDocumentReference `td-987` does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateShippingInstructions": {
        "title": "Shipping Instructions",
        "required": [
          "consignmentItems",
          "documentParties",
          "freightPaymentTermCode",
          "isElectronic",
          "isShippedOnBoardType",
          "isToOrder",
          "partyContactDetails",
          "transportDocumentTypeCode",
          "utilizedTransportEquipments"
        ],
        "type": "object",
        "properties": {
          "transportDocumentTypeCode": {
            "type": "string",
            "description": "Specifies the type of the transport document\n- `BOL` (Bill of Lading)\n- `SWB` (Sea Waybill)\n",
            "example": "SWB",
            "enum": [
              "BOL",
              "SWB"
            ]
          },
          "isShippedOnBoardType": {
            "type": "boolean",
            "description": "Specifies whether the Transport Document is a received for shipment, or shipped on board.\n",
            "example": true
          },
          "freightPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "originChargesPaymentTerm": {
            "$ref": "#/components/schemas/CreateShippingInstructions_originChargesPaymentTerm"
          },
          "destinationChargesPaymentTerm": {
            "$ref": "#/components/schemas/CreateShippingInstructions_destinationChargesPaymentTerm"
          },
          "isElectronic": {
            "type": "boolean",
            "description": "An indicator whether the transport document is electronically transferred.\n",
            "example": true
          },
          "sendToPlatform": {
            "maxLength": 4,
            "type": "string",
            "description": "Indicates the shipper’s platform on which the eBL should be issued. The value **MUST** be one of:\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ICED` (ICE Digital)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGo)\n\n**Condition:** Mandatory for electronic Bill of Lading (`isElectronic=TRUE`).\n",
            "example": "WAVE"
          },
          "isToOrder": {
            "type": "boolean",
            "description": "Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).\n\n`isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).\n",
            "example": false
          },
          "numberOfCopiesWithCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "The requested number of copies of the Transport document to be issued by the carrier including charges. Only applicable for physical (paper) documents",
            "format": "int32",
            "example": 2
          },
          "numberOfCopiesWithoutCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "The requested number of copies of the Transport document to be issued by the carrier **NOT** including charges. Only applicable for physical (paper) documents",
            "format": "int32",
            "example": 2
          },
          "numberOfOriginalsWithCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of originals of the bill of lading that has been requested by the customer with charges. Only applicable for physical documents.\n",
            "format": "int32",
            "example": 1
          },
          "numberOfOriginalsWithoutCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of originals of the bill of lading that has been requested by the customer without charges. Only applicable for physical documents.\n",
            "format": "int32",
            "example": 1
          },
          "displayedNameForPlaceOfReceipt": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "displayedNameForPortOfLoad": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "displayedNameForPortOfDischarge": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "displayedNameForPlaceOfDelivery": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "placeOfIssue": {
            "type": "object",
            "description": "An object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified either as a `UN Location Code` or as a `CountryCode`.\n",
            "oneOf": [
              {
                "title": "UN Location Code",
                "required": [
                  "UNLocationCode"
                ],
                "type": "object",
                "properties": {
                  "UNLocationCode": {
                    "maxLength": 5,
                    "minLength": 5,
                    "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
                    "type": "string",
                    "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
                    "example": "NLAMS"
                  }
                }
              },
              {
                "title": "Country Code",
                "required": [
                  "countryCode"
                ],
                "type": "object",
                "properties": {
                  "countryCode": {
                    "maxLength": 2,
                    "minLength": 2,
                    "pattern": "^[A-Z]{2}$",
                    "type": "string",
                    "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                    "example": "DK"
                  }
                }
              }
            ]
          },
          "invoicePayableAt": {
            "$ref": "#/components/schemas/CreateShippingInstructions_invoicePayableAt"
          },
          "partyContactDetails": {
            "type": "array",
            "description": "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "documentParties": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Document Parties`\n",
            "items": {
              "$ref": "#/components/schemas/DocumentParty"
            }
          },
          "consignmentItems": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `ConsignmentItems`\n",
            "items": {
              "$ref": "#/components/schemas/ConsignmentItem_SHI"
            }
          },
          "utilizedTransportEquipments": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
            "items": {
              "$ref": "#/components/schemas/UtilizedTransportEquipment_SHI"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          },
          "advanceManifestFilings": {
            "type": "array",
            "description": "A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing\n",
            "items": {
              "$ref": "#/components/schemas/AdvanceManifestFiling"
            }
          },
          "requestedCarrierCertificates": {
            "type": "array",
            "description": "Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack\n",
            "items": {
              "$ref": "#/components/schemas/RequestedCarrierCertificate"
            }
          },
          "requestedCarrierClauses": {
            "type": "array",
            "description": "Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`\n",
            "items": {
              "$ref": "#/components/schemas/RequestedCarrierClause"
            }
          }
        },
        "description": "The `Shipping Instructions` is an enrichment to the original booking shared by the Shipper to the Carrier. The information given by the Shipper through the `Shipping Instructions` is the information required to create a `Draft Transport Document`.\n"
      },
      "PartyContactDetail": {
        "title": "Party Contact Detail",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "Name of the contact\n",
            "example": "Henrik"
          }
        },
        "description": "The contact details of the person to contact. It is mandatory to provide either `phone` and/or `email` along with the `name`.\n",
        "example": {
          "name": "Henrik",
          "phone": "+45 51801234"
        },
        "anyOf": [
          {
            "title": "Phone required",
            "required": [
              "phone"
            ],
            "type": "object",
            "properties": {
              "phone": {
                "maxLength": 30,
                "pattern": "^\\S+(\\s+\\S+)*$",
                "type": "string",
                "description": "Phone number for the contact\n",
                "example": "+45 70262970"
              }
            },
            "description": "`Phone` is mandatory to provide\n"
          },
          {
            "title": "Email required",
            "required": [
              "email"
            ],
            "type": "object",
            "properties": {
              "email": {
                "maxLength": 100,
                "pattern": "^.+@\\S+$",
                "type": "string",
                "description": "`E-mail` address to be used\n",
                "example": "info@dcsa.org"
              }
            },
            "description": "`Email` is mandatory to provide\n"
          }
        ]
      },
      "DocumentParty": {
        "title": "Document Party",
        "required": [
          "isToBeNotified",
          "party",
          "partyFunction"
        ],
        "type": "object",
        "properties": {
          "party": {
            "$ref": "#/components/schemas/Party"
          },
          "partyFunction": {
            "maxLength": 3,
            "type": "string",
            "description": "Specifies the role of the party in a given context. Possible values are:\n\n- `OS` (Original shipper)\n- `CN` (Consignee)\n- `COW` (Invoice payer on behalf of the consignor (shipper))\n- `COX` (Invoice payer on behalf of the consignee)\n- `MS` (Document/message issuer/sender)\n- `N1` (First Notify Party)\n- `N2` (Second Notify Party)\n- `NI` (Other Notify Party)\n- `DDR` (Consignor's freight forwarder)\n- `DDS` (Consignee's freight forwarder)\n- `HE` (Carrier booking office (transportation office))\n- `SCO` (Service contract owner - Defined by DCSA)\n- `BA` (Booking Agency)\n- `END` (Endorsee Party)\n",
            "example": "DDS"
          },
          "displayedAddress": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The address to be displayed in the `Transport Document`. The displayed address may be used to match the address provided in the letter of credit. It is mandatory to provide a displayed address if the B/L needs to be switched to paper later in the process\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A single address line to be used when a B/L needs to be printed.\n",
              "example": "Strawinskylaan 4117"
            }
          },
          "isToBeNotified": {
            "type": "boolean",
            "description": "Used to decide whether the party will be notified of the arrival of the cargo.\n",
            "example": true
          }
        },
        "description": "Associates a `Party` with a role.\n"
      },
      "Party": {
        "title": "Party",
        "required": [
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "Asseco Denmark"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "partyContactDetails": {
            "minItems": 1,
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          }
        },
        "description": "Refers to a company or a legal entity.\n"
      },
      "Address": {
        "title": "Address",
        "required": [
          "country",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "Name of the address\n",
            "example": "Henrik"
          },
          "street": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the street of the party’s address.",
            "example": "Ruijggoordweg"
          },
          "streetNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The number of the street of the party’s address.",
            "example": "100"
          },
          "floor": {
            "maxLength": 50,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The floor of the party’s street number.\n",
            "example": "N/A"
          },
          "postCode": {
            "maxLength": 50,
            "type": "string",
            "description": "The post code of the party’s address.",
            "example": "1047 HM"
          },
          "city": {
            "maxLength": 65,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The city name of the party’s address.\n",
            "example": "Amsterdam"
          },
          "stateRegion": {
            "maxLength": 65,
            "type": "string",
            "description": "The state/region of the party’s address.",
            "nullable": true,
            "example": "North Holland"
          },
          "country": {
            "maxLength": 75,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The country of the party’s address.\n",
            "example": "The Netherlands"
          }
        },
        "description": "An object for storing address related information\n"
      },
      "IdentifyingCode": {
        "title": "Identifying Code",
        "required": [
          "codeListProvider",
          "partyCode"
        ],
        "type": "object",
        "properties": {
          "codeListProvider": {
            "maxLength": 5,
            "type": "string",
            "description": "A DCSA provided code for [UN/CEFACT](https://unece.org/fileadmin/DAM/trade/untdid/d16b/tred/tred3055.htm) code list providers:\n- `ISO` (International Standards Organization) - `UNECE` (United Nations Economic Commission for Europe) - `LLOYD` (Lloyd's register of shipping) - `BIC` (Bureau International des Containeurs) - `IMO` (International Maritime Organization) - `SCAC` (Standard Carrier Alpha Code) - `ITIGG` (International Transport Implementation Guidelines Group) - `ITU` (International Telecommunication Union) - `SMDG` (Shipplanning Message Development Group) - `NCBH` (NCB Hazcheck) - `FMC` (Federal Maritime Commission) - `CBSA` (Canada Border Services Agency) - `DCSA` (Digitial Container Shipping Association) - `W3C` (World Wide Web Consortium) - `GLEIF` (Global Legal Entity Identifier Foundation) - `EPI` (EBL Platform Identifier) - `ZZZ` (Mutually defined)\n",
            "example": "SMDG"
          },
          "partyCode": {
            "maxLength": 100,
            "type": "string",
            "description": "Code to identify the party as provided by the code list provider\n",
            "example": "MSK"
          },
          "codeListName": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the list, provided by the code list provider\n",
            "example": "LCL"
          }
        }
      },
      "TaxLegalReference": {
        "title": "Tax & Legal Reference",
        "required": [
          "countryCode",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The reference type code as defined by the relevant tax and/or legal authority.\n",
            "example": "PAN"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "DK"
          },
          "value": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The value of the `taxLegalReference`\n",
            "example": "AAAAA0000A"
          }
        },
        "description": "Reference that uniquely identifies a party for tax and/or legal purposes in accordance with the relevant jurisdiction.\nA list of examples:\n| Type  | Country | Description | |-------|:-------:|-------------| |PAN|IN|Goods and Services Tax Identification Number in India| |GSTIN|IN|Goods and Services Tax Identification Number in India| |IEC|IN|Importer-Exported Code in India| |RUC|EC|Registro Único del Contribuyente in Ecuador| |RUC|PE|Registro Único del Contribuyente in Peru| |NIF|MG|Numéro d’Identification Fiscal in Madagascar| |NIF|DZ|Numéro d’Identification Fiscal in Algeria|\nAllowed combinations of `type` and `country` are maintained in [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/documentation/reference-data/taxandlegalreferences-v300.csv).\n"
      },
      "ConsignmentItem_SHI": {
        "title": "Consignment Item",
        "required": [
          "cargoItems",
          "commoditySubreference"
        ],
        "type": "object",
        "properties": {
          "commoditySubreference": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "A unique reference to the commodity object assigned by the carrier in the booking confirmation. The reference must be provided by the shipper as part of the `Shipping Instructions` for the carrier to link this consignment item to the commodity. A commodity reference is only unique in the context of a booking.\n",
            "example": "COM-001"
          },
          "cargoItems": {
            "minItems": 1,
            "type": "array",
            "description": "A list of all `cargoItems`\n",
            "items": {
              "$ref": "#/components/schemas/CargoItem_SHI"
            }
          }
        },
        "description": "Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConsignmentItem"
          }
        ]
      },
      "CargoItem_SHI": {
        "title": "Cargo Item",
        "required": [
          "equipmentReference",
          "weight",
          "weightUnit"
        ],
        "type": "object",
        "properties": {
          "equipmentReference": {
            "maxLength": 11,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
            "example": "APZU4812090"
          },
          "weight": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The total weight of the cargo including packaging items being carried in the container(s). Excludes the tare weight of the container(s).\n",
            "format": "float",
            "example": 13000.3
          },
          "weightUnit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          },
          "volume": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "Calculated by multiplying the width, height, and length of the packed cargo.\n",
            "format": "float",
            "example": 12
          },
          "volumeUnit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in either imperial or metric terms\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n",
            "example": "MTQ",
            "enum": [
              "MTQ",
              "FTQ"
            ]
          },
          "outerPackaging": {
            "$ref": "#/components/schemas/OuterPackaging_SHI"
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.\n"
      },
      "OuterPackaging_SHI": {
        "title": "Outer Packaging",
        "required": [
          "description",
          "numberOfPackages"
        ],
        "type": "object",
        "properties": {
          "packageCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z0-9]{2}$",
            "type": "string",
            "description": "A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation N°21 - Revision 12  Annexes V and VI](https://unece.org/sites/default/files/2021-06/rec21_Rev12e_Annex-V-VI_2021.xls)\n\n**Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.\n",
            "example": "5H"
          },
          "numberOfPackages": {
            "minimum": 1,
            "type": "integer",
            "description": "Specifies the number of outer packagings/overpacks associated with this `Cargo Item`.\n",
            "format": "int32",
            "example": 18
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "description": "Description of the outer packaging/overpack.\n",
            "example": "Drum, steel"
          }
        },
        "description": "Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.\n\n**Condition:** Mandatory for non-dangerous goods cargo.\n"
      },
      "CustomsReference": {
        "title": "Custom Reference",
        "required": [
          "countryCode",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The reference type code as defined in the relevant customs jurisdiction.\n",
            "example": "ACID"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "DK"
          },
          "value": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The value of the `customsReference`\n",
            "example": "4988470982020120017"
          }
        },
        "description": "Reference associated with customs and/or excise purposes required by the relevant authorities for the import, export, or transit of the goods.\n\nA (small) list of examples:\n\n| Type  | Country | Description |\n|-------|:-------:|-------------|\n|ACID|EG|Advance Cargo Information Declaration in Egypt|\n|CERS|CA|Canadian Export Reporting System|\n|ITN|US|Internal Transaction Number in US|\n|PEB|ID|PEB reference number|\n|CSN|IN|Cargo Summary Notification (CSN)|\n\nAllowed combinations of `type` and `country` are maintained in [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/documentation/reference-data/customsreferences-v300.csv).\n"
      },
      "ConsignmentItem": {
        "title": "Consignment Item",
        "required": [
          "HSCodes",
          "carrierBookingReference",
          "descriptionOfGoods"
        ],
        "type": "object",
        "properties": {
          "carrierBookingReference": {
            "maxLength": 35,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The associated booking number provided by the carrier for this `Consignment Item`.\n\nWhen multiple `carrierBookingReferences` are used then the bookings referred to must all contain the same:\n- transportPlan\n- shipmentLocations\n- receiptTypeAtOrigin\n- deliveryTypeAtDestination\n- cargoMovementTypeAtOrigin\n- cargoMovementTypeAtDestination\n- serviceContractReference\n- termsAndConditions\n- Place of B/L Issue (if provided)\n",
            "example": "ABC709951"
          },
          "descriptionOfGoods": {
            "maxLength": 5000,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The cargo description are details which accurately and properly describe the cargo being shipped in the container(s) as provided by the shipper.",
            "example": "blue shoes size 47"
          },
          "HSCodes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `HS Codes` that apply to this `consignmentItem`\n",
            "items": {
              "maxLength": 10,
              "minLength": 6,
              "pattern": "^\\d{6,10}$",
              "type": "string",
              "description": "Used by customs to classify the product being shipped. The type of HS code depends on country and customs requirements. The code must be at least 6 and at most 10 digits.\n\nMore information can be found here: [HS Nomenclature 2022 edition](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools/hs-nomenclature-2022-edition/hs-nomenclature-2022-edition.aspx ).\n\nThis standard is based on the 2022 revision.\n",
              "example": "851713"
            }
          },
          "shippingMarks": {
            "type": "array",
            "description": "A list of the `ShippingMarks` applicable to this `consignmentItem`\n",
            "items": {
              "maxLength": 500,
              "type": "string",
              "description": "The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.\n",
              "example": "Made in China"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`\n"
      },
      "Reference": {
        "title": "Reference",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 3,
            "type": "string",
            "description": "The reference type codes defined by DCSA. Possible values are:\n- `FF` (Freight Forwarder’s Reference)\n- `SI` (Shipper’s Reference)\n- `SPO` (Shippers Purchase Order Reference)\n- `CPO` (Consignees Purchase Order Reference)\n- `CR` (Customer’s Reference)\n- `AAO` (Consignee’s Reference)\n- `ECR` (Empty container release reference)\n- `CSI` (Customer shipment ID)\n- `BPR` (Booking party reference number)\n- `BID` (Booking Request ID)\n- `SAC` (Shipping Agency Code)\n",
            "example": "FF"
          },
          "value": {
            "maxLength": 100,
            "type": "string",
            "description": "The value of the reference. \n",
            "example": "HHL00103004"
          }
        },
        "description": "References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\n"
      },
      "UtilizedTransportEquipment_SHI": {
        "title": "Utilized Transport Equipment",
        "required": [
          "seals"
        ],
        "type": "object",
        "properties": {
          "seals": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Seals`\n",
            "items": {
              "$ref": "#/components/schemas/Seal"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "Specifies the container (`Equipment`), `Seals` and `References`\n",
        "discriminator": {
          "propertyName": "isShipperOwned",
          "mapping": {
            "true": "#/components/schemas/UTEquipment",
            "false": "#/components/schemas/UTEquipmentReference"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/UTEquipment"
          },
          {
            "$ref": "#/components/schemas/UTEquipmentReference"
          }
        ]
      },
      "Seal": {
        "required": [
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "maxLength": 15,
            "type": "string",
            "description": "Identifies a seal affixed to the container.",
            "example": "VET123"
          },
          "source": {
            "type": "string",
            "description": "The source of the seal, namely who has affixed the seal. This attribute links to the Seal Source ID defined in the Seal Source reference data entity.\n- `CAR` (Carrier)\n- `SHI` (Shipper)\n- `VET` (Veterinary)\n- `CUS` (Customs)\n",
            "example": "CUS",
            "enum": [
              "CAR",
              "SHI",
              "VET",
              "CUS"
            ]
          }
        },
        "description": "Addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This `Seal` is meant to stay on until the shipment equipment reaches its final destination.\n"
      },
      "UTEquipment": {
        "title": "Shipper Owned Equipment (SoC)",
        "required": [
          "equipment",
          "isShipperOwned"
        ],
        "type": "object",
        "properties": {
          "isShipperOwned": {
            "type": "boolean",
            "description": "Indicates whether the container is shipper owned (SOC).\n",
            "example": true
          },
          "equipment": {
            "$ref": "#/components/schemas/RequiredEquipment"
          }
        },
        "description": "To be used for SoC (Shipper owned Containers). If `isShipperOwned` is true then the equipment used needs to be specified\n"
      },
      "RequiredEquipment": {
        "title": "Equipment",
        "type": "object",
        "description": "Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/Equipment"
          }
        ]
      },
      "Equipment": {
        "required": [
          "equipmentReference"
        ],
        "type": "object",
        "properties": {
          "equipmentReference": {
            "maxLength": 11,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
            "example": "APZU4812090"
          },
          "ISOEquipmentCode": {
            "maxLength": 4,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "Unique code for the different equipment size and type used to transport commodities. The code can refer to either the ISO size type (e.g. 22G1) or the ISO type group (e.g. 22GP) following the [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346) standard.\n",
            "example": "22GP"
          },
          "tareWeight": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The weight of an empty container (gross container weight).\n",
            "format": "float",
            "example": 4800
          },
          "weightUnit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n\n**Conditional:** Mandatory to provide if `tareWeight` is provided\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          }
        },
        "description": "Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.\n"
      },
      "UTEquipmentReference": {
        "title": "Carrier Owned Equipment",
        "required": [
          "equipmentReference",
          "isShipperOwned"
        ],
        "type": "object",
        "properties": {
          "isShipperOwned": {
            "type": "boolean",
            "description": "Indicates whether the container is shipper owned (SOC).\n",
            "example": false
          },
          "equipmentReference": {
            "maxLength": 11,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
            "example": "APZU4812090"
          }
        },
        "description": "To be used when referring to carrier owned containers (`isShipperOwned` is false). In this case it is only necessary to provide `equipmentReference`\n"
      },
      "AdvanceManifestFiling": {
        "title": "Advance Manifest Filing",
        "required": [
          "advanceManifestFilingsHouseBLPerformedBy",
          "countryCode",
          "manifestTypeCode"
        ],
        "type": "object",
        "properties": {
          "manifestTypeCode": {
            "maxLength": 50,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The Manifest type code as defined by the provider. A list of `manifestTypeCodes` together with `countryCode` is maintained in [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/documentation/reference-data/advancemanifestfilings-v300.csv)\n",
            "example": "ACE"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "DK"
          },
          "advanceManifestFilingsHouseBLPerformedBy": {
            "type": "string",
            "description": "Indicates whether the shipper (`SHIPPER`) will perform the advance manifest filing(s) for the House BL directly or if the carrier (`CARRIER`) should file them on their behalf. Allowed values are:\n\n- `SHIPPER` (the shipper does the filing)\n- `CARRIER` (the carrier does the filing)\n\nIn case of self-filing (`SHIPPER`), the shipper can provide their `selfFilerCode` for each manifest.\n\n**Condition:** The `selfFilerCode` must be provided when `manifestTypeCode` is either `ACE` (US) or `ACI` (CA) and the `advanceManifestFilingsHouseBLPerformedBy` is set to `SHIPPER`.\n",
            "example": "SHIPPER",
            "enum": [
              "SHIPPER",
              "CARRIER"
            ]
          },
          "selfFilerCode": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "Code identifying the party who will submit the advance manifest filing(s) for the House BL.\n\n**Mandatory** if `manifestTypeCode` is either `ACE` (US) or `ACI` (CA) and `advanceManifestFilingsHouseBLPerformedBy` is set to `SHIPPER`.\n",
            "example": "FLXP"
          }
        },
        "description": "An Advance Maifest Filing defined by a Manifest type code in combination with a country code.\n\nA list of `manifestTypeCodes` together with `countryCode` is maintained in [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/documentation/reference-data/advancemanifestfilings-v300.csv). A (small) subset can be seen here:\n\n| manifestTypeCode | countryCode | Description |\n|-----------------------|:-------------:|-------------|\n|ACI|EG|Advance Cargo Information in Egypt|\n|ACE|US|Automated Commercial Environment in the United States|\n|AFR|JP|Cargo Summary Notification (CSN)|\n",
        "example": {
          "manifestTypeCode": "ACE",
          "countryCode": "US",
          "advanceManifestFilingsHouseBLPerformedBy": "SHIPPER",
          "selfFilerCode": "FLXP123"
        }
      },
      "RequestedCarrierCertificate": {
        "title": "Requested Carrier Certificate",
        "maxLength": 100,
        "type": "string",
        "description": "Name of the certificate. Detailed information about carrier certificates can be found [here](https://dcsa.org/wp-content/uploads/2023/12/28-12-2023_Carrier-Certificates-shipment-voyage-particulars-and-vessel-particulars.pdf). Possible values are:\n- `SHIPMENT_VOYAGE_PARTICULARS_1` (Shipment-Voyage Particulars 1)\n- `SHIPMENT_VOYAGE_PARTICULARS_2` (Shipment-Voyage Particulars 2)\n- `SHIPMENT_VOYAGE_PARTICULARS_3` (Shipment-Voyage Particulars 3)\n- `SHIPMENT_VOYAGE_PARTICULARS_4` (Shipment-Voyage Particulars 4)\n- `SHIPMENT_VOYAGE_PARTICULARS_5` (Shipment-Voyage Particulars 5)\n- `SHIPMENT_VOYAGE_PARTICULARS_6` (Shipment-Voyage Particulars 6)\n- `SHIPMENT_VOYAGE_PARTICULARS_7` (Shipment-Voyage Particulars 7)\n- `VESSEL_PARTICULARS_1` (Vessel Particulars 1)\n- `VESSEL_PARTICULARS_2` (Vessel Particulars 2)\n- `VESSEL_PARTICULARS_3` (Vessel Particulars 3)\n- `VESSEL_PARTICULARS_4` (Vessel Particulars 4)\n- `VESSEL_PARTICULARS_5` (Vessel Particulars 5)\n- `VESSEL_PARTICULARS_6` (Vessel Particulars 6)\n- `VESSEL_PARTICULARS_7` (Vessel Particulars 7)\n- `VESSEL_PARTICULARS_8` (Vessel Particulars 8)\n- `VESSEL_PARTICULARS_9` (Vessel Particulars 9)\n- `VESSEL_PARTICULARS_10` (Vessel Particulars 10)\n- `VESSEL_PARTICULARS_11` (Vessel Particulars 11)\n- `VESSEL_PARTICULARS_12` (Vessel Particulars 12)\n- `VESSEL_PARTICULARS_13` (Vessel Particulars 13)\n- `VESSEL_PARTICULARS_14` (Vessel Particulars 14)\n- `VESSEL_PARTICULARS_15` (Vessel Particulars 15)\n- `VESSEL_PARTICULARS_16` (Vessel Particulars 16)\n- `VESSEL_PARTICULARS_17` (Vessel Particulars 17)\n- `VESSEL_PARTICULARS_18` (Vessel Particulars 18)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/carriercertificates.csv).\n",
        "example": "VESSEL_PARTICULARS_1"
      },
      "RequestedCarrierClause": {
        "title": "Requested Carrier Clause",
        "maxLength": 100,
        "type": "string",
        "description": "A clause to request from the carrier. Detailed information about the carrier clauses can be found [here](https://dcsa.org/wp-content/uploads/2023/12/202312-Standardised-Clauses-BL.pdf). Possible values are:\n- `CARGO_CARGOSPECIFICS` (Cargo/Cargo specifics)\n- `VESSELCONVEYANCE_COUNTRYSPECIFIC` (Vessel conveyance/Country Specific)\n- `CARGO_RETURNOFEMPTYCONTAINER` (Cargo/Return of Empty Container)\n- `CARGO_CARGOVALUE` (Cargo/Cargo value)\n- `CARGO_REEFERTEMPERATURE` (Cargo/Reefer temperature)\n- `CARGO_CONFLICTINGTEMPERATURES_MIXEDLOADS` (Cargo/Conflicting temperatures / Mixed loads)\n\nMore infomation can be read [here](https://dcsa.org/wp-content/uploads/2023/12/202312-Standardised-Clauses-BL.pdf)\n",
        "example": "CARGO_CARGOSPECIFICS"
      },
      "ShippingInstructionsRefStatus": {
        "title": "Shipping Instructions Response",
        "required": [
          "shippingInstructionsStatus"
        ],
        "type": "object",
        "properties": {
          "shippingInstructionsReference": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The identifier for a `Shipping Istructions` provided by the carrier for system purposes.\n",
            "example": "e0559d83-00e2-438e-afd9-fdd610c1a008"
          },
          "transportDocumentReference": {
            "maxLength": 20,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
            "example": "HHL71800000"
          },
          "shippingInstructionsStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Shipping Instructions`. Possible values are:\n- `RECEIVED` (Shipping Instructions has been received)\n- `PENDING UPDATE` (An update is required to the Shipping Instructions)\n- `COMPLETED` (The Shipping Instructions can no longer be modified - the related Transport Document has been surrendered for delivery)\n",
            "example": "RECEIVED"
          },
          "updatedShippingInstructionsStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the latest update to the `Shipping Instructions`. If no update has been requested - then this field is empty. Possible values are:\n- `UPDATE RECEIVED` (An update to a Shipping Instructions is waiting to be processed)\n- `UPDATE CONFIRMED` (An update to a Shipping Instructions has been confirmed)\n- `UPDATE CANCELLED` (An update to a Shipping Instructions is discontinued by consumer)\n- `UPDATE DECLINED` (An update to a Shipping Instructions is discontinued by provider)\n",
            "example": "UPDATE RECEIVED"
          },
          "requestedChanges": {
            "type": "array",
            "description": "A list of changes requirested by the carrier to the document in order for it to be accepted.\n",
            "items": {
              "$ref": "#/components/schemas/RequestedChange"
            }
          },
          "reason": {
            "title": "reason",
            "maxLength": 5000,
            "type": "string",
            "description": "This field can be used to explain `shippingInstructionsStatus` and/or `updatedShippingInstructionsStatus`.\n",
            "example": "Rejected because of of wrong equipmentReference"
          }
        },
        "description": "The `shippingInstructionsReference`, possibly the `transportDocumentReference` along with the `shippingInstructionsStatus` and `updatedShippingInstructionsStatus`, an optional list of `requestedChanges` to be applied to the `Shipping Instructions` and and optional `reason`field is returned.\n"
      },
      "RequestedChange": {
        "title": "Requested Change",
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "field": {
            "maxLength": 500,
            "type": "string",
            "description": "The field that caused the error, e.g. a failed validation. The field can be expressed as a [JSONpath](https://github.com/json-path/JsonPath) using either the [DOT] Notation or the [Bracket] Notation.\n",
            "example": "$.location.facilityCode"
          },
          "message": {
            "maxLength": 500,
            "type": "string",
            "description": "A description of the problem that needs attention.\n",
            "example": "Spaces not allowed in facility code"
          }
        },
        "description": "A change required to the document in order for the carrier to accepted it\n"
      },
      "ErrorResponse": {
        "title": "Error Response",
        "required": [
          "errorDateTime",
          "errors",
          "httpMethod",
          "requestUri",
          "statusCode",
          "statusCodeText"
        ],
        "type": "object",
        "properties": {
          "httpMethod": {
            "type": "string",
            "description": "The HTTP method used to make the request e.g. `GET`, `POST`, etc\n",
            "example": "POST",
            "enum": [
              "GET",
              "HEAD",
              "POST",
              "PUT",
              "DELETE",
              "OPTION",
              "PATCH"
            ]
          },
          "requestUri": {
            "type": "string",
            "description": "The URI that was requested.\n",
            "example": "/v1/events"
          },
          "statusCode": {
            "type": "integer",
            "description": "The HTTP status code returned.\n",
            "format": "int32",
            "example": 400
          },
          "statusCodeText": {
            "maxLength": 50,
            "type": "string",
            "description": "A standard short description corresponding to the HTTP status code.\n",
            "example": "Bad Request"
          },
          "statusCodeMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "A long description corresponding to the HTTP status code with additional information.\n",
            "example": "The supplied data could not be accepted"
          },
          "providerCorrelationReference": {
            "maxLength": 100,
            "type": "string",
            "description": "A unique identifier to the HTTP request within the scope of the API provider.\n",
            "example": "4426d965-0dd8-4005-8c63-dc68b01c4962"
          },
          "errorDateTime": {
            "type": "string",
            "description": "The DateTime corresponding to the error occurring. Must be formatted using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\n",
            "format": "date-time",
            "example": "2019-11-12T07:41:00+08:30"
          },
          "errors": {
            "minItems": 1,
            "type": "array",
            "description": "An array of errors providing more detail about the root cause.\n",
            "items": {
              "$ref": "#/components/schemas/Detailed Error"
            }
          }
        },
        "description": "Unexpected error"
      },
      "UpdateShippingInstructions": {
        "title": "Shipping Instructions",
        "required": [
          "consignmentItems",
          "documentParties",
          "freightPaymentTermCode",
          "isElectronic",
          "isShippedOnBoardType",
          "isToOrder",
          "partyContactDetails",
          "shippingInstructionsReference",
          "transportDocumentTypeCode",
          "utilizedTransportEquipments"
        ],
        "type": "object",
        "properties": {
          "shippingInstructionsReference": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The identifier for a `Shipping Istructions` provided by the carrier for system purposes.\n",
            "example": "e0559d83-00e2-438e-afd9-fdd610c1a008"
          },
          "transportDocumentTypeCode": {
            "type": "string",
            "description": "Specifies the type of the transport document\n- `BOL` (Bill of Lading)\n- `SWB` (Sea Waybill)\n",
            "example": "SWB",
            "enum": [
              "BOL",
              "SWB"
            ]
          },
          "isShippedOnBoardType": {
            "type": "boolean",
            "description": "Specifies whether the Transport Document is a received for shipment, or shipped on board.\n",
            "example": true
          },
          "freightPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "originChargesPaymentTerm": {
            "$ref": "#/components/schemas/CreateShippingInstructions_originChargesPaymentTerm"
          },
          "destinationChargesPaymentTerm": {
            "$ref": "#/components/schemas/CreateShippingInstructions_destinationChargesPaymentTerm"
          },
          "isElectronic": {
            "type": "boolean",
            "description": "An indicator whether the transport document is electronically transferred.\n",
            "example": true
          },
          "sendToPlatform": {
            "maxLength": 4,
            "type": "string",
            "description": "Indicates the shipper’s platform on which the eBL should be issued. The value **MUST** be one of:\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ICED` (ICE Digital)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGo)\n\n**Condition:** Mandatory for electronic Bill of Lading (`isElectronic=TRUE`).\n",
            "example": "WAVE"
          },
          "isToOrder": {
            "type": "boolean",
            "description": "Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).\n\n`isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).\n",
            "example": false
          },
          "numberOfCopiesWithCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "The requested number of copies of the Transport document to be issued by the carrier including charges. Only applicable for physical (paper) documents",
            "format": "int32",
            "example": 2
          },
          "numberOfCopiesWithoutCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "The requested number of copies of the Transport document to be issued by the carrier **NOT** including charges. Only applicable for physical (paper) documents",
            "format": "int32",
            "example": 2
          },
          "numberOfOriginalsWithCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of originals of the bill of lading that has been requested by the customer with charges. Only applicable for physical documents.\n",
            "format": "int32",
            "example": 1
          },
          "numberOfOriginalsWithoutCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of originals of the bill of lading that has been requested by the customer without charges. Only applicable for physical documents.\n",
            "format": "int32",
            "example": 1
          },
          "displayedNameForPlaceOfReceipt": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "displayedNameForPortOfLoad": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "displayedNameForPortOfDischarge": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "displayedNameForPlaceOfDelivery": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "placeOfIssue": {
            "type": "object",
            "description": "An object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified either as a `UN Location Code` or as a `CountryCode`.\n",
            "oneOf": [
              {
                "title": "UN Location Code",
                "required": [
                  "UNLocationCode"
                ],
                "type": "object",
                "properties": {
                  "UNLocationCode": {
                    "maxLength": 5,
                    "minLength": 5,
                    "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
                    "type": "string",
                    "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
                    "example": "NLAMS"
                  }
                }
              },
              {
                "title": "Country Code",
                "required": [
                  "countryCode"
                ],
                "type": "object",
                "properties": {
                  "countryCode": {
                    "maxLength": 2,
                    "minLength": 2,
                    "pattern": "^[A-Z]{2}$",
                    "type": "string",
                    "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                    "example": "DK"
                  }
                }
              }
            ]
          },
          "invoicePayableAt": {
            "$ref": "#/components/schemas/CreateShippingInstructions_invoicePayableAt"
          },
          "partyContactDetails": {
            "type": "array",
            "description": "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "documentParties": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Document Parties`\n",
            "items": {
              "$ref": "#/components/schemas/DocumentParty"
            }
          },
          "consignmentItems": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `ConsignmentItems`\n",
            "items": {
              "$ref": "#/components/schemas/ConsignmentItem_SHI"
            }
          },
          "utilizedTransportEquipments": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
            "items": {
              "$ref": "#/components/schemas/UtilizedTransportEquipment_SHI"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          },
          "advanceManifestFilings": {
            "type": "array",
            "description": "A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing\n",
            "items": {
              "$ref": "#/components/schemas/AdvanceManifestFiling"
            }
          },
          "requestedCarrierCertificates": {
            "type": "array",
            "description": "Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack\n",
            "items": {
              "$ref": "#/components/schemas/RequestedCarrierCertificate"
            }
          },
          "requestedCarrierClauses": {
            "type": "array",
            "description": "Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`\n",
            "items": {
              "$ref": "#/components/schemas/RequestedCarrierClause"
            }
          }
        },
        "description": "The `Shipping Instructions` to update.\n"
      },
      "ShippingInstructions": {
        "title": "Shipping Instructions",
        "required": [
          "consignmentItems",
          "documentParties",
          "freightPaymentTermCode",
          "isElectronic",
          "isShippedOnBoardType",
          "isToOrder",
          "partyContactDetails",
          "shippingInstructionsStatus",
          "transportDocumentTypeCode",
          "utilizedTransportEquipments"
        ],
        "type": "object",
        "properties": {
          "shippingInstructionsReference": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The identifier for a `Shipping Istructions` provided by the carrier for system purposes.\n",
            "example": "e0559d83-00e2-438e-afd9-fdd610c1a008"
          },
          "transportDocumentReference": {
            "maxLength": 20,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
            "example": "HHL71800000"
          },
          "shippingInstructionsStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Shipping Instructions`. Possible values are:\n- `RECEIVED` (Shipping Instructions has been received)\n- `PENDING UPDATE` (An update is required to the Shipping Instructions)\n- `COMPLETED` (The Shipping Instructions can no longer be modified - the related Transport Document has been surrendered for delivery)\n",
            "example": "RECEIVED"
          },
          "updatedShippingInstructionsStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the latest update to the `Shipping Instructions`. If no update has been requested - then this field is empty. Possible values are:\n- `UPDATE RECEIVED` (An update to a Shipping Instructions is waiting to be processed)\n- `UPDATE CONFIRMED` (An update to a Shipping Instructions has been confirmed)\n- `UPDATE CANCELLED` (An update to a Shipping Instructions is discontinued by consumer)\n- `UPDATE DECLINED` (An update to a Shipping Instructions is discontinued by provider)\n",
            "example": "UPDATE RECEIVED"
          },
          "transportDocumentTypeCode": {
            "type": "string",
            "description": "Specifies the type of the transport document\n- `BOL` (Bill of Lading)\n- `SWB` (Sea Waybill)\n",
            "example": "SWB",
            "enum": [
              "BOL",
              "SWB"
            ]
          },
          "isShippedOnBoardType": {
            "type": "boolean",
            "description": "Specifies whether the Transport Document is a received for shipment, or shipped on board.\n",
            "example": true
          },
          "freightPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "originChargesPaymentTerm": {
            "$ref": "#/components/schemas/CreateShippingInstructions_originChargesPaymentTerm"
          },
          "destinationChargesPaymentTerm": {
            "$ref": "#/components/schemas/CreateShippingInstructions_destinationChargesPaymentTerm"
          },
          "isElectronic": {
            "type": "boolean",
            "description": "An indicator whether the transport document is electronically transferred.\n",
            "example": true
          },
          "sendToPlatform": {
            "maxLength": 4,
            "type": "string",
            "description": "Indicates the shipper’s platform on which the eBL should be issued. The value **MUST** be one of:\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ICED` (ICE Digital)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGo)\n\n**Condition:** Mandatory for electronic Bill of Lading (`isElectronic=TRUE`).\n",
            "example": "WAVE"
          },
          "isToOrder": {
            "type": "boolean",
            "description": "Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).\n\n`isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).\n",
            "example": false
          },
          "numberOfCopiesWithCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "The requested number of copies of the Transport document to be issued by the carrier including charges. Only applicable for physical (paper) documents",
            "format": "int32",
            "example": 2
          },
          "numberOfCopiesWithoutCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "The requested number of copies of the Transport document to be issued by the carrier **NOT** including charges. Only applicable for physical (paper) documents",
            "format": "int32",
            "example": 2
          },
          "numberOfOriginalsWithCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of originals of the bill of lading that has been requested by the customer with charges. Only applicable for physical documents.\n",
            "format": "int32",
            "example": 1
          },
          "numberOfOriginalsWithoutCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of originals of the bill of lading that has been requested by the customer without charges. Only applicable for physical documents.\n",
            "format": "int32",
            "example": 1
          },
          "displayedNameForPlaceOfReceipt": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "displayedNameForPortOfLoad": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "displayedNameForPortOfDischarge": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "displayedNameForPlaceOfDelivery": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "placeOfIssue": {
            "type": "object",
            "description": "An object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified either as a `UN Location Code` or as a `CountryCode`.\n",
            "oneOf": [
              {
                "title": "UN Location Code",
                "required": [
                  "UNLocationCode"
                ],
                "type": "object",
                "properties": {
                  "UNLocationCode": {
                    "maxLength": 5,
                    "minLength": 5,
                    "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
                    "type": "string",
                    "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
                    "example": "NLAMS"
                  }
                }
              },
              {
                "title": "Country Code",
                "required": [
                  "countryCode"
                ],
                "type": "object",
                "properties": {
                  "countryCode": {
                    "maxLength": 2,
                    "minLength": 2,
                    "pattern": "^[A-Z]{2}$",
                    "type": "string",
                    "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                    "example": "DK"
                  }
                }
              }
            ]
          },
          "invoicePayableAt": {
            "$ref": "#/components/schemas/CreateShippingInstructions_invoicePayableAt"
          },
          "partyContactDetails": {
            "type": "array",
            "description": "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "documentParties": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Document Parties`\n",
            "items": {
              "$ref": "#/components/schemas/DocumentParty"
            }
          },
          "consignmentItems": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `ConsignmentItems`\n",
            "items": {
              "$ref": "#/components/schemas/ConsignmentItem_SHI"
            }
          },
          "utilizedTransportEquipments": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
            "items": {
              "$ref": "#/components/schemas/UtilizedTransportEquipment_SHI"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          },
          "advanceManifestFilings": {
            "type": "array",
            "description": "A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing\n",
            "items": {
              "$ref": "#/components/schemas/AdvanceManifestFiling"
            }
          },
          "requestedCarrierCertificates": {
            "type": "array",
            "description": "Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack\n",
            "items": {
              "$ref": "#/components/schemas/RequestedCarrierCertificate"
            }
          },
          "requestedCarrierClauses": {
            "type": "array",
            "description": "Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`\n",
            "items": {
              "$ref": "#/components/schemas/RequestedCarrierClause"
            }
          },
          "requestedChanges": {
            "type": "array",
            "description": "A list of changes requirested by the carrier to the document in order for it to be accepted.\n",
            "items": {
              "$ref": "#/components/schemas/RequestedChange"
            }
          },
          "reason": {
            "title": "reason",
            "maxLength": 5000,
            "type": "string",
            "description": "This field can be used to explain `shippingInstructionsStatus` and/or `updatedShippingInstructionsStatus`.\n",
            "example": "Rejected because of of wrong equipmentReference"
          }
        },
        "description": "The `Shipping Instructions` as provided by the Shipper.\n"
      },
      "ShippingInstructionsRefCancelStatus": {
        "title": "Shipping Instructions Response",
        "required": [
          "shippingInstructionsStatus"
        ],
        "type": "object",
        "properties": {
          "shippingInstructionsReference": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The identifier for a `Shipping Istructions` provided by the carrier for system purposes.\n",
            "example": "e0559d83-00e2-438e-afd9-fdd610c1a008"
          },
          "transportDocumentReference": {
            "maxLength": 20,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
            "example": "HHL71800000"
          },
          "shippingInstructionsStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Shipping Instructions`. Possible values are:\n- `RECEIVED` (Shipping Instructions has been received)\n- `PENDING UPDATE` (An update is required to the Shipping Instructions)\n- `COMPLETED` (The Shipping Instructions can no longer be modified - the related Transport Document has been surrendered for delivery)\n",
            "example": "RECEIVED"
          },
          "updatedShippingInstructionsStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Updated Shipping Instructions`. It can only be `UPDATE CANCELLED`\n",
            "example": "UPDATE CANCELLED"
          },
          "reason": {
            "title": "reason",
            "maxLength": 5000,
            "type": "string",
            "description": "This field can be used to explain `shippingInstructionsStatus` and/or `updatedShippingInstructionsStatus`.\n",
            "example": "Rejected because of of wrong equipmentReference"
          }
        },
        "description": "The `shippingInstructionsReference`, possibly the `transportDocumentReference` along with the `shippingInstructionsStatus` and `updatedShippingInstructionsStatus` and and optional `reason`field is returned.\n"
      },
      "TransportDocument": {
        "title": "Transport Document",
        "required": [
          "cargoMovementTypeAtDestination",
          "cargoMovementTypeAtOrigin",
          "carrierCode",
          "carrierCodeListProvider",
          "consignmentItems",
          "deliveryTypeAtDestination",
          "documentParties",
          "invoicePayableAt",
          "isElectronic",
          "isShippedOnBoardType",
          "isToOrder",
          "issuingParty",
          "partyContactDetails",
          "receiptTypeAtOrigin",
          "termsAndConditions",
          "transportDocumentReference",
          "transportDocumentStatus",
          "transportDocumentTypeCode",
          "transports",
          "utilizedTransportEquipments"
        ],
        "type": "object",
        "properties": {
          "transportDocumentReference": {
            "maxLength": 20,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
            "example": "HHL71800000"
          },
          "shippingInstructionsReference": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The identifier for a `Shipping Istructions` provided by the carrier for system purposes.\n",
            "example": "e0559d83-00e2-438e-afd9-fdd610c1a008"
          },
          "transportDocumentStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Transport Document`. Possible values are:\n- DRAFT\n- APPROVED\n- ISSUED\n- PENDING SURRENDER FOR AMENDMENT\n- SURRENDER FOR AMENDMENT\n- PENDING SURRENDER FOR DELIVERY\n- SURRENDER FOR DELIVERY\n- VOIDED\n",
            "example": "DRAFT"
          },
          "transportDocumentTypeCode": {
            "type": "string",
            "description": "Specifies the type of the transport document\n- `BOL` (Bill of Lading)\n- `SWB` (Sea Waybill)\n",
            "example": "SWB",
            "enum": [
              "BOL",
              "SWB"
            ]
          },
          "isShippedOnBoardType": {
            "type": "boolean",
            "description": "Specifies whether the Transport Document is a received for shipment, or shipped on board.\n",
            "example": true
          },
          "freightPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "isElectronic": {
            "type": "boolean",
            "description": "An indicator whether the transport document is electronically transferred.\n",
            "example": true
          },
          "isToOrder": {
            "type": "boolean",
            "description": "Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).\n\n`isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).\n",
            "example": false
          },
          "numberOfCopiesWithCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "The requested number of copies of the Transport document to be issued by the carrier including charges. Only applicable for physical (paper) documents",
            "format": "int32",
            "example": 2
          },
          "numberOfCopiesWithoutCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "The requested number of copies of the Transport document to be issued by the carrier **NOT** including charges. Only applicable for physical (paper) documents",
            "format": "int32",
            "example": 2
          },
          "numberOfOriginalsWithCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of originals of the bill of lading that has been requested by the customer with charges. Only applicable for physical documents.\n",
            "format": "int32",
            "example": 1
          },
          "numberOfOriginalsWithoutCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of originals of the bill of lading that has been requested by the customer without charges. Only applicable for physical documents.\n",
            "format": "int32",
            "example": 1
          },
          "displayedNameForPlaceOfReceipt": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "displayedNameForPortOfLoad": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "displayedNameForPortOfDischarge": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "displayedNameForPlaceOfDelivery": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n"
            }
          },
          "shippedOnBoardDate": {
            "type": "string",
            "description": "Date when the last container that is linked to the transport document is physically loaded onboard the vessel indicated on the transport document.\n\nWhen provided on a transport document, the transportDocument is a `Shipped On Board` B/L.\n\nExactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.\n",
            "format": "date",
            "example": "2020-12-12"
          },
          "termsAndConditions": {
            "maxLength": 50000,
            "type": "string",
            "description": "Carrier terms and conditions of transport.\n"
          },
          "receiptTypeAtOrigin": {
            "maxLength": 3,
            "type": "string",
            "description": "Indicates the type of service offered at `Origin`. The options are:\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
            "example": "CY",
            "enum": [
              "CY",
              "SD",
              "CFS"
            ]
          },
          "deliveryTypeAtDestination": {
            "maxLength": 3,
            "type": "string",
            "description": "Indicates the type of service offered at `Destination`. The options are:\n\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
            "example": "CY",
            "enum": [
              "CY",
              "SD",
              "CFS"
            ]
          },
          "cargoMovementTypeAtOrigin": {
            "maxLength": 3,
            "type": "string",
            "description": "Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:\n\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
            "example": "FCL"
          },
          "cargoMovementTypeAtDestination": {
            "maxLength": 3,
            "type": "string",
            "description": "Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:\n\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
            "example": "FCL"
          },
          "issueDate": {
            "type": "string",
            "description": "Local date when the transport document has been issued.\n\nCan be omitted on draft transport documents, but must be provided when the document has been issued.\n",
            "format": "date",
            "example": "2020-12-12"
          },
          "receivedForShipmentDate": {
            "type": "string",
            "description": "Date when the last container linked to the transport document is physically in the terminal (customers cleared against the intended vessel).\n\nWhen provided on a transport document, the transportDocument is a `Received For Shipment` B/L.\n\nExactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.\n",
            "format": "date",
            "example": "2020-12-12"
          },
          "serviceContractReference": {
            "maxLength": 30,
            "type": "string",
            "description": "Reference number for agreement between shipper and carrier through which the shipper commits to provide a certain minimum quantity of cargo over a fixed period, and the carrier commits to a certain rate or rate schedule.\n",
            "example": "HHL51800000"
          },
          "contractQuotationReference": {
            "maxLength": 35,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference. Mandatory if service contract (owner) is not provided.\n",
            "example": "HHL1401"
          },
          "declaredValue": {
            "minimum": 0,
            "type": "number",
            "description": "The value of the cargo that the shipper declares to avoid the carrier's limitation of liability and \"Ad Valorem\" freight, i.e. freight which is calculated based on the value of the goods declared by the shipper.\n",
            "format": "float",
            "example": 1231.1
          },
          "declaredValueCurrency": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "^[A-Z]{3}$",
            "type": "string",
            "description": "The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n",
            "example": "DKK"
          },
          "carrierCode": {
            "maxLength": 4,
            "pattern": "^\\S+$",
            "type": "string",
            "description": "The `NMFTA` or `SMDG` code of the issuing carrier of the `Transport Document`\n",
            "example": "MMCU"
          },
          "carrierCodeListProvider": {
            "type": "string",
            "description": "The code list provider for the carrier code. Possible values are:\n- `SMDG` (Ship Message Design Group)\n- `NMFTA` (National Motor Freight Traffic Association) _includes SPLC (Standard Point Location Code)_\n",
            "example": "NMFTA",
            "enum": [
              "SMDG",
              "NMFTA"
            ]
          },
          "issuingParty": {
            "$ref": "#/components/schemas/Party"
          },
          "carrierClauses": {
            "type": "array",
            "description": "Additional clauses for a specific shipment added by the carrier to the Bill of Lading, subject to local rules / guidelines or certain mandatory information required to be shared with the customer.\n",
            "items": {
              "maxLength": 20000,
              "pattern": "^\\S+(\\s+\\S+)*$",
              "type": "string",
              "description": "The content of the clause.\n",
              "example": "It is not allowed to..."
            }
          },
          "numberOfRiderPages": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of additional pages required to contain the goods description on a transport document. Only applicable for physical transport documents.\n",
            "format": "int32",
            "example": 2
          },
          "transports": {
            "$ref": "#/components/schemas/Transports"
          },
          "charges": {
            "type": "array",
            "description": "A list of `Charges`\n",
            "items": {
              "$ref": "#/components/schemas/Charge"
            }
          },
          "placeOfIssue": {
            "type": "object",
            "description": "An object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified either as a `UN Location Code` or as a `CountryCode`.\n",
            "oneOf": [
              {
                "title": "UN Location Code",
                "required": [
                  "UNLocationCode"
                ],
                "type": "object",
                "properties": {
                  "UNLocationCode": {
                    "maxLength": 5,
                    "minLength": 5,
                    "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
                    "type": "string",
                    "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
                    "example": "NLAMS"
                  }
                }
              },
              {
                "title": "Country Code",
                "required": [
                  "countryCode"
                ],
                "type": "object",
                "properties": {
                  "countryCode": {
                    "maxLength": 2,
                    "minLength": 2,
                    "pattern": "^[A-Z]{2}$",
                    "type": "string",
                    "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                    "example": "DK"
                  }
                }
              }
            ]
          },
          "invoicePayableAt": {
            "type": "object",
            "description": "Location where payment of ocean freight and charges for the main transport will take place by the customer.\n\nThe location can be provided as a `UN Location Code` or as a fallback - a `freeText` field\n",
            "oneOf": [
              {
                "title": "UN Location Code",
                "required": [
                  "UNLocationCode"
                ],
                "type": "object",
                "properties": {
                  "UNLocationCode": {
                    "maxLength": 5,
                    "minLength": 5,
                    "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
                    "type": "string",
                    "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
                    "example": "NLAMS"
                  }
                }
              },
              {
                "title": "Free text",
                "required": [
                  "freeText"
                ],
                "type": "object",
                "properties": {
                  "freeText": {
                    "maxLength": 35,
                    "type": "string",
                    "description": "The name of the location where payment will be rendered by the customer.\n",
                    "example": "DCSA Headquarters"
                  }
                }
              }
            ]
          },
          "partyContactDetails": {
            "type": "array",
            "description": "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "documentParties": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Document Parties`\n",
            "items": {
              "$ref": "#/components/schemas/DocumentParty"
            }
          },
          "consignmentItems": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `ConsignmentItems`\n",
            "items": {
              "$ref": "#/components/schemas/ConsignmentItem_CAR"
            }
          },
          "utilizedTransportEquipments": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
            "items": {
              "$ref": "#/components/schemas/UtilizedTransportEquipment_CAR"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "The document that governs the terms of carriage between shipper and carrier for maritime transportation. Two distinct types of transport documents exist:\n- Bill of Lading\n- Sea Waybill. \n"
      },
      "Transports": {
        "required": [
          "plannedArrivalDate",
          "plannedDepartureDate",
          "portOfDischarge",
          "portOfLoading",
          "vesselVoyage"
        ],
        "type": "object",
        "properties": {
          "plannedArrivalDate": {
            "type": "string",
            "description": "The planned date of arrival.\n",
            "format": "date"
          },
          "plannedDepartureDate": {
            "type": "string",
            "description": "The planned date of departure.\n",
            "format": "date"
          },
          "preCarriageBy": {
            "maxLength": 50,
            "type": "string",
            "description": "Mode of transportation for pre-carriage when transport to the port of loading is organized by the carrier. If this attributes is populated, then a Place of Receipt must also be defined. The currently supported values include:\n- `VESSEL` (Vessel)\n- `RAIL` (Rail)\n- `TRUCK` (Truck)\n- `BARGE` (Barge)\n",
            "example": "RAIL"
          },
          "onCarriageBy": {
            "maxLength": 50,
            "type": "string",
            "description": "Mode of transportation for on-carriage when transport from the port of discharge is organized by the carrier. If this attributes is populated, then a Place of Delivery must also be defined. The currently supported values include:\n- `VESSEL` (Vessel)\n- `RAIL` (Rail)\n- `TRUCK` (Truck)\n- `BARGE` (Barge)\n",
            "example": "TRUCK"
          },
          "placeOfReceipt": {
            "$ref": "#/components/schemas/PlaceOfReceipt"
          },
          "portOfLoading": {
            "$ref": "#/components/schemas/PortOfLoading"
          },
          "portOfDischarge": {
            "$ref": "#/components/schemas/PortOfDischarge"
          },
          "placeOfDelivery": {
            "$ref": "#/components/schemas/PlaceOfDelivery"
          },
          "onwardInlandRouting": {
            "$ref": "#/components/schemas/OnwardInlandRouting"
          },
          "vesselVoyage": {
            "minItems": 1,
            "type": "array",
            "description": "Allow the possibility to include multiple vessels/voyages in the `Transport Document` (e.g. the first sea going vessel and the mother vessel). At least one is mandatory to provide.\n",
            "items": {
              "$ref": "#/components/schemas/Transports_vesselVoyage"
            }
          }
        }
      },
      "PlaceOfReceipt": {
        "description": "General purpose object to capture `Place of Receipt` location specified as: the location where the cargo is handed over by the shipper, or his agent, to the shipping line. This indicates the point at which the shipping line takes on responsibility for carriage of the container.\n\n**Condition:** Only when pre-carriage is done by the carrier.\n\nThe location can be specified in **one** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n",
        "example": {
          "locationName": "Hamburg",
          "locationType": "UNLO",
          "UNLocationCode": "DEHAM"
        },
        "discriminator": {
          "propertyName": "locationType",
          "mapping": {
            "ADDR": "#/components/schemas/AddressLocation",
            "FACI": "#/components/schemas/FacilityLocation",
            "UNLO": "#/components/schemas/UNLocationLocation"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AddressLocation"
          },
          {
            "$ref": "#/components/schemas/FacilityLocation"
          },
          {
            "$ref": "#/components/schemas/UNLocationLocation"
          }
        ]
      },
      "AddressLocation": {
        "title": "Address Location",
        "required": [
          "address",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "locationType": {
            "maxLength": 4,
            "type": "string",
            "description": "Discriminator used to identify this as an `Address` location interface.",
            "example": "ADDR"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "description": "An interface used to express a location using an `Address` object."
      },
      "FacilityLocation": {
        "title": "Facility Location",
        "required": [
          "facilityCode",
          "facilityCodeListProvider",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "locationType": {
            "maxLength": 4,
            "type": "string",
            "description": "Discriminator used to identify this as a `Facility Location` interface\n",
            "example": "FACI"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n\nThis field is **conditionally mandatory** depending on the value of the `facilityCodeListProvider` field.",
            "example": "NLAMS"
          },
          "facilityCode": {
            "maxLength": 6,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The code used for identifying the specific facility. This code does not include the UN Location Code.\nThe definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:\n- for `SMDG` - the codeList used is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)  - for `BIC` - the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/)",
            "example": "ADT"
          },
          "facilityCodeListProvider": {
            "type": "string",
            "description": "The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\n- `BIC` (Requires a UN Location Code) - `SMDG` (Requires a UN Location Code)\n",
            "example": "SMDG",
            "enum": [
              "BIC",
              "SMDG"
            ]
          }
        },
        "description": "An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\n"
      },
      "UNLocationLocation": {
        "title": "UNLocation Location",
        "required": [
          "UNLocationCode",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "locationType": {
            "maxLength": 4,
            "type": "string",
            "description": "Discriminator used to identify this as a `UNLocation` location interface.",
            "example": "UNLO"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
            "example": "NLAMS"
          }
        },
        "description": "An interface used to express a location using a `Un Location Code`."
      },
      "PortOfLoading": {
        "description": "General purpose object to capture `Port of Loading` location specified as: the location where the cargo is loaded onto a first sea-going vessel for water transportation.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or `City and Country`.\n",
        "example": {
          "locationName": "Hamburg",
          "locationType": "UNLO",
          "UNLocationCode": "DEHAM"
        },
        "discriminator": {
          "propertyName": "locationType",
          "mapping": {
            "CITY": "#/components/schemas/CityLocation",
            "UNLO": "#/components/schemas/UNLocationLocation"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CityLocation"
          },
          {
            "$ref": "#/components/schemas/UNLocationLocation"
          }
        ]
      },
      "CityLocation": {
        "required": [
          "city",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "locationType": {
            "type": "string",
            "description": "Discriminator used to identify this as a `City Location` interface\n",
            "example": "CITY"
          },
          "city": {
            "$ref": "#/components/schemas/CityLocation_city"
          }
        },
        "description": "An interface used to express a location using a `City`, `state/region` and `country`\n"
      },
      "PortOfDischarge": {
        "description": "General purpose object to capture `Port of Discharge` location specified as: the location where the cargo is discharged from the last sea-going vessel.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or `City and Country`.\n",
        "example": {
          "locationName": "Hamburg",
          "locationType": "UNLO",
          "UNLocationCode": "DEHAM"
        },
        "discriminator": {
          "propertyName": "locationType",
          "mapping": {
            "CITY": "#/components/schemas/CityLocation",
            "UNLO": "#/components/schemas/UNLocationLocation"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CityLocation"
          },
          {
            "$ref": "#/components/schemas/UNLocationLocation"
          }
        ]
      },
      "PlaceOfDelivery": {
        "description": "General purpose object to capture `Place of Delivery` location specified as: the location where the cargo is handed over to the consignee, or his agent, by the shipping line and where responsibility of the shipping line ceases.\n\n**Condition:** Only when onward transport is done by the carrier\n\nThe location can be specified in **one** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n",
        "example": {
          "locationName": "Hamburg",
          "locationType": "UNLO",
          "UNLocationCode": "DEHAM"
        },
        "discriminator": {
          "propertyName": "locationType",
          "mapping": {
            "ADDR": "#/components/schemas/AddressLocation",
            "FACI": "#/components/schemas/FacilityLocation",
            "UNLO": "#/components/schemas/UNLocationLocation"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AddressLocation"
          },
          {
            "$ref": "#/components/schemas/FacilityLocation"
          },
          {
            "$ref": "#/components/schemas/UNLocationLocation"
          }
        ]
      },
      "OnwardInlandRouting": {
        "description": "General purpose object to capture `Onward Inland Routing` location specified as the end location of the inland movement that takes place after the container(s) being delivered to the port of discharge/place of delivery for account and risk of merchant (merchant haulage).\n\nThe location can be specified in **one** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n",
        "example": {
          "locationName": "Hamburg",
          "locationType": "UNLO",
          "UNLocationCode": "DEHAM"
        },
        "discriminator": {
          "propertyName": "locationType",
          "mapping": {
            "ADDR": "#/components/schemas/AddressLocation",
            "FACI": "#/components/schemas/FacilityLocation",
            "UNLO": "#/components/schemas/UNLocationLocation"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AddressLocation"
          },
          {
            "$ref": "#/components/schemas/FacilityLocation"
          },
          {
            "$ref": "#/components/schemas/UNLocationLocation"
          }
        ]
      },
      "Charge": {
        "required": [
          "calculationBasis",
          "chargeName",
          "currencyAmount",
          "currencyCode",
          "paymentTermCode",
          "quantity",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "chargeName": {
            "maxLength": 50,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "Free text field describing the charge to apply\n",
            "example": "Documentation fee - Destination"
          },
          "currencyAmount": {
            "minimum": 0,
            "type": "number",
            "description": "The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.\n",
            "format": "float",
            "example": 1012.12
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "^[A-Z]{3}$",
            "type": "string",
            "description": "The currency for the charge, using a 3-character code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)).\n",
            "example": "DKK"
          },
          "paymentTermCode": {
            "type": "string",
            "description": "An indicator of whether a charge is prepaid (PRE) or collect (COL). When prepaid, the charge is the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charge is the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "calculationBasis": {
            "maxLength": 50,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.\n",
            "example": "Per day"
          },
          "unitPrice": {
            "minimum": 0,
            "type": "number",
            "description": "The unit price of this charge item in the currency of the charge.\n",
            "format": "float",
            "example": 3456.6
          },
          "quantity": {
            "minimum": 0,
            "type": "number",
            "description": "The amount of unit for this charge item.\n",
            "format": "float",
            "example": 34.4
          }
        },
        "description": "Addresses the monetary value of freight and other service charges for a `Booking`.\n"
      },
      "ConsignmentItem_CAR": {
        "title": "Consignment Item",
        "required": [
          "cargoItems"
        ],
        "type": "object",
        "properties": {
          "cargoItems": {
            "minItems": 1,
            "type": "array",
            "description": "A list of all `cargoItems`\n",
            "items": {
              "$ref": "#/components/schemas/CargoItem_CAR"
            }
          }
        },
        "description": "Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConsignmentItem"
          }
        ]
      },
      "CargoItem_CAR": {
        "title": "Cargo Item",
        "required": [
          "equipmentReference",
          "outerPackaging",
          "weight",
          "weightUnit"
        ],
        "type": "object",
        "properties": {
          "equipmentReference": {
            "maxLength": 11,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
            "example": "APZU4812090"
          },
          "weight": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The total weight of the cargo including packaging items being carried in the container(s). Excludes the tare weight of the container(s).\n",
            "format": "float",
            "example": 13000.3
          },
          "weightUnit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          },
          "volume": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "Calculated by multiplying the width, height, and length of the packed cargo.\n",
            "format": "float",
            "example": 12
          },
          "volumeUnit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in either imperial or metric terms\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n",
            "example": "MTQ",
            "enum": [
              "MTQ",
              "FTQ"
            ]
          },
          "outerPackaging": {
            "$ref": "#/components/schemas/OuterPackaging_CAR"
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.\n"
      },
      "OuterPackaging_CAR": {
        "title": "Outer Packaging",
        "type": "object",
        "properties": {
          "imoPackagingCode": {
            "maxLength": 5,
            "minLength": 1,
            "pattern": "^[A-Z0-9]{1,5}$",
            "type": "string",
            "description": "The code of the packaging as per IMO.\n\n**Condition:** only applicable to dangerous goods if specified in the IMO IMDG code amendment version 41-22. If not available, the package code as per UN recommendation 21 should be used.\n",
            "example": "1A2"
          },
          "dangerousGoods": {
            "type": "array",
            "description": "A list of `Dangerous Goods`\n",
            "items": {
              "$ref": "#/components/schemas/DangerousGoods"
            }
          }
        },
        "description": "Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/OuterPackaging_SHI"
          }
        ]
      },
      "DangerousGoods": {
        "title": "Dangerous Goods",
        "required": [
          "imoClass",
          "properShippingName"
        ],
        "type": "object",
        "properties": {
          "codedVariantList": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "^[0-3][0-9A-Z]{3}$",
            "type": "string",
            "description": "Four-character code supplied by Exis Technologies that assists to remove ambiguities when identifying a variant within a single UN number or NA number that may occur when two companies exchange DG information.\n\nCharacter | Valid Characters | Description\n:--------:|------------------|------------\n1| 0, 1, 2, 3|The packing group. Code 0 indicates there is no packing group\n2|0 to 9 and A to Z|A sequence letter for the PSN, or 0 if there were no alternative PSNs\n3 and 4|0 to 9 and A to Z|Two sequence letters for other information, for the cases where the variant is required because of different in subrisks, packing instruction etc.\n",
            "example": "2200"
          },
          "properShippingName": {
            "maxLength": 250,
            "type": "string",
            "description": "The proper shipping name for goods under IMDG Code, or the product name for goods under IBC Code and IGC Code, or the bulk cargo shipping name for goods under IMSBC Code, or the name of oil for goods under Annex I to the MARPOL Convention.\n",
            "example": "Chromium Trioxide, anhydrous"
          },
          "technicalName": {
            "maxLength": 250,
            "type": "string",
            "description": "The recognized chemical or biological name or other name currently used for the referenced dangerous goods as described in chapter 3.1.2.8 of the IMDG Code.\n"
          },
          "imoClass": {
            "maxLength": 4,
            "type": "string",
            "description": "The hazard class code of the referenced dangerous goods according to the specified regulation. Examples of possible values are:\n\n- `1.1A` (Substances and articles which have a mass explosion hazard)\n- `1.6N` (Extremely insensitive articles which do not have a mass explosion hazard)\n- `2.1` (Flammable gases)\n- `8` (Corrosive substances)\n\nThe value must comply with one of the values in the [DG IMO Class value table](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/dcsa/reference-data/imoclasses-v3.1.0.csv)\n",
            "example": "1.4S"
          },
          "subsidiaryRisk1": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "^[0-9](\\.[0-9])?$",
            "type": "string",
            "description": "Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.\n",
            "example": "1.2"
          },
          "subsidiaryRisk2": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "^[0-9](\\.[0-9])?$",
            "type": "string",
            "description": "Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.\n",
            "example": "1.2"
          },
          "isMarinePollutant": {
            "type": "boolean",
            "description": "Indicates if the goods belong to the classification of Marine Pollutant.\n",
            "example": false
          },
          "packingGroup": {
            "maximum": 3,
            "minimum": 1,
            "type": "integer",
            "description": "The packing group according to the UN Recommendations on the Transport of Dangerous Goods and IMO IMDG Code.\n",
            "format": "int32",
            "example": 3
          },
          "isLimitedQuantity": {
            "type": "boolean",
            "description": "Indicates if the dangerous goods can be transported as limited quantity in accordance with Chapter 3.4 of the IMO IMDG Code.\n",
            "example": false
          },
          "isExceptedQuantity": {
            "type": "boolean",
            "description": "Indicates if the dangerous goods can be transported as excepted quantity in accordance with Chapter 3.5 of the IMO IMDG Code.\n",
            "example": false
          },
          "isSalvagePackings": {
            "type": "boolean",
            "description": "Indicates if the cargo has special packaging for the transport, recovery or disposal of damaged, defective, leaking or nonconforming hazardous materials packages, or hazardous materials that have spilled or leaked.\n",
            "example": false
          },
          "isEmptyUncleanedResidue": {
            "type": "boolean",
            "description": "Indicates if the cargo is residue.\n",
            "example": false
          },
          "isWaste": {
            "type": "boolean",
            "description": "Indicates if waste is being shipped\n",
            "example": false
          },
          "isHot": {
            "type": "boolean",
            "description": "Indicates if high temperature cargo is shipped.\n",
            "example": false
          },
          "isCompetentAuthorityApprovalProvided": {
            "type": "boolean",
            "description": "Indicates if the cargo require approval from authorities\n",
            "example": false
          },
          "competentAuthorityApproval": {
            "maxLength": 70,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "Name and reference number of the competent authority providing the approval.\n",
            "example": "{Name and reference...}"
          },
          "segregationGroups": {
            "type": "array",
            "description": "List of the segregation groups applicable to specific hazardous goods according to the IMO IMDG Code.\n\n**Condition:** only applicable to specific hazardous goods.\n",
            "items": {
              "maxLength": 2,
              "type": "string",
              "description": "Grouping of Dangerous Goods having certain similar chemical properties. Possible values are:\n\n- `1` (Acids)\n- `2` (Ammonium Compounds)\n- `3` (Bromates)\n- `4` (Chlorates)\n- `5` (Chlorites)\n- `6` (Cyanides)\n- `7` (Heavy metals and their salts)\n- `8` (Hypochlorites)\n- `9` (Lead and its compounds)\n- `10` (Liquid halogenated hydrocarbons)\n- `11` (Mercury and mercury compounds)\n- `12` (Nitrites and their mixtures)\n- `13` (Perchlorates)\n- `14` (Permanganates)\n- `15` (Powdered metals)\n- `16` (Peroxides),\n- `17` (Azides)\n- `18` (Alkalis)\n",
              "example": "12"
            }
          },
          "innerPackagings": {
            "type": "array",
            "description": "A list of `Inner Packings` contained inside this `outer packaging/overpack`.\n",
            "items": {
              "$ref": "#/components/schemas/InnerPackaging"
            }
          },
          "emergencyContactDetails": {
            "$ref": "#/components/schemas/EmergencyContactDetails"
          },
          "EMSNumber": {
            "maxLength": 7,
            "type": "string",
            "description": "The emergency schedule identified in the IMO EmS Guide – Emergency Response Procedures for Ships Carrying Dangerous Goods. Comprises 2 values; 1 for spillage and 1 for fire. Possible values spillage: S-A to S-Z. Possible values fire: F-A to F-Z.\n",
            "example": "F-A S-Q"
          },
          "endOfHoldingTime": {
            "type": "string",
            "description": "Date by when the refrigerated liquid needs to be delivered.\n",
            "format": "date",
            "example": "2021-09-03"
          },
          "fumigationDateTime": {
            "type": "string",
            "description": "Date & time when the container was fumigated\n",
            "format": "date-time",
            "example": "2021-09-03T09:03:00-02:00"
          },
          "isReportableQuantity": {
            "type": "boolean",
            "description": "Indicates if a container of hazardous material is at the reportable quantity level. If `TRUE`, a report to the relevant authority must be made in case of spill.\n",
            "example": false
          },
          "inhalationZone": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "The zone classification of the toxicity of the inhalant. Possible values are:\n\n- `A` (Hazard Zone A) can be assigned to specific gases and liquids\n- `B` (Hazard Zone B) can be assigned to specific gases and liquids\n- `C` (Hazard Zone C) can **only** be assigned to specific gases\n- `D` (Hazard Zone D) can **only** be assigned to specific gases\n",
            "example": "A"
          },
          "grossWeight": {
            "$ref": "#/components/schemas/DangerousGoods_grossWeight"
          },
          "netWeight": {
            "$ref": "#/components/schemas/DangerousGoods_netWeight"
          },
          "netExplosiveContent": {
            "$ref": "#/components/schemas/DangerousGoods_netExplosiveContent"
          },
          "volume": {
            "$ref": "#/components/schemas/DangerousGoods_volume"
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          }
        },
        "description": "Specification for `Dangerous Goods`. It is mandatory to either provide the `unNumber` or the `naNumber`. Dangerous Goods is based on **IMDG Amendment Version 41-22**.\n",
        "oneOf": [
          {
            "title": "UN Number",
            "required": [
              "unNumber"
            ],
            "type": "object",
            "properties": {
              "unNumber": {
                "maxLength": 4,
                "minLength": 4,
                "pattern": "^\\d{4}$",
                "type": "string",
                "description": "United Nations Dangerous Goods Identifier (UNDG) assigned by the UN Sub-Committee of Experts on the Transport of Dangerous Goods and shown in the IMO IMDG.\n",
                "example": "1463"
              }
            }
          },
          {
            "title": "NA Number",
            "required": [
              "naNumber"
            ],
            "type": "object",
            "properties": {
              "naNumber": {
                "maxLength": 4,
                "minLength": 4,
                "pattern": "^\\d{4}$",
                "type": "string",
                "description": "Four-digit number that is assigned to dangerous, hazardous, and harmful substances by the United States Department of Transportation.\n",
                "example": "9037"
              }
            }
          }
        ]
      },
      "InnerPackaging": {
        "title": "Inner Packaging",
        "required": [
          "description",
          "material",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Count of `Inner Packagings` of the referenced `Dangerous Goods`.\n",
            "format": "int32",
            "example": 20
          },
          "material": {
            "maxLength": 100,
            "type": "string",
            "description": "The `material` used for the `Inner Packaging` of the referenced `Dangerous Goods`.\n",
            "example": "Plastic"
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "description": "Description of the packaging.\n",
            "example": "Wowen plastic water resistant Bag"
          }
        },
        "description": "Object for inner packaging specification\n"
      },
      "EmergencyContactDetails": {
        "title": "Emergency Contact Details",
        "required": [
          "contact",
          "phone"
        ],
        "type": "object",
        "properties": {
          "contact": {
            "maxLength": 255,
            "type": "string",
            "description": "Name of the Contact person during an emergency.\n",
            "example": "Henrik Larsen"
          },
          "provider": {
            "maxLength": 255,
            "type": "string",
            "description": "Name of the third party vendor providing emergency support\n",
            "example": "GlobeTeam"
          },
          "phone": {
            "maxLength": 30,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "Phone number for the contact\n",
            "example": "+45 70262970"
          },
          "referenceNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "Contract reference for the emergency support provided by an external third party vendor.\n",
            "example": "12234"
          }
        },
        "description": "24 hr emergency contact details\n"
      },
      "Limits": {
        "required": [
          "temperatureUnit"
        ],
        "type": "object",
        "properties": {
          "temperatureUnit": {
            "type": "string",
            "description": "The unit for **all attributes in the limits structure** in Celsius or Fahrenheit\n\n- `CEL` (Celsius)\n- `FAH` (Fahrenheit)\n",
            "example": "CEL",
            "enum": [
              "CEL",
              "FAH"
            ]
          },
          "flashPoint": {
            "type": "number",
            "description": "Lowest temperature at which a chemical can vaporize to form an ignitable mixture in air. Condition: only applicable to specific hazardous goods according to the IMO IMDG Code amendment version 41-22.\n",
            "format": "float",
            "example": 42
          },
          "transportControlTemperature": {
            "type": "number",
            "description": "Maximum temperature at which certain substance (such as organic peroxides and self-reactive and related substances) can be safely transported for a prolonged period.\n",
            "format": "float",
            "example": 24.1
          },
          "transportEmergencyTemperature": {
            "type": "number",
            "description": "Temperature at which emergency procedures shall be implemented\n",
            "format": "float",
            "example": 74.1
          },
          "SADT": {
            "type": "number",
            "description": "Lowest temperature in which self-accelerating decomposition may occur in a substance\n",
            "format": "float",
            "example": 54.1
          },
          "SAPT": {
            "type": "number",
            "description": "Lowest temperature in which self-accelerating polymerization may occur in a substance\n",
            "format": "float",
            "example": 70
          }
        },
        "description": "Limits for the `Dangerous Goods`. The same `Temperature Unit` needs to apply to all attributes in this structure.\n"
      },
      "UtilizedTransportEquipment_CAR": {
        "title": "Utilized Transport Equipment",
        "required": [
          "equipment",
          "isShipperOwned",
          "seals"
        ],
        "type": "object",
        "properties": {
          "equipment": {
            "$ref": "#/components/schemas/Equipment"
          },
          "isShipperOwned": {
            "type": "boolean",
            "description": "Indicates whether the container is shipper owned (SOC).\n",
            "example": true
          },
          "isNonOperatingReefer": {
            "type": "boolean",
            "description": "If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.\n\n**Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.\n",
            "example": false
          },
          "activeReeferSettings": {
            "$ref": "#/components/schemas/ActiveReeferSettings"
          },
          "seals": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Seals`\n",
            "items": {
              "$ref": "#/components/schemas/Seal"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "Specifies the container (`equipment`), the total `weight`, total `volume`, possible `ActiveReeferSettings`, `seals` and `references`\n"
      },
      "ActiveReeferSettings": {
        "title": "Active Reefer Settings",
        "type": "object",
        "properties": {
          "temperatureSetpoint": {
            "type": "number",
            "description": "Target value of the temperature for the Reefer based on the cargo requirement.\n",
            "format": "float",
            "example": -15
          },
          "temperatureUnit": {
            "type": "string",
            "description": "The unit for temperature in Celsius or Fahrenheit\n\n- `CEL` (Celsius)\n- `FAH` (Fahrenheit)\n\n**Condition:** Mandatory to provide if `temperatureSetpoint` is provided\n",
            "example": "CEL",
            "enum": [
              "CEL",
              "FAH"
            ]
          },
          "o2Setpoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "The percentage of the controlled atmosphere CO<sub>2</sub> target value\n",
            "format": "float",
            "example": 25
          },
          "co2Setpoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "The percentage of the controlled atmosphere CO<sub>2</sub> target value\n",
            "format": "float",
            "example": 25
          },
          "humiditySetpoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "The percentage of the controlled atmosphere humidity target value\n",
            "format": "float",
            "example": 95.6
          },
          "airExchangeSetpoint": {
            "minimum": 0,
            "type": "number",
            "description": "Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container\n",
            "format": "float",
            "example": 15.4
          },
          "airExchangeUnit": {
            "type": "string",
            "description": "The unit for `airExchange` in metrics- or imperial- units per hour\n- `MQH` (Cubic metre per hour)\n- `FQH` (Cubic foot per hour)\n\n**Condition:** Mandatory to provide if `airExchange` is provided\n",
            "example": "MQH",
            "enum": [
              "MQH",
              "FQH"
            ]
          },
          "isVentilationOpen": {
            "type": "boolean",
            "description": "If `true` the ventilation orifice is `Open` - if `false` the ventilation orifice is `closed`\n",
            "example": true
          },
          "isDrainholesOpen": {
            "type": "boolean",
            "description": "Is drainholes open on the container\n",
            "example": true
          },
          "isBulbMode": {
            "type": "boolean",
            "description": "Is special container setting for handling flower bulbs active\n",
            "example": true
          },
          "isColdTreatmentRequired": {
            "type": "boolean",
            "description": "Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD\n",
            "example": true
          },
          "isControlledAtmosphereRequired": {
            "type": "boolean",
            "description": "Indicator of whether cargo requires Controlled Atmosphere.\n",
            "example": true
          }
        },
        "description": "The specifications for a Reefer equipment.\n\n**Condition:** Only applicable when `isNonOperatingReefer` is set to `false`\n"
      },
      "TransportDocumentRefStatus": {
        "title": "Transport Document Response",
        "required": [
          "transportDocumentReference",
          "transportDocumentStatus"
        ],
        "type": "object",
        "properties": {
          "transportDocumentReference": {
            "maxLength": 20,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
            "example": "HHL71800000"
          },
          "transportDocumentStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Transport Document`. Possible values are:\n- DRAFT\n- APPROVED\n- ISSUED\n- PENDING SURRENDER FOR AMENDMENT\n- SURRENDER FOR AMENDMENT\n- PENDING SURRENDER FOR DELIVERY\n- SURRENDER FOR DELIVERY\n- VOIDED\n",
            "example": "DRAFT"
          }
        },
        "description": "The `transportDocumentReference` along with the `transportDocumentStatus` for the `Transport Document` is returned.\n"
      },
      "shippinginstructions_documentReference_body": {
        "required": [
          "updatedShippingInstructionsStatus"
        ],
        "type": "object",
        "properties": {
          "updatedShippingInstructionsStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Updated Shipping Instructions`. It can only be `UPDATE CANCELLED`\n",
            "example": "UPDATE CANCELLED"
          }
        }
      },
      "transportdocuments_transportDocumentReference_body": {
        "required": [
          "transportDocumentStatus"
        ],
        "type": "object",
        "properties": {
          "transportDocumentStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Transport Document`. It can only be `APPROVED`\n",
            "example": "APPROVED"
          }
        }
      },
      "CreateShippingInstructions_originChargesPaymentTerm": {
        "type": "object",
        "properties": {
          "haulageChargesPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "portChargesPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether the origin port charges are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          }
        },
        "description": "An indicator of whether origin charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n"
      },
      "CreateShippingInstructions_destinationChargesPaymentTerm": {
        "type": "object",
        "properties": {
          "haulageChargesPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "portChargesPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether the destination port charges are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          }
        },
        "description": "An indicator of whether destination charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n"
      },
      "CreateShippingInstructions_invoicePayableAt": {
        "required": [
          "UNLocationCode"
        ],
        "type": "object",
        "properties": {
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
            "example": "NLAMS"
          }
        },
        "description": "Location where payment of ocean freight and charges for the main transport will take place by the customer.\n\nThe location must be provided as a `UN Location Code`\n"
      },
      "Detailed Error": {
        "title": "Detailed Error",
        "required": [
          "errorCodeMessage",
          "errorCodeText"
        ],
        "type": "object",
        "properties": {
          "errorCode": {
            "maximum": 9999,
            "minimum": 7000,
            "type": "integer",
            "description": "The detailed error code returned.\n\n  - `7000-7999` Technical error codes\n  - `8000-8999` Functional error codes\n  - `9000-9999` API provider-specific error codes            \n\n[Error codes as specified by DCSA](https://dcsa.atlassian.net/wiki/spaces/DTG/pages/197132308/Standard+Error+Codes).\n",
            "format": "int32",
            "example": 7003
          },
          "property": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the property causing the error.\n",
            "example": "facilityCode"
          },
          "value": {
            "maxLength": 500,
            "type": "string",
            "description": "The value of the property causing the error serialised as a string exactly as in the original request.\n",
            "example": "SG SIN WHS"
          },
          "jsonPath": {
            "maxLength": 500,
            "type": "string",
            "description": "A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).\n",
            "example": "$.location.facilityCode"
          },
          "errorCodeText": {
            "maxLength": 100,
            "type": "string",
            "description": "A standard short description corresponding to the `errorCode`.\n",
            "example": "invalidData"
          },
          "errorCodeMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "A long description corresponding to the `errorCode` with additional information.\n",
            "example": "Spaces not allowed in facility code"
          }
        }
      },
      "Transports_vesselVoyage": {
        "required": [
          "carrierExportVoyageNumber",
          "vesselName"
        ],
        "type": "object",
        "properties": {
          "vesselName": {
            "maxLength": 50,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The name of the first sea going Vessel on board which the cargo is loaded or intended to be loaded\n",
            "example": "King of the Seas"
          },
          "carrierExportVoyageNumber": {
            "maxLength": 50,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The identifier of an export voyage. The carrier-specific identifier of the export Voyage.\n",
            "example": "2103S"
          },
          "universalExportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWSR]`\n- `2 digits` for the year\n- `2 alphanumeric characters` for the sequence number of the voyage\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).\n",
            "example": "2103N"
          }
        },
        "description": "Vessel and export voyage"
      },
      "CityLocation_city": {
        "required": [
          "city",
          "country"
        ],
        "type": "object",
        "properties": {
          "city": {
            "maxLength": 65,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The city name of the party’s address.\n",
            "example": "Amsterdam"
          },
          "stateRegion": {
            "maxLength": 65,
            "type": "string",
            "description": "The state/region of the party’s address.\n",
            "nullable": true,
            "example": "North Holland"
          },
          "country": {
            "maxLength": 75,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The country of the party’s address.\n",
            "example": "The Netherlands"
          }
        },
        "description": "An object for storing city, state/region and coutry related information\n"
      },
      "DangerousGoods_grossWeight": {
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The grand total weight of the DG cargo and weight per `UNNumber`/`NANumber` including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.\n",
            "format": "float",
            "example": 12000.3
          },
          "unit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in imperial or metric terms\n\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          }
        },
        "description": "Total weight of the goods carried, including packaging.\n"
      },
      "DangerousGoods_netWeight": {
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "Total weight of the goods carried, excluding packaging.\n",
            "format": "float",
            "example": 2.4
          },
          "unit": {
            "type": "string",
            "description": "Unit of measure used to describe the `netWeight`. Possible values are\n\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          }
        },
        "description": "Total weight of the goods carried, excluding packaging.\n"
      },
      "DangerousGoods_netExplosiveContent": {
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The total weight of the explosive substances, without the packaging’s, casings, etc.\n",
            "format": "float",
            "example": 2.4
          },
          "unit": {
            "type": "string",
            "description": "Unit of measure used to describe the `netExplosiveWeight`. Possible values are\n\n- `KGM` (Kilograms)\n- `GRM` (Grams)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "GRM"
            ]
          }
        },
        "description": "The total weight of the explosive substances, without the packaging’s, casings, etc.\n"
      },
      "DangerousGoods_volume": {
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The volume of the referenced dangerous goods.\n",
            "format": "float",
            "example": 2.4
          },
          "unit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in either imperial or metric terms\n\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n- `LTR` (Litre)\n",
            "example": "MTQ",
            "enum": [
              "MTQ",
              "FTQ",
              "LTR"
            ]
          }
        },
        "description": "The volume of the referenced dangerous goods.\n\n**Condition:** only applicable to liquids and gas.\n"
      }
    },
    "parameters": {
      "updatedContent": {
        "name": "updatedContent",
        "in": "query",
        "description": "If set to `true`, the payload returned is the content of the `Updated Shipping Instructions`.\n\nDefault value is `false` in which case the content of the \"original\" `Shipping Instructions` is returned.\n\n**Condition:** Can only be used if an update has been made by the consumer (via **UseCase 3: Submit updated Shipping Instructions**) and **until** a new updated is requested by the provider. If no updates have been made a `404` (Not Found) response will be returned\n",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "boolean",
          "example": false,
          "default": false
        }
      },
      "documentReference": {
        "name": "documentReference",
        "in": "path",
        "description": "An identifier for a `Shipping Instructions`. It can either be a `shippingInstructionsReference` or a `transportDocumentReference`.\n",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "maxLength": 100,
          "pattern": "^\\S+(\\s+\\S+)*$",
          "type": "string",
          "example": "e0559d83-00e2-438e-afd9-fdd610c1a008"
        }
      },
      "Api-Version-Major": {
        "name": "API-Version",
        "in": "header",
        "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "3"
        }
      }
    },
    "headers": {
      "API-Version": {
        "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "3.0.0-Beta-2"
        }
      }
    }
  }
}
