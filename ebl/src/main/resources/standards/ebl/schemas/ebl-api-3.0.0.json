{
   "components" : {
      "headers" : {
         "API-Version" : {
            "description" : "SemVer used to indicate the version of the contract (API version) returned.\n",
            "explode" : false,
            "schema" : {
               "example" : "3.0.0",
               "type" : "string"
            },
            "style" : "simple"
         }
      },
      "parameters" : {
         "Api-Version-Major" : {
            "description" : "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "explode" : false,
            "in" : "header",
            "name" : "API-Version",
            "required" : false,
            "schema" : {
               "example" : "3",
               "type" : "string"
            },
            "style" : "simple"
         },
         "documentReference" : {
            "description" : "An identifier for a `Shipping Instructions`. It can either be a `shippingInstructionsReference` or a `transportDocumentReference`.\n",
            "explode" : false,
            "in" : "path",
            "name" : "documentReference",
            "required" : true,
            "schema" : {
               "example" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
               "maxLength" : 100,
               "pattern" : "^\\S(?:.*\\S)?$",
               "type" : "string"
            },
            "style" : "simple"
         },
         "updatedContent" : {
            "description" : "If set to `true`, the payload returned is the content of the `Updated Shipping Instructions`.\n\nDefault value is `false` in which case the content of the \"original\" `Shipping Instructions` is returned.\n\n**Condition:** Can only be used if an update has been made by the consumer (via **UseCase 3: Submit updated Shipping Instructions**) and **until** a new updated is requested by the provider. If no updates have been made a `404` (Not Found) response will be returned\n",
            "explode" : true,
            "in" : "query",
            "name" : "updatedContent",
            "required" : false,
            "schema" : {
               "default" : false,
               "example" : false,
               "type" : "boolean"
            },
            "style" : "form"
         }
      },
      "schemas" : {
         "ActiveReeferSettings" : {
            "description" : "The specifications for a Reefer equipment.\n\n**Condition:** Only applicable when `isNonOperatingReefer` is set to `false`\n",
            "properties" : {
               "airExchangeSetpoint" : {
                  "description" : "Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container\n",
                  "example" : 15.4,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               },
               "airExchangeUnit" : {
                  "description" : "The unit for `airExchange` in metrics- or imperial- units per hour\n- `MQH` (Cubic metre per hour)\n- `FQH` (Cubic foot per hour)\n\n**Condition:** Mandatory to provide if `airExchange` is provided\n",
                  "enum" : [
                     "MQH",
                     "FQH"
                  ],
                  "example" : "MQH",
                  "type" : "string"
               },
               "co2Setpoint" : {
                  "description" : "The percentage of the controlled atmosphere CO<sub>2</sub> target value\n",
                  "example" : 25,
                  "format" : "float",
                  "maximum" : 100,
                  "minimum" : 0,
                  "type" : "number"
               },
               "humiditySetpoint" : {
                  "description" : "The percentage of the controlled atmosphere humidity target value\n",
                  "example" : 95.6,
                  "format" : "float",
                  "maximum" : 100,
                  "minimum" : 0,
                  "type" : "number"
               },
               "isBulbMode" : {
                  "description" : "Is special container setting for handling flower bulbs active\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isColdTreatmentRequired" : {
                  "description" : "Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isControlledAtmosphereRequired" : {
                  "description" : "Indicator of whether cargo requires Controlled Atmosphere.\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isDrainholesOpen" : {
                  "description" : "Is drain holes open on the container\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isVentilationOpen" : {
                  "description" : "If `true` the ventilation orifice is `Open` - if `false` the ventilation orifice is `closed`\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "o2Setpoint" : {
                  "description" : "The percentage of the controlled atmosphere CO<sub>2</sub> target value\n",
                  "example" : 25,
                  "format" : "float",
                  "maximum" : 100,
                  "minimum" : 0,
                  "type" : "number"
               },
               "temperatureSetpoint" : {
                  "description" : "Target value of the temperature for the Reefer based on the cargo requirement.\n",
                  "example" : -15,
                  "format" : "float",
                  "type" : "number"
               },
               "temperatureUnit" : {
                  "description" : "The unit for temperature in Celsius or Fahrenheit\n\n- `CEL` (Celsius)\n- `FAH` (Fahrenheit)\n\n**Condition:** Mandatory to provide if `temperatureSetpoint` is provided\n",
                  "enum" : [
                     "CEL",
                     "FAH"
                  ],
                  "example" : "CEL",
                  "type" : "string"
               }
            },
            "title" : "Active Reefer Settings",
            "type" : "object"
         },
         "Address" : {
            "description" : "An object for storing address related information\n",
            "properties" : {
               "POBox" : {
                  "description" : "A numbered box at a post office where a person or business can have mail or parcels delivered.",
                  "example" : "123",
                  "maxLength" : 20,
                  "type" : "string"
               },
               "city" : {
                  "description" : "The name of the city.\n",
                  "example" : "Amsterdam",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "countryCode" : {
                  "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "example" : "NL",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z]{2}$",
                  "type" : "string"
               },
               "floor" : {
                  "description" : "The floor of the street number.\n",
                  "example" : "N/A",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "postCode" : {
                  "description" : "The post code of the address.",
                  "example" : "1047 HM",
                  "maxLength" : 10,
                  "type" : "string"
               },
               "stateRegion" : {
                  "description" : "The name of the state/region.",
                  "example" : "North Holland",
                  "maxLength" : 65,
                  "type" : "string"
               },
               "street" : {
                  "description" : "The name of the street.",
                  "example" : "Ruijggoordweg",
                  "maxLength" : 70,
                  "type" : "string"
               },
               "streetNumber" : {
                  "description" : "The number of the street.",
                  "example" : "100",
                  "maxLength" : 50,
                  "type" : "string"
               }
            },
            "required" : [
               "city",
               "countryCode",
               "street"
            ],
            "title" : "Address",
            "type" : "object"
         },
         "AdvanceManifestFiling" : {
            "description" : "An Advance Manifest Filing defined by a Manifest type code in combination with a country code.\n\nA small list of **potential** examples:\n\n| manifestTypeCode | countryCode | Description |\n|-----------------------|:-------------:|-------------|\n|ACI|EG|Advance Cargo Information in Egypt|\n|ACE|US|Automated Commercial Environment in the United States|\n|AFR|JP|Cargo Summary Notification (CSN)|\n|ENS|NL|Entry Summary Declaration|\n",
            "example" : {
               "advanceManifestFilingsHouseBLPerformedBy" : "SELF",
               "countryCode" : "US",
               "manifestTypeCode" : "ACE",
               "selfFilerCode" : "FLXP123"
            },
            "properties" : {
               "advanceManifestFilingsHouseBLPerformedBy" : {
                  "description" : "Indicates whether the shipper (`SELF`) will perform the advance manifest filing(s) for the House BL directly or if the carrier (`CARRIER`) should file them on their behalf. Allowed values are:\n\n- `SELF` (filing done by the House filer)\n- `CARRIER` (the carrier does the filing)\n\nIn case of self-filing (`SELF`), the shipper can provide their `selfFilerCode` for each manifest.\n\n**Condition:** The `selfFilerCode` must be provided when `manifestTypeCode` is either `ACE` (US) or `ACI` (CA) and the `advanceManifestFilingsHouseBLPerformedBy` is set to `SELF`.\n",
                  "enum" : [
                     "SELF",
                     "CARRIER"
                  ],
                  "example" : "SELF",
                  "type" : "string"
               },
               "countryCode" : {
                  "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "example" : "NL",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z]{2}$",
                  "type" : "string"
               },
               "manifestTypeCode" : {
                  "description" : "The Manifest type code as defined by the provider.\n",
                  "example" : "ENS",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "selfFilerCode" : {
                  "description" : "Code identifying the party who will submit the advance manifest filing(s) for the House BL.\n\n**Mandatory** if `manifestTypeCode` is either `ACE` (US) or `ACI` (CA) and `advanceManifestFilingsHouseBLPerformedBy` is set to `SELF`.\n",
                  "example" : "FLXP",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "supplementaryDeclarantEORINumber" : {
                  "description" : "The Economic Operators Registration and Identification (EORI) number of the house filer responsible for the `ENS` filing.\n\n**Condition:** Only applicable if `manifestTypeCode` is `ENS`.\n",
                  "example" : "FLXP-123321",
                  "maxLength" : 17,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "advanceManifestFilingsHouseBLPerformedBy",
               "countryCode",
               "manifestTypeCode"
            ],
            "title" : "Advance Manifest Filing",
            "type" : "object"
         },
         "ApproveTransportDocument" : {
            "properties" : {
               "transportDocumentStatus" : {
                  "description" : "The status of the `Transport Document`. It can only be `APPROVED`\n",
                  "example" : "APPROVED",
                  "maxLength" : 50,
                  "type" : "string"
               }
            },
            "required" : [
               "transportDocumentStatus"
            ],
            "title" : "Approve Transport Document",
            "type" : "object"
         },
         "Buyer" : {
            "description" : "The buyer is the last known entity to whom the goods are sold or agreed to be sold. If the goods are to be imported otherwise than in pursuance of a purchase, the details of the owner of the goods shall be provided.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               },
               "typeOfPerson" : {
                  "description" : "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
                  "example" : "NATURAL_PERSON",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Buyer",
            "type" : "object"
         },
         "CancelShippingInstructionsUpdate" : {
            "properties" : {
               "updatedShippingInstructionsStatus" : {
                  "description" : "The status of the `Updated Shipping Instructions`. It can only be `UPDATE_CANCELLED`\n",
                  "example" : "UPDATE_CANCELLED",
                  "maxLength" : 50,
                  "type" : "string"
               }
            },
            "required" : [
               "updatedShippingInstructionsStatus"
            ],
            "title" : "Cancel Shipping Instructions Update",
            "type" : "object"
         },
         "CargoGrossVolume" : {
            "description" : "Calculated by multiplying the width, height, and length of the packed cargo.\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in either imperial or metric terms\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n",
                  "enum" : [
                     "MTQ",
                     "FTQ"
                  ],
                  "example" : "MTQ",
                  "type" : "string"
               },
               "value" : {
                  "description" : "Calculated by multiplying the width, height, and length of the packed cargo. A maximum of 4 decimals should be provided.\n",
                  "example" : 2.4,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Cargo Gross Volume",
            "type" : "object"
         },
         "CargoGrossWeight" : {
            "description" : "The weight of the cargo item including packaging being carried in the container. Excludes the tare weight of the container.\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
                  "enum" : [
                     "KGM",
                     "LBR"
                  ],
                  "example" : "KGM",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The weight of the cargo item including packaging being carried in the container. Excludes the tare weight of the container. A maximum of 3 decimals should be provided.\n",
                  "example" : 2400,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Cargo Gross Weight",
            "type" : "object"
         },
         "CargoItem" : {
            "description" : "A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.\n",
            "properties" : {
               "cargoGrossVolume" : {
                  "$ref" : "#/components/schemas/CargoGrossVolume"
               },
               "cargoGrossWeight" : {
                  "$ref" : "#/components/schemas/CargoGrossWeight"
               },
               "cargoNetVolume" : {
                  "$ref" : "#/components/schemas/CargoNetVolume"
               },
               "cargoNetWeight" : {
                  "$ref" : "#/components/schemas/CargoNetWeight"
               },
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "equipmentReference" : {
                  "description" : "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
                  "example" : "APZU4812090",
                  "maxLength" : 11,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "nationalCommodityCodes" : {
                  "description" : "A list of `National Commodity Codes` that apply to this `cargoItem`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/NationalCommodityCode"
                  },
                  "type" : "array"
               },
               "outerPackaging" : {
                  "$ref" : "#/components/schemas/OuterPackaging"
               }
            },
            "required" : [
               "cargoGrossWeight",
               "equipmentReference",
               "outerPackaging"
            ],
            "title" : "Cargo Item",
            "type" : "object"
         },
         "CargoItemShipper" : {
            "description" : "A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.\n",
            "properties" : {
               "cargoGrossVolume" : {
                  "$ref" : "#/components/schemas/CargoGrossVolume"
               },
               "cargoGrossWeight" : {
                  "$ref" : "#/components/schemas/CargoGrossWeight"
               },
               "cargoNetVolume" : {
                  "$ref" : "#/components/schemas/CargoNetVolume"
               },
               "cargoNetWeight" : {
                  "$ref" : "#/components/schemas/CargoNetWeight"
               },
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "equipmentReference" : {
                  "description" : "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
                  "example" : "APZU4812090",
                  "maxLength" : 11,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "houseBillOfLadingReference" : {
                  "description" : "Link to the House Bill of Lading this cargoItem is connected to.\n",
                  "example" : "ABC123",
                  "maxLength" : 20,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "nationalCommodityCodes" : {
                  "description" : "A list of `National Commodity Codes` that apply to this `cargoItem`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/NationalCommodityCode"
                  },
                  "type" : "array"
               },
               "outerPackaging" : {
                  "$ref" : "#/components/schemas/OuterPackagingShipper"
               }
            },
            "required" : [
               "cargoGrossWeight",
               "equipmentReference"
            ],
            "title" : "Cargo Item (Shipper)",
            "type" : "object"
         },
         "CargoNetVolume" : {
            "description" : "Calculated by multiplying the width, height, and length of the cargo, excluding packaging.\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in either imperial or metric terms\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n",
                  "enum" : [
                     "MTQ",
                     "FTQ"
                  ],
                  "example" : "MTQ",
                  "type" : "string"
               },
               "value" : {
                  "description" : "Calculated by multiplying the width, height, and length of the cargo, excluding packaging.\n",
                  "example" : 2.4,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Cargo Net Volume",
            "type" : "object"
         },
         "CargoNetWeight" : {
            "description" : "The weight of the cargo item excluding packaging being carried in the container. Excludes the tare weight of the container.\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
                  "enum" : [
                     "KGM",
                     "LBR"
                  ],
                  "example" : "KGM",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The weight of the cargo item excluding packaging being carried in the container. Excludes the tare weight of the container. A maximum of 3 decimals should be provided.\n",
                  "example" : 2400,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Cargo Net Weight",
            "type" : "object"
         },
         "CarriersAgentAtDestination" : {
            "description" : "The party on the import side assigned by the carrier to whom the customer need to reach out to for cargo release.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/Address"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "address",
               "partyContactDetails",
               "partyName"
            ],
            "title" : "Carrier's Agent At Destination",
            "type" : "object"
         },
         "Charge" : {
            "description" : "Addresses the monetary value of freight and other service charges for a `Booking`.\n",
            "properties" : {
               "calculationBasis" : {
                  "description" : "The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.\n",
                  "example" : "Per day",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "chargeName" : {
                  "description" : "Free text field describing the charge to apply\n",
                  "example" : "Documentation fee - Destination",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "currencyAmount" : {
                  "description" : "The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.\n",
                  "example" : 1012.12,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               },
               "currencyCode" : {
                  "description" : "The currency for the charge, using a 3-character code ([ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)).\n",
                  "example" : "DKK",
                  "maxLength" : 3,
                  "minLength" : 3,
                  "pattern" : "^[A-Z]{3}$",
                  "type" : "string"
               },
               "paymentTermCode" : {
                  "description" : "An indicator of whether a charge is prepaid (PRE) or collect (COL). When prepaid, the charge is the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charge is the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
                  "enum" : [
                     "PRE",
                     "COL"
                  ],
                  "example" : "PRE",
                  "type" : "string"
               },
               "quantity" : {
                  "description" : "The amount of unit for this charge item.\n",
                  "example" : 34.4,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               },
               "unitPrice" : {
                  "description" : "The unit price of this charge item in the currency of the charge.\n",
                  "example" : 3456.6,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "calculationBasis",
               "chargeName",
               "currencyAmount",
               "currencyCode",
               "paymentTermCode",
               "quantity",
               "unitPrice"
            ],
            "title" : "Charge",
            "type" : "object"
         },
         "City" : {
            "description" : "An object for storing city, state/region and country related information\n",
            "properties" : {
               "city" : {
                  "description" : "The name of the city.\n",
                  "example" : "Amsterdam",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "countryCode" : {
                  "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "example" : "NL",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z]{2}$",
                  "type" : "string"
               },
               "stateRegion" : {
                  "description" : "The name of the state/region.\n",
                  "example" : "North Holland",
                  "maxLength" : 65,
                  "type" : "string"
               }
            },
            "required" : [
               "city",
               "countryCode"
            ],
            "title" : "City",
            "type" : "object"
         },
         "Consignee" : {
            "description" : "The party to which goods are consigned in the `Master Bill of Lading`.\n\n**Condition:** Mandatory for non-negotiable BL (`isToOrder=false`)\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "displayedAddress" : {
                  "description" : "The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.\n\n**Conditions:** If provided:\n  - the displayed address must be included in the `Transport Document`.\n  - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters\n  - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters\n  - the order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A single address line\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 6,
                  "type" : "array"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "purchaseOrderReferences" : {
                  "description" : "A list of `Purchase Order Reference`s linked to the `Consignee`.\n",
                  "items" : {
                     "description" : "A purchase order reference linked to the `Consignee`.\n",
                     "example" : "HHL007",
                     "maxLength" : 35,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "reference" : {
                  "description" : "A reference linked to the `Consignee`.\n",
                  "example" : "HHL007",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               },
               "typeOfPerson" : {
                  "description" : "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
                  "example" : "NATURAL_PERSON",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Consignee",
            "type" : "object"
         },
         "ConsigneeHBL" : {
            "description" : "The ultimate recipient of the cargo. It must be different from the freight forwarder, (de)consolidator, postal operator, or customs agent.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               },
               "typeOfPerson" : {
                  "description" : "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
                  "example" : "NATURAL_PERSON",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Consignee",
            "type" : "object"
         },
         "ConsignmentItem" : {
            "description" : "Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`\n",
            "properties" : {
               "HSCodes" : {
                  "description" : "A list of `HS Codes` that apply to this `consignmentItem`\n",
                  "items" : {
                     "description" : "Used by customs to classify the product being shipped. The type of HS code depends on country and customs requirements. The code must be at least 6 and at most 10 digits.\n\nMore information can be found here: [HS Nomenclature](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools).\n",
                     "example" : "851713",
                     "maxLength" : 10,
                     "minLength" : 6,
                     "pattern" : "^\\d{6,10}$",
                     "type" : "string"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "cargoItems" : {
                  "description" : "A list of all `cargoItems`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CargoItem"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "carrierBookingReference" : {
                  "description" : "The associated booking number provided by the carrier for this `Consignment Item`.\n\nWhen multiple `carrierBookingReferences` are used then the bookings referred to must all contain the same:\n- transportPlan\n- shipmentLocations\n- receiptTypeAtOrigin\n- deliveryTypeAtDestination\n- cargoMovementTypeAtOrigin\n- cargoMovementTypeAtDestination\n- serviceContractReference\n- termsAndConditions\n- Place of B/L Issue (if provided)\n",
                  "example" : "ABC709951",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "descriptionOfGoods" : {
                  "description" : "An array of lines accurately and properly describing the cargo being shipped in the container(s) as provided by the shipper.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line describing the cargo",
                     "example" : "blue shoes size 47",
                     "maxLength" : 35,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "maxItems" : 150,
                  "type" : "array"
               },
               "nationalCommodityCodes" : {
                  "description" : "A list of `National Commodity Codes` that apply to this `commodity`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/NationalCommodityCode"
                  },
                  "type" : "array"
               },
               "references" : {
                  "description" : "A list of `References`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/ReferenceConsignmentItem"
                  },
                  "type" : "array"
               },
               "shippingMarks" : {
                  "description" : "A list of the `ShippingMarks` applicable to this `consignmentItem`\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.\n",
                     "example" : "Made in China",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 50,
                  "type" : "array"
               }
            },
            "required" : [
               "HSCodes",
               "cargoItems",
               "carrierBookingReference",
               "descriptionOfGoods"
            ],
            "title" : "Consignment Item",
            "type" : "object"
         },
         "ConsignmentItemShipper" : {
            "description" : "Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`\n",
            "properties" : {
               "HSCodes" : {
                  "description" : "A list of `HS Codes` that apply to this `consignmentItem`\n",
                  "items" : {
                     "description" : "Used by customs to classify the product being shipped. The type of HS code depends on country and customs requirements. The code must be at least 6 and at most 10 digits.\n\nMore information can be found here: [HS Nomenclature](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools).\n",
                     "example" : "851713",
                     "maxLength" : 10,
                     "minLength" : 6,
                     "pattern" : "^\\d{6,10}$",
                     "type" : "string"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "cargoItems" : {
                  "description" : "A list of all `cargoItems`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CargoItemShipper"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "carrierBookingReference" : {
                  "description" : "The associated booking number provided by the carrier for this `Consignment Item`.\n\nWhen multiple `carrierBookingReferences` are used then the bookings referred to must all contain the same:\n- transportPlan\n- shipmentLocations\n- receiptTypeAtOrigin\n- deliveryTypeAtDestination\n- cargoMovementTypeAtOrigin\n- cargoMovementTypeAtDestination\n- serviceContractReference\n- termsAndConditions\n- Place of B/L Issue (if provided)\n",
                  "example" : "ABC709951",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "commoditySubreference" : {
                  "description" : "A unique reference to the commodity object assigned by the carrier in the booking confirmation. The reference must be provided by the shipper as part of the `Shipping Instructions` for the carrier to link this consignment item to the commodity. A commodity reference is only unique in the context of a booking.\n",
                  "example" : "COM-001",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "descriptionOfGoods" : {
                  "description" : "An array of lines accurately and properly describing the cargo being shipped in the container(s) as provided by the shipper.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line describing the cargo",
                     "example" : "blue shoes size 47",
                     "maxLength" : 35,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "maxItems" : 150,
                  "type" : "array"
               },
               "nationalCommodityCodes" : {
                  "description" : "A list of `National Commodity Codes` that apply to this `commodity`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/NationalCommodityCode"
                  },
                  "type" : "array"
               },
               "references" : {
                  "description" : "A list of `References`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/ReferenceConsignmentItem"
                  },
                  "type" : "array"
               },
               "shippingMarks" : {
                  "description" : "A list of the `ShippingMarks` applicable to this `consignmentItem`\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.\n",
                     "example" : "Made in China",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 50,
                  "type" : "array"
               }
            },
            "required" : [
               "HSCodes",
               "cargoItems",
               "carrierBookingReference",
               "descriptionOfGoods"
            ],
            "title" : "Consignment Item (Shipper)",
            "type" : "object"
         },
         "CreateShippingInstructions" : {
            "description" : "The `Shipping Instructions` is an enrichment to the original booking shared by the Shipper to the Carrier. The information given by the Shipper through the `Shipping Instructions` is the information required to create a `Draft Transport Document`.\n",
            "properties" : {
               "advanceManifestFilings" : {
                  "description" : "A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing\n",
                  "items" : {
                     "$ref" : "#/components/schemas/AdvanceManifestFiling"
                  },
                  "type" : "array"
               },
               "consignmentItems" : {
                  "description" : "A list of `ConsignmentItems`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/ConsignmentItemShipper"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "destinationChargesPaymentTerm" : {
                  "$ref" : "#/components/schemas/DestinationChargesPaymentTerm"
               },
               "displayedNameForPlaceOfDelivery" : {
                  "description" : "The name to be used in order to specify how the `Place of Delivery` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPlaceOfReceipt" : {
                  "description" : "The name to be used in order to specify how the `Place of Receipt` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPortOfDischarge" : {
                  "description" : "The name to be used in order to specify how the `Port of Discharge` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPortOfLoad" : {
                  "description" : "The name to be used in order to specify how the `Port of Load` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "documentParties" : {
                  "$ref" : "#/components/schemas/DocumentPartiesShippingInstructions"
               },
               "freightPaymentTermCode" : {
                  "description" : "An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
                  "enum" : [
                     "PRE",
                     "COL"
                  ],
                  "example" : "PRE",
                  "type" : "string"
               },
               "houseBillOfLadings" : {
                  "description" : "A list of `House Bill of Ladings` specified by the Shipper.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/HouseBillOfLading"
                  },
                  "type" : "array"
               },
               "invoicePayableAt" : {
                  "$ref" : "#/components/schemas/InvoicePayableAtShippingInstructions"
               },
               "isCarriersAgentAtDestinationRequired" : {
                  "description" : "Indicates whether the Carrier's agent at destination name, address and contact details should be included in the `Transport Document`.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isElectronic" : {
                  "description" : "An indicator whether the transport document is electronically transferred.\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isHBLIssued" : {
                  "description" : "Indicates whether one or more `House Bill of Lading(s)` have been issued. This property is used by the carrier to identify which `ENS` filing type must be submitted (`F10` or `F11`, `F12` or `F13`) to comply with `ICS2` customs regulations\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isShippedOnBoardType" : {
                  "description" : "Specifies whether the Transport Document is a received for shipment, or shipped on board.\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isToOrder" : {
                  "description" : "Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).\n\n`isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "methodOfPayment" : {
                  "description" : "Method used for the payment of prepaid charges. It can be one of the following values: \n- `A` (Cash)\n- `B` (Credit Card)\n- `C` (Cheque)\n- `D` (Other)\n- `H` (Electronic funds transfer)\n- `Y` (Account holder with carrier)\n- `Z` (Not prepaid)\n",
                  "example" : "A",
                  "maxLength" : 1,
                  "type" : "string"
               },
               "numberOfCopiesWithCharges" : {
                  "description" : "The requested number of copies of the `Transport Document` to be issued by the carrier including charges.\n\n**Conditions:** The following table defines the conditions for the `numberOfCopiesWithCharges` property:\n| Transport Document Type Code | Is Electronic | Meaning |\n|-------|:-------:|-------|\n|`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier with charges|\n|`BOL`|`true`|Not applicable, there are no copies|\n|`SWB`|`false`|Indicates that charges should be included in the `SWB` (pdf or other formats)|\n|`SWB`|`true`|Indicates that charges should be included in the electronic `SWB`|\n",
                  "example" : 2,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfCopiesWithoutCharges" : {
                  "description" : "The requested number of copies of the `Transport Document` to be issued by the carrier **NOT** including charges.\n\n**Conditions:** The following table defines the conditions for the `numberOfCopiesWithoutCharges` property:\n| Transport Document Type Code | Is Electronic | Meaning |\n|-------|:-------:|-------|\n|`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier without charges|\n|`BOL`|`true`|Not applicable, there are no copies|\n|`SWB`|`false`|Indicates that charges should NOT be included in the `SWB` (pdf or other formats)|\n|`SWB`|`true`|Indicates that charges NOT should be included in the electronic `SWB`|\n",
                  "example" : 2,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfOriginalsWithCharges" : {
                  "description" : "Number of originals of the Bill of Lading that has been requested by the customer with charges.\n        \n**Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)\n",
                  "example" : 1,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfOriginalsWithoutCharges" : {
                  "description" : "Number of originals of the Bill of Lading that has been requested by the customer without charges.\n        \n**Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)\n",
                  "example" : 1,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "originChargesPaymentTerm" : {
                  "$ref" : "#/components/schemas/OriginChargesPaymentTerm"
               },
               "partyContactDetails" : {
                  "description" : "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "placeOfIssue" : {
                  "$ref" : "#/components/schemas/PlaceOfIssue"
               },
               "references" : {
                  "description" : "A list of `References`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Reference"
                  },
                  "type" : "array"
               },
               "requestedCarrierCertificates" : {
                  "description" : "Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack\n",
                  "items" : {
                     "description" : "Name of the certificate. Detailed information about carrier certificates can be found [here](https://dcsa.org/wp-content/uploads/2023/12/28-12-2023_Carrier-Certificates-shipment-voyage-particulars-and-vessel-particulars.pdf). Possible values are:\n- `SHIPMENT_VOYAGE_PARTICULARS_1` (Shipment-Voyage Particulars 1)\n- `SHIPMENT_VOYAGE_PARTICULARS_2` (Shipment-Voyage Particulars 2)\n- `SHIPMENT_VOYAGE_PARTICULARS_3` (Shipment-Voyage Particulars 3)\n- `SHIPMENT_VOYAGE_PARTICULARS_4` (Shipment-Voyage Particulars 4)\n- `SHIPMENT_VOYAGE_PARTICULARS_5` (Shipment-Voyage Particulars 5)\n- `SHIPMENT_VOYAGE_PARTICULARS_6` (Shipment-Voyage Particulars 6)\n- `SHIPMENT_VOYAGE_PARTICULARS_7` (Shipment-Voyage Particulars 7)\n- `VESSEL_PARTICULARS_1` (Vessel Particulars 1)\n- `VESSEL_PARTICULARS_2` (Vessel Particulars 2)\n- `VESSEL_PARTICULARS_3` (Vessel Particulars 3)\n- `VESSEL_PARTICULARS_4` (Vessel Particulars 4)\n- `VESSEL_PARTICULARS_5` (Vessel Particulars 5)\n- `VESSEL_PARTICULARS_6` (Vessel Particulars 6)\n- `VESSEL_PARTICULARS_7` (Vessel Particulars 7)\n- `VESSEL_PARTICULARS_8` (Vessel Particulars 8)\n- `VESSEL_PARTICULARS_9` (Vessel Particulars 9)\n- `VESSEL_PARTICULARS_10` (Vessel Particulars 10)\n- `VESSEL_PARTICULARS_11` (Vessel Particulars 11)\n- `VESSEL_PARTICULARS_12` (Vessel Particulars 12)\n- `VESSEL_PARTICULARS_13` (Vessel Particulars 13)\n- `VESSEL_PARTICULARS_14` (Vessel Particulars 14)\n- `VESSEL_PARTICULARS_15` (Vessel Particulars 15)\n- `VESSEL_PARTICULARS_16` (Vessel Particulars 16)\n- `VESSEL_PARTICULARS_17` (Vessel Particulars 17)\n- `VESSEL_PARTICULARS_18` (Vessel Particulars 18)\n",
                     "example" : "VESSEL_PARTICULARS_1",
                     "maxLength" : 100,
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "requestedCarrierClauses" : {
                  "description" : "Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`\n",
                  "items" : {
                     "description" : "A clause to request from the carrier. Detailed information about the carrier clauses can be found [here](https://dcsa.org/wp-content/uploads/2023/12/202312-Standardised-Clauses-BL.pdf). Possible values are:\n- `CARGO_CARGOSPECIFICS` (Cargo/Cargo specifics)\n- `VESSELCONVEYANCE_COUNTRYSPECIFIC` (Vessel conveyance/Country Specific)\n- `CARGO_RETURNOFEMPTYCONTAINER` (Cargo/Return of Empty Container)\n- `CARGO_CARGOVALUE` (Cargo/Cargo value)\n- `CARGO_REEFERTEMPERATURE` (Cargo/Reefer temperature)\n- `CARGO_CONFLICTINGTEMPERATURES_MIXEDLOADS` (Cargo/Conflicting temperatures/Mixed loads)\n",
                     "example" : "CARGO_CARGOSPECIFICS",
                     "maxLength" : 100,
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "routingOfConsignmentCountries" : {
                  "description" : "A list of countries the goods will be routed through from origin to destination defined by the 2 characters country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                     "example" : "NL",
                     "maxLength" : 2,
                     "minLength" : 2,
                     "pattern" : "^[A-Z]{2}$",
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "transportDocumentTypeCode" : {
                  "description" : "Specifies the type of the transport document\n- `BOL` (Bill of Lading)\n- `SWB` (Sea Waybill)\n",
                  "enum" : [
                     "BOL",
                     "SWB"
                  ],
                  "example" : "SWB",
                  "type" : "string"
               },
               "utilizedTransportEquipments" : {
                  "description" : "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/UtilizedTransportEquipmentShipper"
                  },
                  "minItems" : 1,
                  "type" : "array"
               }
            },
            "required" : [
               "consignmentItems",
               "documentParties",
               "freightPaymentTermCode",
               "isElectronic",
               "isShippedOnBoardType",
               "isToOrder",
               "partyContactDetails",
               "transportDocumentTypeCode",
               "utilizedTransportEquipments"
            ],
            "title" : "Create Shipping Instructions",
            "type" : "object"
         },
         "CreateShippingInstructionsResponse" : {
            "description" : "**Only** the `shippingInstructionsReference` is returned.\n",
            "properties" : {
               "shippingInstructionsReference" : {
                  "description" : "The identifier for a `Shipping Instructions` provided by the carrier for system purposes.\n",
                  "example" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "shippingInstructionsReference"
            ],
            "title" : "Create Shipping Instructions Response",
            "type" : "object"
         },
         "CustomsReference" : {
            "description" : "Reference associated with customs and/or excise purposes required by the relevant authorities for the import, export, or transit of the goods.\n\nA small list of **potential** examples:\n\n| Type  | Country | Description |\n|-------|:-------:|-------------|\n|ACID|EG|Advance Cargo Information Declaration in Egypt|\n|CERS|CA|Canadian Export Reporting System|\n|ITN|US|Internal Transaction Number in US|\n|PEB|ID|PEB reference number|\n|CSN|IN|Cargo Summary Notification (CSN)|\n",
            "properties" : {
               "countryCode" : {
                  "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "example" : "EG",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z]{2}$",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The reference type code as defined in the relevant customs jurisdiction.\n",
                  "example" : "ACID",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "values" : {
                  "items" : {
                     "description" : "The value of the `customsReference`\n",
                     "example" : "4988470982020120017",
                     "maxLength" : 35,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "minItems" : 1,
                  "type" : "array"
               }
            },
            "required" : [
               "countryCode",
               "type",
               "values"
            ],
            "title" : "Customs Reference",
            "type" : "object"
         },
         "DangerousGoods" : {
            "description" : "Specification for `Dangerous Goods`. It is mandatory to either provide the `unNumber` or the `naNumber`. Dangerous Goods is based on **IMDG Amendment Version 41-22**.\n",
            "oneOf" : [
               {
                  "properties" : {
                     "unNumber" : {
                        "description" : "United Nations Dangerous Goods Identifier (UNDG) assigned by the UN Sub-Committee of Experts on the Transport of Dangerous Goods and shown in the IMO IMDG.\n",
                        "example" : "1463",
                        "maxLength" : 4,
                        "minLength" : 4,
                        "pattern" : "^\\d{4}$",
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "unNumber"
                  ],
                  "title" : "UN Number",
                  "type" : "object"
               },
               {
                  "properties" : {
                     "naNumber" : {
                        "description" : "Four-digit number that is assigned to dangerous, hazardous, and harmful substances by the United States Department of Transportation.\n",
                        "example" : "9037",
                        "maxLength" : 4,
                        "minLength" : 4,
                        "pattern" : "^\\d{4}$",
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "naNumber"
                  ],
                  "title" : "NA Number",
                  "type" : "object"
               }
            ],
            "properties" : {
               "EMSNumber" : {
                  "description" : "The emergency schedule identified in the IMO EmS Guide – Emergency Response Procedures for Ships Carrying Dangerous Goods. Comprises 2 values; 1 for spillage and 1 for fire. Possible values spillage: S-A to S-Z. Possible values fire: F-A to F-Z.\n",
                  "example" : "F-A S-Q",
                  "maxLength" : 7,
                  "type" : "string"
               },
               "codedVariantList" : {
                  "description" : "Four-character code supplied by Exis Technologies that assists to remove ambiguities when identifying a variant within a single UN number or NA number that may occur when two companies exchange DG information.\n\nCharacter | Valid Characters | Description\n:--------:|------------------|------------\n1| 0, 1, 2, 3|The packing group. Code 0 indicates there is no packing group\n2|0 to 9 and A to Z|A sequence letter for the PSN, or 0 if there were no alternative PSNs\n3 and 4|0 to 9 and A to Z|Two sequence letters for other information, for the cases where the variant is required because of different in subrisks, packing instruction etc.\n",
                  "example" : "2200",
                  "maxLength" : 4,
                  "minLength" : 4,
                  "pattern" : "^[0-3][0-9A-Z]{3}$",
                  "type" : "string"
               },
               "competentAuthorityApproval" : {
                  "description" : "Name and reference number of the competent authority providing the approval.\n",
                  "example" : "{Name and reference...}",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "emergencyContactDetails" : {
                  "$ref" : "#/components/schemas/EmergencyContactDetails"
               },
               "endOfHoldingTime" : {
                  "description" : "Date by when the refrigerated liquid needs to be delivered.\n",
                  "example" : "2021-09-03",
                  "format" : "date",
                  "type" : "string"
               },
               "fumigationDateTime" : {
                  "description" : "Date & time when the container was fumigated\n",
                  "example" : "2024-09-04T09:41:00Z",
                  "format" : "date-time",
                  "type" : "string"
               },
               "grossWeight" : {
                  "$ref" : "#/components/schemas/GrossWeight"
               },
               "imoClass" : {
                  "description" : "The hazard class code of the referenced dangerous goods according to the specified regulation. Examples of possible values are:\n\n- `1.1A` (Substances and articles which have a mass explosion hazard)\n- `1.6N` (Extremely insensitive articles which do not have a mass explosion hazard)\n- `2.1` (Flammable gases)\n- `8` (Corrosive substances)\n",
                  "example" : "1.4S",
                  "maxLength" : 4,
                  "type" : "string"
               },
               "inhalationZone" : {
                  "description" : "The zone classification of the toxicity of the inhalant. Possible values are:\n\n- `A` (Hazard Zone A) can be assigned to specific gases and liquids\n- `B` (Hazard Zone B) can be assigned to specific gases and liquids\n- `C` (Hazard Zone C) can **only** be assigned to specific gases\n- `D` (Hazard Zone D) can **only** be assigned to specific gases\n",
                  "example" : "A",
                  "maxLength" : 1,
                  "minLength" : 1,
                  "type" : "string"
               },
               "innerPackagings" : {
                  "description" : "A list of `Inner Packings` contained inside this `outer packaging/overpack`.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/InnerPackaging"
                  },
                  "type" : "array"
               },
               "isCompetentAuthorityApprovalRequired" : {
                  "description" : "Indicates if the cargo require approval from authorities\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isEmptyUncleanedResidue" : {
                  "description" : "Indicates if the cargo is residue.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isExceptedQuantity" : {
                  "description" : "Indicates if the dangerous goods can be transported as excepted quantity in accordance with Chapter 3.5 of the IMO IMDG Code.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isHot" : {
                  "description" : "Indicates if high temperature cargo is shipped.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isLimitedQuantity" : {
                  "description" : "Indicates if the dangerous goods can be transported as limited quantity in accordance with Chapter 3.4 of the IMO IMDG Code.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isMarinePollutant" : {
                  "description" : "Indicates if the goods belong to the classification of Marine Pollutant.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isReportableQuantity" : {
                  "description" : "Indicates if a container of hazardous material is at the reportable quantity level. If `true`, a report to the relevant authority must be made in case of spill.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isSalvagePackings" : {
                  "description" : "Indicates if the cargo has special packaging for the transport, recovery or disposal of damaged, defective, leaking or nonconforming hazardous materials packages, or hazardous materials that have spilled or leaked.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isWaste" : {
                  "description" : "Indicates if waste is being shipped\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "limits" : {
                  "$ref" : "#/components/schemas/Limits"
               },
               "netExplosiveContent" : {
                  "$ref" : "#/components/schemas/NetExplosiveContent"
               },
               "netVolume" : {
                  "$ref" : "#/components/schemas/NetVolume"
               },
               "netWeight" : {
                  "$ref" : "#/components/schemas/NetWeight"
               },
               "packingGroup" : {
                  "description" : "The packing group according to the UN Recommendations on the Transport of Dangerous Goods and IMO IMDG Code.\n",
                  "example" : 3,
                  "format" : "int32",
                  "maximum" : 3,
                  "minimum" : 1,
                  "type" : "integer"
               },
               "properShippingName" : {
                  "description" : "The proper shipping name for goods under IMDG Code, or the product name for goods under IBC Code and IGC Code, or the bulk cargo shipping name for goods under IMSBC Code, or the name of oil for goods under Annex I to the MARPOL Convention.\n",
                  "example" : "Chromium Trioxide, anhydrous",
                  "maxLength" : 250,
                  "type" : "string"
               },
               "segregationGroups" : {
                  "description" : "List of the segregation groups applicable to specific hazardous goods according to the IMO IMDG Code.\n\n**Condition:** only applicable to specific hazardous goods.\n",
                  "items" : {
                     "description" : "Grouping of Dangerous Goods having certain similar chemical properties. Possible values are:\n\n- `1` (Acids)\n- `2` (Ammonium Compounds)\n- `3` (Bromates)\n- `4` (Chlorates)\n- `5` (Chlorites)\n- `6` (Cyanides)\n- `7` (Heavy metals and their salts)\n- `8` (Hypochlorites)\n- `9` (Lead and its compounds)\n- `10` (Liquid halogenated hydrocarbons)\n- `11` (Mercury and mercury compounds)\n- `12` (Nitrites and their mixtures)\n- `13` (Perchlorates)\n- `14` (Permanganates)\n- `15` (Powdered metals)\n- `16` (Peroxides),\n- `17` (Azides)\n- `18` (Alkalis)\n",
                     "example" : "12",
                     "maxLength" : 2,
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "subsidiaryRisk1" : {
                  "description" : "Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.\n",
                  "example" : "1.2",
                  "maxLength" : 3,
                  "minLength" : 1,
                  "pattern" : "^[0-9](\\.[0-9])?$",
                  "type" : "string"
               },
               "subsidiaryRisk2" : {
                  "description" : "Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.\n",
                  "example" : "1.2",
                  "maxLength" : 3,
                  "minLength" : 1,
                  "pattern" : "^[0-9](\\.[0-9])?$",
                  "type" : "string"
               },
               "technicalName" : {
                  "description" : "The recognized chemical or biological name or other name currently used for the referenced dangerous goods as described in chapter 3.1.2.8 of the IMDG Code.\n",
                  "example" : "xylene and benzene",
                  "maxLength" : 250,
                  "type" : "string"
               }
            },
            "required" : [
               "imoClass",
               "properShippingName"
            ],
            "title" : "Dangerous Goods",
            "type" : "object"
         },
         "DestinationChargesPaymentTerm" : {
            "description" : "An indicator of whether destination charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n",
            "properties" : {
               "haulageChargesPaymentTermCode" : {
                  "description" : "An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
                  "enum" : [
                     "PRE",
                     "COL"
                  ],
                  "example" : "PRE",
                  "type" : "string"
               },
               "otherChargesPaymentTermCode" : {
                  "description" : "An indicator of whether destination charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
                  "enum" : [
                     "PRE",
                     "COL"
                  ],
                  "example" : "PRE",
                  "type" : "string"
               },
               "portChargesPaymentTermCode" : {
                  "description" : "An indicator of whether the destination port charges are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
                  "enum" : [
                     "PRE",
                     "COL"
                  ],
                  "example" : "PRE",
                  "type" : "string"
               }
            },
            "title" : "Destination Charges Payment Term",
            "type" : "object"
         },
         "DetailedError" : {
            "description" : "A detailed description of what has caused the error.\n",
            "properties" : {
               "errorCode" : {
                  "description" : "The detailed error code returned.\n\n  - `7000-7999` Technical error codes\n  - `8000-8999` Functional error codes\n  - `9000-9999` API provider-specific error codes            \n\n[Error codes as specified by DCSA](https://developer.dcsa.org/standard-error-codes).\n",
                  "example" : 7003,
                  "format" : "int32",
                  "maximum" : 9999,
                  "minimum" : 7000,
                  "type" : "integer"
               },
               "errorCodeMessage" : {
                  "description" : "A long description corresponding to the `errorCode` with additional information.\n",
                  "example" : "Spaces not allowed in facility code",
                  "maxLength" : 5000,
                  "type" : "string"
               },
               "errorCodeText" : {
                  "description" : "A standard short description corresponding to the `errorCode`.\n",
                  "example" : "invalidData",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "jsonPath" : {
                  "description" : "A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).\n",
                  "example" : "$.location.facilityCode",
                  "maxLength" : 500,
                  "type" : "string"
               },
               "property" : {
                  "description" : "The name of the property causing the error.\n",
                  "example" : "facilityCode",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "value" : {
                  "description" : "The value of the property causing the error serialised as a string exactly as in the original request.\n",
                  "example" : "SG SIN WHS",
                  "maxLength" : 500,
                  "type" : "string"
               }
            },
            "required" : [
               "errorCodeMessage",
               "errorCodeText"
            ],
            "title" : "Detailed Error",
            "type" : "object"
         },
         "DocumentParties" : {
            "description" : "All `Parties` with associated roles.\n",
            "properties" : {
               "carriersAgentAtDestination" : {
                  "$ref" : "#/components/schemas/CarriersAgentAtDestination"
               },
               "consignee" : {
                  "$ref" : "#/components/schemas/Consignee"
               },
               "endorsee" : {
                  "$ref" : "#/components/schemas/Endorsee"
               },
               "issuingParty" : {
                  "$ref" : "#/components/schemas/IssuingParty"
               },
               "notifyParties" : {
                  "description" : "List of up to 3 `Notify Parties`. The first item in the list is the **First Notify Party** (`N1`), the second item is the **Second Notify Party** (`N2`) and the last item is the **Other Notify Party** (`NI`).\n\n**Condition:** If provided:\n  - Mandatory for To Order BLs, `isToOrder=true`\n  - The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/NotifyParty"
                  },
                  "maxItems" : 3,
                  "type" : "array"
               },
               "other" : {
                  "description" : "A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.",
                  "items" : {
                     "$ref" : "#/components/schemas/OtherDocumentParty"
                  },
                  "type" : "array"
               },
               "shipper" : {
                  "$ref" : "#/components/schemas/Shipper"
               }
            },
            "required" : [
               "issuingParty",
               "shipper"
            ],
            "title" : "Document Parties",
            "type" : "object"
         },
         "DocumentPartiesHouseBL" : {
            "description" : "All `Parties` with associated roles for this `House Bill of Lading`.\n",
            "properties" : {
               "buyer" : {
                  "$ref" : "#/components/schemas/Buyer"
               },
               "consignee" : {
                  "$ref" : "#/components/schemas/ConsigneeHBL"
               },
               "notifyParty" : {
                  "$ref" : "#/components/schemas/NotifyPartyHBL"
               },
               "other" : {
                  "description" : "A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.",
                  "items" : {
                     "$ref" : "#/components/schemas/OtherDocumentPartyHBL"
                  },
                  "type" : "array"
               },
               "seller" : {
                  "$ref" : "#/components/schemas/Seller"
               },
               "shipper" : {
                  "$ref" : "#/components/schemas/ShipperHBL"
               }
            },
            "title" : "Document Parties",
            "type" : "object"
         },
         "DocumentPartiesShippingInstructions" : {
            "description" : "All `Parties` with associated roles.\n",
            "properties" : {
               "buyer" : {
                  "$ref" : "#/components/schemas/Buyer"
               },
               "consignee" : {
                  "$ref" : "#/components/schemas/Consignee"
               },
               "endorsee" : {
                  "$ref" : "#/components/schemas/Endorsee"
               },
               "issueTo" : {
                  "$ref" : "#/components/schemas/IssueToParty"
               },
               "notifyParties" : {
                  "description" : "List of up to 3 `Notify Parties`. The first item in the list is the **First Notify Party** (`N1`), the second item is the **Second Notify Party** (`N2`) and the last item is the **Other Notify Party** (`NI`).\n\n**Condition:** If provided:\n  - Mandatory for To Order BLs, `isToOrder=true`\n  - The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/NotifyParty"
                  },
                  "maxItems" : 3,
                  "type" : "array"
               },
               "other" : {
                  "description" : "A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.",
                  "items" : {
                     "$ref" : "#/components/schemas/OtherDocumentParty"
                  },
                  "type" : "array"
               },
               "seller" : {
                  "$ref" : "#/components/schemas/Seller"
               },
               "shipper" : {
                  "$ref" : "#/components/schemas/Shipper"
               }
            },
            "required" : [
               "shipper"
            ],
            "title" : "Document Parties",
            "type" : "object"
         },
         "EmergencyContactDetails" : {
            "description" : "24 hr emergency contact details\n",
            "properties" : {
               "contact" : {
                  "description" : "Name of the Contact person during an emergency.\n",
                  "example" : "Henrik Larsen",
                  "maxLength" : 255,
                  "type" : "string"
               },
               "phone" : {
                  "description" : "Phone number for the contact. Phone **MUST** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).\n",
                  "example" : "+45 70262970",
                  "maxLength" : 30,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "provider" : {
                  "description" : "Name of the third party vendor providing emergency support\n",
                  "example" : "GlobeTeam",
                  "maxLength" : 255,
                  "type" : "string"
               },
               "referenceNumber" : {
                  "description" : "Contract reference for the emergency support provided by an external third party vendor.\n",
                  "example" : "12234",
                  "maxLength" : 255,
                  "type" : "string"
               }
            },
            "required" : [
               "contact",
               "phone"
            ],
            "title" : "Emergency Contact Details",
            "type" : "object"
         },
         "Endorsee" : {
            "description" : "The party to whom the title to the goods is transferred by means of endorsement.\n\n**Condition:** Can only be provided for negotiable BLs (`isToOrder=true`). If a negotiable BL does not have an `Endorsee`, the BL is said to be \"blank endorsed\". Note `Consignee` and `Endorsee` are mutually exclusive.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "displayedAddress" : {
                  "description" : "The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.\n\n**Conditions:** If provided:\n  - the displayed address must be included in the `Transport Document`.\n  - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters\n  - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters\n  - the order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A single address line\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 6,
                  "type" : "array"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Endorsee",
            "type" : "object"
         },
         "Equipment" : {
            "description" : "Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.\n",
            "properties" : {
               "ISOEquipmentCode" : {
                  "description" : "Unique code for the different equipment size and type used to transport commodities. The code can refer to either the ISO size type (e.g. 22G1) or the ISO type group (e.g. 22GP) following the [ISO 6346](https://www.iso.org/standard/83558.html) standard.\n",
                  "example" : "22G1",
                  "maxLength" : 4,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "equipmentReference" : {
                  "description" : "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
                  "example" : "APZU4812090",
                  "maxLength" : 11,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "tareWeight" : {
                  "$ref" : "#/components/schemas/TareWeight"
               }
            },
            "required" : [
               "equipmentReference"
            ],
            "title" : "Equipment",
            "type" : "object"
         },
         "ErrorResponse" : {
            "description" : "Unexpected error",
            "properties" : {
               "errorDateTime" : {
                  "description" : "The DateTime corresponding to the error occurring. Must be formatted using [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.\n",
                  "example" : "2024-09-04T09:41:00Z",
                  "format" : "date-time",
                  "type" : "string"
               },
               "errors" : {
                  "description" : "An array of errors providing more detail about the root cause.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/DetailedError"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "httpMethod" : {
                  "description" : "The HTTP method used to make the request e.g. `GET`, `POST`, etc\n",
                  "enum" : [
                     "GET",
                     "HEAD",
                     "POST",
                     "PUT",
                     "DELETE",
                     "OPTION",
                     "PATCH"
                  ],
                  "example" : "POST",
                  "type" : "string"
               },
               "providerCorrelationReference" : {
                  "description" : "A unique identifier to the HTTP request within the scope of the API provider.\n",
                  "example" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "requestUri" : {
                  "description" : "The URI that was requested.\n",
                  "example" : "/v1/events",
                  "type" : "string"
               },
               "statusCode" : {
                  "description" : "The HTTP status code returned.\n",
                  "example" : 400,
                  "format" : "int32",
                  "type" : "integer"
               },
               "statusCodeMessage" : {
                  "description" : "A long description corresponding to the HTTP status code with additional information.\n",
                  "example" : "The supplied data could not be accepted",
                  "maxLength" : 200,
                  "type" : "string"
               },
               "statusCodeText" : {
                  "description" : "A standard short description corresponding to the HTTP status code.\n",
                  "example" : "Bad Request",
                  "maxLength" : 50,
                  "type" : "string"
               }
            },
            "required" : [
               "errorDateTime",
               "errors",
               "httpMethod",
               "requestUri",
               "statusCode",
               "statusCodeText"
            ],
            "title" : "Error Response",
            "type" : "object"
         },
         "Facility" : {
            "description" : "An object used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\n",
            "properties" : {
               "facilityCode" : {
                  "description" : "The code used for identifying the specific facility. This code does not include the UN Location Code.\nThe definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:\n- `SMDG` (the codeList used is the [SMDG Terminal Code List](https://smdg.org/documents/smdg-code-lists/))\n- `BIC` (the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/))",
                  "example" : "ADT",
                  "maxLength" : 6,
                  "nullable" : false,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "facilityCodeListProvider" : {
                  "description" : "The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\n- `BIC` (Requires a UN Location Code)\n- `SMDG` (Requires a UN Location Code)\n",
                  "enum" : [
                     "BIC",
                     "SMDG"
                  ],
                  "example" : "SMDG",
                  "type" : "string"
               }
            },
            "required" : [
               "facilityCode",
               "facilityCodeListProvider"
            ],
            "title" : "Facility",
            "type" : "object"
         },
         "Feedback" : {
            "description" : "Feedback that can be provided includes, but is not limited to:\n- unsupported properties\n- changed values\n- removed properties\n- general information\n",
            "properties" : {
               "code" : {
                  "description" : "A code used to describe the feedback. Possible values are:\n- `INFORMATIONAL_MESSAGE` (INFO - to be used when providing extra information) \n- `PROPERTY_WILL_BE_IGNORED` (WARN - to be used for unsupported properties/values)\n- `PROPERTY_VALUE_MUST_CHANGE` (ERROR - to be used when a wrong property/value is provided)\n- `PROPERTY_VALUE_HAS_BEEN_CHANGED` (WARN - when something has been auto-updated without consumer intervention)\n- `PROPERTY_VALUE_MAY_CHANGE` (WARN - when something is likely to change in the future)\n- `PROPERTY_HAS_BEEN_DELETED` (WARN - when something has been auto-deleted without consumer intervention)\n",
                  "example" : "PROPERTY_WILL_BE_IGNORED",
                  "maxLength" : 50,
                  "type" : "string"
               },
               "jsonPath" : {
                  "description" : "A path to the property, formatted according to [JSONpath](https://github.com/json-path/JsonPath).\n",
                  "example" : "$.location.facilityCode",
                  "maxLength" : 500,
                  "type" : "string"
               },
               "message" : {
                  "description" : "A description with additional information.\n",
                  "example" : "Spaces not allowed in facility code",
                  "maxLength" : 5000,
                  "type" : "string"
               },
               "property" : {
                  "description" : "The name of the property causing the error/warning.\n",
                  "example" : "facilityCode",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "severity" : {
                  "description" : "The severity of the feedback. Possible values are:\n- `INFO` (Information - \"Your reefer container will use renewable energy\", \"This earlier / premium service is available\")\n- `WARN` (Warning - \"I'm going to replace\" / \"Ignore this value\" / \"Use another value instead\")\n- `ERROR` (Error - \"This must be changed!\")\n",
                  "example" : "WARN",
                  "maxLength" : 50,
                  "type" : "string"
               }
            },
            "required" : [
               "code",
               "message",
               "severity"
            ],
            "title" : "Feedback",
            "type" : "object"
         },
         "GeoCoordinate" : {
            "description" : "An object used to express a location using `latitude` and `longitude`.\n",
            "properties" : {
               "latitude" : {
                  "description" : "Geographic coordinate that specifies the north–south position of a point on the Earth's surface.",
                  "example" : "48.8585500",
                  "maxLength" : 10,
                  "type" : "string"
               },
               "longitude" : {
                  "description" : "Geographic coordinate that specifies the east–west position of a point on the Earth's surface.",
                  "example" : "2.294492036",
                  "maxLength" : 11,
                  "type" : "string"
               }
            },
            "required" : [
               "latitude",
               "longitude"
            ],
            "title" : "Geo Coordinate",
            "type" : "object"
         },
         "GrossWeight" : {
            "description" : "Total weight of the goods carried, including packaging.\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in imperial or metric terms\n\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
                  "enum" : [
                     "KGM",
                     "LBR"
                  ],
                  "example" : "KGM",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The grand total weight of the DG cargo and weight per `UNNumber`/`NANumber` including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.\n",
                  "example" : 12000.3,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Gross Weight",
            "type" : "object"
         },
         "HouseBillOfLading" : {
            "description" : "A legal contract between the Ocean Transport Intermediary (OTI), such as a Non-Vessel Operating Common Carrier (NVOCC) or a freight forwarder, and the shipper that acknowledges the receipt of goods and outlines the terms of shipment.\n",
            "properties" : {
               "documentParties" : {
                  "$ref" : "#/components/schemas/DocumentPartiesHouseBL"
               },
               "houseBillOfLadingReference" : {
                  "description" : "A unique number allocated by the Ocean Transport Intermediary (OTI) to the `House Bill of Lading`.\n",
                  "example" : "HBOL001",
                  "maxLength" : 20,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "isToOrder" : {
                  "description" : "Indicates whether the `House Bill of Lading` (HBL) is issued `to order` or not. If `true`, `Notify party` at `HBL` level is mandatory\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "methodOfPayment" : {
                  "description" : "Method used for the payment of prepaid charges. It can be one of the following values: \n- `A` (Cash)\n- `B` (Credit Card)\n- `C` (Cheque)\n- `D` (Other)\n- `H` (Electronic funds transfer)\n- `Y` (Account holder with carrier)\n- `Z` (Not prepaid)\n",
                  "example" : "A",
                  "maxLength" : 1,
                  "type" : "string"
               },
               "placeOfAcceptance" : {
                  "$ref" : "#/components/schemas/PlaceOfAcceptance"
               },
               "placeOfFinalDelivery" : {
                  "$ref" : "#/components/schemas/PlaceOfFinalDelivery"
               }
            },
            "required" : [
               "houseBillOfLadingReference"
            ],
            "title" : "House Bill of Lading",
            "type" : "object"
         },
         "IdentifyingCode" : {
            "properties" : {
               "codeListName" : {
                  "description" : "The name of the code list, code generation mechanism or code authority for the `partyCode`. Example values could be:\n- `DID` (Decentralized Identifier) for `codeListProvider` `W3C`\n- `LEI` (Legal Entity Identifier) for `codeListProvider` `GLEIF`\n- `DUNS` (Data Universal Numbering System) for `codeListProvider` `DNB`\n- `EORI` (Economic Operators Registration and Identification) for codeListProvider `EU`\n",
                  "example" : "DID",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "codeListProvider" : {
                  "description" : "A list of codes identifying a party. Possible values are:\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ESSD` (EssDOCS)\n- `IDT` (ICE Digital Trade)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGO)\n- `ETEU` (eTEU)\n- `TRAC` (TRACE Original)\n- `BRIT` (BRITC eBL)\n- `GSBN` (Global Shipping Business Network)\n- `WISE` (WiseTech)\n- `GLEIF` (Global Legal Entity Identifier Foundation)\n- `W3C` (World Wide Web Consortium)\n- `DNB` (Dun and Bradstreet)\n- `FMC` (Federal Maritime Commission)\n- `DCSA` (Digital Container Shipping Association)\n- `EU` (European Union Member State Customs Authority)\n- `ZZZ` (Mutually defined)\n",
                  "example" : "W3C",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "partyCode" : {
                  "description" : "Code to identify the party as provided by the code list provider\n",
                  "example" : "MSK",
                  "maxLength" : 150,
                  "type" : "string"
               }
            },
            "required" : [
               "codeListProvider",
               "partyCode"
            ],
            "title" : "Identifying Code",
            "type" : "object"
         },
         "InnerPackaging" : {
            "description" : "Object for inner packaging specification\n",
            "properties" : {
               "description" : {
                  "description" : "Description of the packaging.\n",
                  "example" : "Woven plastic water resistant Bag",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "material" : {
                  "description" : "The `material` used for the `Inner Packaging` of the referenced `Dangerous Goods`.\n",
                  "example" : "Plastic",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "quantity" : {
                  "description" : "Count of `Inner Packagings` of the referenced `Dangerous Goods`.\n",
                  "example" : 20,
                  "format" : "int32",
                  "type" : "integer"
               }
            },
            "required" : [
               "description",
               "material",
               "quantity"
            ],
            "title" : "Inner Packaging",
            "type" : "object"
         },
         "InvoicePayableAt" : {
            "description" : "Location where payment of ocean freight and charges for the main transport will take place by the customer.\n\nThe location can be provided as a `UN Location Code` or as a fallback - a `freeText` field\n",
            "oneOf" : [
               {
                  "properties" : {
                     "UNLocationCode" : {
                        "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
                        "example" : "NLAMS",
                        "maxLength" : 5,
                        "minLength" : 5,
                        "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "UNLocationCode"
                  ],
                  "title" : "UN Location Code",
                  "type" : "object"
               },
               {
                  "properties" : {
                     "freeText" : {
                        "description" : "The name of the location where payment will be rendered by the customer.\n",
                        "example" : "DCSA Headquarters",
                        "maxLength" : 35,
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "freeText"
                  ],
                  "title" : "Free text",
                  "type" : "object"
               }
            ],
            "title" : "Invoice Payable At",
            "type" : "object"
         },
         "InvoicePayableAtShippingInstructions" : {
            "description" : "Location where payment of ocean freight and charges for the main transport will take place by the customer.\n\nThe location must be provided as a `UN Location Code`\n",
            "properties" : {
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               }
            },
            "required" : [
               "UNLocationCode"
            ],
            "title" : "Invoice Payable At",
            "type" : "object"
         },
         "IssueToParty" : {
            "description" : "The party to whom the `Bill of Lading` must be issued.\n",
            "properties" : {
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "Globeteam",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "sendToPlatform" : {
                  "description" : "The EBL platform of the transaction party. \nThe value **MUST** be one of:\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ESSD` (EssDOCS)\n- `IDT` (ICE Digital Trade)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGO)\n- `ETEU` (eTEU)\n- `TRAC` (TRACE Original)\n- `BRIT` (BRITC eBL)\n\n**Condition:** Only applicable when `isElectronic=true` and `transportDocumentTypeCode=BOL`. The property **MUST** be absent for paper B/Ls (`isElectronic=false`)\n",
                  "example" : "BOLE",
                  "maxLength" : 4,
                  "pattern" : "^\\S+$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Issue To Party",
            "type" : "object"
         },
         "IssuingParty" : {
            "description" : "Refers to a company or a legal entity.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "Asseco Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "address",
               "partyName"
            ],
            "title" : "Issuing Party",
            "type" : "object"
         },
         "Limits" : {
            "description" : "Limits for the `Dangerous Goods`. The same `Temperature Unit` needs to apply to all attributes in this structure.\n",
            "properties" : {
               "SADT" : {
                  "description" : "Lowest temperature in which self-accelerating decomposition may occur in a substance\n",
                  "example" : 54.1,
                  "format" : "float",
                  "type" : "number"
               },
               "SAPT" : {
                  "description" : "Lowest temperature in which self-accelerating polymerization may occur in a substance\n",
                  "example" : 70,
                  "format" : "float",
                  "type" : "number"
               },
               "flashPoint" : {
                  "description" : "Lowest temperature at which a chemical can vaporize to form an ignitable mixture in air.\n\n**Condition:** only applicable to specific hazardous goods according to the IMO IMDG Code.\n",
                  "example" : 42,
                  "format" : "float",
                  "type" : "number"
               },
               "temperatureUnit" : {
                  "description" : "The unit for **all attributes in the limits structure** in Celsius or Fahrenheit\n\n- `CEL` (Celsius)\n- `FAH` (Fahrenheit)\n",
                  "enum" : [
                     "CEL",
                     "FAH"
                  ],
                  "example" : "CEL",
                  "type" : "string"
               },
               "transportControlTemperature" : {
                  "description" : "Maximum temperature at which certain substance (such as organic peroxides and self-reactive and related substances) can be safely transported for a prolonged period.\n",
                  "example" : 24.1,
                  "format" : "float",
                  "type" : "number"
               },
               "transportEmergencyTemperature" : {
                  "description" : "Temperature at which emergency procedures shall be implemented\n",
                  "example" : 74.1,
                  "format" : "float",
                  "type" : "number"
               }
            },
            "required" : [
               "temperatureUnit"
            ],
            "title" : "Limits",
            "type" : "object"
         },
         "NationalCommodityCode" : {
            "description" : "The national commodity classification code linked to a country with a value.\n\nAn example could look like this:\n\n| Type  | Country | Value |\n|-------|:-------:|-------------|\n|NCM|BR|['1515', '2106', '2507', '2512']|\n",
            "properties" : {
               "countryCode" : {
                  "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "example" : "BR",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z]{2}$",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The national commodity classification code, which can be one of the following values defined by DCSA:\n- `NCM` (Nomenclatura Comum do Mercosul)\n- `HTS` (Harmonized Tariff Schedule)\n- `SCHEDULE_B` ( Schedule B)\n- `TARIC` (Integrated Tariff of the European Communities)\n- `CN` (Combined Nomenclature)\n- `CUS` (Customs Union and Statistics)\n",
                  "example" : "NCM",
                  "maxLength" : 10,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "values" : {
                  "description" : "A list of `national commodity codes` values.\n",
                  "example" : [
                     "1515",
                     "2106",
                     "2507",
                     "2512"
                  ],
                  "items" : {
                     "description" : "The value of the `National Commodity Code`\n",
                     "example" : "1515",
                     "maxLength" : 10,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "minItems" : 1,
                  "type" : "array"
               }
            },
            "required" : [
               "countryCode",
               "type",
               "values"
            ],
            "title" : "National Commodity Code",
            "type" : "object"
         },
         "NetExplosiveContent" : {
            "description" : "The total weight of the explosive substances, without the packaging’s, casings, etc.\n",
            "properties" : {
               "unit" : {
                  "description" : "Unit of measure used to describe the `netExplosiveWeight`. Possible values are\n\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n- `GRM` (Grams)\n- `ONZ` (Ounce)\n",
                  "enum" : [
                     "KGM",
                     "LBR",
                     "GRM",
                     "ONZ"
                  ],
                  "example" : "KGM",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The total weight of the explosive substances, without the packaging’s, casings, etc.\n",
                  "example" : 2.4,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Net Explosive Content",
            "type" : "object"
         },
         "NetVolume" : {
            "description" : "The volume of the referenced dangerous goods.\n\n**Condition:** only applicable to liquids and gas.\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in either imperial or metric terms\n\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n- `LTR` (Litre)\n",
                  "enum" : [
                     "MTQ",
                     "FTQ",
                     "LTR"
                  ],
                  "example" : "MTQ",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The volume of the referenced dangerous goods.\n",
                  "example" : 2.4,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Net Volume",
            "type" : "object"
         },
         "NetWeight" : {
            "description" : "Total weight of the goods carried, excluding packaging.\n",
            "properties" : {
               "unit" : {
                  "description" : "Unit of measure used to describe the `netWeight`. Possible values are\n\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
                  "enum" : [
                     "KGM",
                     "LBR"
                  ],
                  "example" : "KGM",
                  "type" : "string"
               },
               "value" : {
                  "description" : "Total weight of the goods carried, excluding packaging.\n",
                  "example" : 2.4,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Net Weight",
            "type" : "object"
         },
         "NotifyParty" : {
            "description" : "The person to be notified when a shipment arrives at its destination.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "displayedAddress" : {
                  "description" : "The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.\n\n**Conditions:** If provided:\n  - the displayed address must be included in the `Transport Document`.\n  - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters\n  - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters\n  - the order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A single address line\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 6,
                  "type" : "array"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "reference" : {
                  "description" : "A reference linked to the `NotifyParty`.\n",
                  "example" : "HHL007",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               },
               "typeOfPerson" : {
                  "description" : "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
                  "example" : "NATURAL_PERSON",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Notify Party",
            "type" : "object"
         },
         "NotifyPartyHBL" : {
            "description" : "The person to be notified when a shipment arrives at its destination.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               },
               "typeOfPerson" : {
                  "description" : "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
                  "example" : "NATURAL_PERSON",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Notify Party",
            "type" : "object"
         },
         "OnwardInlandRouting" : {
            "description" : "An object to capture `Onward Inland Routing` location specified as the end location of the inland movement that takes place after the container(s) being delivered to the port of discharge/place of delivery for account and risk of merchant (merchant haulage).\n\nThe location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.\n",
            "example" : {
               "UNLocationCode" : "DEHAM",
               "locationName" : "Hamburg"
            },
            "properties" : {
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "address" : {
                  "$ref" : "#/components/schemas/Address"
               },
               "facility" : {
                  "$ref" : "#/components/schemas/Facility"
               },
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Onward Inland Routing",
            "type" : "object"
         },
         "OriginChargesPaymentTerm" : {
            "description" : "An indicator of whether origin charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n",
            "properties" : {
               "haulageChargesPaymentTermCode" : {
                  "description" : "An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
                  "enum" : [
                     "PRE",
                     "COL"
                  ],
                  "example" : "PRE",
                  "type" : "string"
               },
               "otherChargesPaymentTermCode" : {
                  "description" : "An indicator of whether origin charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
                  "enum" : [
                     "PRE",
                     "COL"
                  ],
                  "example" : "PRE",
                  "type" : "string"
               },
               "portChargesPaymentTermCode" : {
                  "description" : "An indicator of whether the origin port charges are prepaid (`PRE`) or collect (`COL`).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
                  "enum" : [
                     "PRE",
                     "COL"
                  ],
                  "example" : "PRE",
                  "type" : "string"
               }
            },
            "title" : "Origin Charges Payment Term",
            "type" : "object"
         },
         "OtherDocumentParty" : {
            "description" : "A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.\n",
            "properties" : {
               "party" : {
                  "$ref" : "#/components/schemas/Party"
               },
               "partyFunction" : {
                  "description" : "Specifies the role of the party in a given context. Possible values are:\n\n- `SCO` (Service Contract Owner)\n- `DDR` (Consignor's freight forwarder)\n- `DDS` (Consignee's freight forwarder)\n- `COW` (Invoice payer on behalf of the consignor (shipper))\n- `COX` (Invoice payer on behalf of the consignee)\n- `CSR` (Consolidator)\n- `MFR` (Manufacturer)\n- `WHK` (Warehouse Keeper)\n",
                  "example" : "DDS",
                  "maxLength" : 3,
                  "type" : "string"
               }
            },
            "required" : [
               "party",
               "partyFunction"
            ],
            "title" : "Other Document Party",
            "type" : "object"
         },
         "OtherDocumentPartyHBL" : {
            "description" : "A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.\n",
            "properties" : {
               "party" : {
                  "$ref" : "#/components/schemas/Party"
               },
               "partyFunction" : {
                  "description" : "Specifies the role of the party in a given context. Possible values are:\n\n- `DDR` (Consignor's freight forwarder)\n- `DDS` (Consignee's freight forwarder)\n- `CSR` (Consolidator)\n- `MFR` (Manufacturer)\n- `WHK` (Warehouse Keeper)\n",
                  "example" : "DDS",
                  "maxLength" : 3,
                  "type" : "string"
               }
            },
            "required" : [
               "party",
               "partyFunction"
            ],
            "title" : "Other Document Party",
            "type" : "object"
         },
         "OuterPackaging" : {
            "description" : "Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.\n",
            "properties" : {
               "dangerousGoods" : {
                  "description" : "A list of `Dangerous Goods`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/DangerousGoods"
                  },
                  "type" : "array"
               },
               "description" : {
                  "description" : "Description of the outer packaging/overpack.\n",
                  "example" : "Drum, steel",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "imoPackagingCode" : {
                  "description" : "The code of the packaging as per IMO.\n\n**Condition:** only applicable to dangerous goods if specified in the [IMO IMDG code](https://www.imo.org/en/publications/Pages/IMDG%20Code.aspx). If not available, the `packageCode` as per UN recommendation 21 should be used.\n",
                  "example" : "1A2",
                  "maxLength" : 5,
                  "minLength" : 1,
                  "pattern" : "^[A-Z0-9]{1,5}$",
                  "type" : "string"
               },
               "numberOfPackages" : {
                  "description" : "Specifies the number of outer packagings/overpacks associated with this `Cargo Item`.\n",
                  "example" : 18,
                  "format" : "int32",
                  "maximum" : 99999999,
                  "minimum" : 1,
                  "type" : "integer"
               },
               "packageCode" : {
                  "description" : "A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation N°21](https://unece.org/trade/uncefact/cl-recommendations)\n\n**Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.\n",
                  "example" : "5H",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z0-9]{2}$",
                  "type" : "string"
               },
               "woodDeclaration" : {
                  "description" : "Property to clearly indicate if the products, packaging and any other items are made of wood. Possible values include:\n- `NOT_APPLICABLE` (if no wood or any other wood product such as packaging and supports are being shipped)\n- `NOT_TREATED_AND_NOT_CERTIFIED` (if the wood or wooden materials have not been treated nor fumigated and do not include a certificate)\n- `PROCESSED` (if the wood or wooden materials are entirely made of processed wood, such as plywood, particle board, sliver plates of wood and wood laminate sheets produced using glue, heat, pressure or a combination of these)\n- `TREATED_AND_CERTIFIED` (if the wood or wooden materials have been treated and/or fumigated and include a certificate)\n",
                  "example" : "TREATED_AND_CERTIFIED",
                  "maxLength" : 30,
                  "type" : "string"
               }
            },
            "required" : [
               "description",
               "numberOfPackages"
            ],
            "title" : "Outer Packaging",
            "type" : "object"
         },
         "OuterPackagingShipper" : {
            "description" : "Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.\n\n**Condition:** Mandatory for non-dangerous goods cargo.\n",
            "properties" : {
               "description" : {
                  "description" : "Description of the outer packaging/overpack.\n",
                  "example" : "Drum, steel",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "numberOfPackages" : {
                  "description" : "Specifies the number of outer packagings/overpacks associated with this `Cargo Item`.\n",
                  "example" : 18,
                  "format" : "int32",
                  "maximum" : 99999999,
                  "minimum" : 1,
                  "type" : "integer"
               },
               "packageCode" : {
                  "description" : "A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation N°21](https://unece.org/trade/uncefact/cl-recommendations)\n\n**Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.\n",
                  "example" : "5H",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z0-9]{2}$",
                  "type" : "string"
               },
               "woodDeclaration" : {
                  "description" : "Property to clearly indicate if the products, packaging and any other items are made of wood. Possible values include:\n- `NOT_APPLICABLE` (if no wood or any other wood product such as packaging and supports are being shipped)\n- `NOT_TREATED_AND_NOT_CERTIFIED` (if the wood or wooden materials have not been treated nor fumigated and do not include a certificate)\n- `PROCESSED` (if the wood or wooden materials are entirely made of processed wood, such as plywood, particle board, sliver plates of wood and wood laminate sheets produced using glue, heat, pressure or a combination of these)\n- `TREATED_AND_CERTIFIED` (if the wood or wooden materials have been treated and/or fumigated and include a certificate)\n",
                  "example" : "TREATED_AND_CERTIFIED",
                  "maxLength" : 30,
                  "type" : "string"
               }
            },
            "required" : [
               "description",
               "numberOfPackages"
            ],
            "title" : "Outer Packaging (Shipper)",
            "type" : "object"
         },
         "Party" : {
            "description" : "Refers to a company or a legal entity.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "Asseco Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "reference" : {
                  "description" : "A reference linked to the `Party`.\n",
                  "example" : "HHL007",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Party",
            "type" : "object"
         },
         "PartyAddress" : {
            "description" : "An object for storing address related information\n",
            "properties" : {
               "POBox" : {
                  "description" : "A numbered box at a post office where a person or business can have mail or parcels delivered.",
                  "example" : "123",
                  "maxLength" : 20,
                  "type" : "string"
               },
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the carrier booking office is located. The pattern used must be\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "city" : {
                  "description" : "The city name of the party’s address.\n",
                  "example" : "Amsterdam",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "countryCode" : {
                  "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "example" : "NL",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z]{2}$",
                  "type" : "string"
               },
               "floor" : {
                  "description" : "The floor of the party’s street number.\n",
                  "example" : "2nd",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "postCode" : {
                  "description" : "The post code of the party’s address.",
                  "example" : "1047 HM",
                  "maxLength" : 10,
                  "type" : "string"
               },
               "stateRegion" : {
                  "description" : "The state/region of the party’s address.",
                  "example" : "North Holland",
                  "maxLength" : 65,
                  "type" : "string"
               },
               "street" : {
                  "description" : "The name of the street of the party’s address.",
                  "example" : "Ruijggoordweg",
                  "maxLength" : 70,
                  "type" : "string"
               },
               "streetNumber" : {
                  "description" : "The number of the street of the party’s address.",
                  "example" : "100",
                  "maxLength" : 50,
                  "type" : "string"
               }
            },
            "required" : [
               "city",
               "countryCode",
               "street"
            ],
            "title" : "Party Address",
            "type" : "object"
         },
         "PartyContactDetail" : {
            "anyOf" : [
               {
                  "description" : "`Phone` is mandatory to provide\n",
                  "properties" : {
                     "phone" : {
                        "description" : "Phone number for the contact. Phone **MUST** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).\n",
                        "example" : "+45 70262970",
                        "maxLength" : 30,
                        "pattern" : "^\\S(?:.*\\S)?$",
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "phone"
                  ],
                  "title" : "Phone required",
                  "type" : "object"
               },
               {
                  "description" : "`Email` is mandatory to provide\n",
                  "properties" : {
                     "email" : {
                        "description" : "`E-mail` address to be used\n",
                        "example" : "info@dcsa.org",
                        "maxLength" : 100,
                        "pattern" : "^.+@\\S+$",
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "email"
                  ],
                  "title" : "Email required",
                  "type" : "object"
               }
            ],
            "description" : "The contact details of the person to contact. It is mandatory to provide either `phone` and/or `email` along with the `name`.\n",
            "example" : {
               "name" : "Henrik",
               "phone" : "+45 51801234"
            },
            "properties" : {
               "name" : {
                  "description" : "Name of the contact\n",
                  "example" : "Henrik",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "name"
            ],
            "title" : "Party Contact Detail",
            "type" : "object"
         },
         "PlaceOfAcceptance" : {
            "description" : "An object to capture `Place of Acceptance` location specified as: identification of the seaport, freight terminal or other place at which the goods are taken over from the shipper by the Ocean Transport Intermediary (OTI) issuing the `House Bill of Lading`.\n\n**Condition:** Mandatory if different from `Place of Receipt` at the `Master Transport Document` level.\n\nThe location can be specified in **any** of the following ways: `UN Location Code`, `Facility`, an `Address` or a `GeoCoordinate`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.\n",
            "example" : {
               "UNLocationCode" : "DEHAM",
               "locationName" : "Hamburg"
            },
            "properties" : {
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "address" : {
                  "$ref" : "#/components/schemas/Address"
               },
               "facility" : {
                  "$ref" : "#/components/schemas/Facility"
               },
               "geoCoordinate" : {
                  "$ref" : "#/components/schemas/GeoCoordinate"
               },
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Place of Acceptance",
            "type" : "object"
         },
         "PlaceOfDelivery" : {
            "description" : "An object to capture `Place of Delivery` location specified as: the location where the cargo is handed over to the consignee, or his agent, by the shipping line and where responsibility of the shipping line ceases.\n\n**Condition:** Only when onward transport is done by the carrier\n\nThe location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.\n",
            "example" : {
               "UNLocationCode" : "DEHAM",
               "locationName" : "Hamburg"
            },
            "properties" : {
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "address" : {
                  "$ref" : "#/components/schemas/Address"
               },
               "facility" : {
                  "$ref" : "#/components/schemas/Facility"
               },
               "geoCoordinate" : {
                  "$ref" : "#/components/schemas/GeoCoordinate"
               },
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Place of Delivery",
            "type" : "object"
         },
         "PlaceOfFinalDelivery" : {
            "description" : "An object to capture `Place of Final Delivery` location specified as: Identification of the seaport, freight terminal or other place at which the goods are handed over from the `Ocean Transport Intermediary` (OTI) issuing the `House Bill of Lading` to the `Consignee`.\n\n**Condition:** Mandatory if different from `Place of Delivery` at the `Master Transport Document` level. (**Note:** in case of carrier haulage this will be the same as the `Place of Delivery`)\n\nThe location can be specified in **any** of the following ways: `UN Location Code`, `Facility`, an `Address` or a `GeoCoordinate`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.\n",
            "example" : {
               "UNLocationCode" : "DEHAM",
               "locationName" : "Hamburg"
            },
            "properties" : {
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "address" : {
                  "$ref" : "#/components/schemas/Address"
               },
               "facility" : {
                  "$ref" : "#/components/schemas/Facility"
               },
               "geoCoordinate" : {
                  "$ref" : "#/components/schemas/GeoCoordinate"
               },
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Place of Final Delivery",
            "type" : "object"
         },
         "PlaceOfIssue" : {
            "description" : "An object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified either as a `UN Location Code` or as a `CountryCode`.\n",
            "oneOf" : [
               {
                  "properties" : {
                     "UNLocationCode" : {
                        "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
                        "example" : "NLAMS",
                        "maxLength" : 5,
                        "minLength" : 5,
                        "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "UNLocationCode"
                  ],
                  "title" : "UN Location Code",
                  "type" : "object"
               },
               {
                  "properties" : {
                     "countryCode" : {
                        "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                        "example" : "NL",
                        "maxLength" : 2,
                        "minLength" : 2,
                        "pattern" : "^[A-Z]{2}$",
                        "type" : "string"
                     }
                  },
                  "required" : [
                     "countryCode"
                  ],
                  "title" : "Country Code",
                  "type" : "object"
               }
            ],
            "properties" : {
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Place of Issue",
            "type" : "object"
         },
         "PlaceOfReceipt" : {
            "description" : "An object to capture `Place of Receipt` location specified as: the location where the cargo is handed over by the shipper, or his agent, to the shipping line. This indicates the point at which the shipping line takes on responsibility for carriage of the container.\n\n**Condition:** Only when pre-carriage is done by the carrier.\n\nThe location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.\n",
            "example" : {
               "UNLocationCode" : "DEHAM",
               "locationName" : "Hamburg"
            },
            "properties" : {
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "address" : {
                  "$ref" : "#/components/schemas/Address"
               },
               "facility" : {
                  "$ref" : "#/components/schemas/Facility"
               },
               "geoCoordinate" : {
                  "$ref" : "#/components/schemas/GeoCoordinate"
               },
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Place of Receipt",
            "type" : "object"
         },
         "PortOfDischarge" : {
            "description" : "An object to capture `Port of Discharge` location specified as: the location where the cargo is discharged from the last sea-going vessel.\n\nThe location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.\n",
            "example" : {
               "UNLocationCode" : "DEHAM",
               "locationName" : "Hamburg"
            },
            "properties" : {
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "city" : {
                  "$ref" : "#/components/schemas/City"
               },
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Port of Discharge",
            "type" : "object"
         },
         "PortOfLoading" : {
            "description" : "An object to capture `Port of Loading` location specified as: the location where the cargo is loaded onto a first sea-going vessel for water transportation.\n\nThe location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.\n",
            "example" : {
               "UNLocationCode" : "DEHAM",
               "locationName" : "Hamburg"
            },
            "properties" : {
               "UNLocationCode" : {
                  "description" : "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
                  "example" : "NLAMS",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^[A-Z]{2}[A-Z2-9]{3}$",
                  "type" : "string"
               },
               "city" : {
                  "$ref" : "#/components/schemas/City"
               },
               "locationName" : {
                  "description" : "The name of the location.",
                  "example" : "Port of Amsterdam",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "title" : "Port of Loading",
            "type" : "object"
         },
         "Reference" : {
            "description" : "References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\n",
            "properties" : {
               "type" : {
                  "description" : "The reference type codes defined by DCSA. Possible values are:\n- `CR` (Customer’s Reference)\n- `AKG` (Vehicle Identification Number)\n",
                  "example" : "CR",
                  "maxLength" : 3,
                  "type" : "string"
               },
               "value" : {
                  "description" : "The value of the reference. \n",
                  "example" : "HHL00103004",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "type",
               "value"
            ],
            "title" : "Reference",
            "type" : "object"
         },
         "ReferenceConsignmentItem" : {
            "description" : "References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\n",
            "properties" : {
               "type" : {
                  "description" : "The reference type codes defined by DCSA. Possible values are:\n- `CR` (Customer’s Reference)\n- `AKG` (Vehicle Identification Number)\n- `SPO` (Shipper's Purchase Order)\n- `CPO` (Consignee's Purchase Order)\n",
                  "example" : "CR",
                  "maxLength" : 3,
                  "type" : "string"
               },
               "values" : {
                  "description" : "List of `referenceValues` for a given `referenceType`.\n",
                  "items" : {
                     "description" : "The value of the reference. \n",
                     "example" : "HHL00103004",
                     "maxLength" : 35,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "minItems" : 1,
                  "type" : "array"
               }
            },
            "required" : [
               "type",
               "values"
            ],
            "title" : "Reference (Consignment Item)",
            "type" : "object"
         },
         "RequiredEquipment" : {
            "description" : "Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.\n",
            "properties" : {
               "ISOEquipmentCode" : {
                  "description" : "Unique code for the different equipment size and type used to transport commodities. The code can refer to either the ISO size type (e.g. 22G1) or the ISO type group (e.g. 22GP) following the [ISO 6346](https://www.iso.org/standard/83558.html) standard.\n",
                  "example" : "22G1",
                  "maxLength" : 4,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "equipmentReference" : {
                  "description" : "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
                  "example" : "APZU4812090",
                  "maxLength" : 11,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "tareWeight" : {
                  "$ref" : "#/components/schemas/TareWeight"
               }
            },
            "required" : [
               "ISOEquipmentCode",
               "equipmentReference",
               "tareWeight"
            ],
            "title" : "Equipment (Required Properties)",
            "type" : "object"
         },
         "Seal" : {
            "description" : "Addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This `Seal` is meant to stay on until the shipment equipment reaches its final destination.\n",
            "properties" : {
               "number" : {
                  "description" : "Identifies a seal affixed to the container.",
                  "example" : "VET123",
                  "maxLength" : 15,
                  "type" : "string"
               },
               "source" : {
                  "description" : "The source of the seal, namely who has affixed the seal.\n- `CAR` (Carrier)\n- `SHI` (Shipper)\n- `VET` (Veterinary)\n- `CUS` (Customs)\n\n**Condition:** Seal source may be required depending on the type of commodity being shipped.\n",
                  "enum" : [
                     "CAR",
                     "SHI",
                     "VET",
                     "CUS"
                  ],
                  "example" : "CUS",
                  "type" : "string"
               }
            },
            "required" : [
               "number"
            ],
            "title" : "Seal",
            "type" : "object"
         },
         "Seller" : {
            "description" : "The seller is the last known entity by whom the goods are sold or agreed to be sold to the buyer. If the goods are to be imported otherwise than in pursuance of a purchase, the details of the owner of the goods shall be provided.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               },
               "typeOfPerson" : {
                  "description" : "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
                  "example" : "NATURAL_PERSON",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Seller",
            "type" : "object"
         },
         "Shipper" : {
            "description" : "The party by whom or in whose name or on whose behalf a contract of carriage of goods by sea has been concluded with a carrier, or the party by whom or in whose name, or on whose behalf, the goods are actually delivered to the carrier in relation to the contract of carriage by sea.\n\n**Condition:** Either the `address` or the `displayedAddress` must be included in the `Transport Document`.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "displayedAddress" : {
                  "description" : "The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.\n\n**Conditions:** If provided:\n  - the displayed address must be included in the `Transport Document`.\n  - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters\n  - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters\n  - the order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A single address line\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 6,
                  "type" : "array"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "purchaseOrderReferences" : {
                  "description" : "A list of `Purchase Order Reference`s linked to the `Shipper`.\n",
                  "items" : {
                     "description" : "A purchase order reference linked to the `Shipper`.\n",
                     "example" : "HHL007",
                     "maxLength" : 35,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "reference" : {
                  "description" : "A reference linked to the `Shipper`.\n",
                  "example" : "HHL007",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               },
               "typeOfPerson" : {
                  "description" : "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
                  "example" : "NATURAL_PERSON",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Shipper",
            "type" : "object"
         },
         "ShipperHBL" : {
            "description" : "The `Shipper` on the `House Bill of Lading`.\n",
            "properties" : {
               "address" : {
                  "$ref" : "#/components/schemas/PartyAddress"
               },
               "identifyingCodes" : {
                  "items" : {
                     "$ref" : "#/components/schemas/IdentifyingCode"
                  },
                  "type" : "array"
               },
               "partyContactDetails" : {
                  "description" : "A list of contact details\n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "type" : "array"
               },
               "partyName" : {
                  "description" : "Name of the party.\n",
                  "example" : "IKEA Denmark",
                  "maxLength" : 70,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "taxLegalReferences" : {
                  "description" : "A list of `Tax References` for a `Party`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/TaxLegalReference"
                  },
                  "type" : "array"
               },
               "typeOfPerson" : {
                  "description" : "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
                  "example" : "NATURAL_PERSON",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "partyName"
            ],
            "title" : "Shipper",
            "type" : "object"
         },
         "ShippingInstructions" : {
            "description" : "The `Shipping Instructions` as provided by the Shipper.\n",
            "properties" : {
               "advanceManifestFilings" : {
                  "description" : "A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing\n",
                  "items" : {
                     "$ref" : "#/components/schemas/AdvanceManifestFiling"
                  },
                  "type" : "array"
               },
               "consignmentItems" : {
                  "description" : "A list of `ConsignmentItems`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/ConsignmentItemShipper"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "destinationChargesPaymentTerm" : {
                  "$ref" : "#/components/schemas/DestinationChargesPaymentTerm"
               },
               "displayedNameForPlaceOfDelivery" : {
                  "description" : "The name to be used in order to specify how the `Place of Delivery` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPlaceOfReceipt" : {
                  "description" : "The name to be used in order to specify how the `Place of Receipt` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPortOfDischarge" : {
                  "description" : "The name to be used in order to specify how the `Port of Discharge` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPortOfLoad" : {
                  "description" : "The name to be used in order to specify how the `Port of Load` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "documentParties" : {
                  "$ref" : "#/components/schemas/DocumentPartiesShippingInstructions"
               },
               "feedbacks" : {
                  "description" : "Feedback that can be provided includes, but is not limited to:\n- unsupported properties\n- changed values\n- removed properties\n- general information\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Feedback"
                  },
                  "type" : "array"
               },
               "freightPaymentTermCode" : {
                  "description" : "An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
                  "enum" : [
                     "PRE",
                     "COL"
                  ],
                  "example" : "PRE",
                  "type" : "string"
               },
               "houseBillOfLadings" : {
                  "description" : "A list of `House Bill of Ladings` specified by the Shipper.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/HouseBillOfLading"
                  },
                  "type" : "array"
               },
               "invoicePayableAt" : {
                  "$ref" : "#/components/schemas/InvoicePayableAtShippingInstructions"
               },
               "isCarriersAgentAtDestinationRequired" : {
                  "description" : "Indicates whether the Carrier's agent at destination name, address and contact details should be included in the `Transport Document`.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isElectronic" : {
                  "description" : "An indicator whether the transport document is electronically transferred.\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isHBLIssued" : {
                  "description" : "Indicates whether one or more `House Bill of Lading(s)` have been issued. This property is used by the carrier to identify which `ENS` filing type must be submitted (`F10` or `F11`, `F12` or `F13`) to comply with `ICS2` customs regulations\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isShippedOnBoardType" : {
                  "description" : "Specifies whether the Transport Document is a received for shipment, or shipped on board.\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isToOrder" : {
                  "description" : "Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).\n\n`isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "methodOfPayment" : {
                  "description" : "Method used for the payment of prepaid charges. It can be one of the following values: \n- `A` (Cash)\n- `B` (Credit Card)\n- `C` (Cheque)\n- `D` (Other)\n- `H` (Electronic funds transfer)\n- `Y` (Account holder with carrier)\n- `Z` (Not prepaid)\n",
                  "example" : "A",
                  "maxLength" : 1,
                  "type" : "string"
               },
               "numberOfCopiesWithCharges" : {
                  "description" : "The requested number of copies of the `Transport Document` to be issued by the carrier including charges.\n\n**Conditions:** The following table defines the conditions for the `numberOfCopiesWithCharges` property:\n| Transport Document Type Code | Is Electronic | Meaning |\n|-------|:-------:|-------|\n|`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier with charges|\n|`BOL`|`true`|Not applicable, there are no copies|\n|`SWB`|`false`|Indicates that charges should be included in the `SWB` (pdf or other formats)|\n|`SWB`|`true`|Indicates that charges should be included in the electronic `SWB`|\n",
                  "example" : 2,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfCopiesWithoutCharges" : {
                  "description" : "The requested number of copies of the `Transport Document` to be issued by the carrier **NOT** including charges.\n\n**Conditions:** The following table defines the conditions for the `numberOfCopiesWithoutCharges` property:\n| Transport Document Type Code | Is Electronic | Meaning |\n|-------|:-------:|-------|\n|`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier without charges|\n|`BOL`|`true`|Not applicable, there are no copies|\n|`SWB`|`false`|Indicates that charges should NOT be included in the `SWB` (pdf or other formats)|\n|`SWB`|`true`|Indicates that charges NOT should be included in the electronic `SWB`|\n",
                  "example" : 2,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfOriginalsWithCharges" : {
                  "description" : "Number of originals of the Bill of Lading that has been requested by the customer with charges.\n        \n**Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)\n",
                  "example" : 1,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfOriginalsWithoutCharges" : {
                  "description" : "Number of originals of the Bill of Lading that has been requested by the customer without charges.\n        \n**Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)\n",
                  "example" : 1,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "originChargesPaymentTerm" : {
                  "$ref" : "#/components/schemas/OriginChargesPaymentTerm"
               },
               "partyContactDetails" : {
                  "description" : "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "placeOfIssue" : {
                  "$ref" : "#/components/schemas/PlaceOfIssue"
               },
               "references" : {
                  "description" : "A list of `References`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Reference"
                  },
                  "type" : "array"
               },
               "requestedCarrierCertificates" : {
                  "description" : "Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack\n",
                  "items" : {
                     "description" : "Name of the certificate. Detailed information about carrier certificates can be found [here](https://dcsa.org/wp-content/uploads/2023/12/28-12-2023_Carrier-Certificates-shipment-voyage-particulars-and-vessel-particulars.pdf). Possible values are:\n- `SHIPMENT_VOYAGE_PARTICULARS_1` (Shipment-Voyage Particulars 1)\n- `SHIPMENT_VOYAGE_PARTICULARS_2` (Shipment-Voyage Particulars 2)\n- `SHIPMENT_VOYAGE_PARTICULARS_3` (Shipment-Voyage Particulars 3)\n- `SHIPMENT_VOYAGE_PARTICULARS_4` (Shipment-Voyage Particulars 4)\n- `SHIPMENT_VOYAGE_PARTICULARS_5` (Shipment-Voyage Particulars 5)\n- `SHIPMENT_VOYAGE_PARTICULARS_6` (Shipment-Voyage Particulars 6)\n- `SHIPMENT_VOYAGE_PARTICULARS_7` (Shipment-Voyage Particulars 7)\n- `VESSEL_PARTICULARS_1` (Vessel Particulars 1)\n- `VESSEL_PARTICULARS_2` (Vessel Particulars 2)\n- `VESSEL_PARTICULARS_3` (Vessel Particulars 3)\n- `VESSEL_PARTICULARS_4` (Vessel Particulars 4)\n- `VESSEL_PARTICULARS_5` (Vessel Particulars 5)\n- `VESSEL_PARTICULARS_6` (Vessel Particulars 6)\n- `VESSEL_PARTICULARS_7` (Vessel Particulars 7)\n- `VESSEL_PARTICULARS_8` (Vessel Particulars 8)\n- `VESSEL_PARTICULARS_9` (Vessel Particulars 9)\n- `VESSEL_PARTICULARS_10` (Vessel Particulars 10)\n- `VESSEL_PARTICULARS_11` (Vessel Particulars 11)\n- `VESSEL_PARTICULARS_12` (Vessel Particulars 12)\n- `VESSEL_PARTICULARS_13` (Vessel Particulars 13)\n- `VESSEL_PARTICULARS_14` (Vessel Particulars 14)\n- `VESSEL_PARTICULARS_15` (Vessel Particulars 15)\n- `VESSEL_PARTICULARS_16` (Vessel Particulars 16)\n- `VESSEL_PARTICULARS_17` (Vessel Particulars 17)\n- `VESSEL_PARTICULARS_18` (Vessel Particulars 18)\n",
                     "example" : "VESSEL_PARTICULARS_1",
                     "maxLength" : 100,
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "requestedCarrierClauses" : {
                  "description" : "Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`\n",
                  "items" : {
                     "description" : "A clause to request from the carrier. Detailed information about the carrier clauses can be found [here](https://dcsa.org/wp-content/uploads/2023/12/202312-Standardised-Clauses-BL.pdf). Possible values are:\n- `CARGO_CARGOSPECIFICS` (Cargo/Cargo specifics)\n- `VESSELCONVEYANCE_COUNTRYSPECIFIC` (Vessel conveyance/Country Specific)\n- `CARGO_RETURNOFEMPTYCONTAINER` (Cargo/Return of Empty Container)\n- `CARGO_CARGOVALUE` (Cargo/Cargo value)\n- `CARGO_REEFERTEMPERATURE` (Cargo/Reefer temperature)\n- `CARGO_CONFLICTINGTEMPERATURES_MIXEDLOADS` (Cargo/Conflicting temperatures/Mixed loads)\n",
                     "example" : "CARGO_CARGOSPECIFICS",
                     "maxLength" : 100,
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "routingOfConsignmentCountries" : {
                  "description" : "A list of countries the goods will be routed through from origin to destination defined by the 2 characters country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                     "example" : "NL",
                     "maxLength" : 2,
                     "minLength" : 2,
                     "pattern" : "^[A-Z]{2}$",
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "shippingInstructionsReference" : {
                  "description" : "The identifier for a `Shipping Instructions` provided by the carrier for system purposes.\n",
                  "example" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "shippingInstructionsStatus" : {
                  "description" : "The status of the `Shipping Instructions`. Possible values are:\n- `RECEIVED` (Shipping Instructions has been received)\n- `PENDING_UPDATE` (An update is required to the Shipping Instructions)\n- `COMPLETED` (The Shipping Instructions can no longer be modified - the related Transport Document has been surrendered for delivery)\n",
                  "example" : "RECEIVED",
                  "maxLength" : 50,
                  "type" : "string"
               },
               "transportDocumentReference" : {
                  "description" : "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
                  "example" : "HHL71800000",
                  "maxLength" : 20,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "transportDocumentTypeCode" : {
                  "description" : "Specifies the type of the transport document\n- `BOL` (Bill of Lading)\n- `SWB` (Sea Waybill)\n",
                  "enum" : [
                     "BOL",
                     "SWB"
                  ],
                  "example" : "SWB",
                  "type" : "string"
               },
               "updatedShippingInstructionsStatus" : {
                  "description" : "The status of the latest update to the `Shipping Instructions`. If no update has been requested - then this field is empty. Possible values are:\n- `UPDATE_RECEIVED` (An update to a Shipping Instructions is waiting to be processed)\n- `UPDATE_CONFIRMED` (An update to a Shipping Instructions has been confirmed)\n- `UPDATE_CANCELLED` (An update to a Shipping Instructions is discontinued by consumer)\n- `UPDATE_DECLINED` (An update to a Shipping Instructions is discontinued by provider)\n",
                  "example" : "UPDATE_RECEIVED",
                  "maxLength" : 50,
                  "type" : "string"
               },
               "utilizedTransportEquipments" : {
                  "description" : "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/UtilizedTransportEquipmentShipper"
                  },
                  "minItems" : 1,
                  "type" : "array"
               }
            },
            "required" : [
               "consignmentItems",
               "documentParties",
               "freightPaymentTermCode",
               "isElectronic",
               "isShippedOnBoardType",
               "isToOrder",
               "partyContactDetails",
               "shippingInstructionsStatus",
               "transportDocumentTypeCode",
               "utilizedTransportEquipments"
            ],
            "title" : "Shipping Instructions",
            "type" : "object"
         },
         "ShippingInstructionsData" : {
            "description" : "`Shipping Instructions` specific properties for the `Notification`\n",
            "properties" : {
               "feedbacks" : {
                  "description" : "Feedback that can be provided includes, but is not limited to:\n- unsupported properties\n- changed values\n- removed properties\n- general information\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Feedback"
                  },
                  "type" : "array"
               },
               "shippingInstructions" : {
                  "$ref" : "#/components/schemas/ShippingInstructionsFullNotification"
               },
               "shippingInstructionsReference" : {
                  "description" : "The identifier for a `Shipping Instructions` provided by the carrier for system purposes.\n\n**Condition:** `shippingInstructionsReference` and/or `transportDocumentReference` is required to provide\n",
                  "example" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "shippingInstructionsStatus" : {
                  "description" : "The status of the `Shipping Instructions`. Possible values are:\n\n- `RECEIVED` (Shipping Instructions has been received)\n- `PENDING_UPDATE` (An update is required to the Shipping Instructions)\n- `COMPLETED` (The Shipping Instructions can no longer be modified - the related Transport Document has been surrendered for delivery)\n",
                  "example" : "RECEIVED",
                  "maxLength" : 50,
                  "type" : "string"
               },
               "transportDocumentReference" : {
                  "description" : "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n\n**Condition:** `shippingInstructionsReference` and/or `transportDocumentReference` is required to provide\n",
                  "example" : "HHL71800000",
                  "maxLength" : 20,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "updatedShippingInstructions" : {
                  "$ref" : "#/components/schemas/UpdatedShippingInstructionsFullNotification"
               },
               "updatedShippingInstructionsStatus" : {
                  "description" : "The status of latest update to the `Shipping Instructions`. If no update has been requested - then this property is empty. Possible values are:\n\n- `UPDATE_RECEIVED` (An update to a Shipping Instructions has been received and is awaiting to be processed)\n- `UPDATE_CONFIRMED` (Update is confirmed)\n- `UPDATE_CANCELLED` (An update to a Shipping Instructions is discontinued by consumer)\n- `UPDATE_DECLINED` (An update to a Shipping Instructions is discontinued by provider)\n",
                  "example" : "UPDATE_RECEIVED",
                  "maxLength" : 50,
                  "type" : "string"
               }
            },
            "required" : [
               "shippingInstructionsStatus"
            ],
            "title" : "Data",
            "type" : "object"
         },
         "ShippingInstructionsFullNotification" : {
            "allOf" : [
               {
                  "$ref" : "#/components/schemas/ShippingInstructions"
               }
            ],
            "description" : "This property contains the shippingInstructions in case the subscriber is subscribing to the `Full State Transfer` of the Shipping Instructions.\n\nIn case the subscriber does not subscribe to the `Full State Transfer` of the Shipping Instructions then the content in this property can be ignored.\n",
            "title" : "Shipping Instructions",
            "type" : "object"
         },
         "ShippingInstructionsNotification" : {
            "description" : "`CloudEvent` specific properties for the `Notification`.\n",
            "properties" : {
               "data" : {
                  "$ref" : "#/components/schemas/ShippingInstructionsData"
               },
               "datacontenttype" : {
                  "description" : "Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the [JSON envelope](formats/json-format.md#3-envelope) format might carry an XML payload in `data`, and the consumer is informed by this attribute being set to \"application/xml\". The rules for how `data` content is rendered for different `datacontenttype` values are defined in the event format specifications; for example, the JSON event format defines the relationship in [section 3.1](formats/json-format.md#31-handling-of-data).\n\nFor some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol.\n\nIn some event formats the `datacontenttype` attribute MAY be omitted. For example, if a JSON format event has no `datacontenttype` attribute, then it is implied that the `data` is a JSON value conforming to the \"application/json\" media type. In other words: a JSON-format event with no `datacontenttype` is exactly equivalent to one with `datacontenttype=\"application/json\"`.\n\nWhen translating an event message with no `datacontenttype` attribute to a different format or protocol binding, the target `datacontenttype` SHOULD be set explicitly to the implied `datacontenttype` of the source.\n",
                  "enum" : [
                     "application/json"
                  ],
                  "example" : "application/json",
                  "type" : "string"
               },
               "id" : {
                  "description" : "Identifies the event. Producers MUST ensure that `source` + `id` is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same `id`. Consumers MAY assume that Events with identical `source` and `id` are duplicates.\n",
                  "example" : "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "source" : {
                  "description" : "Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.\n\nProducers MUST ensure that `source` + `id` is unique for each distinct event.\n\nAn application MAY assign a unique `source` to each distinct producer, which makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique `source` identifiers.\n\nA source MAY include more than one producer. In that case the producers MUST collaborate to ensure that `source` + `id` is unique for each distinct event.\n",
                  "example" : "https://member.com/",
                  "maxLength" : 4096,
                  "type" : "string"
               },
               "specversion" : {
                  "description" : "The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.\n\nCurrently, this attribute will only have the 'major' and 'minor' version numbers included in it. This allows for 'patch' changes to the specification to be made without changing this property's value in the serialization. Note: for 'release candidate' releases a suffix might be used for testing purposes.\n",
                  "enum" : [
                     "1.0"
                  ],
                  "example" : "1.0",
                  "type" : "string"
               },
               "subscriptionReference" : {
                  "description" : "The reference of the subscription that has triggered this event\n",
                  "example" : "30675492-50ff-4e17-a7df-7a487a8ad343",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "time" : {
                  "description" : "Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same `source` MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.\n",
                  "example" : "2018-04-05T17:31:00Z",
                  "format" : "date-time",
                  "type" : "string"
               },
               "type" : {
                  "description" : "This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type - see [Versioning of CloudEvents in the Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents) for more information.\n",
                  "enum" : [
                     "org.dcsa.shipping-instructions.v3"
                  ],
                  "example" : "org.dcsa.shipping-instructions.v3",
                  "type" : "string"
               }
            },
            "required" : [
               "data",
               "datacontenttype",
               "id",
               "source",
               "specversion",
               "subscriptionReference",
               "time",
               "type"
            ],
            "title" : "Shipping Instructions Notification",
            "type" : "object"
         },
         "TareWeight" : {
            "description" : "The weight of an empty container (gross container weight).\n",
            "properties" : {
               "unit" : {
                  "description" : "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
                  "enum" : [
                     "KGM",
                     "LBR"
                  ],
                  "example" : "KGM",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The weight of an empty container (gross container weight).\n",
                  "example" : 4800,
                  "exclusiveMinimum" : true,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               }
            },
            "required" : [
               "unit",
               "value"
            ],
            "title" : "Tare Weight",
            "type" : "object"
         },
         "TaxLegalReference" : {
            "description" : "Reference that uniquely identifies a party for tax and/or legal purposes in accordance with the relevant jurisdiction.\n\nA small list of **potential** examples:\n\n| Type  | Country | Description |\n|-------|:-------:|-------------|\n|PAN|IN|Goods and Services Tax Identification Number in India|\n|GSTIN|IN|Goods and Services Tax Identification Number in India|\n|IEC|IN|Importer-Exported Code in India|\n|RUC|EC|Registro Único del Contribuyente in Ecuador|\n|RUC|PE|Registro Único del Contribuyente in Peru|\n|NIF|MG|Numéro d'Identification Fiscal in Madagascar|\n|NIF|DZ|Numéro d'Identification Fiscal in Algeria|\n",
            "properties" : {
               "countryCode" : {
                  "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                  "example" : "IN",
                  "maxLength" : 2,
                  "minLength" : 2,
                  "pattern" : "^[A-Z]{2}$",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The reference type code as defined by the relevant tax and/or legal authority.\n",
                  "example" : "PAN",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The value of the `taxLegalReference`\n",
                  "example" : "AAAAA0000A",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "countryCode",
               "type",
               "value"
            ],
            "title" : "Tax & Legal Reference",
            "type" : "object"
         },
         "TransportDocument" : {
            "description" : "The document that governs the terms of carriage between shipper and carrier for maritime transportation. Two distinct types of transport documents exist:\n- Bill of Lading\n- Sea Waybill. \n",
            "properties" : {
               "cargoMovementTypeAtDestination" : {
                  "description" : "Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:\n\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
                  "example" : "FCL",
                  "maxLength" : 3,
                  "type" : "string"
               },
               "cargoMovementTypeAtOrigin" : {
                  "description" : "Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:\n\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
                  "example" : "FCL",
                  "maxLength" : 3,
                  "type" : "string"
               },
               "carrierClauses" : {
                  "description" : "Additional clauses for a specific shipment added by the carrier to the Bill of Lading, subject to local rules / guidelines or certain mandatory information required to be shared with the customer.\n",
                  "items" : {
                     "description" : "The content of the clause.\n",
                     "example" : "It is not allowed to...",
                     "maxLength" : 20000,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "carrierCode" : {
                  "description" : "The `SCAC` code (provided by [NMFTA](https://nmfta.org/scac/)) or `SMDG` code (provided by [SMDG](https://smdg.org/documents/smdg-code-lists/smdg-liner-code-list/)) of the issuing carrier of the `Transport Document`. `carrierCodeListProvider` defines which list the `carrierCode` is based upon.\n",
                  "example" : "MMCU",
                  "maxLength" : 4,
                  "pattern" : "^\\S+$",
                  "type" : "string"
               },
               "carrierCodeListProvider" : {
                  "description" : "The code list provider for the `carrierCode`. Possible values are:\n- `SMDG` (Ship Message Design Group)\n- `NMFTA` (National Motor Freight Traffic Association)\n",
                  "enum" : [
                     "SMDG",
                     "NMFTA"
                  ],
                  "example" : "NMFTA",
                  "type" : "string"
               },
               "charges" : {
                  "description" : "A list of `Charges`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Charge"
                  },
                  "type" : "array"
               },
               "consignmentItems" : {
                  "description" : "A list of `ConsignmentItems`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/ConsignmentItem"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "contractQuotationReference" : {
                  "description" : "Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference.\n",
                  "example" : "HHL1401",
                  "maxLength" : 35,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "declaredValue" : {
                  "description" : "The value of the cargo that the shipper declares in order to avoid the carrier's limitation of liability and \"Ad Valorem\" freight, i.e., freight which is calculated based on the value of the goods declared by the shipper.\n\n**Condition:** Included in the transport document upon customer request. If customers want the value to show, evidence is required, and customers need to approve additional insurance fee charge from the carrier (very exceptional).\n",
                  "example" : 1231.1,
                  "format" : "float",
                  "minimum" : 0,
                  "type" : "number"
               },
               "declaredValueCurrency" : {
                  "description" : "The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html).\n",
                  "example" : "DKK",
                  "maxLength" : 3,
                  "minLength" : 3,
                  "pattern" : "^[A-Z]{3}$",
                  "type" : "string"
               },
               "deliveryTypeAtDestination" : {
                  "description" : "Indicates the type of service offered at `Destination`. The options are:\n\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
                  "enum" : [
                     "CY",
                     "SD",
                     "CFS"
                  ],
                  "example" : "CY",
                  "maxLength" : 3,
                  "type" : "string"
               },
               "displayedNameForPlaceOfDelivery" : {
                  "description" : "The name to be used in order to specify how the `Place of Delivery` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPlaceOfReceipt" : {
                  "description" : "The name to be used in order to specify how the `Place of Receipt` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPortOfDischarge" : {
                  "description" : "The name to be used in order to specify how the `Port of Discharge` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPortOfLoad" : {
                  "description" : "The name to be used in order to specify how the `Port of Load` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedShippedOnBoardReceivedForShipment" : {
                  "description" : "The text to be displayed on the `Transport Document` as evidence that the goods have been received for shipment or shipped on board.\n",
                  "example" : "Received for Shipment CMA CGM CONCORDE 28-Jul-2022 CMA CGM Agences France SAS As agents for the Carrier",
                  "maxLength" : 250,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "documentParties" : {
                  "$ref" : "#/components/schemas/DocumentParties"
               },
               "freightPaymentTermCode" : {
                  "description" : "An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
                  "enum" : [
                     "PRE",
                     "COL"
                  ],
                  "example" : "PRE",
                  "type" : "string"
               },
               "invoicePayableAt" : {
                  "$ref" : "#/components/schemas/InvoicePayableAt"
               },
               "isElectronic" : {
                  "description" : "An indicator whether the transport document is electronically transferred.\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isShippedOnBoardType" : {
                  "description" : "Specifies whether the Transport Document is a received for shipment, or shipped on board.\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isToOrder" : {
                  "description" : "Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).\n\n`isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "issueDate" : {
                  "description" : "Local date when the transport document has been issued.\n\nCan be omitted on draft transport documents, but must be provided when the document has been issued.\n",
                  "example" : "2020-12-12",
                  "format" : "date",
                  "type" : "string"
               },
               "numberOfCopiesWithCharges" : {
                  "description" : "The requested number of copies of the `Transport Document` to be issued by the carrier including charges.\n\n**Conditions:** The following table defines the conditions for the `numberOfCopiesWithCharges` property:\n| Transport Document Type Code | Is Electronic | Meaning |\n|-------|:-------:|-------|\n|`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier with charges|\n|`BOL`|`true`|Not applicable, there are no copies|\n|`SWB`|`false`|Indicates that charges should be included in the `SWB` (pdf or other formats)|\n|`SWB`|`true`|Indicates that charges should be included in the electronic `SWB`|\n",
                  "example" : 2,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfCopiesWithoutCharges" : {
                  "description" : "The requested number of copies of the `Transport Document` to be issued by the carrier **NOT** including charges.\n\n**Conditions:** The following table defines the conditions for the `numberOfCopiesWithoutCharges` property:\n| Transport Document Type Code | Is Electronic | Meaning |\n|-------|:-------:|-------|\n|`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier without charges|\n|`BOL`|`true`|Not applicable, there are no copies|\n|`SWB`|`false`|Indicates that charges should NOT be included in the `SWB` (pdf or other formats)|\n|`SWB`|`true`|Indicates that charges NOT should be included in the electronic `SWB`|\n",
                  "example" : 2,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfOriginalsWithCharges" : {
                  "description" : "Number of originals of the Bill of Lading that has been requested by the customer with charges.\n        \n**Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)\n",
                  "example" : 1,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfOriginalsWithoutCharges" : {
                  "description" : "Number of originals of the Bill of Lading that has been requested by the customer without charges.\n        \n**Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)\n",
                  "example" : 1,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfRiderPages" : {
                  "description" : "The number of additional pages required to contain the goods description on a transport document. Only applicable for physical transport documents.\n",
                  "example" : 2,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "partyContactDetails" : {
                  "description" : "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "placeOfIssue" : {
                  "$ref" : "#/components/schemas/PlaceOfIssue"
               },
               "receiptTypeAtOrigin" : {
                  "description" : "Indicates the type of service offered at `Origin`. The options are:\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
                  "enum" : [
                     "CY",
                     "SD",
                     "CFS"
                  ],
                  "example" : "CY",
                  "maxLength" : 3,
                  "type" : "string"
               },
               "receivedForShipmentDate" : {
                  "description" : "Date when the last container linked to the transport document is physically in the terminal (customers cleared against the intended vessel).\n\nWhen provided on a transport document, the transportDocument is a `Received For Shipment` B/L.\n\nExactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.\n",
                  "example" : "2020-12-12",
                  "format" : "date",
                  "type" : "string"
               },
               "references" : {
                  "description" : "A list of `References`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Reference"
                  },
                  "type" : "array"
               },
               "routingOfConsignmentCountries" : {
                  "description" : "A list of countries the goods will be routed through from origin to destination defined by the 2 characters country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                     "example" : "NL",
                     "maxLength" : 2,
                     "minLength" : 2,
                     "pattern" : "^[A-Z]{2}$",
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "serviceContractReference" : {
                  "description" : "Reference number for agreement between shipper and carrier, which optionally includes a certain minimum quantity commitment (usually referred as “MQC”) of cargo that the shipper commits to over a fixed period, and the carrier commits to a certain rate or rate schedule.\n",
                  "example" : "HHL51800000",
                  "maxLength" : 30,
                  "type" : "string"
               },
               "shippedOnBoardDate" : {
                  "description" : "Date when the last container that is linked to the transport document is physically loaded onboard the vessel indicated on the transport document.\n\nWhen provided on a transport document, the transportDocument is a `Shipped On Board` B/L.\n\nExactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.\n",
                  "example" : "2020-12-12",
                  "format" : "date",
                  "type" : "string"
               },
               "shippingInstructionsReference" : {
                  "description" : "The identifier for a `Shipping Instructions` provided by the carrier for system purposes.\n",
                  "example" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "termsAndConditions" : {
                  "description" : "Carrier terms and conditions of transport.\n",
                  "example" : "Any reference in...",
                  "maxLength" : 50000,
                  "type" : "string"
               },
               "transportDocumentReference" : {
                  "description" : "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
                  "example" : "HHL71800000",
                  "maxLength" : 20,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "transportDocumentStatus" : {
                  "description" : "The status of the `Transport Document`. Possible values are:\n- DRAFT\n- APPROVED\n- ISSUED\n- PENDING_SURRENDER_FOR_AMENDMENT\n- SURRENDERED_FOR_AMENDMENT\n- PENDING_SURRENDER_FOR_DELIVERY\n- SURRENDERED_FOR_DELIVERY\n- VOIDED\n",
                  "example" : "DRAFT",
                  "maxLength" : 50,
                  "type" : "string"
               },
               "transportDocumentTypeCode" : {
                  "description" : "Specifies the type of the transport document\n- `BOL` (Bill of Lading)\n- `SWB` (Sea Waybill)\n",
                  "enum" : [
                     "BOL",
                     "SWB"
                  ],
                  "example" : "SWB",
                  "type" : "string"
               },
               "transports" : {
                  "$ref" : "#/components/schemas/Transports"
               },
               "utilizedTransportEquipments" : {
                  "description" : "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/UtilizedTransportEquipment"
                  },
                  "minItems" : 1,
                  "type" : "array"
               }
            },
            "required" : [
               "cargoMovementTypeAtDestination",
               "cargoMovementTypeAtOrigin",
               "carrierCode",
               "carrierCodeListProvider",
               "consignmentItems",
               "deliveryTypeAtDestination",
               "documentParties",
               "invoicePayableAt",
               "isElectronic",
               "isShippedOnBoardType",
               "isToOrder",
               "partyContactDetails",
               "receiptTypeAtOrigin",
               "termsAndConditions",
               "transportDocumentReference",
               "transportDocumentStatus",
               "transportDocumentTypeCode",
               "transports",
               "utilizedTransportEquipments"
            ],
            "title" : "Transport Document",
            "type" : "object"
         },
         "TransportDocumentData" : {
            "description" : "`Transport Document` specific properties for the `Notification`\n",
            "properties" : {
               "feedbacks" : {
                  "description" : "Feedback that can be provided includes, but is not limited to:\n- unsupported properties\n- changed values\n- removed properties\n- general information\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Feedback"
                  },
                  "type" : "array"
               },
               "shippingInstructionsReference" : {
                  "description" : "The identifier for a `Shipping Instructions` provided by the carrier for system purposes.\n",
                  "example" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "transportDocument" : {
                  "$ref" : "#/components/schemas/TransportDocumentFullNotification"
               },
               "transportDocumentReference" : {
                  "description" : "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
                  "example" : "HHL71800000",
                  "maxLength" : 20,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "transportDocumentStatus" : {
                  "description" : "The status of the `Transport Document`. Possible values are:\n\n- `DRAFT` (Transport Document is Drafted)\n- `APPROVED` (Transport Document has been Approved by consumer)\n- `ISSUED` (Transport Document has been Issued by provider)\n- `PENDING_SURRENDER_FOR_AMENDMENT` (Transport Document is Pending for Surrender for an Amendment)\n- `SURRENDER_FOR_AMENDMENT` (Transport Document Surrendered for an Amendment)\n- `VOID` (the Transport Document has been Voided)\n- `PENDING_SURRENDER_FOR_DELIVERY` (Transport Document pending surrender for Delivery)\n- `SURRENDER_FOR_DELIVERY` (Transport Document surrendered for Delivery)\n",
                  "example" : "DRAFT",
                  "maxLength" : 50,
                  "type" : "string"
               }
            },
            "required" : [
               "transportDocumentReference",
               "transportDocumentStatus"
            ],
            "title" : "Data",
            "type" : "object"
         },
         "TransportDocumentFullNotification" : {
            "allOf" : [
               {
                  "$ref" : "#/components/schemas/TransportDocument"
               }
            ],
            "description" : "This property contains the `transportDocument` in case the subscriber is subscribing to the `Full State Transfer` of the `Transport Document`.\n\nIn case the subscriber does not subscribe to the `Full State Transfer` of the `Transport Document` then the content in this property can be ignored.\n\n**Condition:** Once the `Transport Document` has been Issued (`transportDocumentStatus='ISSUED'`) - the order of **ALL** lists/arrays in this property **MUST** be aligned with the order of the\n\n    GET /v3/transport-documents/{transportDocumentReference}\n\npayload implemented by the provider of the **Shipping Instructions and Transport Document** API.\n",
            "title" : "Transport Document",
            "type" : "object"
         },
         "TransportDocumentNotification" : {
            "description" : "`CloudEvent` specific properties for the `Notification`.\n",
            "properties" : {
               "data" : {
                  "$ref" : "#/components/schemas/TransportDocumentData"
               },
               "datacontenttype" : {
                  "description" : "Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the [JSON envelope](formats/json-format.md#3-envelope) format might carry an XML payload in `data`, and the consumer is informed by this attribute being set to \"application/xml\". The rules for how `data` content is rendered for different `datacontenttype` values are defined in the event format specifications; for example, the JSON event format defines the relationship in [section 3.1](formats/json-format.md#31-handling-of-data).\n\nFor some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol.\n\nIn some event formats the `datacontenttype` attribute MAY be omitted. For example, if a JSON format event has no`datacontenttype` attribute, then it is implied that the `data` is a JSON value conforming to the \"application/json\" media type. In other words: a JSON-format event with no `datacontenttype` is exactly equivalent to one with `datacontenttype=\"application/json\"`.\n\nWhen translating an event message with no `datacontenttype` attribute to a different format or protocol binding, the target `datacontenttype` SHOULD be set explicitly to the implied `datacontenttype` of the source.\n",
                  "enum" : [
                     "application/json"
                  ],
                  "example" : "application/json",
                  "type" : "string"
               },
               "id" : {
                  "description" : "Identifies the event. Producers MUST ensure that `source` + `id` is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same `id`. Consumers MAY assume that Events with identical `source` and `id` are duplicates.\n",
                  "example" : "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                  "maxLength" : 100,
                  "type" : "string"
               },
               "source" : {
                  "description" : "Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.\n\nProducers MUST ensure that `source` + `id` is unique for each distinct event.\n\nAn application MAY assign a unique `source` to each distinct producer, which makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique `source` identifiers.\n\nA source MAY include more than one producer. In that case the producers MUST collaborate to ensure that `source` + `id` is unique for each distinct event.\n",
                  "example" : "https://member.com/",
                  "maxLength" : 4096,
                  "type" : "string"
               },
               "specversion" : {
                  "description" : "The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.\n\nCurrently, this attribute will only have the 'major' and 'minor' version numbers included in it. This allows for 'patch' changes to the specification to be made without changing this property's value in the serialization. Note: for 'release candidate' releases a suffix might be used for testing purposes.\n",
                  "enum" : [
                     "1.0"
                  ],
                  "example" : "1.0",
                  "type" : "string"
               },
               "subscriptionReference" : {
                  "description" : "The reference of the subscription that has triggered this event\n",
                  "example" : "30675492-50ff-4e17-a7df-7a487a8ad343",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "time" : {
                  "description" : "Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same `source` MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.\n",
                  "example" : "2018-04-05T17:31:00Z",
                  "format" : "date-time",
                  "type" : "string"
               },
               "type" : {
                  "description" : "This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type - see [Versioning of CloudEvents in the Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents) for more information.\n",
                  "enum" : [
                     "org.dcsa.transport-document.v3"
                  ],
                  "example" : "org.dcsa.transport-document.v3",
                  "type" : "string"
               }
            },
            "required" : [
               "data",
               "datacontenttype",
               "id",
               "source",
               "specversion",
               "subscriptionReference",
               "time",
               "type"
            ],
            "title" : "Transport Document Notification",
            "type" : "object"
         },
         "Transports" : {
            "properties" : {
               "onCarriageBy" : {
                  "description" : "Mode of transportation for on-carriage when transport from the port of discharge is organized by the carrier. If this attributes is populated, then a Place of Delivery must also be defined. The currently supported values include:\n- `VESSEL` (Vessel)\n- `RAIL` (Rail)\n- `TRUCK` (Truck)\n- `BARGE` (Barge)\n- `MULTIMODAL` (if multiple modes are used)\n",
                  "example" : "TRUCK",
                  "maxLength" : 50,
                  "type" : "string"
               },
               "onwardInlandRouting" : {
                  "$ref" : "#/components/schemas/OnwardInlandRouting"
               },
               "placeOfDelivery" : {
                  "$ref" : "#/components/schemas/PlaceOfDelivery"
               },
               "placeOfReceipt" : {
                  "$ref" : "#/components/schemas/PlaceOfReceipt"
               },
               "plannedArrivalDate" : {
                  "description" : "The planned date of arrival.\n",
                  "example" : "2024-06-07",
                  "format" : "date",
                  "type" : "string"
               },
               "plannedDepartureDate" : {
                  "description" : "The planned date of departure.\n",
                  "example" : "2024-06-03",
                  "format" : "date",
                  "type" : "string"
               },
               "portOfDischarge" : {
                  "$ref" : "#/components/schemas/PortOfDischarge"
               },
               "portOfLoading" : {
                  "$ref" : "#/components/schemas/PortOfLoading"
               },
               "preCarriageBy" : {
                  "description" : "Mode of transportation for pre-carriage when transport to the port of loading is organized by the carrier. If this attributes is populated, then a Place of Receipt must also be defined. The currently supported values include:\n- `VESSEL` (Vessel)\n- `RAIL` (Rail)\n- `TRUCK` (Truck)\n- `BARGE` (Barge)\n- `MULTIMODAL` (if multiple modes are used)\n",
                  "example" : "RAIL",
                  "maxLength" : 50,
                  "type" : "string"
               },
               "vesselVoyages" : {
                  "description" : "Allow the possibility to include multiple vessels/voyages in the `Transport Document` (e.g. the first sea going vessel and the mother vessel). At least one is mandatory to provide.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/VesselVoyage"
                  },
                  "minItems" : 1,
                  "type" : "array"
               }
            },
            "required" : [
               "plannedArrivalDate",
               "plannedDepartureDate",
               "portOfDischarge",
               "portOfLoading",
               "vesselVoyages"
            ],
            "title" : "Transports",
            "type" : "object"
         },
         "UTEquipment" : {
            "description" : "To be used for SoC (Shipper owned Containers). If `isShipperOwned` is true then the equipment used needs to be specified\n",
            "properties" : {
               "equipment" : {
                  "$ref" : "#/components/schemas/RequiredEquipment"
               },
               "isShipperOwned" : {
                  "description" : "Indicates whether the container is shipper owned (SOC).\n",
                  "example" : true,
                  "type" : "boolean"
               }
            },
            "required" : [
               "equipment",
               "isShipperOwned"
            ],
            "title" : "Shipper Owned Equipment (SoC)",
            "type" : "object"
         },
         "UTEquipmentReference" : {
            "description" : "To be used when referring to carrier owned containers (`isShipperOwned` is false). In this case it is only necessary to provide `equipmentReference`\n",
            "properties" : {
               "equipmentReference" : {
                  "description" : "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
                  "example" : "APZU4812090",
                  "maxLength" : 11,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "isShipperOwned" : {
                  "description" : "Indicates whether the container is shipper owned (SOC).\n",
                  "example" : false,
                  "type" : "boolean"
               }
            },
            "required" : [
               "equipmentReference",
               "isShipperOwned"
            ],
            "title" : "Carrier Owned Equipment",
            "type" : "object"
         },
         "UpdateShippingInstructions" : {
            "description" : "The `Shipping Instructions` to update.\n",
            "properties" : {
               "advanceManifestFilings" : {
                  "description" : "A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing\n",
                  "items" : {
                     "$ref" : "#/components/schemas/AdvanceManifestFiling"
                  },
                  "type" : "array"
               },
               "consignmentItems" : {
                  "description" : "A list of `ConsignmentItems`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/ConsignmentItemShipper"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "destinationChargesPaymentTerm" : {
                  "$ref" : "#/components/schemas/DestinationChargesPaymentTerm"
               },
               "displayedNameForPlaceOfDelivery" : {
                  "description" : "The name to be used in order to specify how the `Place of Delivery` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPlaceOfReceipt" : {
                  "description" : "The name to be used in order to specify how the `Place of Receipt` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPortOfDischarge" : {
                  "description" : "The name to be used in order to specify how the `Port of Discharge` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "displayedNameForPortOfLoad" : {
                  "description" : "The name to be used in order to specify how the `Port of Load` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "A line of the address to be displayed on the transport document.\n",
                     "example" : "Strawinskylaan 4117",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 5,
                  "type" : "array"
               },
               "documentParties" : {
                  "$ref" : "#/components/schemas/DocumentPartiesShippingInstructions"
               },
               "freightPaymentTermCode" : {
                  "description" : "An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
                  "enum" : [
                     "PRE",
                     "COL"
                  ],
                  "example" : "PRE",
                  "type" : "string"
               },
               "houseBillOfLadings" : {
                  "description" : "A list of `House Bill of Ladings` specified by the Shipper.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/HouseBillOfLading"
                  },
                  "type" : "array"
               },
               "invoicePayableAt" : {
                  "$ref" : "#/components/schemas/InvoicePayableAtShippingInstructions"
               },
               "isCarriersAgentAtDestinationRequired" : {
                  "description" : "Indicates whether the Carrier's agent at destination name, address and contact details should be included in the `Transport Document`.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isElectronic" : {
                  "description" : "An indicator whether the transport document is electronically transferred.\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isHBLIssued" : {
                  "description" : "Indicates whether one or more `House Bill of Lading(s)` have been issued. This property is used by the carrier to identify which `ENS` filing type must be submitted (`F10` or `F11`, `F12` or `F13`) to comply with `ICS2` customs regulations\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isShippedOnBoardType" : {
                  "description" : "Specifies whether the Transport Document is a received for shipment, or shipped on board.\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "isToOrder" : {
                  "description" : "Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).\n\n`isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "methodOfPayment" : {
                  "description" : "Method used for the payment of prepaid charges. It can be one of the following values: \n- `A` (Cash)\n- `B` (Credit Card)\n- `C` (Cheque)\n- `D` (Other)\n- `H` (Electronic funds transfer)\n- `Y` (Account holder with carrier)\n- `Z` (Not prepaid)\n",
                  "example" : "A",
                  "maxLength" : 1,
                  "type" : "string"
               },
               "numberOfCopiesWithCharges" : {
                  "description" : "The requested number of copies of the `Transport Document` to be issued by the carrier including charges.\n\n**Conditions:** The following table defines the conditions for the `numberOfCopiesWithCharges` property:\n| Transport Document Type Code | Is Electronic | Meaning |\n|-------|:-------:|-------|\n|`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier with charges|\n|`BOL`|`true`|Not applicable, there are no copies|\n|`SWB`|`false`|Indicates that charges should be included in the `SWB` (pdf or other formats)|\n|`SWB`|`true`|Indicates that charges should be included in the electronic `SWB`|\n",
                  "example" : 2,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfCopiesWithoutCharges" : {
                  "description" : "The requested number of copies of the `Transport Document` to be issued by the carrier **NOT** including charges.\n\n**Conditions:** The following table defines the conditions for the `numberOfCopiesWithoutCharges` property:\n| Transport Document Type Code | Is Electronic | Meaning |\n|-------|:-------:|-------|\n|`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier without charges|\n|`BOL`|`true`|Not applicable, there are no copies|\n|`SWB`|`false`|Indicates that charges should NOT be included in the `SWB` (pdf or other formats)|\n|`SWB`|`true`|Indicates that charges NOT should be included in the electronic `SWB`|\n",
                  "example" : 2,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfOriginalsWithCharges" : {
                  "description" : "Number of originals of the Bill of Lading that has been requested by the customer with charges.\n        \n**Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)\n",
                  "example" : 1,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "numberOfOriginalsWithoutCharges" : {
                  "description" : "Number of originals of the Bill of Lading that has been requested by the customer without charges.\n        \n**Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)\n",
                  "example" : 1,
                  "format" : "int32",
                  "minimum" : 0,
                  "type" : "integer"
               },
               "originChargesPaymentTerm" : {
                  "$ref" : "#/components/schemas/OriginChargesPaymentTerm"
               },
               "partyContactDetails" : {
                  "description" : "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
                  "items" : {
                     "$ref" : "#/components/schemas/PartyContactDetail"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "placeOfIssue" : {
                  "$ref" : "#/components/schemas/PlaceOfIssue"
               },
               "references" : {
                  "description" : "A list of `References`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Reference"
                  },
                  "type" : "array"
               },
               "requestedCarrierCertificates" : {
                  "description" : "Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack\n",
                  "items" : {
                     "description" : "Name of the certificate. Detailed information about carrier certificates can be found [here](https://dcsa.org/wp-content/uploads/2023/12/28-12-2023_Carrier-Certificates-shipment-voyage-particulars-and-vessel-particulars.pdf). Possible values are:\n- `SHIPMENT_VOYAGE_PARTICULARS_1` (Shipment-Voyage Particulars 1)\n- `SHIPMENT_VOYAGE_PARTICULARS_2` (Shipment-Voyage Particulars 2)\n- `SHIPMENT_VOYAGE_PARTICULARS_3` (Shipment-Voyage Particulars 3)\n- `SHIPMENT_VOYAGE_PARTICULARS_4` (Shipment-Voyage Particulars 4)\n- `SHIPMENT_VOYAGE_PARTICULARS_5` (Shipment-Voyage Particulars 5)\n- `SHIPMENT_VOYAGE_PARTICULARS_6` (Shipment-Voyage Particulars 6)\n- `SHIPMENT_VOYAGE_PARTICULARS_7` (Shipment-Voyage Particulars 7)\n- `VESSEL_PARTICULARS_1` (Vessel Particulars 1)\n- `VESSEL_PARTICULARS_2` (Vessel Particulars 2)\n- `VESSEL_PARTICULARS_3` (Vessel Particulars 3)\n- `VESSEL_PARTICULARS_4` (Vessel Particulars 4)\n- `VESSEL_PARTICULARS_5` (Vessel Particulars 5)\n- `VESSEL_PARTICULARS_6` (Vessel Particulars 6)\n- `VESSEL_PARTICULARS_7` (Vessel Particulars 7)\n- `VESSEL_PARTICULARS_8` (Vessel Particulars 8)\n- `VESSEL_PARTICULARS_9` (Vessel Particulars 9)\n- `VESSEL_PARTICULARS_10` (Vessel Particulars 10)\n- `VESSEL_PARTICULARS_11` (Vessel Particulars 11)\n- `VESSEL_PARTICULARS_12` (Vessel Particulars 12)\n- `VESSEL_PARTICULARS_13` (Vessel Particulars 13)\n- `VESSEL_PARTICULARS_14` (Vessel Particulars 14)\n- `VESSEL_PARTICULARS_15` (Vessel Particulars 15)\n- `VESSEL_PARTICULARS_16` (Vessel Particulars 16)\n- `VESSEL_PARTICULARS_17` (Vessel Particulars 17)\n- `VESSEL_PARTICULARS_18` (Vessel Particulars 18)\n",
                     "example" : "VESSEL_PARTICULARS_1",
                     "maxLength" : 100,
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "requestedCarrierClauses" : {
                  "description" : "Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`\n",
                  "items" : {
                     "description" : "A clause to request from the carrier. Detailed information about the carrier clauses can be found [here](https://dcsa.org/wp-content/uploads/2023/12/202312-Standardised-Clauses-BL.pdf). Possible values are:\n- `CARGO_CARGOSPECIFICS` (Cargo/Cargo specifics)\n- `VESSELCONVEYANCE_COUNTRYSPECIFIC` (Vessel conveyance/Country Specific)\n- `CARGO_RETURNOFEMPTYCONTAINER` (Cargo/Return of Empty Container)\n- `CARGO_CARGOVALUE` (Cargo/Cargo value)\n- `CARGO_REEFERTEMPERATURE` (Cargo/Reefer temperature)\n- `CARGO_CONFLICTINGTEMPERATURES_MIXEDLOADS` (Cargo/Conflicting temperatures/Mixed loads)\n",
                     "example" : "CARGO_CARGOSPECIFICS",
                     "maxLength" : 100,
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "routingOfConsignmentCountries" : {
                  "description" : "A list of countries the goods will be routed through from origin to destination defined by the 2 characters country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                     "example" : "NL",
                     "maxLength" : 2,
                     "minLength" : 2,
                     "pattern" : "^[A-Z]{2}$",
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "shippingInstructionsReference" : {
                  "description" : "The identifier for a `Shipping Instructions` provided by the carrier for system purposes.\n",
                  "example" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                  "maxLength" : 100,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "transportDocumentTypeCode" : {
                  "description" : "Specifies the type of the transport document\n- `BOL` (Bill of Lading)\n- `SWB` (Sea Waybill)\n",
                  "enum" : [
                     "BOL",
                     "SWB"
                  ],
                  "example" : "SWB",
                  "type" : "string"
               },
               "utilizedTransportEquipments" : {
                  "description" : "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
                  "items" : {
                     "$ref" : "#/components/schemas/UtilizedTransportEquipmentShipper"
                  },
                  "minItems" : 1,
                  "type" : "array"
               }
            },
            "required" : [
               "consignmentItems",
               "documentParties",
               "freightPaymentTermCode",
               "isElectronic",
               "isShippedOnBoardType",
               "isToOrder",
               "partyContactDetails",
               "shippingInstructionsReference",
               "transportDocumentTypeCode",
               "utilizedTransportEquipments"
            ],
            "title" : "Update Shipping Instructions",
            "type" : "object"
         },
         "UpdatedShippingInstructionsFullNotification" : {
            "allOf" : [
               {
                  "$ref" : "#/components/schemas/ShippingInstructions"
               }
            ],
            "description" : "This property contains the updated shipping instructions in case:\n  - an update is currently active\n  - the subscriber is subscribing to the `Full State Transfer` of the Shipping Instructions\n\nIn case the subscriber does not subscribe to the `Full State Transfer` of the Shipping Instructions or no update is active - then the content in this property can be ignored.\n",
            "title" : "Updated Shipping Instructions",
            "type" : "object"
         },
         "UtilizedTransportEquipment" : {
            "description" : "Specifies the container (`equipment`), the total `weight`, total `volume`, possible `ActiveReeferSettings`, `seals` and `references`\n",
            "properties" : {
               "activeReeferSettings" : {
                  "$ref" : "#/components/schemas/ActiveReeferSettings"
               },
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "equipment" : {
                  "$ref" : "#/components/schemas/Equipment"
               },
               "isNonOperatingReefer" : {
                  "description" : "If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.\n\n**Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.\n",
                  "example" : false,
                  "type" : "boolean"
               },
               "isShipperOwned" : {
                  "description" : "Indicates whether the container is shipper owned (SOC).\n",
                  "example" : true,
                  "type" : "boolean"
               },
               "references" : {
                  "description" : "A list of `References`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Reference"
                  },
                  "type" : "array"
               },
               "seals" : {
                  "description" : "A list of `Seals`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Seal"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "shippingMarks" : {
                  "description" : "A list of the `ShippingMarks` applicable to this `UtilizedTransportEquipment`\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.\n",
                     "example" : "Made in China",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 50,
                  "type" : "array"
               }
            },
            "required" : [
               "equipment",
               "isShipperOwned",
               "seals"
            ],
            "title" : "Utilized Transport Equipment",
            "type" : "object"
         },
         "UtilizedTransportEquipmentShipper" : {
            "description" : "Specifies the container (`Equipment`), `Seals` and `References`\n",
            "discriminator" : {
               "mapping" : {
                  "false" : "#/components/schemas/UTEquipmentReference",
                  "true" : "#/components/schemas/UTEquipment"
               },
               "propertyName" : "isShipperOwned"
            },
            "oneOf" : [
               {
                  "$ref" : "#/components/schemas/UTEquipment"
               },
               {
                  "$ref" : "#/components/schemas/UTEquipmentReference"
               }
            ],
            "properties" : {
               "customsReferences" : {
                  "description" : "A list of `Customs references`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/CustomsReference"
                  },
                  "type" : "array"
               },
               "references" : {
                  "description" : "A list of `References`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Reference"
                  },
                  "type" : "array"
               },
               "seals" : {
                  "description" : "A list of `Seals`\n",
                  "items" : {
                     "$ref" : "#/components/schemas/Seal"
                  },
                  "minItems" : 1,
                  "type" : "array"
               },
               "shippingMarks" : {
                  "description" : "A list of the `ShippingMarks` applicable to this `UtilizedTransportEquipment`\n\n**Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.\n",
                  "items" : {
                     "description" : "The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.\n",
                     "example" : "Made in China",
                     "maxLength" : 35,
                     "type" : "string"
                  },
                  "maxItems" : 50,
                  "type" : "array"
               }
            },
            "required" : [
               "seals"
            ],
            "title" : "Utilized Transport Equipment (Shipper)",
            "type" : "object"
         },
         "VesselVoyage" : {
            "description" : "Vessel and export voyage",
            "properties" : {
               "carrierExportVoyageNumber" : {
                  "description" : "The identifier of an export voyage. The carrier-specific identifier of the export Voyage.\n",
                  "example" : "2103S",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               },
               "universalExportVoyageReference" : {
                  "description" : "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWSR]`\n- `2 digits` for the year\n- `2 alphanumeric characters` for the sequence number of the voyage\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).\n",
                  "example" : "2103N",
                  "maxLength" : 5,
                  "minLength" : 5,
                  "pattern" : "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
                  "type" : "string"
               },
               "vesselName" : {
                  "description" : "The name of the first sea going Vessel on board which the cargo is loaded or intended to be loaded\n",
                  "example" : "King of the Seas",
                  "maxLength" : 50,
                  "pattern" : "^\\S(?:.*\\S)?$",
                  "type" : "string"
               }
            },
            "required" : [
               "carrierExportVoyageNumber",
               "vesselName"
            ],
            "title" : "Vessel/Voyage",
            "type" : "object"
         }
      }
   },
   "info" : {
      "contact" : {
         "email" : "info@dcsa.org",
         "name" : "Digital Container Shipping Association (DCSA)",
         "url" : "https://dcsa.org"
      },
      "description" : "<h1>DCSA OpenAPI specification for the Shipping Instructions and Transport Document process</h1>\n\nThis API is intended as an API between a carrier and anyone creating a `Shipping Instructions` and approving a `Transport Document`. The process includes:\n\n- Shipping Instructions submission\n- Shipping Instructions update\n- Draft Transport Document publication\n- Draft Transport Document update\n- Draft Transport Document approval\n\nFor explanation of specific values or objects please refer to the [Information Model](https://developer.dcsa.org/documentation/information_models). This API specification does not define the allowable updates and their timing in accordance with the established business rules. **All use cases mentioned in this API specification refer to use cases defined in [DCSA Interface Standard for the Bill of Lading 3.0](https://dcsa.org/standards/bill-of-lading/documentation-bill-of-lading-3)**.\n\nAll other documents related to the Electronic Bill of Lading publication can be found [here](https://dcsa.org/standards/ebill-of-lading/)\n\n### EBL (Implemented by provider)\n\nIt is possible to use the eBL API as a standalone API. In that case use one of the poll endPoints:\n\n    GET /v3/shipping-instructions/{documentReference}  # For Shipping Instructions status\n    GET /v3/transport-documents/{transportDocumentReference}  # For Transport Document status\n\nin order to poll information about status changes.\n\n**Note:** All `/v3/shipping-instructions` and `/v3/transport-documents` endPoints must be implemented by the provider.\n\n### Notifications (Implemented by consumer)\nIt is possible to have notifications pushed to you whenever the provider needs input and/or a state change. The format of the notification is defined by the [Shipping Instructions Notification endPoint](#/ShippingInstructionsNotification) or the [Transport Document Notification endPoint](#/TransportDocumentNotification).\n\n    POST /v3/shipping-instructions-notifications\n    POST /v3/transport-document-notifications\n\nThe endPoints support both a lightweight Notification and a full State transfer. How much data is sent via this Notification depends on what kind of Notification is being subscribed to.\n\nSigning up for notifications is defined outside the scope of this API specification.\n\n**Note:** All of these endPoint is to be implemented by the consumers of the `Shipping Instructions API` and `Transport Document API` in order to receive push events.\n\n### API Design & Implementation Principles\nThis API follows the guidelines defined in version 2.1 of the API Design & Implementation Principles which can be found on the [DCSA Developer page](https://developer.dcsa.org/api_design)\n\nFor a changelog, please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/ebl/v3#v300). Please [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\n\nAPI specification issued by [DCSA.org](https://dcsa.org/).\n",
      "license" : {
         "name" : "Apache 2.0",
         "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "title" : "DCSA Shipping Instructions and Transport Document API",
      "version" : "3.0.0"
   },
   "openapi" : "3.0.3",
   "paths" : {
      "/v3/shipping-instructions" : {
         "post" : {
            "description" : "Creates a new `Shipping Instructions`. This endPoint corresponds with **UseCase 1 - Submit Shipping Instructions**.\n\n## Precondition\nThe consumer has information for a `Shipping Instructions`. The empty equipment has been released to the shipper. The `Booking` is in state `CONFIRMED`.\n\n## Postcondition\nThe provider has received the `Shipping Instructions`.\n\nThe consumer will receive a `202` (Accepted) if the payload schema validates or a `400` (Bad Request) if it does not.\n\n## Flow for the `202` (Accepted) response\nThe following occurs when a provider receives a `Shipping Instructions`:\n1. The payload (`Shipping Instructions`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n   **The process stops here!**\n2. The payload is schema-valid which means:\n    - all required properties are provided.\n    - all values provided have correct data type.\n\n   A `shippingInstructionsReference` (as a reference to the `Shipping Instructions`) is created and linked to the payload in the provider system.\n  \n   **For the rest of this description and in all examples the value `si-123` will be used as `shippingInstructionsReference`**\n\n3. A `202` (Accepted) response is returned with a payload containing **only** the `shippingInstructionsReference`:\n    ```\n    {\n      shippingInstructionsReference: 'si-123'\n    }\n    ```\n\nFor `POST` `Shipping Instructions` the process ends here. The `Shipping Instructions`:\n  - is now accepted by the provider system\n  - the `Shipping Instructions` does not yet have any status and cannot be queried (no `GET` request is possible until the `Shipping Instructions` is further processed in the provider system)\n  - a `202` (Accepted) response is sent to the consumer with a payload **only** containing the `shippingInstructionsReference`\n  - awaits further processing by the provider\n\nThe provider will now start asynchronous processing. Once processed, the  status `RECEIVED` of the `Shipping Instructions` will be communicated via a [Shipping Instructions Notification](#/ShippingInstructionsNotification). In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the\n\n    GET /v3/shipping-instructions/{documentReference}\n    \n  endPoint to check if the `shippingInstructionsStatus` of the `Shipping Instructions` has changed.\n  \n  After the status has changed to `RECEIVED` further processing can continue by provider and will be communicated via a [Shipping Instructions Notification](#/ShippingInstructionsNotification).\n",
            "operationId" : "create-shipping-instructions",
            "parameters" : [
               {
                  "description" : "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
                  "explode" : false,
                  "in" : "header",
                  "name" : "API-Version",
                  "required" : false,
                  "schema" : {
                     "example" : "3",
                     "type" : "string"
                  },
                  "style" : "simple"
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "regularSTDExample" : {
                           "description" : "A new `Shipping Instructions` with standard Dry cargo: `Black shoes`. The shoes are packed in 400 `Fibreboard boxes` and stuffed inside a single container (`NARU3472484`). The shipment has been booked via `carrierBookingReference` = `CBR_123_REGULAR`\n\nThe `Shipping Instructions` now awaits the provider to `DRAFT` a `Transport Document`.\n",
                           "summary" : "Create a Shipping Instructions\n",
                           "value" : {
                              "consignmentItems" : [
                                 {
                                    "HSCodes" : [
                                       "640510"
                                    ],
                                    "cargoItems" : [
                                       {
                                          "cargoGrossWeight" : {
                                             "unit" : "KGM",
                                             "value" : 12000
                                          },
                                          "equipmentReference" : "NARU3472484",
                                          "outerPackaging" : {
                                             "description" : "Fibreboard boxes",
                                             "numberOfPackages" : 400,
                                             "packageCode" : "4G"
                                          }
                                       }
                                    ],
                                    "carrierBookingReference" : "CBR_123_REGULAR",
                                    "commoditySubreference" : "RegSubRef001",
                                    "descriptionOfGoods" : [
                                       "Shoes - black"
                                    ]
                                 }
                              ],
                              "documentParties" : {
                                 "shipper" : {
                                    "displayedAddress" : [
                                       "Strawinskylaan 4117"
                                    ],
                                    "partyContactDetails" : [
                                       {
                                          "email" : "no-reply@dcsa.example.org",
                                          "name" : "DCSA test person"
                                       }
                                    ],
                                    "partyName" : "DCSA CTK"
                                 }
                              },
                              "freightPaymentTermCode" : "PRE",
                              "invoicePayableAt" : {
                                 "UNLocationCode" : "DKAAR"
                              },
                              "isElectronic" : true,
                              "isShippedOnBoardType" : true,
                              "isToOrder" : true,
                              "partyContactDetails" : [
                                 {
                                    "email" : "no-reply@dcsa.example.org",
                                    "name" : "DCSA test person"
                                 }
                              ],
                              "transportDocumentTypeCode" : "BOL",
                              "utilizedTransportEquipments" : [
                                 {
                                    "equipmentReference" : "NARU3472484",
                                    "isShipperOwned" : false,
                                    "seals" : [
                                       {
                                          "number" : "DCSA-CTK-1234"
                                       }
                                    ]
                                 }
                              ]
                           }
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/CreateShippingInstructions"
                     }
                  }
               },
               "description" : "Parameters used to create the `Shipping Instructions`\n",
               "required" : true
            },
            "responses" : {
               "202" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "receExample" : {
                              "description" : "The `shippingInstructionsReference` has been accepted (no `shippingInstructionsStatus`) and schema validated by provider\n",
                              "summary" : "Shipping Instructions received\n",
                              "value" : {
                                 "shippingInstructionsReference" : "si-123"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/CreateShippingInstructionsResponse"
                        }
                     }
                  },
                  "description" : "The `Shipping Instructions` has been accepted by the provider. The `Shipping Instructions` does not yet have a `shippingInstructionsStatus` - it is not possible to call the `GET` endPoint until the `Shipping Instructions` is further processed in provider system. The consumer is now awaiting provider to process the `Shipping Instructions` asynchronously.\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "badRequestExample" : {
                              "description" : "`isElectronic` is a mandatory property in the `Shipping Instructions`. In case this property is missing an error objet is created.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Shipping Instructions missing isElectronic\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "isElectronic must be provided as part of a Shipping Instructions",
                                       "errorCodeText" : "mandatory property missing",
                                       "property" : "isElectronic"
                                    }
                                 ],
                                 "httpMethod" : "POST",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions",
                                 "statusCode" : 400,
                                 "statusCodeMessage" : "isElectronic not found - it is a mandatory property in Shipping Instructions",
                                 "statusCodeText" : "Bad Request"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the `Shipping Instructions` does not schema validate a `400` (Bad Request) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "internalServerErrorExample" : {
                              "description" : "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Internal Server Error while processing Shipping Instructions\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "Internal Error occurred",
                                       "errorCodeText" : "Internal Error occurred"
                                    }
                                 ],
                                 "httpMethod" : "POST",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions",
                                 "statusCode" : 500,
                                 "statusCodeMessage" : "Internal Server Error occurred while processing Booking request",
                                 "statusCodeText" : "Internal Server Error"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "default" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "tooManyRequestsExample" : {
                              "description" : "Calling the endPoint\n\n    POST /v3/shipping-instructions\n    \ntoo many times within a time period results in an error.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Making too many Shipping Instructions\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "A maximum of 10 Shipping Instructions can be created per hour",
                                       "errorCodeText" : "Max Shipping Instructions reached"
                                    }
                                 ],
                                 "httpMethod" : "POST",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions",
                                 "statusCode" : 429,
                                 "statusCodeMessage" : "Too many request to create a Shipping Instructions has been requested. Please try again in 1 hour",
                                 "statusCodeText" : "Too Many Requests"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "For other errors the error object should be populated with relevant information\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               }
            },
            "summary" : "Creates a Shipping Instructions\n",
            "tags" : [
               "Shipping Instructions"
            ]
         }
      },
      "/v3/shipping-instructions-notifications" : {
         "post" : {
            "description" : "Creates a new [`Shipping Instructions Notification`](#/ShippingInstructionsNotification). This endPoint is called whenever a `Shipping Instructions` that a consumer has subscribed to changes state or is updated.\n\n**This endPoint is to be implemented by a consumer of the EBL API in order to receive Notifications**\n",
            "operationId" : "shipping-instructions-notifications",
            "parameters" : [
               {
                  "description" : "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
                  "explode" : false,
                  "in" : "header",
                  "name" : "API-Version",
                  "required" : false,
                  "schema" : {
                     "example" : "3",
                     "type" : "string"
                  },
                  "style" : "simple"
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "declinedFullStateTransferExample" : {
                           "description" : "A full state transfer notification explaining that an update to a `Shipping Instructions`, that was pending an update by the consumer (`shippingInstructionsStatus='PENDING_UPDATE'`), has been declined (`updatedShippingInstructionsStatus='UPDATE_DECLINED'`)\n\nThe example shows an original `ShippingInstructions` with a wrong weight on `consignmentItem` and `cargoItem`. The updated weight is also wrong!\n",
                           "summary" : "Shipping Instructions update declined (Full State Transfer)\n",
                           "value" : {
                              "data" : {
                                 "shippingInstructions" : {
                                    "consignmentItems" : [
                                       {
                                          "HSCodes" : [
                                             "640510"
                                          ],
                                          "cargoItems" : [
                                             {
                                                "cargoGrossWeight" : {
                                                   "unit" : "KGM",
                                                   "value" : 12
                                                },
                                                "equipmentReference" : "NARU3472484",
                                                "outerPackaging" : {
                                                   "description" : "Fibreboard boxes",
                                                   "numberOfPackages" : 400,
                                                   "packageCode" : "4G"
                                                }
                                             }
                                          ],
                                          "carrierBookingReference" : "CBR_123_REGULAR",
                                          "commoditySubreference" : "RegSubRef001",
                                          "descriptionOfGoods" : [
                                             "Shoes - black"
                                          ]
                                       }
                                    ],
                                    "documentParties" : {
                                       "shipper" : {
                                          "displayedAddress" : [
                                             "Strawinskylaan 4117"
                                          ],
                                          "partyContactDetails" : [
                                             {
                                                "email" : "no-reply@dcsa.example.org",
                                                "name" : "DCSA test person"
                                             }
                                          ],
                                          "partyName" : "DCSA CTK"
                                       }
                                    },
                                    "freightPaymentTermCode" : "PRE",
                                    "invoicePayableAt" : {
                                       "UNLocationCode" : "DKAAR"
                                    },
                                    "isElectronic" : true,
                                    "isShippedOnBoardType" : true,
                                    "isToOrder" : true,
                                    "partyContactDetails" : [
                                       {
                                          "email" : "no-reply@dcsa.example.org",
                                          "name" : "DCSA test person"
                                       }
                                    ],
                                    "shippingInstructionsReference" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                                    "shippingInstructionsStatus" : "PENDING_UPDATE",
                                    "transportDocumentTypeCode" : "BOL",
                                    "updatedShippingInstructionsStatus" : "UPDATE_DECLINED",
                                    "utilizedTransportEquipments" : [
                                       {
                                          "equipmentReference" : "NARU3472484",
                                          "isShipperOwned" : false,
                                          "seals" : [
                                             {
                                                "number" : "DCSA-CTK-1234"
                                             }
                                          ]
                                       }
                                    ]
                                 },
                                 "shippingInstructionsReference" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                                 "shippingInstructionsStatus" : "PENDING_UPDATE",
                                 "updatedShippingInstructions" : {
                                    "consignmentItems" : [
                                       {
                                          "HSCodes" : [
                                             "640510"
                                          ],
                                          "cargoItems" : [
                                             {
                                                "cargoGrossWeight" : {
                                                   "unit" : "KGM",
                                                   "value" : 120000
                                                },
                                                "equipmentReference" : "NARU3472484",
                                                "outerPackaging" : {
                                                   "description" : "Fibreboard boxes",
                                                   "numberOfPackages" : 400,
                                                   "packageCode" : "4G"
                                                }
                                             }
                                          ],
                                          "carrierBookingReference" : "CBR_123_REGULAR",
                                          "commoditySubreference" : "RegSubRef001",
                                          "descriptionOfGoods" : [
                                             "Shoes - black"
                                          ]
                                       }
                                    ],
                                    "documentParties" : {
                                       "shipper" : {
                                          "displayedAddress" : [
                                             "Strawinskylaan 4117"
                                          ],
                                          "partyContactDetails" : [
                                             {
                                                "email" : "no-reply@dcsa.example.org",
                                                "name" : "DCSA test person"
                                             }
                                          ],
                                          "partyName" : "DCSA CTK"
                                       }
                                    },
                                    "freightPaymentTermCode" : "PRE",
                                    "invoicePayableAt" : {
                                       "UNLocationCode" : "DKAAR"
                                    },
                                    "isElectronic" : true,
                                    "isShippedOnBoardType" : true,
                                    "isToOrder" : true,
                                    "partyContactDetails" : [
                                       {
                                          "email" : "no-reply@dcsa.example.org",
                                          "name" : "DCSA test person"
                                       }
                                    ],
                                    "shippingInstructionsReference" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                                    "shippingInstructionsStatus" : "PENDING_UPDATE",
                                    "transportDocumentTypeCode" : "BOL",
                                    "updatedShippingInstructionsStatus" : "UPDATE_DECLINED",
                                    "utilizedTransportEquipments" : [
                                       {
                                          "equipmentReference" : "NARU3472484",
                                          "isShipperOwned" : false,
                                          "seals" : [
                                             {
                                                "number" : "DCSA-CTK-1234"
                                             }
                                          ]
                                       }
                                    ]
                                 },
                                 "updatedShippingInstructionsStatus" : "UPDATE_DECLINED"
                              },
                              "datacontenttype" : "application/json",
                              "id" : "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                              "source" : "https://member.com/",
                              "specversion" : "1.0",
                              "subscriptionReference" : "SI001",
                              "time" : "2018-04-05T17:31:00Z",
                              "type" : "org.dcsa.shipping-instructions.v3"
                           }
                        },
                        "declinedLightweightExample" : {
                           "description" : "A lightweight notification explaining that an update to a `Shipping Instructions`, that was pending an update by the consumer (`shippingInstructionsStatus='PENDING_UPDATE'`), has been declined (`updatedShippingInstructionsStatus='UPDATE_DECLINED'`)\n",
                           "summary" : "Shipping Instructions update declined (Lightweight)\n",
                           "value" : {
                              "data" : {
                                 "shippingInstructionsReference" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                                 "shippingInstructionsStatus" : "PENDING_UPDATE",
                                 "updatedShippingInstructionsStatus" : "UPDATE_DECLINED"
                              },
                              "datacontenttype" : "application/json",
                              "id" : "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                              "source" : "https://member.com/",
                              "specversion" : "1.0",
                              "subscriptionReference" : "SI001",
                              "time" : "2018-04-05T17:31:00Z",
                              "type" : "org.dcsa.shipping-instructions.v3"
                           }
                        },
                        "receivedFullStateTransferExample" : {
                           "description" : "A full state transfer notification explaining that a new `Shipping Instructions` has been received and stored in provider system (`shippingInstructionsStatus='RECEIVED'`).\n",
                           "summary" : "Shipping Instructions request received (Full State Transfer)\n",
                           "value" : {
                              "data" : {
                                 "shippingInstructions" : {
                                    "consignmentItems" : [
                                       {
                                          "HSCodes" : [
                                             "640510"
                                          ],
                                          "cargoItems" : [
                                             {
                                                "cargoGrossWeight" : {
                                                   "unit" : "KGM",
                                                   "value" : 12000
                                                },
                                                "equipmentReference" : "NARU3472484",
                                                "outerPackaging" : {
                                                   "description" : "Fibreboard boxes",
                                                   "numberOfPackages" : 400,
                                                   "packageCode" : "4G"
                                                }
                                             }
                                          ],
                                          "carrierBookingReference" : "CBR_123_REGULAR",
                                          "commoditySubreference" : "RegSubRef001",
                                          "descriptionOfGoods" : [
                                             "Shoes - black"
                                          ]
                                       }
                                    ],
                                    "documentParties" : {
                                       "shipper" : {
                                          "displayedAddress" : [
                                             "Strawinskylaan 4117"
                                          ],
                                          "partyContactDetails" : [
                                             {
                                                "email" : "no-reply@dcsa.example.org",
                                                "name" : "DCSA test person"
                                             }
                                          ],
                                          "partyName" : "DCSA CTK"
                                       }
                                    },
                                    "freightPaymentTermCode" : "PRE",
                                    "invoicePayableAt" : {
                                       "UNLocationCode" : "DKAAR"
                                    },
                                    "isElectronic" : true,
                                    "isShippedOnBoardType" : true,
                                    "isToOrder" : true,
                                    "partyContactDetails" : [
                                       {
                                          "email" : "no-reply@dcsa.example.org",
                                          "name" : "DCSA test person"
                                       }
                                    ],
                                    "shippingInstructionsReference" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                                    "shippingInstructionsStatus" : "RECEIVED",
                                    "transportDocumentTypeCode" : "BOL",
                                    "utilizedTransportEquipments" : [
                                       {
                                          "equipmentReference" : "NARU3472484",
                                          "isShipperOwned" : false,
                                          "seals" : [
                                             {
                                                "number" : "DCSA-CTK-1234"
                                             }
                                          ]
                                       }
                                    ]
                                 },
                                 "shippingInstructionsReference" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                                 "shippingInstructionsStatus" : "RECEIVED"
                              },
                              "datacontenttype" : "application/json",
                              "id" : "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                              "source" : "https://member.com/",
                              "specversion" : "1.0",
                              "subscriptionReference" : "SI001",
                              "time" : "2018-04-05T17:31:00Z",
                              "type" : "org.dcsa.shipping-instructions.v3"
                           }
                        },
                        "receivedLightweightExample" : {
                           "description" : "A lightweight notification explaining that a new `Shipping Instructions` has been received and stored in provider system (`shippingInstructionsStatus='RECEIVED'`).\n",
                           "summary" : "Shipping Instructions request received (Lightweight)\n",
                           "value" : {
                              "data" : {
                                 "shippingInstructionsReference" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                                 "shippingInstructionsStatus" : "RECEIVED"
                              },
                              "datacontenttype" : "application/json",
                              "id" : "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                              "source" : "https://member.com/",
                              "specversion" : "1.0",
                              "subscriptionReference" : "SI001",
                              "time" : "2018-04-05T17:31:00Z",
                              "type" : "org.dcsa.shipping-instructions.v3"
                           }
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/ShippingInstructionsNotification"
                     }
                  }
               },
               "description" : "The payload used to create a [`Shipping Instructions Notification`](#/ShippingInstructionsNotification)\n"
            },
            "responses" : {
               "204" : {
                  "description" : "No Content\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "badRequestExample" : {
                              "description" : "`shippingInstructionsReference` is a mandatory property in the `Notification`. This is an example of how the error object would look in case this property is missing\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                              "summary" : "Shipping Instructions missing shippingInstructionsReference\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "shippingInstructionsReference must be provided as part of a Notification\n",
                                       "errorCodeText" : "mandatory property missing",
                                       "property" : "shippingInstructionsReference"
                                    }
                                 ],
                                 "httpMethod" : "POST",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions-notifications",
                                 "statusCode" : 400,
                                 "statusCodeMessage" : "shippingInstructionsReference not found - mandatory to provide in a Notification\n",
                                 "statusCodeText" : "Bad Request"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the `Notification` does not schema validate a `400` (Bad Request) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "internalServerErrorExample" : {
                              "description" : "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                              "summary" : "Internal Server Error while processing Notification\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "Internal Error occurred",
                                       "errorCodeText" : "Internal Error occurred"
                                    }
                                 ],
                                 "httpMethod" : "POST",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions-notifications",
                                 "statusCode" : 500,
                                 "statusCodeMessage" : "Internal Server Error occurred while processing Shipping Instructions\n",
                                 "statusCodeText" : "Internal Server Error"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "default" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "tooManyRequestsExample" : {
                              "description" : "Calling the endPoint\n\n    POST /v3/shipping-instructions-notifications\n\ntoo many times within a timeperiod.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                              "summary" : "Making too many Notifications\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "A maximum of 10 Notifications can be created per hour",
                                       "errorCodeText" : "Max Notifications reached"
                                    }
                                 ],
                                 "httpMethod" : "POST",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions-notifications",
                                 "statusCode" : 429,
                                 "statusCodeMessage" : "Too many request to create a Notification has been requested. Please try again in 1 hour\n",
                                 "statusCodeText" : "Too Many Requests"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "For other errors the error object should be populated with relevant information\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               }
            },
            "summary" : "Send a new Shipping Instructions Notification",
            "tags" : [
               "Notifications"
            ]
         }
      },
      "/v3/shipping-instructions/{documentReference}" : {
         "get" : {
            "description" : "Retrieves the `Shipping Instructions` with the `documentReference`. The path can contain a `shippingInstructionsReference` or a `transportDocumentReference`. It is recommended to use this endPoint to `GET` data before an update is made to make sure latest version is being updated.\n\nThe default payload when calling this endPoint is the \"original\" `Shipping Instructions`. It is also possible to get the latest update to a `Shipping Instructions` called the `Updated Shipping Instructions`. In order to get the `Update Shipping Instructions`, it is necessary to use the query parameter `updatedContent` and set it to `true`.\n\n    GET /v3/shipping-instructions/{documentReference}?updatedContent=true\n\nThe `status` of the \"original\" `Shipping Instructions` is included in both payloads as `shippingInstructionsStatus`. `updatedShippingInstructionsStatus` and related content is only available after a consumer has requested an update via **UseCase 3: Submit updated Shipping Instructions** and until:\n- the provider requests for a new update (**UseCase 2: Request to update Shipping Instructions**) in which case the \"old update\" is no longer accessible.\n- the consumer submits a new update (**UseCase 3: Submit updated Shipping Instructions**) in which case the \"new update\" provided **replaces** the \"old update\".\n\nIf `updatedContent=true` is requested but no update has yet been provided by the consumer **or** the state of the \"original\" `Shipping Instructions` is `PENDING_UPDATE`, then a `404` (Not Found) is returned.\n\nIf the provider is requesting changes to the `Shipping Instructions`, the `Feedback` object is used to inform the consumer what needs to change.\n\nIn case no subscription (`Notification`) has been set up - it is possible to use this endPoint to poll on in order to detect if `shippingInstructionsStatus` and/or `updatedShippingInstructionsStatus` has changed.\n\nIn case a previous request is being processed by the provider - a `202` (Accepted) with **no payload** can be used as a response until the processing is finished.\n",
            "operationId" : "get-shipping-instructions",
            "parameters" : [
               {
                  "description" : "An identifier for a `Shipping Instructions`. It can either be a `shippingInstructionsReference` or a `transportDocumentReference`.\n",
                  "explode" : false,
                  "in" : "path",
                  "name" : "documentReference",
                  "required" : true,
                  "schema" : {
                     "example" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                     "maxLength" : 100,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "style" : "simple"
               },
               {
                  "description" : "If set to `true`, the payload returned is the content of the `Updated Shipping Instructions`.\n\nDefault value is `false` in which case the content of the \"original\" `Shipping Instructions` is returned.\n\n**Condition:** Can only be used if an update has been made by the consumer (via **UseCase 3: Submit updated Shipping Instructions**) and **until** a new updated is requested by the provider. If no updates have been made a `404` (Not Found) response will be returned\n",
                  "explode" : true,
                  "in" : "query",
                  "name" : "updatedContent",
                  "required" : false,
                  "schema" : {
                     "default" : false,
                     "example" : false,
                     "type" : "boolean"
                  },
                  "style" : "form"
               },
               {
                  "description" : "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
                  "explode" : false,
                  "in" : "header",
                  "name" : "API-Version",
                  "required" : false,
                  "schema" : {
                     "example" : "3",
                     "type" : "string"
                  },
                  "style" : "simple"
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "dgExample" : {
                              "description" : "A `Shipping Instructions` with `Environmentally hazardous substance, liquid, N.O.S (Propiconazole)` which is transported in steel Jarricans.\n\nThe `Shipping Instructions` has already been applied an update which has been confirmed by the provider (`updatedShippingInstructions='UPDATE_CONFIRMED'`). The `Shipping Instructions` is now waiting for the provider to `DRAFT` a `Transport Document`.\n\n**Notice** that there are no DG (Dangerous Goods) info in the `Shipping Instructions`. If any DG info need to be modified - then a `Booking` amendment must be applied to booking: `RTM1234567`.\n",
                              "summary" : "Updated Shipping Instructions with DG cargo\n",
                              "value" : {
                                 "consignmentItems" : [
                                    {
                                       "HSCodes" : [
                                          "293499"
                                       ],
                                       "cargoItems" : [
                                          {
                                             "cargoGrossWeight" : {
                                                "unit" : "KGM",
                                                "value" : 12000
                                             },
                                             "equipmentReference" : "HLXU1234567",
                                             "outerPackaging" : {
                                                "description" : "Jerrican, steel",
                                                "numberOfPackages" : 400
                                             }
                                          }
                                       ],
                                       "carrierBookingReference" : "RTM1234567",
                                       "commoditySubreference" : "DGSubRef003",
                                       "descriptionOfGoods" : [
                                          "Environmentally hazardous substance",
                                          "liquid, N.O.S (Propiconazole)"
                                       ]
                                    }
                                 ],
                                 "documentParties" : {
                                    "shipper" : {
                                       "displayedAddress" : [
                                          "Strawinskylaan 4117"
                                       ],
                                       "partyContactDetails" : [
                                          {
                                             "email" : "no-reply@dcsa.example.org",
                                             "name" : "DCSA test person"
                                          }
                                       ],
                                       "partyName" : "DCSA CTK"
                                    }
                                 },
                                 "freightPaymentTermCode" : "PRE",
                                 "invoicePayableAt" : {
                                    "UNLocationCode" : "DKAAR"
                                 },
                                 "isElectronic" : true,
                                 "isShippedOnBoardType" : true,
                                 "isToOrder" : true,
                                 "partyContactDetails" : [
                                    {
                                       "email" : "no-reply@dcsa.example.org",
                                       "name" : "DCSA test person"
                                    }
                                 ],
                                 "shippingInstructionsReference" : "b36484d0-1115-43c2-93e4-a378823a8386",
                                 "shippingInstructionsStatus" : "RECEIVED",
                                 "transportDocumentReference" : "4AD3FA470BB541B980CE",
                                 "transportDocumentTypeCode" : "BOL",
                                 "updatedShippingInstructionsStatus" : "UPDATE_CONFIRMED",
                                 "utilizedTransportEquipments" : [
                                    {
                                       "equipment" : {
                                          "ISOEquipmentCode" : "22G1",
                                          "equipmentReference" : "HLXU1234567",
                                          "tareWeight" : {
                                             "unit" : "KGM",
                                             "value" : 2370
                                          }
                                       },
                                       "isShipperOwned" : false,
                                       "seals" : [
                                          {
                                             "number" : "DCSA-CTK-1234"
                                          }
                                       ]
                                    }
                                 ]
                              }
                           },
                           "reeferExample" : {
                              "description" : "A `Shipping Instructions` with reefer cargo (`Diary products`) with US as destination. The provider requests that the `Advance Manifest Filing` be updated by the consumer.\n\n**Notice** that there are no Reefer info in the `Shipping Instructions`. If any reefer info need to be modified - then a `Booking` amendment must be applied to booking: `CBR_123_REEFER`.\n",
                              "summary" : "Shipping Instructions with reefer cargo\n",
                              "value" : {
                                 "advanceManifestFilings" : [
                                    {
                                       "advanceManifestFilingsHouseBLPerformedBy" : "SELF",
                                       "countryCode" : "US",
                                       "manifestTypeCode" : "AFR",
                                       "selfFilerCode" : "HHL007"
                                    }
                                 ],
                                 "consignmentItems" : [
                                    {
                                       "HSCodes" : [
                                          "04052090"
                                       ],
                                       "cargoItems" : [
                                          {
                                             "cargoGrossWeight" : {
                                                "unit" : "KGM",
                                                "value" : 12000
                                             },
                                             "equipmentReference" : "KKFU6671914",
                                             "outerPackaging" : {
                                                "description" : "Bottles",
                                                "numberOfPackages" : 400,
                                                "packageCode" : "BQ"
                                             }
                                          }
                                       ],
                                       "carrierBookingReference" : "CBR_123_REEFER",
                                       "commoditySubreference" : "ReeferSubRef002",
                                       "descriptionOfGoods" : [
                                          "Dairy products"
                                       ]
                                    }
                                 ],
                                 "documentParties" : {
                                    "shipper" : {
                                       "displayedAddress" : [
                                          "Strawinskylaan 4117"
                                       ],
                                       "partyContactDetails" : [
                                          {
                                             "email" : "no-reply@dcsa.example.org",
                                             "name" : "DCSA test person"
                                          }
                                       ],
                                       "partyName" : "DCSA CTK"
                                    }
                                 },
                                 "feedbacks" : [
                                    {
                                       "code" : "PROPERTY_VALUE_MUST_CHANGE",
                                       "jsonPath" : "$.advanceManifestFilings[0]",
                                       "message" : "Not a legal combination of \"manifestTypeCode\" (AFR) and \"countryCode\" (US)\n",
                                       "property" : "advanceManifestFilings",
                                       "severity" : "ERROR"
                                    },
                                    {
                                       "code" : "PROPERTY_VALUE_MUST_CHANGE",
                                       "jsonPath" : "$.advanceManifestFilings",
                                       "message" : "Missing \"ACI\" filing required for import to US\n",
                                       "property" : "advanceManifestFilings",
                                       "severity" : "ERROR"
                                    }
                                 ],
                                 "freightPaymentTermCode" : "PRE",
                                 "invoicePayableAt" : {
                                    "UNLocationCode" : "DKAAR"
                                 },
                                 "isElectronic" : true,
                                 "isShippedOnBoardType" : true,
                                 "isToOrder" : true,
                                 "partyContactDetails" : [
                                    {
                                       "email" : "no-reply@dcsa.example.org",
                                       "name" : "DCSA test person"
                                    }
                                 ],
                                 "shippingInstructionsReference" : "9051da7d-4099-4930-af35-7add4e68c635",
                                 "shippingInstructionsStatus" : "PENDING_UPDATE",
                                 "transportDocumentReference" : "D8931B95625E4B339F2A",
                                 "transportDocumentTypeCode" : "BOL",
                                 "utilizedTransportEquipments" : [
                                    {
                                       "equipmentReference" : "KKFU6671914",
                                       "isShipperOwned" : false,
                                       "seals" : [
                                          {
                                             "number" : "DCSA-CTK-1234"
                                          }
                                       ]
                                    }
                                 ]
                              }
                           },
                           "regularSTDExample" : {
                              "description" : "A `RECEIVED` `Shipping Instructions` with standard Dry cargo waiting for the provider to `DRAFT` a `Transport Document`.\n",
                              "summary" : "Fetch Shipping Instructions with standard Dry cargo\n",
                              "value" : {
                                 "consignmentItems" : [
                                    {
                                       "HSCodes" : [
                                          "640510"
                                       ],
                                       "cargoItems" : [
                                          {
                                             "cargoGrossWeight" : {
                                                "unit" : "KGM",
                                                "value" : 12000
                                             },
                                             "equipmentReference" : "NARU3472484",
                                             "outerPackaging" : {
                                                "description" : "Fibreboard boxes",
                                                "numberOfPackages" : 400,
                                                "packageCode" : "4G"
                                             }
                                          }
                                       ],
                                       "carrierBookingReference" : "CBR_123_REGULAR",
                                       "commoditySubreference" : "RegSubRef001",
                                       "descriptionOfGoods" : [
                                          "Shoes - black"
                                       ]
                                    }
                                 ],
                                 "documentParties" : {
                                    "shipper" : {
                                       "displayedAddress" : [
                                          "Strawinskylaan 4117"
                                       ],
                                       "partyContactDetails" : [
                                          {
                                             "email" : "no-reply@dcsa.example.org",
                                             "name" : "DCSA test person"
                                          }
                                       ],
                                       "partyName" : "DCSA CTK"
                                    }
                                 },
                                 "freightPaymentTermCode" : "PRE",
                                 "invoicePayableAt" : {
                                    "UNLocationCode" : "DKAAR"
                                 },
                                 "isElectronic" : true,
                                 "isShippedOnBoardType" : true,
                                 "isToOrder" : true,
                                 "partyContactDetails" : [
                                    {
                                       "email" : "no-reply@dcsa.example.org",
                                       "name" : "DCSA test person"
                                    }
                                 ],
                                 "shippingInstructionsReference" : "fc5009a7-25ad-4bb0-9892-4e2dea6bcdd9",
                                 "shippingInstructionsStatus" : "RECEIVED",
                                 "transportDocumentTypeCode" : "BOL",
                                 "utilizedTransportEquipments" : [
                                    {
                                       "equipmentReference" : "NARU3472484",
                                       "isShipperOwned" : false,
                                       "seals" : [
                                          {
                                             "number" : "DCSA-CTK-1234"
                                          }
                                       ]
                                    }
                                 ]
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ShippingInstructions"
                        }
                     }
                  },
                  "description" : "Fetching the content of either the \"original\" `Shipping Instructions` or the `Updated Shipping Instructions`\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "202" : {
                  "description" : "The `Shipping Instructions` is currently being processed by the provider. No payload is returned. A new `GET` request has to be made periodically to check if the provider has finished processing the `Shipping Instructions`.\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "404" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "notFoundExample" : {
                              "description" : "The `documentReference` does not exist.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "documentReference not found\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "The Shipping Instructions does not exist",
                                       "errorCodeText" : "documentReference not found"
                                    }
                                 ],
                                 "httpMethod" : "GET",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123?updatedContent=true",
                                 "statusCode" : 404,
                                 "statusCodeMessage" : "documentReference not found",
                                 "statusCodeText" : "Not Found"
                              }
                           },
                           "notFoundUpdateExample" : {
                              "description" : "The `Update Shipping Instructions` does not exist. No updates have been requested by the consumer.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Shipping Instructions update not found\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "The Shipping Instructions has not yet been updated - no update exists",
                                       "errorCodeText" : "Shipping Instructions does not contain an update"
                                    }
                                 ],
                                 "httpMethod" : "GET",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123?updatedContent=true",
                                 "statusCode" : 404,
                                 "statusCodeMessage" : "No update accessible",
                                 "statusCodeText" : "Not Found"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the consumer is requesting the content of the `UpdatedShipping Instructions`, and no update has yet been requested.\n\nA `404` (Not Found) can also be sent in case the provider does not know of the `documentReference` used in the request (the resource does not exist)\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "409" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "conflictExample" : {
                              "description" : "The provider is already processing a request and needs to finish this process before any new requests are processed\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                              "summary" : "Conflicting request\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "The Shipping Instructions cannot be updated/amended while it is being processed. Please try again later\n",
                                       "errorCodeText" : "Conflicting request is being processed"
                                    }
                                 ],
                                 "httpMethod" : "GET",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123",
                                 "statusCode" : 409,
                                 "statusCodeMessage" : "Previous request is being processed. Please try again\nlater\n",
                                 "statusCodeText" : "Conflict"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the provider is processing the `Shipping Instructions` - it is possible for the provider to reject new incoming requests by returning a `409` (Conflict)\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "internalServerErrorExample" : {
                              "description" : "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Internal Server Error while fetching the Shipping Instructions\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "Internal Error occurred",
                                       "errorCodeText" : "Internal Error occurred"
                                    }
                                 ],
                                 "httpMethod" : "GET",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123",
                                 "statusCode" : 500,
                                 "statusCodeMessage" : "Internal Server Error occurred while fetching the Shipping Instructions",
                                 "statusCodeText" : "Internal Server Error"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "default" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "tooManyRequestsExample" : {
                              "description" : "Calling the endPoint\n\n    GET /v3/shipping-instructions/si-123\n    \ntoo many times within a time period.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                              "summary" : "Fetching too many `Transport Document` requests\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "A maximum of 10 Shipping Instructions can be requested per hour",
                                       "errorCodeText" : "Max Shipping Instructions requests reached"
                                    }
                                 ],
                                 "httpMethod" : "GET",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123",
                                 "statusCode" : 429,
                                 "statusCodeMessage" : "Too many request to fetch a Shipping Instructions has been requested. Please try again in 1 hour\n",
                                 "statusCodeText" : "Too Many Requests"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "For other errors the error object should be populated with relevant information\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               }
            },
            "summary" : "Gets the Shipping Instructions\n",
            "tags" : [
               "Shipping Instructions"
            ]
         },
         "patch" : {
            "description" : "A way for the consumer to Cancel an `Updated Shipping Instructions`. This endPoint corresponds with **UseCase 5 - Cancel update to Shipping Instructions**.\n\n## Precondition\nIn order to cancel an `Updated Shipping Instructions`, the status of the `Updated Shipping Instructions` must be in in status `UPDATE_RECEIVED`. The status of the `Shipping Instructions` can be either `RECEIVED` or `PENDING_UPDATE`.\n\n## Postcondition\nThe provider has received a cancellation from the consumer for an `Updated Shipping Instructions` that is in state `UPDATE_RECEIVED`.\n\nThe consumer will receive a `202` (Accepted) if the payload schema-validates or a `400` (Bad Request) if it does not.\n\n## Flow for the `202` (Accepted) response\nThe following occurs when a provider receives a cancellation:\n1. The payload is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n   **The process stops here!**\n2. The payload is schema-valid which means:\n    - all required properties are provided.\n    - all values provided have correct data type.\n3. An empty response is returned and the consumer now awaits further processing by the provider.\n\nOnce processed, the `Updated Shipping Instructions` is cancelled and a [Shipping Instructions Notification](#/ShippingInstructionsNotification) will be sent. In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the\n\n    GET /v3/shipping-instructions/{documentReference}\n    \nendPoint to check if the `shippingInstructionsStatus` and `updatedShippingInstructionsStatus` of the `Shipping Instructions` has changed.\n",
            "operationId" : "patch-shipping-instructions",
            "parameters" : [
               {
                  "description" : "An identifier for a `Shipping Instructions`. It can either be a `shippingInstructionsReference` or a `transportDocumentReference`.\n",
                  "explode" : false,
                  "in" : "path",
                  "name" : "documentReference",
                  "required" : true,
                  "schema" : {
                     "example" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                     "maxLength" : 100,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "style" : "simple"
               },
               {
                  "description" : "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
                  "explode" : false,
                  "in" : "header",
                  "name" : "API-Version",
                  "required" : false,
                  "schema" : {
                     "example" : "3",
                     "type" : "string"
                  },
                  "style" : "simple"
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "cancelUpdateExample" : {
                           "description" : "Consumer wants to cancel an update provided to a `Shipping Instructions`. The `updatedShippingInstructionsStatus` is set to `UPDATE_CANCELLED`\n",
                           "summary" : "Cancel a Shipping Instructions update\n",
                           "value" : {
                              "updatedShippingInstructionsStatus" : "UPDATE_CANCELLED"
                           }
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/CancelShippingInstructionsUpdate"
                     }
                  }
               },
               "description" : "Cancel the `Update Shipping Instructions`\n",
               "required" : true
            },
            "responses" : {
               "202" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "cancelUpdateExample" : {
                              "description" : "Consumer wants to cancel an update provided to a `Shipping Instructions`.\n",
                              "summary" : "Cancel a Shipping Instructions update\n"
                           }
                        }
                     }
                  },
                  "description" : "The cancellation of the `Updated Shipping Instructions` is accepted and is now awaiting further processing by the provider.\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "badRequestExample" : {
                              "description" : "`APPROVE` is not a possible value when PATCHING an `Updated Shipping Instructions`.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Wrong Update Shipping Instructions status\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "Only UPDATE_CANCELLED is an allowed value: APPROVE was inserted",
                                       "errorCodeText" : "incorrect value",
                                       "property" : "updatedShippingInstructionsStatus",
                                       "value" : "APPROVE"
                                    }
                                 ],
                                 "httpMethod" : "PATCH",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123",
                                 "statusCode" : 400,
                                 "statusCodeMessage" : "APPROVE is not a valid status to set",
                                 "statusCodeText" : "Bad Request"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the cancel payload does not schema validate a `400` (Bad Request) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "404" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "notUpdateFoundExample" : {
                              "description" : "The `Update Shipping Instructions` does not exist. No updates have been requested by the consumer.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Shipping Instructions update not found\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "The Shipping Instructions has no update request - nothing to cancel",
                                       "errorCodeText" : "Shipping Instructions does not contain an update"
                                    }
                                 ],
                                 "httpMethod" : "PATCH",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123",
                                 "statusCode" : 404,
                                 "statusCodeMessage" : "No update exists",
                                 "statusCodeText" : "Not Found"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the consumer is trying to cancel a `Shipping Instructions` that does not have an ongoing update request, an `Updated Shipping Instructions` that is in state `UPDATE_RECEIVED`.\n\nA `404` (Not Found) can also be sent in case the provider does not know of the `documentReference` used in the request (the resource does not exist)\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "409" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "conflictExample" : {
                              "description" : "The `Updated Shipping Instructions` referenced in the `PATCH` request is being processed by the provider. The provider does not support breaking this processing and must complete the processing of the `Updated Shipping Instructions`. The cancellation will not be possible.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Conflicting Shipping Instructions cancellation\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "The Shipping Instructions cannot be cancelled while it is being processed",
                                       "errorCodeText" : "Shipping Instructions is being processed"
                                    }
                                 ],
                                 "httpMethod" : "PATCH",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123",
                                 "statusCode" : 409,
                                 "statusCodeMessage" : "Is being processed",
                                 "statusCodeText" : "Conflict"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the provider is already processing the `Updated Shipping Instructions` matching `shippingInstructionsReference='si-123'` it is possible to reject the `PATCH` request with a `409` (Conflict) response\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "internalServerErrorExample" : {
                              "description" : "An Internal Server Error has occurred, the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Internal Server Error while cancelling the `Shipping Instructions`\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "Internal Error occurred",
                                       "errorCodeText" : "Internal Error occurred"
                                    }
                                 ],
                                 "httpMethod" : "PATCH",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123",
                                 "statusCode" : 500,
                                 "statusCodeMessage" : "Internal Server Error occurred while cancelling the Shipping Instructions",
                                 "statusCodeText" : "Internal Server Error"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "default" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "tooManyRequestsExample" : {
                              "description" : "Calling the endPoint\n\n    PATCH /v3/shipping-instructions/si-123\n\ntoo many times within a time period.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                              "summary" : "Patching the `Shipping Instructions` too many times\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "A maximum of 10 Shipping Instructions patches can be requested per hour",
                                       "errorCodeText" : "Max Shipping Instructions requests reached"
                                    }
                                 ],
                                 "httpMethod" : "PATCH",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123",
                                 "statusCode" : 429,
                                 "statusCodeMessage" : "Too many request to patch a Shipping Instructions has been requested. Please try again in 1 hour\n",
                                 "statusCodeText" : "Too Many Requests"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "For other errors the error object should be populated with relevant information\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               }
            },
            "summary" : "Cancels an update to a Shipping Instructions\n",
            "tags" : [
               "Shipping Instructions"
            ]
         },
         "put" : {
            "description" : "Updates the `Shipping Instructions` with the `documentReference`. The path can contain either a `shippingInstructionsReference` or a `transportDocumentReference`. This endPoint corresponds with **UseCase 3 - Submit updated Shipping Instructions**\n\n### Precondition\nIn order to update a `Shipping Instructions`, the status of the `Shipping Instructions` needs to be in state:\n\n- `RECEIVED` in case the consumer has updated information for the `Shipping Instructions`\n- `PENDING_UPDATE` in case the provider has requested the consumer to update the `Shipping Instructions` (a result of **UseCase 2 - Request to update Shipping Instructions**)\n\n## Postcondition\nThe provider has received an update to the `Shipping Instructions` (**UseCase 3 - Submit updated Shipping Instructions**), from now on called the `Updated Shipping Instructions`.\n\nThe `Updated Shipping Instructions` and the \"original\" `Shipping Instructions` **co-exist** until a new update is submitted by the consumer (via **UseCase 3: Submit updated Shipping Instructions**) or until the provider requests an update (sets the `shippingInstructionsStatus='PENDING_UPDATE'` via **UseCase 2: Request to update Shipping Instructions**). The `Updated Shipping Instructions` always represents the latest version of an update received by the provider.\n\nThe consumer will receive a `202` (Accepted) if the payload schema-validates or a `400` (Bad Request) if it does not.\n\n## Flow for the `202` (Accepted) response\nThe following occurs when a provider receives an **update** to a `Shipping Instructions`\n1. The payload (`Updated Shipping Instructions`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n   **The process stops here!**\n2. The payload is schema-valid which means:\n    - all required properties are provided\n    - all values provided have correct data type.\n3. An empty response is returned and the consumer now awaits further processing by the provider.\n\nFor `PUT` `Shipping Instructions` the process ends here. The `Shipping Instructions`:\n  - is now accepted by the provider system\n  - the status of the `Shipping Instructions` is unchanged\n  - a `202` (Accepted) response is sent with an empty payload\n  - awaits further processing by the provider\n\nThe provider will now start asynchronous processing. Once processed, the state will change to one of the following values depending on the use case for calling the `PUT` endPoint:\n  - `shippingInstructionsStatus='RECEIVED'` and `updatedShippingInstructionsStatus='UPDATE_RECEIVED'` (if endPoint is used to make an update to a Submitted Shipping Instructions - **UseCase 1 - Submit Shipping Instructions**)\n  - `shippingInstructionsStatus='PENDING_UPDATE'` and `updatedShippingInstructionsStatus='UPDATE_RECEIVED'` (if endPoint is used as a response to **UseCase 2 - Request to update Shipping Instructions**)\n\nThe new state will be communicated via a [Shipping Instructions Notification](#/ShippingInstructionsNotification). In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the\n\n    GET /v3/shipping-instructions/{documentReference}\n    \nendPoint to check if the `shippingInstructionsStatus` and `updatedShippingInstructionsStatus` of the `Shipping Instructions` has changed.\n  \nIf the consumer wants to get the content of the `Update Shipping Instructions` provided via this `PUT` endPoint,  the `GET` endPoint needs to be used in combination with the `?updatedContent=true` queryParameter:\n  \n    GET /v3/shipping-instructions/{documentReference}?updatedContent=true\n    \nIt is possible to `GET` the content of the `Updated Shipping Instructions` via the example above until either:\n  - the provider requests for a new update (**UseCase 2: Request to update Shipping Instructions**) in which case the \"old update\" is no longer accessible\n  - the consumer submits a new update (**UseCase 3: Submit updated Shipping Instructions**) in which case the \"new update\" provided **replaces** the \"old update\".\n",
            "operationId" : "update-shipping-instructions",
            "parameters" : [
               {
                  "description" : "An identifier for a `Shipping Instructions`. It can either be a `shippingInstructionsReference` or a `transportDocumentReference`.\n",
                  "explode" : false,
                  "in" : "path",
                  "name" : "documentReference",
                  "required" : true,
                  "schema" : {
                     "example" : "e0559d83-00e2-438e-afd9-fdd610c1a008",
                     "maxLength" : 100,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "style" : "simple"
               },
               {
                  "description" : "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
                  "explode" : false,
                  "in" : "header",
                  "name" : "API-Version",
                  "required" : false,
                  "schema" : {
                     "example" : "3",
                     "type" : "string"
                  },
                  "style" : "simple"
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "regularSTDExample" : {
                           "description" : "An update for a `Shipping Instructions` with standard Dry cargo. The `Shipping Instructions` update now wait to be confirmed by the provider.\n",
                           "summary" : "Update Shipping Instructions\n",
                           "value" : {
                              "consignmentItems" : [
                                 {
                                    "HSCodes" : [
                                       "640510"
                                    ],
                                    "cargoItems" : [
                                       {
                                          "cargoGrossWeight" : {
                                             "unit" : "KGM",
                                             "value" : 12000
                                          },
                                          "equipmentReference" : "NARU3472484",
                                          "outerPackaging" : {
                                             "description" : "Fibreboard boxes",
                                             "numberOfPackages" : 400,
                                             "packageCode" : "4G"
                                          }
                                       }
                                    ],
                                    "carrierBookingReference" : "CBR_123_REGULAR",
                                    "commoditySubreference" : "RegSubRef001",
                                    "descriptionOfGoods" : [
                                       "Shoes - black"
                                    ]
                                 }
                              ],
                              "documentParties" : {
                                 "shipper" : {
                                    "displayedAddress" : [
                                       "Strawinskylaan 4117"
                                    ],
                                    "partyContactDetails" : [
                                       {
                                          "email" : "no-reply@dcsa.example.org",
                                          "name" : "DCSA test person"
                                       }
                                    ],
                                    "partyName" : "DCSA CTK"
                                 }
                              },
                              "freightPaymentTermCode" : "PRE",
                              "invoicePayableAt" : {
                                 "UNLocationCode" : "DKAAR"
                              },
                              "isElectronic" : true,
                              "isShippedOnBoardType" : true,
                              "isToOrder" : true,
                              "partyContactDetails" : [
                                 {
                                    "email" : "no-reply@dcsa.example.org",
                                    "name" : "DCSA test person"
                                 }
                              ],
                              "shippingInstructionsReference" : "fc5009a7-25ad-4bb0-9892-4e2dea6bcdd9",
                              "transportDocumentTypeCode" : "BOL",
                              "utilizedTransportEquipments" : [
                                 {
                                    "equipmentReference" : "NARU3472484",
                                    "isShipperOwned" : false,
                                    "seals" : [
                                       {
                                          "number" : "DCSA-CTK-1234"
                                       }
                                    ]
                                 }
                              ]
                           }
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/UpdateShippingInstructions"
                     }
                  }
               },
               "description" : "Parameters used to update the `Shipping Instructions`\n",
               "required" : true
            },
            "responses" : {
               "202" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "receivedExample" : {
                              "description" : "An `Updated Shipping Instructions` received and accepted by provider, the `Updated Shipping Instructions` now awaits provider action, the `shippingInstructionStatus` does not change.\n",
                              "summary" : "Shipping Instructions updated by consumer\n"
                           }
                        }
                     }
                  },
                  "description" : "The `Shipping Instructions` update has been successfully accepted by the provider. `shippingInstructionsStatus` does not change, `updatedShippingInstructionsStatus` is not set and response payload is empty. Further processing will be done by provider.\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "badRequestExample" : {
                              "description" : "`isElectronic` is a mandatory property in the `Shipping Instructions`. In case this property is missing an error object is created.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Shipping Instructions missing isElectronic\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "isElectronic must be provided as part of a Shipping Instructions",
                                       "errorCodeText" : "mandatory property missing",
                                       "property" : "isElectronic"
                                    }
                                 ],
                                 "httpMethod" : "PUT",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123",
                                 "statusCode" : 400,
                                 "statusCodeMessage" : "isElectronic not found - it is a mandatory property in Shipping Instructions",
                                 "statusCodeText" : "Bad Request"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the updated `Shipping Instructions` does not schema validate a `400` (Bad Request) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "404" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "conflictExample" : {
                              "description" : "The provided `documentReference` could not be found. This can be because a `Post` request has not been finished processing or because the `documentReference` does not exist in the provider system.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Not found request\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "The Shipping Instructions does not exist",
                                       "errorCodeText" : "shippingInstructionsReference not found"
                                    }
                                 ],
                                 "httpMethod" : "PUT",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123",
                                 "statusCode" : 404,
                                 "statusCodeMessage" : "shippingInstructionsReference not found",
                                 "statusCodeText" : "Not Found"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the provider does not know about the `documentReference` used in the request (this could be because of a `POST` request that has not finished processing or simply because the resource does not exist) - it is possible for the provider to reject the requests by returning a `404` (Not Found)\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "409" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "conflictExample" : {
                              "description" : "The `Shipping Instructions` referenced in the `PUT` request is being processed by the provider. The provider does not support breaking this processing and must complete the processing of the `Shipping Instructions` prior to receiving a new request to update.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Conflicting Shipping Instructions update\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "The Shipping Instructions cannot be updated while it is being processed. Please try again later",
                                       "errorCodeText" : "Shipping Instructions is being processed"
                                    }
                                 ],
                                 "httpMethod" : "PUT",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123",
                                 "statusCode" : 409,
                                 "statusCodeMessage" : "Is being processed",
                                 "statusCodeText" : "Conflict"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the provider is already processing the `Shipping Instructions` matching `shippingInstructionsReference='si-123'` or for any other reason cannot process the request, it is possible to reject the `PUT` request with a `409` (Conflict) response\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "internalServerErrorExample" : {
                              "description" : "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Internal Server Error while processing `Shipping Instructions`\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "Internal Error occurred",
                                       "errorCodeText" : "Internal Error occurred"
                                    }
                                 ],
                                 "httpMethod" : "PUT",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123",
                                 "statusCode" : 500,
                                 "statusCodeMessage" : "Internal Server Error occurred while processing Shipping Instructions",
                                 "statusCodeText" : "Internal Server Error"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "default" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "tooManyRequestsExample" : {
                              "description" : "Calling the endPoint\n\n    PUT /v3/shipping-instructions/si-123\n  \ntoo many times within a time period.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Updating too many Shipping Instructions\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "A maximum of 10 Shipping Instructions can be updated per hour",
                                       "errorCodeText" : "Max Shipping Instructions requests reached"
                                    }
                                 ],
                                 "httpMethod" : "PUT",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/shipping-instructions/si-123",
                                 "statusCode" : 429,
                                 "statusCodeMessage" : "Too many request to update a Shipping Instructions has been requested. Please try again in 1 hour",
                                 "statusCodeText" : "Too Many Requests"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "For other errors the error object should be populated with relevant information\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               }
            },
            "summary" : "Updates the Shipping Instructions\n",
            "tags" : [
               "Shipping Instructions"
            ]
         }
      },
      "/v3/transport-document-notifications" : {
         "post" : {
            "description" : "Creates a new [`Transport Document Notification`](#/TransportDocumentNotification). This endPoint is called whenever a `Transport Document` that a cosumer has subscribed to changes state or is updated.\n\n**This endPoint is to be implemented by a consumer of the EBL API in order to receive Notifications**\n",
            "operationId" : "transport-document-notifications",
            "parameters" : [
               {
                  "description" : "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
                  "explode" : false,
                  "in" : "header",
                  "name" : "API-Version",
                  "required" : false,
                  "schema" : {
                     "example" : "3",
                     "type" : "string"
                  },
                  "style" : "simple"
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "draftFullStateTransferExample" : {
                           "description" : "A full state transfer notification explaining that a new `Draft Transport Document` has been created and stored in provider system (`transportDocumentStatus='DRAFT'`).\n",
                           "summary" : "Transport Document Draft created (Full State Transfer)\n",
                           "value" : {
                              "data" : {
                                 "transportDocument" : {
                                    "cargoMovementTypeAtDestination" : "FCL",
                                    "cargoMovementTypeAtOrigin" : "FCL",
                                    "carrierCode" : "MSC",
                                    "carrierCodeListProvider" : "SMDG",
                                    "charges" : [
                                       {
                                          "calculationBasis" : "Per transport document",
                                          "chargeName" : "Fictive transport document fee",
                                          "currencyAmount" : 1,
                                          "currencyCode" : "EUR",
                                          "paymentTermCode" : "COL",
                                          "quantity" : 1,
                                          "unitPrice" : 1
                                       }
                                    ],
                                    "consignmentItems" : [
                                       {
                                          "HSCodes" : [
                                             "640510"
                                          ],
                                          "cargoItems" : [
                                             {
                                                "cargoGrossWeight" : {
                                                   "unit" : "KGM",
                                                   "value" : 12000
                                                },
                                                "equipmentReference" : "NARU3472484",
                                                "outerPackaging" : {
                                                   "description" : "Fibreboard boxes",
                                                   "numberOfPackages" : 400,
                                                   "packageCode" : "4G"
                                                }
                                             }
                                          ],
                                          "carrierBookingReference" : "CBR_123_REGULAR",
                                          "descriptionOfGoods" : [
                                             "Shoes - black"
                                          ]
                                       }
                                    ],
                                    "deliveryTypeAtDestination" : "CY",
                                    "documentParties" : {
                                       "issuingParty" : {
                                          "address" : {
                                             "city" : "Geneva",
                                             "countryCode" : "CH",
                                             "street" : "Chemin Rieu",
                                             "streetNumber" : "12-14"
                                          },
                                          "identifyingCodes" : [
                                             {
                                                "codeListName" : "LCL",
                                                "codeListProvider" : "SMDG",
                                                "partyCode" : "MSC"
                                             }
                                          ],
                                          "partyName" : "Mediterranean Shipping Company"
                                       },
                                       "shipper" : {
                                          "displayedAddress" : [
                                             "Strawinskylaan 4117"
                                          ],
                                          "partyContactDetails" : [
                                             {
                                                "email" : "no-reply@dcsa.example.org",
                                                "name" : "DCSA test person"
                                             }
                                          ],
                                          "partyName" : "DCSA CTK"
                                       }
                                    },
                                    "freightPaymentTermCode" : "PRE",
                                    "invoicePayableAt" : {
                                       "UNLocationCode" : "DKAAR"
                                    },
                                    "isElectronic" : true,
                                    "isShippedOnBoardType" : true,
                                    "isToOrder" : true,
                                    "partyContactDetails" : [
                                       {
                                          "email" : "no-reply@dcsa.example.org",
                                          "name" : "DCSA test person"
                                       }
                                    ],
                                    "receiptTypeAtOrigin" : "CY",
                                    "serviceContractReference" : "SCR-1234-REGULAR",
                                    "shippedOnBoardDate" : "2023-12-20",
                                    "shippingInstructionsReference" : "fc5009a7-25ad-4bb0-9892-4e2dea6bcdd9",
                                    "termsAndConditions" : "You agree that this transport document exist is name only for the sake of\ntesting your conformance with the DCSA EBL API. This transport document is NOT backed\nby a real shipment with ANY carrier and NONE of the requested services will be\ncarried out in real life.\n\nUnless required by applicable law or agreed to in writing, DCSA provides\nthis JSON data on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\nANY KIND, either express or implied, including, without limitation, any\nwarranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY,\nor FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for\ndetermining the appropriateness of using or redistributing this JSON\ndata and assume any risks associated with Your usage of this data.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall DCSA be liable to\nYou for damages, including any direct, indirect, special, incidental, or\nconsequential damages of any character arising as a result of this terms or conditions\nor out of the use or inability to use the provided JSON data (including but not limited\nto damages for loss of goodwill, work stoppage, computer failure or malfunction, or any\nand all other commercial damages or losses), even if DCSA has been advised of the\npossibility of such damages.\n",
                                    "transportDocumentReference" : "HHL71800000",
                                    "transportDocumentStatus" : "DRAFT",
                                    "transportDocumentTypeCode" : "BOL",
                                    "transports" : {
                                       "plannedArrivalDate" : "2023-12-22",
                                       "plannedDepartureDate" : "2023-12-20",
                                       "portOfDischarge" : {
                                          "UNLocationCode" : "DEBRV"
                                       },
                                       "portOfLoading" : {
                                          "UNLocationCode" : "DKAAR"
                                       },
                                       "vesselVoyages" : [
                                          {
                                             "carrierExportVoyageNumber" : "402E",
                                             "vesselName" : "MSC Gülsün"
                                          }
                                       ]
                                    },
                                    "utilizedTransportEquipments" : [
                                       {
                                          "equipment" : {
                                             "ISOEquipmentCode" : "22G1",
                                             "equipmentReference" : "NARU3472484"
                                          },
                                          "isShipperOwned" : false,
                                          "seals" : [
                                             {
                                                "number" : "DCSA-CTK-1234"
                                             }
                                          ]
                                       }
                                    ]
                                 },
                                 "transportDocumentReference" : "HHL71800000",
                                 "transportDocumentStatus" : "DRAFT"
                              },
                              "datacontenttype" : "application/json",
                              "id" : "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                              "source" : "https://member.com/",
                              "specversion" : "1.0",
                              "subscriptionReference" : "EBL001",
                              "time" : "2018-04-05T17:31:00Z",
                              "type" : "org.dcsa.transport-document.v3"
                           }
                        },
                        "draftLightweightExample" : {
                           "description" : "A lightweight notification explaining that a new `Draft Transport Document` has been created and stored in provider system (`transportDocumentStatus='DRAFT'`).\n",
                           "summary" : "Transport Document Draft created (Lightweight)\n",
                           "value" : {
                              "data" : {
                                 "transportDocumentReference" : "HHL71800000",
                                 "transportDocumentStatus" : "DRAFT"
                              },
                              "datacontenttype" : "application/json",
                              "id" : "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                              "source" : "https://member.com/",
                              "specversion" : "1.0",
                              "subscriptionReference" : "EBL001",
                              "time" : "2018-04-05T17:31:00Z",
                              "type" : "org.dcsa.transport-document.v3"
                           }
                        },
                        "issuedFullStateTransferExample" : {
                           "description" : "A full state transfer notification explaining that a `Transport Document` has been issued (`transportDocumentStatus='ISSUED'`)\n",
                           "summary" : "Transport Document has been issued (Full State Transfer)\n",
                           "value" : {
                              "data" : {
                                 "transportDocument" : {
                                    "cargoMovementTypeAtDestination" : "FCL",
                                    "cargoMovementTypeAtOrigin" : "FCL",
                                    "carrierCode" : "MSC",
                                    "carrierCodeListProvider" : "SMDG",
                                    "charges" : [
                                       {
                                          "calculationBasis" : "Per transport document",
                                          "chargeName" : "Fictive transport document fee",
                                          "currencyAmount" : 1,
                                          "currencyCode" : "EUR",
                                          "paymentTermCode" : "COL",
                                          "quantity" : 1,
                                          "unitPrice" : 1
                                       }
                                    ],
                                    "consignmentItems" : [
                                       {
                                          "HSCodes" : [
                                             "640510"
                                          ],
                                          "cargoItems" : [
                                             {
                                                "cargoGrossWeight" : {
                                                   "unit" : "KGM",
                                                   "value" : 12000
                                                },
                                                "equipmentReference" : "NARU3472484",
                                                "outerPackaging" : {
                                                   "description" : "Fibreboard boxes",
                                                   "numberOfPackages" : 400,
                                                   "packageCode" : "4G"
                                                }
                                             }
                                          ],
                                          "carrierBookingReference" : "CBR_123_REGULAR",
                                          "descriptionOfGoods" : [
                                             "Shoes - black"
                                          ]
                                       }
                                    ],
                                    "deliveryTypeAtDestination" : "CY",
                                    "documentParties" : {
                                       "issuingParty" : {
                                          "address" : {
                                             "city" : "Geneva",
                                             "countryCode" : "CH",
                                             "street" : "Chemin Rieu",
                                             "streetNumber" : "12-14"
                                          },
                                          "identifyingCodes" : [
                                             {
                                                "codeListName" : "LCL",
                                                "codeListProvider" : "SMDG",
                                                "partyCode" : "MSC"
                                             }
                                          ],
                                          "partyName" : "Mediterranean Shipping Company"
                                       },
                                       "shipper" : {
                                          "displayedAddress" : [
                                             "Strawinskylaan 4117"
                                          ],
                                          "partyContactDetails" : [
                                             {
                                                "email" : "no-reply@dcsa.example.org",
                                                "name" : "DCSA test person"
                                             }
                                          ],
                                          "partyName" : "DCSA CTK"
                                       }
                                    },
                                    "freightPaymentTermCode" : "PRE",
                                    "invoicePayableAt" : {
                                       "UNLocationCode" : "DKAAR"
                                    },
                                    "isElectronic" : true,
                                    "isShippedOnBoardType" : true,
                                    "isToOrder" : true,
                                    "partyContactDetails" : [
                                       {
                                          "email" : "no-reply@dcsa.example.org",
                                          "name" : "DCSA test person"
                                       }
                                    ],
                                    "receiptTypeAtOrigin" : "CY",
                                    "serviceContractReference" : "SCR-1234-REGULAR",
                                    "shippedOnBoardDate" : "2023-12-20",
                                    "shippingInstructionsReference" : "fc5009a7-25ad-4bb0-9892-4e2dea6bcdd9",
                                    "termsAndConditions" : "You agree that this transport document exist is name only for the sake of\ntesting your conformance with the DCSA EBL API. This transport document is NOT backed\nby a real shipment with ANY carrier and NONE of the requested services will be\ncarried out in real life.\n\nUnless required by applicable law or agreed to in writing, DCSA provides\nthis JSON data on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\nANY KIND, either express or implied, including, without limitation, any\nwarranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY,\nor FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for\ndetermining the appropriateness of using or redistributing this JSON\ndata and assume any risks associated with Your usage of this data.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall DCSA be liable to\nYou for damages, including any direct, indirect, special, incidental, or\nconsequential damages of any character arising as a result of this terms or conditions\nor out of the use or inability to use the provided JSON data (including but not limited\nto damages for loss of goodwill, work stoppage, computer failure or malfunction, or any\nand all other commercial damages or losses), even if DCSA has been advised of the\npossibility of such damages.\n",
                                    "transportDocumentReference" : "HHL71800000",
                                    "transportDocumentStatus" : "ISSUED",
                                    "transportDocumentTypeCode" : "BOL",
                                    "transports" : {
                                       "plannedArrivalDate" : "2023-12-22",
                                       "plannedDepartureDate" : "2023-12-20",
                                       "portOfDischarge" : {
                                          "UNLocationCode" : "DEBRV"
                                       },
                                       "portOfLoading" : {
                                          "UNLocationCode" : "DKAAR"
                                       },
                                       "vesselVoyages" : [
                                          {
                                             "carrierExportVoyageNumber" : "402E",
                                             "vesselName" : "MSC Gülsün"
                                          }
                                       ]
                                    },
                                    "utilizedTransportEquipments" : [
                                       {
                                          "equipment" : {
                                             "ISOEquipmentCode" : "22G1",
                                             "equipmentReference" : "NARU3472484"
                                          },
                                          "isShipperOwned" : false,
                                          "seals" : [
                                             {
                                                "number" : "DCSA-CTK-1234"
                                             }
                                          ]
                                       }
                                    ]
                                 },
                                 "transportDocumentReference" : "HHL71800000",
                                 "transportDocumentStatus" : "ISSUED"
                              },
                              "datacontenttype" : "application/json",
                              "id" : "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                              "source" : "https://member.com/",
                              "specversion" : "1.0",
                              "subscriptionReference" : "EBL001",
                              "time" : "2018-04-05T17:31:00Z",
                              "type" : "org.dcsa.transport-document.v3"
                           }
                        },
                        "issuedLightweightExample" : {
                           "description" : "A lightweight notification explaining that a `Transport Document` has been issued (`transportDocumentStatus='ISSUED'`)\n",
                           "summary" : "Transport Document has been issued (Lightweight)\n",
                           "value" : {
                              "data" : {
                                 "transportDocumentReference" : "HHL71800000",
                                 "transportDocumentStatus" : "ISSUED"
                              },
                              "datacontenttype" : "application/json",
                              "id" : "3cecb101-7a1a-43a4-9d62-e88a131651e2",
                              "source" : "https://member.com/",
                              "specversion" : "1.0",
                              "subscriptionReference" : "EBL001",
                              "time" : "2018-04-05T17:31:00Z",
                              "type" : "org.dcsa.transport-document.v3"
                           }
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/TransportDocumentNotification"
                     }
                  }
               },
               "description" : "The payload used to create a [`Transport Document Notification`](#/TransportDocumentNotification)\n"
            },
            "responses" : {
               "204" : {
                  "description" : "No Content\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "badRequestExample" : {
                              "description" : "`transportDocumentReference` is a mandatory property in the `Notification`. This is an example of how the error object would look in case this property is missing\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                              "summary" : "Transport Document missing transportDocumentReference\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "transportDocumentReference must be provided as part of a Notification\n",
                                       "errorCodeText" : "mandatory property missing",
                                       "property" : "transportDocumentReference"
                                    }
                                 ],
                                 "httpMethod" : "POST",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/transport-document-notifications",
                                 "statusCode" : 400,
                                 "statusCodeMessage" : "transportDocumentReference not found - mandatory to provide in a Notification\n",
                                 "statusCodeText" : "Bad Request"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the `Notification` does not schema validate a `400` (Bad Request) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "internalServerErrorExample" : {
                              "description" : "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                              "summary" : "Internal Server Error while processing Notification\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "Internal Error occurred",
                                       "errorCodeText" : "Internal Error occurred"
                                    }
                                 ],
                                 "httpMethod" : "POST",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/transport-document-notifications",
                                 "statusCode" : 500,
                                 "statusCodeMessage" : "Internal Server Error occurred while processing Transport Document\n",
                                 "statusCodeText" : "Internal Server Error"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "default" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "tooManyRequestsExample" : {
                              "description" : "Calling the endPoint\n\n    POST /v3/transport-document-notifications\n\ntoo many times within a time period.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                              "summary" : "Making too many Notifications\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "A maximum of 10 Notifications can be created per hour",
                                       "errorCodeText" : "Max Notifications reached"
                                    }
                                 ],
                                 "httpMethod" : "POST",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/transport-document-notifications",
                                 "statusCode" : 429,
                                 "statusCodeMessage" : "Too many request to create a Notification has been requested. Please try again in 1 hour\n",
                                 "statusCodeText" : "Too Many Requests"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "For other errors the error object should be populated with relevant information\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               }
            },
            "summary" : "Send a new Transport Document Notification",
            "tags" : [
               "Notifications"
            ]
         }
      },
      "/v3/transport-documents/{transportDocumentReference}" : {
         "get" : {
            "description" : "Retrieves the `Transport Document` with the `transportDocumentReference` in the path.\n\n**Condition:** Once the `Transport Document` has been Issued (`transportDocumentStatus='ISSUED'`) - the order of **ALL** lists/arrays in this payload **MUST** be preserved as by the provider of the API.\n",
            "operationId" : "get-transport-document",
            "parameters" : [
               {
                  "description" : "The `transportDocumentReference` of the `Transport Document`\n",
                  "explode" : false,
                  "in" : "path",
                  "name" : "transportDocumentReference",
                  "required" : true,
                  "schema" : {
                     "description" : "A unique number allocated by the shipping line to the `Transport Document` and the main number used for the tracking of the status of the shipment.\n",
                     "example" : "HHL71800000",
                     "maxLength" : 20,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "style" : "simple"
               },
               {
                  "description" : "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
                  "explode" : false,
                  "in" : "header",
                  "name" : "API-Version",
                  "required" : false,
                  "schema" : {
                     "example" : "3",
                     "type" : "string"
                  },
                  "style" : "simple"
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "dgExample" : {
                              "description" : "An `ISSUED` Transport Document by the provider containing DG (Dangerous Goods). The cargo is `Environmentally hazardous substance, liquid, N.O.S (Propiconazole)` which is transported in steel Jarricans.\n",
                              "summary" : "Issued Transport Document with DG (Dangerous Goods) cargo\n",
                              "value" : {
                                 "cargoMovementTypeAtDestination" : "FCL",
                                 "cargoMovementTypeAtOrigin" : "FCL",
                                 "carrierCode" : "HLC",
                                 "carrierCodeListProvider" : "SMDG",
                                 "charges" : [
                                    {
                                       "calculationBasis" : "Per transport document",
                                       "chargeName" : "Fictive transport document fee",
                                       "currencyAmount" : 1,
                                       "currencyCode" : "EUR",
                                       "paymentTermCode" : "COL",
                                       "quantity" : 1,
                                       "unitPrice" : 1
                                    }
                                 ],
                                 "consignmentItems" : [
                                    {
                                       "HSCodes" : [
                                          "293499"
                                       ],
                                       "cargoItems" : [
                                          {
                                             "cargoGrossWeight" : {
                                                "unit" : "KGM",
                                                "value" : 12000
                                             },
                                             "equipmentReference" : "HLXU1234567",
                                             "outerPackaging" : {
                                                "dangerousGoods" : [
                                                   {
                                                      "EMSNumber" : "F-A S-F",
                                                      "imoClass" : "9",
                                                      "packingGroup" : 3,
                                                      "properShippingName" : "Environmentally hazardous substance, liquid, N.O.S",
                                                      "unNumber" : "3082"
                                                   }
                                                ],
                                                "description" : "Jerrican, steel",
                                                "imoPackagingCode" : "3A1",
                                                "numberOfPackages" : 400
                                             }
                                          }
                                       ],
                                       "carrierBookingReference" : "RTM1234567",
                                       "descriptionOfGoods" : [
                                          "Environmentally hazardous substance",
                                          "liquid, N.O.S (Propiconazole)"
                                       ]
                                    }
                                 ],
                                 "deliveryTypeAtDestination" : "CY",
                                 "documentParties" : {
                                    "issuingParty" : {
                                       "address" : {
                                          "city" : "Hamburg",
                                          "countryCode" : "DE",
                                          "postCode" : "D-20095",
                                          "street" : "Ballindamm",
                                          "streetNumber" : "25"
                                       },
                                       "identifyingCodes" : [
                                          {
                                             "codeListName" : "LCL",
                                             "codeListProvider" : "SMDG",
                                             "partyCode" : "HLC"
                                          }
                                       ],
                                       "partyName" : "Hapag Lloyd"
                                    },
                                    "shipper" : {
                                       "displayedAddress" : [
                                          "Strawinskylaan 4117"
                                       ],
                                       "partyContactDetails" : [
                                          {
                                             "email" : "no-reply@dcsa.example.org",
                                             "name" : "DCSA test person"
                                          }
                                       ],
                                       "partyName" : "DCSA CTK"
                                    }
                                 },
                                 "freightPaymentTermCode" : "PRE",
                                 "invoicePayableAt" : {
                                    "UNLocationCode" : "DKAAR"
                                 },
                                 "isElectronic" : true,
                                 "isShippedOnBoardType" : true,
                                 "isToOrder" : true,
                                 "partyContactDetails" : [
                                    {
                                       "email" : "no-reply@dcsa.example.org",
                                       "name" : "DCSA test person"
                                    }
                                 ],
                                 "receiptTypeAtOrigin" : "CY",
                                 "serviceContractReference" : "SCR-1234-DG",
                                 "shippedOnBoardDate" : "2023-12-20",
                                 "shippingInstructionsReference" : "b36484d0-1115-43c2-93e4-a378823a8386",
                                 "termsAndConditions" : "You agree that this transport document exist is name only for the sake of\ntesting your conformance with the DCSA EBL API. This transport document is NOT backed\nby a real shipment with ANY carrier and NONE of the requested services will be\ncarried out in real life.\n\nUnless required by applicable law or agreed to in writing, DCSA provides\nthis JSON data on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\nANY KIND, either express or implied, including, without limitation, any\nwarranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY,\nor FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for\ndetermining the appropriateness of using or redistributing this JSON\ndata and assume any risks associated with Your usage of this data.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall DCSA be liable to\nYou for damages, including any direct, indirect, special, incidental, or\nconsequential damages of any character arising as a result of this terms or conditions\nor out of the use or inability to use the provided JSON data (including but not limited\nto damages for loss of goodwill, work stoppage, computer failure or malfunction, or any\nand all other commercial damages or losses), even if DCSA has been advised of the\npossibility of such damages.\n",
                                 "transportDocumentReference" : "4AD3FA470BB541B980CE",
                                 "transportDocumentStatus" : "ISSUED",
                                 "transportDocumentTypeCode" : "BOL",
                                 "transports" : {
                                    "plannedArrivalDate" : "2023-12-22",
                                    "plannedDepartureDate" : "2023-12-20",
                                    "portOfDischarge" : {
                                       "UNLocationCode" : "DEBRV"
                                    },
                                    "portOfLoading" : {
                                       "UNLocationCode" : "DKAAR"
                                    },
                                    "vesselVoyages" : [
                                       {
                                          "carrierExportVoyageNumber" : "402E",
                                          "vesselName" : "Berlin Express"
                                       }
                                    ]
                                 },
                                 "utilizedTransportEquipments" : [
                                    {
                                       "equipment" : {
                                          "ISOEquipmentCode" : "22G1",
                                          "equipmentReference" : "HLXU1234567"
                                       },
                                       "isShipperOwned" : false,
                                       "seals" : [
                                          {
                                             "number" : "DCSA-CTK-1234"
                                          }
                                       ]
                                    }
                                 ]
                              }
                           },
                           "reeferExample" : {
                              "description" : "An `APPROVED` Transport Document by the consumer waiting to be Issued by the provider. The cargo is `Diary products` which need to be transported using a `Reefer` container at -18° CEL.\n",
                              "summary" : "Approved Transport Document with reefer cargo\n",
                              "value" : {
                                 "cargoMovementTypeAtDestination" : "FCL",
                                 "cargoMovementTypeAtOrigin" : "FCL",
                                 "carrierCode" : "MSC",
                                 "carrierCodeListProvider" : "SMDG",
                                 "charges" : [
                                    {
                                       "calculationBasis" : "Per transport document",
                                       "chargeName" : "Fictive transport document fee",
                                       "currencyAmount" : 1,
                                       "currencyCode" : "EUR",
                                       "paymentTermCode" : "COL",
                                       "quantity" : 1,
                                       "unitPrice" : 1
                                    }
                                 ],
                                 "consignmentItems" : [
                                    {
                                       "HSCodes" : [
                                          "04052090"
                                       ],
                                       "cargoItems" : [
                                          {
                                             "cargoGrossWeight" : {
                                                "unit" : "KGM",
                                                "value" : 12000
                                             },
                                             "equipmentReference" : "KKFU6671914",
                                             "outerPackaging" : {
                                                "description" : "Bottles",
                                                "numberOfPackages" : 400,
                                                "packageCode" : "BQ"
                                             }
                                          }
                                       ],
                                       "carrierBookingReference" : "CBR_123_REEFER",
                                       "descriptionOfGoods" : [
                                          "Dairy products"
                                       ]
                                    }
                                 ],
                                 "deliveryTypeAtDestination" : "CY",
                                 "documentParties" : {
                                    "issuingParty" : {
                                       "address" : {
                                          "city" : "Geneva",
                                          "countryCode" : "CH",
                                          "street" : "Chemin Rieu",
                                          "streetNumber" : "12-14"
                                       },
                                       "identifyingCodes" : [
                                          {
                                             "codeListName" : "LCL",
                                             "codeListProvider" : "SMDG",
                                             "partyCode" : "MSC"
                                          }
                                       ],
                                       "partyName" : "Mediterranean Shipping Company"
                                    },
                                    "shipper" : {
                                       "displayedAddress" : [
                                          "Strawinskylaan 4117"
                                       ],
                                       "partyContactDetails" : [
                                          {
                                             "email" : "no-reply@dcsa.example.org",
                                             "name" : "DCSA test person"
                                          }
                                       ],
                                       "partyName" : "DCSA CTK"
                                    }
                                 },
                                 "freightPaymentTermCode" : "PRE",
                                 "invoicePayableAt" : {
                                    "UNLocationCode" : "DKAAR"
                                 },
                                 "isElectronic" : true,
                                 "isShippedOnBoardType" : true,
                                 "isToOrder" : true,
                                 "partyContactDetails" : [
                                    {
                                       "email" : "no-reply@dcsa.example.org",
                                       "name" : "DCSA test person"
                                    }
                                 ],
                                 "receiptTypeAtOrigin" : "CY",
                                 "serviceContractReference" : "SCR-1234-REEFER",
                                 "shippedOnBoardDate" : "2023-12-20",
                                 "shippingInstructionsReference" : "9051da7d-4099-4930-af35-7add4e68c635",
                                 "termsAndConditions" : "You agree that this transport document exist is name only for the sake of\ntesting your conformance with the DCSA EBL API. This transport document is NOT backed\nby a real shipment with ANY carrier and NONE of the requested services will be\ncarried out in real life.\n\nUnless required by applicable law or agreed to in writing, DCSA provides\nthis JSON data on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\nANY KIND, either express or implied, including, without limitation, any\nwarranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY,\nor FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for\ndetermining the appropriateness of using or redistributing this JSON\ndata and assume any risks associated with Your usage of this data.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall DCSA be liable to\nYou for damages, including any direct, indirect, special, incidental, or\nconsequential damages of any character arising as a result of this terms or conditions\nor out of the use or inability to use the provided JSON data (including but not limited\nto damages for loss of goodwill, work stoppage, computer failure or malfunction, or any\nand all other commercial damages or losses), even if DCSA has been advised of the\npossibility of such damages.\n",
                                 "transportDocumentReference" : "D8931B95625E4B339F2A",
                                 "transportDocumentStatus" : "APPROVED",
                                 "transportDocumentTypeCode" : "BOL",
                                 "transports" : {
                                    "plannedArrivalDate" : "2023-12-22",
                                    "plannedDepartureDate" : "2023-12-20",
                                    "portOfDischarge" : {
                                       "UNLocationCode" : "DEBRV"
                                    },
                                    "portOfLoading" : {
                                       "UNLocationCode" : "DKAAR"
                                    },
                                    "vesselVoyages" : [
                                       {
                                          "carrierExportVoyageNumber" : "402E",
                                          "vesselName" : "Ever Ace"
                                       }
                                    ]
                                 },
                                 "utilizedTransportEquipments" : [
                                    {
                                       "activeReeferSettings" : {
                                          "temperatureSetpoint" : -18,
                                          "temperatureUnit" : "CEL"
                                       },
                                       "equipment" : {
                                          "ISOEquipmentCode" : "45R1",
                                          "equipmentReference" : "KKFU6671914"
                                       },
                                       "isNonOperatingReefer" : false,
                                       "isShipperOwned" : false,
                                       "seals" : [
                                          {
                                             "number" : "DCSA-CTK-1234"
                                          }
                                       ]
                                    }
                                 ]
                              }
                           },
                           "regularSTDExample" : {
                              "description" : "A `DRAFT` Transport Document waiting for consumer approval.\n",
                              "summary" : "Draft Transport Document with regular Dry cargo\n",
                              "value" : {
                                 "cargoMovementTypeAtDestination" : "FCL",
                                 "cargoMovementTypeAtOrigin" : "FCL",
                                 "carrierCode" : "MSC",
                                 "carrierCodeListProvider" : "SMDG",
                                 "charges" : [
                                    {
                                       "calculationBasis" : "Per transport document",
                                       "chargeName" : "Fictive transport document fee",
                                       "currencyAmount" : 1,
                                       "currencyCode" : "EUR",
                                       "paymentTermCode" : "COL",
                                       "quantity" : 1,
                                       "unitPrice" : 1
                                    }
                                 ],
                                 "consignmentItems" : [
                                    {
                                       "HSCodes" : [
                                          "640510"
                                       ],
                                       "cargoItems" : [
                                          {
                                             "cargoGrossWeight" : {
                                                "unit" : "KGM",
                                                "value" : 12000
                                             },
                                             "equipmentReference" : "NARU3472484",
                                             "outerPackaging" : {
                                                "description" : "Fibreboard boxes",
                                                "numberOfPackages" : 400,
                                                "packageCode" : "4G"
                                             }
                                          }
                                       ],
                                       "carrierBookingReference" : "CBR_123_REGULAR",
                                       "descriptionOfGoods" : [
                                          "Shoes - black"
                                       ]
                                    }
                                 ],
                                 "deliveryTypeAtDestination" : "CY",
                                 "documentParties" : {
                                    "issuingParty" : {
                                       "address" : {
                                          "city" : "Geneva",
                                          "countryCode" : "CH",
                                          "street" : "Chemin Rieu",
                                          "streetNumber" : "12-14"
                                       },
                                       "identifyingCodes" : [
                                          {
                                             "codeListName" : "LCL",
                                             "codeListProvider" : "SMDG",
                                             "partyCode" : "MSC"
                                          }
                                       ],
                                       "partyName" : "Mediterranean Shipping Company"
                                    },
                                    "shipper" : {
                                       "displayedAddress" : [
                                          "Strawinskylaan 4117"
                                       ],
                                       "partyContactDetails" : [
                                          {
                                             "email" : "no-reply@dcsa.example.org",
                                             "name" : "DCSA test person"
                                          }
                                       ],
                                       "partyName" : "DCSA CTK"
                                    }
                                 },
                                 "freightPaymentTermCode" : "PRE",
                                 "invoicePayableAt" : {
                                    "UNLocationCode" : "DKAAR"
                                 },
                                 "isElectronic" : true,
                                 "isShippedOnBoardType" : true,
                                 "isToOrder" : true,
                                 "partyContactDetails" : [
                                    {
                                       "email" : "no-reply@dcsa.example.org",
                                       "name" : "DCSA test person"
                                    }
                                 ],
                                 "receiptTypeAtOrigin" : "CY",
                                 "serviceContractReference" : "SCR-1234-REGULAR",
                                 "shippedOnBoardDate" : "2023-12-20",
                                 "shippingInstructionsReference" : "fc5009a7-25ad-4bb0-9892-4e2dea6bcdd9",
                                 "termsAndConditions" : "You agree that this transport document exist is name only for the sake of\ntesting your conformance with the DCSA EBL API. This transport document is NOT backed\nby a real shipment with ANY carrier and NONE of the requested services will be\ncarried out in real life.\n\nUnless required by applicable law or agreed to in writing, DCSA provides\nthis JSON data on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\nANY KIND, either express or implied, including, without limitation, any\nwarranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY,\nor FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for\ndetermining the appropriateness of using or redistributing this JSON\ndata and assume any risks associated with Your usage of this data.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall DCSA be liable to\nYou for damages, including any direct, indirect, special, incidental, or\nconsequential damages of any character arising as a result of this terms or conditions\nor out of the use or inability to use the provided JSON data (including but not limited\nto damages for loss of goodwill, work stoppage, computer failure or malfunction, or any\nand all other commercial damages or losses), even if DCSA has been advised of the\npossibility of such damages.\n",
                                 "transportDocumentReference" : "62CD536BA8D34C469AFD",
                                 "transportDocumentStatus" : "DRAFT",
                                 "transportDocumentTypeCode" : "BOL",
                                 "transports" : {
                                    "plannedArrivalDate" : "2023-12-22",
                                    "plannedDepartureDate" : "2023-12-20",
                                    "portOfDischarge" : {
                                       "UNLocationCode" : "DEBRV"
                                    },
                                    "portOfLoading" : {
                                       "UNLocationCode" : "DKAAR"
                                    },
                                    "vesselVoyages" : [
                                       {
                                          "carrierExportVoyageNumber" : "402E",
                                          "vesselName" : "MSC Gülsün"
                                       }
                                    ]
                                 },
                                 "utilizedTransportEquipments" : [
                                    {
                                       "equipment" : {
                                          "ISOEquipmentCode" : "22G1",
                                          "equipmentReference" : "NARU3472484"
                                       },
                                       "isShipperOwned" : false,
                                       "seals" : [
                                          {
                                             "number" : "DCSA-CTK-1234"
                                          }
                                       ]
                                    }
                                 ]
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/TransportDocument"
                        }
                     }
                  },
                  "description" : "The `Transport Document`\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "202" : {
                  "description" : "The `Transport Document` is currently being processed by the provider. No payload is returned. A new `GET` request has to be made periodically to check if the provider has finished processing the `Transport Document`.\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "404" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "notFoundExample" : {
                              "description" : "The `transportDocumentReference` does not exist.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "documentReference not found\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "The Transport Document does not exist",
                                       "errorCodeText" : "documentReference not found"
                                    }
                                 ],
                                 "httpMethod" : "GET",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/transport-documents/td-987",
                                 "statusCode" : 404,
                                 "statusCodeMessage" : "documentReference not found",
                                 "statusCodeText" : "Not Found"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the consumer is requesting a `transportDocumentReference` that does not exist.\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "internalServerErrorExample" : {
                              "description" : "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Internal Server Error while fetching the Transport Document\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "Internal Error occurred",
                                       "errorCodeText" : "Internal Error occurred"
                                    }
                                 ],
                                 "httpMethod" : "GET",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/transport-documents/td-987",
                                 "statusCode" : 500,
                                 "statusCodeMessage" : "Internal Server Error occurred while fetching the Transport Document",
                                 "statusCodeText" : "Internal Server Error"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "default" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "tooManyRequestsExample" : {
                              "description" : "Calling the endPoint\n\n    GET /v3/transport-documents/td-987\n    \ntoo many times within a time period.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                              "summary" : "Fetching too many `Transport Document` requests\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "A maximum of 10 Transport Document can be requested per hour",
                                       "errorCodeText" : "Max Transport Document requests reached"
                                    }
                                 ],
                                 "httpMethod" : "GET",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/transport-documents/td-987",
                                 "statusCode" : 429,
                                 "statusCodeMessage" : "Too many request to fetch a Transport Document has been requested. Please try again in 1 hour\n",
                                 "statusCodeText" : "Too Many Requests"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "For other errors the error object should be populated with relevant information\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               }
            },
            "summary" : "Gets the Transport Document\n",
            "tags" : [
               "Transport Document"
            ]
         },
         "patch" : {
            "description" : "A way for the consumer to Approve the `Draft Transport Document`. This endPoint corresponds with **UseCase 7 - Approve Draft Transport Document**.\n\n## Precondition\nIn order to approve a `Draft Transport Document`, the status of the `Transport Document` needs to be in status `DRAFT`\n\n## Postcondition\nThe provider has received an approval from the consumer for a `Transport Document` that is in state `DRAFT`.\n\nThe consumer will receive a `202` (Accepted) if the payload schema-validates or a `400` (Bad Request) if it does not.\n\n## Flow for the `202` (Accepted) response\nThe following occurs when a provider receives an approval:\n1. The payload is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n   **The process stops here!**\n2. The payload is schema-valid which means:\n    - all required properties are provided.\n    - all values provided have correct data type.\n3. An empty response is returned and the consumer now awaits further processing by the provider.\n\nOnce processed, the `Transport Document` is `ISSUED` and a [Transport Document Notification](#/TransportDocumentNotification) is sent. In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the\n\n    GET /v3/transport-documents/{transportDocumentReference}\n    \nendPoint to check if the `transportDocumentStatus` of the `Transport Document` has changed.\n",
            "operationId" : "approve-transport-document",
            "parameters" : [
              {
                "in": "query",
                "name": "NewParameter",
                "description": "New parameter",
                "required": "true",
                "schema": {
                  "": ""
                }
              },
              {
                "in": "query",
                "name": "NewParameter",
                "description": "New parameter",
                "required": "true",
                "schema": {
                  "": ""
                }
              },
              {
                "in": "query",
                "name": "NewParameter",
                "description": "New parameter",
                "required": "true",
                "schema": {
                  "": ""
                }
              },
              {
                  "description" : "The `transportDocumentReference` of the `Transport Document`\n",
                  "explode" : false,
                  "in" : "path",
                  "name" : "transportDocumentReference",
                  "required" : true,
                  "schema" : {
                     "description" : "A unique number allocated by the shipping line to the `Transport Document` and the main number used for the tracking of the status of the shipment.\n",
                     "example" : "HHL71800000",
                     "maxLength" : 20,
                     "pattern" : "^\\S(?:.*\\S)?$",
                     "type" : "string"
                  },
                  "style" : "simple"
               },
               {
                  "description" : "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
                  "explode" : false,
                  "in" : "header",
                  "name" : "API-Version",
                  "required" : false,
                  "schema" : {
                     "example" : "3",
                     "type" : "string"
                  },
                  "style" : "simple"
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "schema" : {
                        "$ref" : "#/components/schemas/ApproveTransportDocument"
                     }
                  }
               }
            },
            "responses" : {
               "202" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "approveExample" : {
                              "description" : "Consumer approves the drafted `Transport Document` and now awaits further processing by provider.\n",
                              "summary" : "Approve Draft Transport Document\n"
                           }
                        }
                     }
                  },
                  "description" : "The approval of the `Transport Document` has been accepted and now awaits further processing\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "badRequestExample" : {
                              "description" : "`ISSUE` is not a possible value when PATCHING a `Transport Document`.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Wrong Transport Document status\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "Only APPROVED is an allowed value: ISSUE was inserted",
                                       "errorCodeText" : "incorrect value",
                                       "property" : "transportDocumentStatus",
                                       "value" : "ISSUE"
                                    }
                                 ],
                                 "httpMethod" : "PATCH",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/transport-documents/td-987",
                                 "statusCode" : 400,
                                 "statusCodeMessage" : "ISSUE is not a valid status to set",
                                 "statusCodeText" : "Bad Request"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the Approve payload does not schema validate a `400` (Bad Request) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "404" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "notFoundExample" : {
                              "description" : "The `transportDocumentReference` does not exist.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "documentReference not found\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "The Transport Document does not exist",
                                       "errorCodeText" : "documentReference not found"
                                    }
                                 ],
                                 "httpMethod" : "PATCH",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/transport-documents/td-987",
                                 "statusCode" : 404,
                                 "statusCodeMessage" : "documentReference not found",
                                 "statusCodeText" : "Not Found"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the consumer is requesting a `transportDocumentReference` that does not exist.\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "409" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "notFoundExample" : {
                              "description" : "The `transportDocumentReference` is currently being processed - try again later.\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "documentReference is being processed\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "The Transport Document is currently being processed",
                                       "errorCodeText" : "documentReference being processed"
                                    }
                                 ],
                                 "httpMethod" : "PATCH",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/transport-documents/td-987",
                                 "statusCode" : 409,
                                 "statusCodeMessage" : "documentReference being processed",
                                 "statusCodeText" : "Conflict"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case the consumer is requesting a `transportDocumentReference` that is being processed it is possible to return a `409` (Conflict).\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "internalServerErrorExample" : {
                              "description" : "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a \"random example\".\n",
                              "summary" : "Internal Server Error while approving the `Draft Transport Document`\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "Internal Error occurred",
                                       "errorCodeText" : "Internal Error occurred"
                                    }
                                 ],
                                 "httpMethod" : "PATCH",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/transport-documents/td-987",
                                 "statusCode" : 500,
                                 "statusCodeMessage" : "Internal Server Error occurred while approving the Transport Document",
                                 "statusCodeText" : "Internal Server Error"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               },
               "default" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "tooManyRequestsExample" : {
                              "description" : "Calling the endPoint\n\n    PATCH /v3/transport-documents/td-987\n    \ntoo many times within a time period.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                              "summary" : "Too many Patch `Transport Document` requests\n",
                              "value" : {
                                 "errorDateTime" : "2024-09-04T09:41:00Z",
                                 "errors" : [
                                    {
                                       "errorCode" : 7003,
                                       "errorCodeMessage" : "A maximum of 10 Transport Document can be patched per hour",
                                       "errorCodeText" : "Max Transport Document requests reached"
                                    }
                                 ],
                                 "httpMethod" : "PATCH",
                                 "providerCorrelationReference" : "4426d965-0dd8-4005-8c63-dc68b01c4962",
                                 "requestUri" : "/v3/transport-documents/td-987",
                                 "statusCode" : 429,
                                 "statusCodeMessage" : "Too many request to patch a Transport Document has been requested. Please try again in 1 hour\n",
                                 "statusCodeText" : "Too Many Requests"
                              }
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/ErrorResponse"
                        }
                     }
                  },
                  "description" : "For other errors the error object should be populated with relevant information\n",
                  "headers" : {
                     "API-Version" : {
                        "$ref" : "#/components/headers/API-Version"
                     }
                  }
               }
            },
            "summary" : "Approve a Transport Document\n",
            "tags" : [
               "Transport Document"
            ]
         }
      }
   },
   "servers" : [
      {
         "description" : "SwaggerHub API Auto Mocking",
         "url" : "https://virtserver.swaggerhub.com/dcsaorg/DCSA_EBL/3.0.0"
      }
   ],
   "tags" : [
      {
         "description" : "The Shipping Instructions endPoints to be implemented by **providers** of the Bill of Lading API\n",
         "name" : "Shipping Instructions"
      },
      {
         "description" : "The Transport Document endPoints to be implemented by **providers** of the Bill of Lading API\n",
         "name" : "Transport Document"
      },
      {
         "description" : "The Notifications to be implemented by the **consumers** of the Bill of Lading API",
         "name" : "Notifications"
      }
   ]
}
