{
  "openapi": "3.0.3",
  "info": {
    "title": "DCSA OpenAPI specification for Electronic Bill of Lading",
    "description": "API specification issued by DCSA.org.\n\nFor explanation to specific values or objects please refer to the [Information Model v2023.Q3]() *** _Will be updated_ ***. This API does not define the business rules regarding what is allowed to update at what time. For this the [Electronic Bill of Lading IFS]() *** _Will be updated_ *** should be consulted. **All UseCases mentioned in this API refer to UseCases defined in this EBL IFS**.\n\nAll other documents related to the Electronic Bill of Lading publication can be found [here](https://knowledge.dcsa.org/s/publication?publicationId=a0r7T000000L8lPQAS)\n\nIt is possible to use this API as a standalone API. In order to do so it is necessary to use one of the poll-endPoints:\n\n    GET /v3/shipping-instructions/{documentReference}  # For Shipping Instructions status\n    GET /v3/transport-documents/{transportDocumentReference}  # For Transport Document status\n\nin order to poll information about status changes.\n\nIt is possible to have notifications pushed to you whenever the provider needs input and/or a state change. The format for the Notification is defined by the [Electronic Bill of LAding Notification API](https://app.swaggerhub.com/apis/dcsaorg/DCSA_EBL_NTF/3.0.0-Beta-1). Signing up for Notifications is defined outside the scope of this API.\n\nFor a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/ebl/v3#v300B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\n",
    "contact": {
      "name": "Digital Container Shipping Association (DCSA)",
      "url": "https://dcsa.org",
      "email": "info@dcsa.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "3.0.0-Beta-1"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "Shipping Instructions",
      "description": "The Shipping Instructions\n"
    },
    {
      "name": "Draft Transport Documents",
      "description": "The Draft Transport Document\n"
    },
    {
      "name": "Transport Documents",
      "description": "The Transport Document\n"
    }
  ],
  "paths": {
    "/v3/shipping-instructions": {
      "post": {
        "tags": [
          "Shipping Instructions"
        ],
        "summary": "Creates a Shipping Instructions\n",
        "description": "Creates a new `Shipping Instructions`. This endPoint corresponds with **UseCase 1 - Submit Shipping Instructions**.\n\n# ## Precondition\n# The consumer has information for a `Shipping Instructions`.\n\n# ## Postcondition\n# The provider has received the `Shipping Instructions`.\n\n# The consumer will receive a `201` (Created) if the payload schema-validates or a `400` (Bad Request) if it does not.\n\n# The provider can **optionally** do a full validation as part of the response. The full validation can also be done asynchroniously in which case a `Notification` will be sent to any subscribers once the validation is complete.\n\n# ## Process\n# The following occurs when a provider recieves a `Shipping Instructions`:\n# 1. The payload (`Shipping Instructions`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n#   **The process stops here!**\n# 2. The payload is schema-valid which means\n#     - all required fields are provided\n#     - all values provided have correct data type\n\n#     A `shippingInstructionsReference` (as a reference to the `Shipping Instructions`) is created and stored along with the payload in the provider system.\n  \n# **For the rest of this description and in all examples the value `si-123` will be used as `shippingInstructionsReference`**\n\n# The provider can now choose to either do **(A) No Validation** or make a **(B) Full Validation**\n\n\n# ### No validation\n# No validation means the provider will just store the `Shipping Instructions` and send back a success message with `documentStatus=RECEIVED`. Any further processing (validation) will continue asynchroniously\n\n# 3. A `201` (Created) response is returned with the following payload\n#     ```\n#     {\n#       shippingInstructionsReference: 'si-123',\n#       documentStatus: 'RECEIVED'\n#     }\n#     ```\n# For `POST` `Shipping Instructions` the process for **NO Validation** ends here. The `Shipping Instructions`\n\n#   - is now stored in the provider system\n#   - has status `RECEIVED`\n#   - awaits further processing by the provider\n#   - a `201` (Created) response is sent to the consumer with a payload containing `documentStatus=RECEIVED`\n\n# Asynchronious processing will now start by the provider - once processed the new status of the `Shipping Instructions` will be communicated via a `Notification`. In case the consumer does not subscribe to `Notifications` it is necessary for the consumer to poll on the\n\n#     GET /shipping-instructions/{shippingInstructionsReference}\n    \n#   endPoint in order to check if the `documentStatus` of the `Shipping Instructions` has changed.\n\n# ### Full validation\n# Full validation means the provider has stored the `Shipping Instructions` and a full validation of the payload has completed.\n# 3. Do full validation of the payload. Some examples could be:\n#     - correct `Advance Manifest Filings` have been provided\n#     - check Equipment References specified\n#     - make sure Bookings linked to have `bookingState='CONFIRMED'`\n#     - etc\n    \n#     Making a full validation requires the provider to check against all business rules (_the list above is just examples_)\n# 4. Depending on the result of step 3 the following will happen:\n#     - **Update to `Shipping Instructions` required**\n       \n#       If an update to the `Shipping Instructions` is required (equivalent to **UseCase 2 - Request update to Shipping instructions** ) the `documentStatus=PENDING UPDATE` in a `201` (Created) respose is returned\n#       ```\n#       {\n#         shippingInstructionsReference: 'si-123',\n#         documentStatus: 'PENDING UPDATE',\n#         requestedChanges: [\n#           {\n#             path: \"equipmentReference\",\n#             message: \"The equipmentReference used does not exist\"\n#           }\n#         ]\n#       }\n#       ```\n#       The `requestedChanges` structure will contain the changes that the provider requires the consumer to update in order for the `Shipping Instructions` to be valid.\n      \n#     - **Initial Draft of the Transport Document**\n    \n#       If the `Shipping Instructions` is accepted an **Initial Draft Transport Document** is published (equivalent to **UseCase 4 - Publish Draft Transport Document**) the `documentStatus=INITIAL DRAFT` in a `201` (Created) respose is returned\n#       ```\n#       {\n#         shippingInstructionsReference: 'si-123',\n#         documentStatus: 'INITIAL DRAFT'\n#       }\n#       ```\n\n# For a full validation the `POST` `Shipping Instructions` ends here. The `Shipping Instructions`\n    \n# - is now stored in the provider system\n# - a full validation has been done\n# - the consumer has receved a 201 (Created) response from the provider with the status of the `Shipping Instructions` request with one of the following values:\n#   - `PENDING UPDATE` in case the provider requires the consumer to make an update to the `Shipping Instructions` (equivalent to **UseCase 2 - Request update to Shipping Instructions**)\n#   - `INITIAL DRAFT` in case the provider accepts the `Shipping Instructions` and **Drafts** a `Transport Document` (equivalent to **UseCase 4 - Publish Draft Transport Document**)\n\n# The provider is now awaiting further action by the consumer.\n",
        "operationId": "postShippingInstructionsRequests",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters used to create the Shipping Instructions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingInstructionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "`Shipping Instructions` has been successfully created in the provider system. Depending on the level of validation done by the provider - the status of the `Shipping Instructions` will be one of the following:\n- `RECEIVED` in case asynchronous processing of the `Shipping Instructions` begins. The `Shipping Instructions` is now awaiting the provider to finish the validation\n- `PENDING UPDATE` in case provider needs the `Shipping Instructions` to be updated and awaits further input from consumer\n- `INITAL DRAFT` in case provider has accepted the `Shipping Instructions` and drafted a `Transport Document`\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingInstructionsRefStatus"
                },
                "examples": {
                  "receExample": {
                    "summary": "Shipping Instructions received\n",
                    "description": "A `Shipping Instructions` has been received (`documentStatus='RECEIVED'`) and stored in provider system but not yet fully validated (only schema validated)\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "documentStatus": "RECEIVED"
                    }
                  },
                  "penuExample": {
                    "summary": "Shipping Instructions pending update\n",
                    "description": "A `Shipping Instructions` received and stored in provider system and fully validated. The result of the full validation has resulted in the provider requiring the consumer to make some updates (`documentStatus='PENDING UPDATE'`)\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "documentStatus": "PENDING UPDATE",
                      "requestedChanges": [
                        {
                          "path": "carrierBookingReference",
                          "message": "Linked booking does not exist"
                        }
                      ]
                    }
                  },
                  "initalDraftExample": {
                    "summary": "Transport Document Inital Draft\n",
                    "description": "A `Shipping Instructions` received and stored in provider system, fully validated and accepted. A `Transport Document` has been drafted (`documentStatus='INITAL DRAFT'`).\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "documentStatus": "INITAL DRAFT"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "In case the `Shipping Instructions` does not schema validate a `400` (Bad Request) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "badRequestExample": {
                    "summary": "Shipping Instructions missing isElectronic\n",
                    "description": "`isElectronic` is a mandoatry field in the `Shipping Instructions`. This is an example of how the error object would look in case this field is missing\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v3/shipping-instructions",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "errorMessage": "isElectronic not found - it is a mandatory field in Shipping Instructions",
                      "providerCorrelationID": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-10-03T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "field": "isElectronic",
                          "reason": "mandatory field missing",
                          "message": "isElectronic must be provided as part of a Shipping Instructions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "internalServerErrorExample": {
                    "summary": "Internal Server Error while processing Shipping Instructions\n",
                    "description": "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationID` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v3/shipping-instructions",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "errorMessage": "Internal Server Error occurred while processing Booking request",
                      "providerCorrelationID": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "reason": "Internal Error occurred",
                          "message": "Internal Error occurred"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "tooManyRequestsExample": {
                    "summary": "Making too many Shipping Instructions\n",
                    "description": "Calling the endPoint\n\n    POST /v3/shipping-instructions\n    \ntoo many times within a timeperiod.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "POST",
                      "requestUri": "/v3/shipping-instructions",
                      "statusCode": 429,
                      "statusCodeText": "Too Many Requests",
                      "errorMessage": "Too many request to create a Shipping Instructions has been requested. Please try again in 1 hour",
                      "providerCorrelationID": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "reason": "Max Shipping Instructions reached",
                          "message": "A maximum of 10 Shipping Instructions can be created per hour"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/shipping-instructions-requests/{shippingInstructionsReference}": {
      "get": {
        "tags": [
          "Shipping Instructions"
        ],
        "summary": "Gets the Shipping Instructions\n",
        "description": "Retrieves the `Shipping Instructions` with the `shippingInstructionsReference` in the path. It is recommended to use this endPoint to `GET` data before an update is made to make sure latest version is being updated.\n\nIn case no subscription (`Notification`) has been set up - it is possbile to use this endPoint to poll on in order to detect if `documentStatus` has changed.\n",
        "operationId": "getShippingInstructionsRequests",
        "parameters": [
          {
            "name": "shippingInstructionsReference",
            "in": "path",
            "description": "The identifier for a `Shipping Instructions` provided by the carrier\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/shippingInstructionsReference"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingInstructionsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "getError": {
                    "summary": "GET non-existing Shipping Instructions\n",
                    "description": "Calling\n\n    GET /v3/shipping-instructions/si-123\n    \nresults in an error as Shipping Instructions `si-123` does not exist.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 404,
                      "statusCodeText": "Not Found",
                      "errorMessage": "The requested shippingInstructionsReference does not exist",
                      "providerCorrelationID": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "reason": "Non existent shippingInstructionsReference",
                          "message": "shippingInstructionsReference `si-123` does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Shipping Instructions"
        ],
        "summary": "Updates the Shipping Instructions\n",
        "description": "Updates the `Shipping Instructions` with the `shippingInstructionsReference` in the path. This endPoint corresponds with either\n\n- **UseCase 3 - Submit updated Shipping Instructions**\n- **UseCase 5 - Request changes to Draft Transport Document**\n- **UseCase 7 - Request amendments to Draft Transport Document**\n- **UseCase 10 - Request amendments to Transport Document**\n\nThis endPoint is to be used in response to\n\n- **UseCase 2 - Request to update Shipping Instructions** in which case the `documentStatus='PENDING UPDATE'`\n- **UseCase 4 - Publish Draft Transport Document** in which case the `documentStatus='INITIAL DRAFT'`\n- **UseCase 8 - Approve amendments to Draft Transport Document** in which case the `documentStatus='DRAFT'`\n- **UseCase 9 - Issue Transport Document** in which case the `documentStatus='ISSUED'`\n- **UseCase 12 - Approve changes to Draft Transport Document** in which case the `documentStatus='DRAFT'`\n\nthe endPoint can also be used in case `documentStatus='RECEIVED'` and the consumer has an update to the `Shipping Instructions`.\n\n### Precondition\nIn order to update a `Shipping Instructions`, the status of the `Shipping Instructions` needs to be in state\n\n- `RECEIVED` in case the consumer has updated information for the `Shipping Instructions`\n- `PENDING UPDATE` in case the provider has requested the consumer to update the `Shipping Instructions` (a result of **UseCase 2 - Request to update Shipping Instructions**)\n- `INITIAL DRAFT` in case the consumer has a change to the `Draft Transport Document` (**UseCase 5 - Request changes to Draft Transport Document**)\n- `DRAFT` in case the consumer has an amendment to the `Draft Transport Document` (**UseCase 7 - Request amendments to Draft Transport Document**)\n- `ISSUED` in case the consumer has an amendment to the `Transport Document` (**UseCase 10 - Request amendments to Transport Document**)\n\n## Postcondition\nThe provider has received an update to the `Shipping Instructions` (**UseCase 3 - Submit updated Shipping Instructions**), a change to the Draft Transport Document (**UseCase 5 - Request changes to Draft Transport Document**), an amendment to the Draft Transport Document (**UseCase 7 - Request amendments to Draft Transport Document**) or  an amendment to the Transport Document (**UseCase 10 - Request amendments to Transport Document**).\n\nThe consumer will receive a `200` (OK) if the payload schema-validates or a `400` (Bad Request) if it does not.\n\nThe provider can **optionally** do a full validation as part of the response. The full validation can also be done asynchroniously in which case a `Notification` will be sent to any subscribers once the validation is complete.\n\n## Process\nThe following occurs when a provider recieves an **update** to a `Shipping Instructions`\n1. The payload (`Shipping Instructions`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n   **The process stops here!**\n2. The payload is schema-valid which means\n    - all required fields are provided\n    - all values provided have correct data type\n  \n    The updated `Shipping Instructions` is stored in the provider system.\n\n**For the rest of this description and in all examples the value `si-123` will be used as `shippingInstructionsReference`**\n\nThe provider can now choose to either do **(A) No Validation** or make a **(B) Full Validation**\n\n### A). No validation\n\nNo validation means the provider will just store the **updated** `Shipping Instructions` and send back a success message. Any further processing (validation) will continue asynchroniously.\n\n3. The response depends on which useCase is the reason for calling this endPoint (what the `documentStatus` is):\n\n    - If `documentStatus` **is** `RECEIVED` then this endPoint is being used in addition to **UseCase 1 - Submit Shipping Instructions**. In this case the consumer would like to make an update to an already sent `Shipping Instructions` - this is done via **UseCase 3 - Submit updated Shipping Instructions**. The `documentStatus` stays as `RECEIVED`\n    \n      A `200` (OK) response corresponding to the following payload is returned\n      ```\n      {\n        shippingInstructionsReference: 'si-123',\n        documentStatus: 'RECEIVED'\n      }\n      ```\n\n    - If `documentStatus` is `PENDING UPDATE` then this endPoint is being used as a reponse to **UseCase 2 - Request to update Shipping Instructions** in this case the provider has requested an update to a `Shipping Instructions`. The `documentStatus` changes to `RECEIVED`.\n      \n      A `200` (OK) response corresponding to the following payload is returned\n      ```\n      {\n        shippingInstructionsReference: 'si-123',\n        documentStatus: 'RECEIVED'\n      }\n      ```\n    \n    - If `documentStatus` is `INITIAL DRAFT` then this endPoint is being used in order to request a **change** to a `Draft Transport Document` this is done via **UseCase 5 - Request changes to Draft Transport Document**. The `documentStatus` now changes to `PENDING CHANGES APPROVAL`.\n    \n      A `200` (OK) response corresponding to the following payload is returned\n      ```\n      {\n        shippingInstructionsReference: 'si-123',\n        documentStatus: 'PENDING CHANGES APPROVAL'\n      }\n      ```\n    \n    - If `documentStatus` is `DRAFT` then this endPoint is being used in order to request an **amendment** to a `Draft Transport Document` this is done via **UseCase 7 - Request Amendments to Draft Transport Document**. The `documentStatus` now changes to `PENDING AMENDMENTS APPROVAL`.\n    \n      A `200` (OK) response corresponding to the following payload is returned\n      ```\n      {\n        shippingInstructionsReference: 'si-123',\n        documentStatus: 'PENDING AMENDMENTS APPROVAL'\n      }\n      ```\n    \n    - If `documentStatus` is `ISSUED` then this endPoint is being used in order to request an **amendment** to a `Transport Document` this is done via **UseCase 10 - Request Amendments to Transport Document**. The `documentStatus` now changes to `PENDING AMENDMENTS APPROVAL`.\n    \n      A `200` (OK) response corresponding to the following payload is returned\n      ```\n      {\n        shippingInstructionsReference: 'si-123',\n        documentStatus: 'PENDING AMENDMENTS APPROVAL'\n      }\n      ```\n    \nFor `PUT` `Shipping Instructions` the process for **No Validation** ends here. The **updated** `Shipping Instructions`\n\n  - is now stored in the provider system\n  - a `200` (OK) response is sent to the consumer with the status of the `Shipping Instructions` with one of the following values (depending on the useCase):\n    - `documentStatus='RECEIVED'` (if endPoint used as a response to **UseCase 3 - Submit updated Booking Request** or if it is used to make an update to a Submitted Shipping Instructions - **UseCase 1 - Submit Shipping Instructions**)\n    - `documentStatus='PENDING CHANGES APPROVAL'` (if endPoint used as a response to **UseCase 4 - Publish Draft Transport Document**)\n    - `documentStatus='PENDING AMENDMENTS APPROVAL'` (if endPoint used as a response to **UseCase 8 - Approve Amendments to Draft Transport Document** **Usecase 12 - Approve changes to Draft Transport Document** or **UseCase 9 - Issue Transport Document**)\n  - awaits further processing by the provider\n\nAsynchronious processing will now start by the provider - once processed the new status of the `Shipping Instructions` will be communicated via a `Notification`. In case the consumer does not subscribe to `Notifications` it is necessary for the consumer to poll on the\n\n    GET /shipping-instructions/{shippingInstructionsReference}\n    \n  endPoint in order to check if the `documentStatus` of the `Shipping Instructions` has changed.\n\n### B). Full validation\nFull validation means the provider has stored the **updated** `Shipping Instructions` and a full validation of the payload has completed.\n\n3. Do full validation of the payload. Some examples could be:\n    - correct `Advance Manifest Filings` have been provided\n    - check Equipment References specified\n    - make sure Bookings linked to have `bookingStatus='CONFIRMED'`\n    - etc\n\n    Making a full validation requires the provider to check against all business rules (_the list above is just examples_)\n4. Depending on the result of step 3 the following will happen:\n    \n    - **Update to Shipping Instructions**\n    \n      If an update to the `Shipping Instructions` is required (equivalent to **UseCase 2 - Request to update Shipping Instructions** in this case `documentStatus='RECEIVED'`)) then `documentStatus='PENDING UPDATE'` is returned in a `200` (OK) response with the following **example** payload\n\n      ```\n      {\n        shippingInstructionsReference: 'si-123',\n        documentStatus: 'PENDING UPDATE',\n        requestedChanges: [\n          {\n            path: \"advanceManifestFilings\",\n            message: \"Advance Manifest Filings provided does not match Advance Manifest Filings in linked Bookings\"\n          }\n        ]\n      }\n      ```\n\n    - **Accept Shipping Instructions**\n    \n      If the `Shipping Instructions` is accepted by the provider and a `Transport Document` can be Drafted (equivalent to **UseCase 4 - Publish Draft Transport Document** in this case `documentStatus='RECEIVED'`)) then `documentStatus='INITAL DRAFT'` is returned in a `200` (OK) response with the following payload\n\n      ```\n      {\n        shippingInstructionsReference: 'si-123',\n        documentStatus: 'INITAL DRAFT'\n        ]\n      }\n      ```\n\n    - **Amendments to Draft Transport Document**\n    \n      If amendments to the `Draft Transport Document` is requested (equivalent to **UseCase 5 - Request changes to Draft Transport Document** in this case `documentStatus='INITIAL DRAFT'` or **UseCase 7 - Request amendments to Draft Transport Document** in this case `bookingStatus='DRAFT'` ) then `bookingStatus='DRAFT'` is returned in a `200` (OK) response with the following payload\n\n      ```\n      {\n        shippingInstructionsReference: 'si-123',\n        documentStatus: 'DRAFT'\n      }\n      ```\n      \n      In case the changes are approved - the `Draft Transport Document` will contain the requested changes.\n      \n      In case the changes are rejected - the `Draft Transport Document` stays unchanged.\n\n    - **Amendments to Transport Document**\n    \n      If amendments to the `Transport Document` is requested (equivalent to **UseCase 10 - Request amendments to Transport Document** in this case `documentStatus='ISSUED'`) then:\n      \n        - in case the amendments are rejected `documentStatus='REJECTED'` is returned in a `200` (OK) response with the following payload\n\n          ```\n          {\n            shippingInstructionsReference: 'si-123',\n            documentStatus: 'REJECTED'\n          }\n          ```\n        \n      - in case the amendments are accepted `documentStatus='AMENDMENTS APPROVAL'` is returned in a `200` (OK) response with the following payload\n\n        ```\n        {\n          shippingInstructionsReference: 'si-123',\n          documentStatus: 'AMENDMENTS APPROVAL'\n        }\n        ```\n\nFor `PUT` `Shipping Instructions` the process for **Full Validation** ends here. The **updated** `Shipping Instructions`\n    \n- is now stored in the provider system\n- a full validation has been done\n- the consumer has receved a `200` (OK) response from the provider with the status of the `Shipping Instructions` with one of the following values:\n  - `PENDING UPDATE` in case provider awaits further input from consumer\n  - `INITIAL DRAFT` in case provider has accepted the `Shipping Instructions` and drafted a `Transport Document`\n  - `DRAFT` in case the provider has accepted or rejected an update to the `Draft Transport Document`\n  - `REJECTED` in case the provider has rejected an amendment to a `Transport Document`\n  - `AMENDMENTS APPROVAL` in case the provider has accepted an amendment to a `Transport Document`\n\nThe provider is now awaiting further action by the consumer.\n",
        "operationId": "putShippingInstructionsRequests",
        "parameters": [
          {
            "name": "shippingInstructionsReference",
            "in": "path",
            "description": "The identifier for a `Shipping Instructions` provided by the carrier\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/shippingInstructionsReference"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters used to update the Shipping Instructions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingInstructionsUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The `Shipping Instructions` has been successfully updated in the provider system. Depending on the level of validation done by the provider - the status of the `Shipping Instructions` will be one of the following:\n- `RECEIVED` in case the consumer has provided an update to a `Shipping Instructions` and is awaiting the provider to take action (start a full validation)\n- `PENDING UPDATE` in case provider awaits further input from consumer\n- `INITIAL DRAFT` in case provider has accepted the `Shipping Instructions` and drafted a `Transport Document`\n- `PENDING CHANGES APPROVAL` in case the consumer has provided a first update to a `Draft Transport Document` and is awaiting the provider to take action (start a full validation)\n- `DRAFT` in case the provider has accepted or rejected an update to the `Draft Transport Document`\n- `PENDING AMENDMENTS APPROVAL` in case the consumer has provided a subsequent update to a `Draft Transport Document` and is awaiting the provider to take action (start a full validation)\n- `REJECTED` in case the provider has rejected an amendment to a `Transport Document`\n- `AMENDMENTS APPROVAL` in case the provider has accepted an amendment to a `Transport Document`\n\nThe status of the `Shipping Instructions` can be monitored on the\n\n    GET /shipping-instructions/{shippingInstructionsReference}\n\n  endPoint by the consumer.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingInstructionsRefStatus"
                },
                "examples": {
                  "receivedExample": {
                    "summary": "Shipping Instructions updated\n",
                    "description": "An updated `Shipping Instructions` received and stored in provider system but not yet fully validated (only schema validated) - the `Shipping Instructions` now awaits provider action\n\n    documentStatus='RECEIVED'\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "documentStatus": "RECEIVED"
                    }
                  },
                  "pendingUpdateExample": {
                    "summary": "Shipping Instructions updated and validated\n",
                    "description": "An updated `Shipping Instructions` received and stored in provider system but as part of the provider validation some changes are needed (in the example the Advance Manifest Filings do not match the Advance Manifest Filings in linked Bookings)\n\n    documentStatus='PENDING UPDATE'\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "documentStatus": "PENDING UPDATE",
                      "requestedChanges": [
                        {
                          "path": "advanceManifestFilings",
                          "message": "Advance Manifest Filings provided does not match Advance Manifest Filings in linked Bookings"
                        }
                      ]
                    }
                  },
                  "initalDraftExample": {
                    "summary": "Transport Document drafted\n",
                    "description": "An updated `Shipping Instructions` received and stored in provider system and fully validated and accepted by the provider who has drafted a `Transport Document`. Provider is now awaiting the consumer to approve the `Draft Transport Document`\n\n    documentStatus='INITIAL DRAFT'\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "documentStatus": "INITIAL DRAFT"
                    }
                  },
                  "pendingChangesApprovalExample": {
                    "summary": "Draft Transport Document updates\n",
                    "description": "An updated `Shipping Instructions` received and stored in provider system but not yet fully validated (only schema validated) - the `Shipping Instructions` now awaits provider action\n\n    documentStatus='PENDING CHANGES APPROVAL'\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "documentStatus": "PENDING CHANGES APPROVAL"
                    }
                  },
                  "draftExample": {
                    "summary": "Draft Transport Document updates\n",
                    "description": "An updated `Shipping Instructions` received and stored in provider system and fully validated and accepted by the provider who has drafted a `Transport Document`. Provider is now awaiting the consumer to approve the `Draft Transport Document`\n\n    documentStatus='DRAFT'\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "documentStatus": "DRAFT"
                    }
                  },
                  "pendingAmendmentsApprovalExample": {
                    "summary": "Subsequent Draft Transport Document updates\n",
                    "description": "An updated `Shipping Instructions` received and stored in provider system but not yet fully validated (only schema validated) - the `Shipping Instructions` now awaits provider action\n\n    documentStatus='PENDING AMENDMENTS APPROVAL'\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "documentStatus": "PENDING AMENDMENTS APPROVAL"
                    }
                  },
                  "rejectExample": {
                    "summary": "Draft Transport Document rejected\n",
                    "description": "An updated `Shipping Instructions` received and stored in provider system and fully validated but rejected by the provider.\n\n    documentStatus='REJECTED'\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "documentStatus": "REJECTED"
                    }
                  },
                  "amendmentsApprovalExample": {
                    "summary": "Transport Document updates\n",
                    "description": "An updated `Shipping Instructions` received and stored in provider system and fully validated and accepted by the provider who has amended the `Transport Document`. Provider is now awaiting the consumer to approve the new `Transport Document`\n\n    documentStatus='DRAFT'\n",
                    "value": {
                      "shippingInstructionsReference": "si-123",
                      "documentStatus": "AMENDMENTS APPROVAL"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "In case the updated `Shipping Instructions` does not schema validate a `400` (Bad Request) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "badRequestExample": {
                    "summary": "Shipping Instructions missing isElectronic\n",
                    "description": "`isElectronic` is a mandoatry field in the `Shipping Instructions`. This is an example of how the error object would look in case this field is missing\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "PUT",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "errorMessage": "isElectronic not found - it is a mandatory field in Shipping Instructions",
                      "providerCorrelationID": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "field": "isElectronic",
                          "reason": "mandatory field missing",
                          "message": "isElectronic must be provided as part of a Shipping Instructions"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "In case a server error occurs in provider system a `500` (Internal Server Error) is returned\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "internalServerErrorExample": {
                    "summary": "Internal Server Error while processing `Shipping Instructions`\n",
                    "description": "An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationID` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "PUT",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "errorMessage": "Internal Server Error occurred while processing Shipping Instructions",
                      "providerCorrelationID": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "reason": "Internal Error occurred",
                          "message": "Internal Error occurred"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "For other errors the error object should be populated with relevant information\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "tooManyRequestsExample": {
                    "summary": "Updating too many Shipping Instructions\n",
                    "description": "Calling the endPoint PUT /v3/shipping-instructions/si-123 too many times within a timeperiod.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "PUT",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 429,
                      "statusCodeText": "Too Many Requests",
                      "errorMessage": "Too many request to update a Shipping Instructions has been requested. Please try again in 1 hour",
                      "providerCorrelationID": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "reason": "Max Shipping Instructions requests reached",
                          "message": "A maximum of 10 Shipping Instructions can be updated per hour"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/shipping-instructions/{shippingInstructionsReference}": {
      "get": {
        "tags": [
          "Shipping Instructions"
        ],
        "summary": "Gets the Shipping Instructions as provided by the Shipper enriched with information from Booking (Reefer and Dangerous Goods)\n",
        "description": "Retrieves the `Shipping Instructions` with the `shippingInstructionsReference` in the path. It is recommended to use this endPoint to `GET` data before an update is made to make sure latest version is being updated.\n\nIn case no subscription (`Notification`) has been set up - it is possbile to use this endPoint to poll on in order to detect if `documentStatus` has changed.\n",
        "operationId": "getShippingInstructions",
        "parameters": [
          {
            "name": "shippingInstructionsReference",
            "in": "path",
            "description": "The identifier for a `Shipping Instructions` provided by the carrier\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/shippingInstructionsReference"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingInstructions"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "getError": {
                    "summary": "GET non-existing Shipping Instructions\n",
                    "description": "Calling\n\n    GET /v3/shipping-instructions/si-123\n    \nresults in an error as Shipping Instructions `si-123` does not exist.\n\n**NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a \"random example\"\n",
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "/v3/shipping-instructions/si-123",
                      "statusCode": 404,
                      "statusCodeText": "Not Found",
                      "errorMessage": "The requested shippingInstructionsReference does not exist",
                      "providerCorrelationID": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2023-04-13T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7003,
                          "reason": "Non existent shippingInstructionsReference",
                          "message": "shippingInstructionsReference `si-123` does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/transport-document-drafts/{transportDocumentReference}/update": {
      "get": {
        "tags": [
          "Draft Transport Documents"
        ],
        "summary": "Gets the Draft Transport Document update requested by the shipper\n",
        "description": "Retrieves the Transport Document with the `transportDocumentReference` in the path.\n",
        "operationId": "getDraftTransportDocumentUpdate",
        "parameters": [
          {
            "name": "transportDocumentReference",
            "in": "path",
            "description": "The transportDocumentReference of the Transport Document\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/transportDocumentReference"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DraftTransportDocumentResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Draft Transport Documents"
        ],
        "summary": "Updates the Draft Transport Document\n",
        "description": "Retrieves the Transport Document with the `transportDocumentReference` in the path.\n",
        "operationId": "putDraftTransportDocumentUpdate",
        "parameters": [
          {
            "name": "transportDocumentReference",
            "in": "path",
            "description": "The transportDocumentReference of the Transport Document\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/transportDocumentReference"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters used to update the Shipping Instructions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DraftTransportDocumentUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request successful",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DraftTransportDocumentRefStatus"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/v3/transport-document-drafts/{transportDocumentReference}": {
      "get": {
        "tags": [
          "Draft Transport Documents"
        ],
        "summary": "Gets the Draft Transport Document\n",
        "description": "Retrieves the Transport Document with the `transportDocumentReference` in the path.\n",
        "operationId": "getDraftTransportDocument",
        "parameters": [
          {
            "name": "transportDocumentReference",
            "in": "path",
            "description": "The transportDocumentReference of the Transport Document\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/transportDocumentReference"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DraftTransportDocument"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Draft Transport Documents"
        ],
        "summary": "Approves the Draft Transport Document\n",
        "description": "A way for the consumer to Approve the `Draft Transport Document`. This endPoint corresponds with **UseCase 6 - Approve Draft Transport Document**.\n\n## Precondition\nIn order to approve a `Draft Transport Document`, the status of the `Shipping Instructions` needs to be either\n- `INITAL DRAFT`\n- `DRAFT`\n\n## Postcondition\nThe provider has received an approval from the consumer for a `Draft Transport Document`.\n\nThe consumer will receive a `200` (OK) if the payload schema-validates or a `400` (Bad Request) if it does not.\n\n## Process\nThe following occurs when a provider recieves an approval:\n1. The payload is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.\n\n   **The process stops here!**\n2. The payload is schema-valid\n3. The `documentStatus` is set to `APPROVED`.\n4. Once the provider is ready the `documentStatus` will change to `ISSUED`\n",
        "operationId": "approveTransportDocument",
        "parameters": [
          {
            "name": "transportDocumentReference",
            "in": "path",
            "description": "The transportDocumentReference of the Transport Document\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/transportDocumentReference"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transportdocumentdrafts_transportDocumentReference_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Transport Document",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransportDocumentRefStatus"
                },
                "examples": {
                  "approveExample": {
                    "summary": "Approve Draft Transport Document\n",
                    "description": "Shipper approves the drafted `Transport Document`.\n",
                    "value": {
                      "transportDocumentReference": "TR-987",
                      "documentStatus": "APPROVED"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/v3/transport-documents/{transportDocumentReference}": {
      "get": {
        "tags": [
          "Transport Documents"
        ],
        "summary": "Gets the Transport Document\n",
        "description": "Retrieves the Transport Document with the `transportDocumentReference` in the path.\n",
        "operationId": "getTransportDocument",
        "parameters": [
          {
            "name": "transportDocumentReference",
            "in": "path",
            "description": "The transportDocumentReference of the Transport Document\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/transportDocumentReference"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransportDocument"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/v3/transport-documents/{transportDocumentReference}/amendment": {
      "get": {
        "tags": [
          "Transport Documents"
        ],
        "summary": "Gets the requested amendment to the Transport Document\n",
        "description": "Retrieves the Transport Document with the `transportDocumentReference` in the path.\n",
        "operationId": "getTransportDocumentAmendment",
        "parameters": [
          {
            "name": "transportDocumentReference",
            "in": "path",
            "description": "The transportDocumentReference of the Transport Document\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/transportDocumentReference"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransportDocument"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Transport Documents"
        ],
        "summary": "Creates an amendment to the Transport Document\n",
        "description": "Retrieves the Transport Document with the `transportDocumentReference` in the path.\n",
        "operationId": "putTransportDocumentAmendment",
        "parameters": [
          {
            "name": "transportDocumentReference",
            "in": "path",
            "description": "The transportDocumentReference of the Transport Document\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/transportDocumentReference"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransportDocument"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ShippingInstructionsRequest": {
        "required": [
          "consignmentItems",
          "documentParties",
          "freightPaymentTermCode",
          "invoicePayableAt",
          "isElectronic",
          "isShippedOnBoardType",
          "isToOrder",
          "partyContactDetails",
          "transportDocumentTypeCode",
          "utilizedTransportEquipments"
        ],
        "type": "object",
        "properties": {
          "transportDocumentTypeCode": {
            "$ref": "#/components/schemas/transportDocumentTypeCode"
          },
          "isShippedOnBoardType": {
            "$ref": "#/components/schemas/isShippedOnBoardType"
          },
          "freightPaymentTermCode": {
            "$ref": "#/components/schemas/freightPaymentTermCode"
          },
          "originChargesPaymentTermCode": {
            "$ref": "#/components/schemas/originChargesPaymentTermCode"
          },
          "destinationChargesPaymentTermCode": {
            "$ref": "#/components/schemas/destinationChargesPaymentTermCode"
          },
          "isElectronic": {
            "$ref": "#/components/schemas/isElectronic"
          },
          "isToOrder": {
            "$ref": "#/components/schemas/isToOrder"
          },
          "numberOfCopiesWithCharges": {
            "$ref": "#/components/schemas/numberOfCopiesWithCharges"
          },
          "numberOfCopiesWithoutCharges": {
            "$ref": "#/components/schemas/numberOfCopiesWithoutCharges"
          },
          "numberOfOriginalsWithCharges": {
            "$ref": "#/components/schemas/numberOfOriginalsWithCharges"
          },
          "numberOfOriginalsWithoutCharges": {
            "$ref": "#/components/schemas/numberOfOriginalsWithoutCharges"
          },
          "displayedNameForPlaceOfReceipt": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPortOfLoad": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPortOfDischarge": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPlaceOfDelivery": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "placeOfIssue": {
            "type": "object",
            "description": "General purpose object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or an `Address`.\n",
            "example": {
              "locationName": "DCSA Headquarters",
              "locationType": "UNLO",
              "UNLocationCode": "NLAMS"
            },
            "discriminator": {
              "propertyName": "locationType",
              "mapping": {
                "ADDR": "#/components/schemas/addressLocation",
                "UNLO": "#/components/schemas/unLocationLocation"
              }
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/addressLocation"
              },
              {
                "$ref": "#/components/schemas/unLocationLocation"
              }
            ]
          },
          "invoicePayableAt": {
            "type": "object",
            "description": "General purpose object to capture `Invoice Payable At` location specified as: location where payment by the customer will take place. Usually refers to Basic Ocean Freight alone.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or an `Address`.\n",
            "example": {
              "locationName": "Eiffel Tower",
              "locationType": "UNLO",
              "UNLocationCode": "FRPAR"
            },
            "discriminator": {
              "propertyName": "locationType",
              "mapping": {
                "ADDR": "#/components/schemas/addressLocation",
                "UNLO": "#/components/schemas/unLocationLocation"
              }
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/addressLocation"
              },
              {
                "$ref": "#/components/schemas/unLocationLocation"
              }
            ]
          },
          "partyContactDetails": {
            "type": "array",
            "description": "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "documentParties": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Document Parties`\n",
            "items": {
              "$ref": "#/components/schemas/DocumentParty"
            }
          },
          "consignmentItems": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `ConsignmentItems`\n",
            "items": {
              "$ref": "#/components/schemas/ConsignmentItem_SHI"
            }
          },
          "utilizedTransportEquipments": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
            "items": {
              "$ref": "#/components/schemas/UtilizedTransportEquipmentShipper"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          },
          "advanceManifestFilings": {
            "type": "array",
            "description": "A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing\n",
            "items": {
              "$ref": "#/components/schemas/AdvanceManifestFilingEBL"
            }
          },
          "requestedCarrierCertificates": {
            "type": "array",
            "description": "Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack\n",
            "items": {
              "$ref": "#/components/schemas/RequestedCarrierCertificate"
            }
          },
          "requestedCarrierClauses": {
            "type": "array",
            "description": "Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`\n",
            "items": {
              "$ref": "#/components/schemas/RequestedCarrierClause"
            }
          }
        },
        "description": "The `Shipping Instructions` is an enrichment to the original booking shared by the Shipper to the Carrier. The information given by the Shipper through the `Shipping Instructions` is the information required to create a `Draft Transport Document`.\n"
      },
      "transportDocumentTypeCode": {
        "type": "string",
        "description": "Specifies the type of the transport document\n- BOL (Bill of Lading)\n- SWB (Sea Waybill)\n",
        "example": "SWB",
        "enum": [
          "BOL",
          "SWB"
        ]
      },
      "isShippedOnBoardType": {
        "type": "boolean",
        "description": "Specifies whether the Transport document is a received for shipment, or shipped on board.",
        "example": true
      },
      "freightPaymentTermCode": {
        "type": "string",
        "description": "An indicator of whether freight and charges for the main transport are prepaid or collect.\n- PRE (Prepaid)\n- COL (Collect)\n",
        "example": "PRE",
        "enum": [
          "PRE",
          "COL"
        ]
      },
      "originChargesPaymentTermCode": {
        "type": "string",
        "description": "An indicator of whether origin charges are prepaid or collect.\n- PRE (Prepaid)\n- COL (Collect)\n",
        "example": "PRE",
        "enum": [
          "PRE",
          "COL"
        ]
      },
      "destinationChargesPaymentTermCode": {
        "type": "string",
        "description": "An indicator of whether destination charges are prepaid or collect.\n- PRE (Prepaid)\n- COL (Collect)\n",
        "example": "PRE",
        "enum": [
          "PRE",
          "COL"
        ]
      },
      "isElectronic": {
        "type": "boolean",
        "description": "An indicator whether the transport document is electronically transferred.\n",
        "example": true,
        "default": false
      },
      "isToOrder": {
        "type": "boolean",
        "description": "Indicates whether the transport document is issued `to order` or not\n",
        "example": false
      },
      "numberOfCopiesWithCharges": {
        "minimum": 0,
        "type": "integer",
        "description": "The requested number of copies of the Transport document to be issued by the carrier including charges. Only applicable for physical (paper) documents",
        "format": "int32",
        "example": 2
      },
      "numberOfCopiesWithoutCharges": {
        "minimum": 0,
        "type": "integer",
        "description": "The requested number of copies of the Transport document to be issued by the carrier **NOT** including charges. Only applicable for physical (paper) documents",
        "format": "int32",
        "example": 2
      },
      "numberOfOriginalsWithCharges": {
        "minimum": 0,
        "type": "integer",
        "description": "Number of originals of the bill of lading that has been requested by the customer with charges. Only applicable for physical documents.\n",
        "format": "int32",
        "example": 1
      },
      "numberOfOriginalsWithoutCharges": {
        "minimum": 0,
        "type": "integer",
        "description": "Number of originals of the bill of lading that has been requested by the customer without charges. Only applicable for physical documents.\n",
        "format": "int32",
        "example": 1
      },
      "displayedName": {
        "maxLength": 35,
        "type": "string",
        "description": "A line of the address to be displayed on the transport document.\n"
      },
      "addressLocation": {
        "required": [
          "address",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationName": {
            "$ref": "#/components/schemas/locationName"
          },
          "locationType": {
            "type": "string",
            "description": "Discriminator used to identify this as a `Address Location` interface\n",
            "example": "ADDR"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          }
        },
        "description": "An interface used to express a location using an `Address` object\n"
      },
      "locationName": {
        "maxLength": 100,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The name of the location.\n",
        "example": "Port of Amsterdam"
      },
      "address": {
        "required": [
          "country",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/addressName"
          },
          "street": {
            "$ref": "#/components/schemas/streetName"
          },
          "streetNumber": {
            "$ref": "#/components/schemas/streetNumber"
          },
          "floor": {
            "$ref": "#/components/schemas/floor"
          },
          "postCode": {
            "$ref": "#/components/schemas/postCode"
          },
          "city": {
            "$ref": "#/components/schemas/cityName"
          },
          "stateRegion": {
            "$ref": "#/components/schemas/stateRegion"
          },
          "country": {
            "$ref": "#/components/schemas/country"
          }
        },
        "description": "An object for storing address related information\n"
      },
      "addressName": {
        "maxLength": 100,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "Name of the address\n",
        "example": "Henrik"
      },
      "streetName": {
        "maxLength": 100,
        "type": "string",
        "description": "The name of the street of the party’s address.",
        "example": "Kronprinsessegade"
      },
      "streetNumber": {
        "maxLength": 50,
        "type": "string",
        "description": "The number of the street of the party’s address.",
        "example": "54"
      },
      "floor": {
        "maxLength": 50,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The floor of the party’s street number.\n",
        "example": "5. sal"
      },
      "postCode": {
        "maxLength": 50,
        "type": "string",
        "description": "The post code of the party’s address.",
        "example": "1306"
      },
      "cityName": {
        "maxLength": 65,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The city name of the party’s address.\n",
        "example": "København"
      },
      "stateRegion": {
        "maxLength": 65,
        "type": "string",
        "description": "The state/region of the party’s address.",
        "nullable": true,
        "example": "Copenhagen"
      },
      "country": {
        "maxLength": 75,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The country of the party’s address.\n",
        "example": "Denmark"
      },
      "unLocationLocation": {
        "required": [
          "UNLocationCode",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationName": {
            "$ref": "#/components/schemas/locationName"
          },
          "locationType": {
            "type": "string",
            "description": "Discriminator used to identify this as a `UNLocation` location interface\n",
            "example": "UNLO"
          },
          "UNLocationCode": {
            "$ref": "#/components/schemas/UNLocationCode"
          }
        },
        "description": "An interface used to express a location using a `Un Location Code`\n"
      },
      "UNLocationCode": {
        "maxLength": 5,
        "minLength": 5,
        "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
        "type": "string",
        "description": "The UN Location code specifying where the place is located. The pattern used must be\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here:  [UN/LOCODE](https://en.wikipedia.org/wiki/UN/LOCODE)\n",
        "example": "FRPAR"
      },
      "PartyContactDetail": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/contactName"
          }
        },
        "description": "The contact details of the person to contact. It is mandatory to provide either `phone` or `email` along with the `name`.\n",
        "example": {
          "name": "Henrik",
          "phone": "+45 51801234"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PhoneRequired"
          },
          {
            "$ref": "#/components/schemas/EmailRequired"
          }
        ]
      },
      "PhoneRequired": {
        "title": "Phone required - email optional",
        "required": [
          "phone"
        ],
        "type": "object",
        "properties": {
          "phone": {
            "$ref": "#/components/schemas/contactPhone"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          }
        },
        "description": "`Phone` is mandatory to provide - `email` is optional\n"
      },
      "contactPhone": {
        "maxLength": 30,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "Phone number for the contact\n",
        "example": "+45 70262970"
      },
      "email": {
        "maxLength": 100,
        "pattern": "^.+@\\S+$",
        "type": "string",
        "description": "`E-mail` address to be used\n",
        "example": "info@dcsa.org"
      },
      "EmailRequired": {
        "title": "Email required - phone optional",
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "phone": {
            "$ref": "#/components/schemas/contactPhone"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          }
        },
        "description": "`Email` is mandatory to provide - `phone` is optional\n"
      },
      "contactName": {
        "maxLength": 100,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "Name of the contact\n",
        "example": "Henrik"
      },
      "DocumentParty": {
        "required": [
          "isToBeNotified",
          "party",
          "partyFunction"
        ],
        "type": "object",
        "properties": {
          "party": {
            "$ref": "#/components/schemas/Party"
          },
          "partyFunction": {
            "$ref": "#/components/schemas/partyFunction"
          },
          "displayedAddress": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The address to be displayed in the `Transport Document`. The displayed address may be used to match the address provided in the letter of credit. It is mandatory to provide a displayed address if the B/L needs to be switched to paper later in the process\n",
            "items": {
              "$ref": "#/components/schemas/addressLine"
            }
          },
          "isToBeNotified": {
            "$ref": "#/components/schemas/isToBeNotified"
          }
        },
        "description": "Associates a Party with a role.\n"
      },
      "Party": {
        "required": [
          "partyContactDetails",
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "$ref": "#/components/schemas/partyName"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "partyContactDetails": {
            "minItems": 1,
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          }
        },
        "description": "Refers to a company or a legal entity.\n"
      },
      "partyName": {
        "maxLength": 100,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "Name of the party.\n",
        "example": "Asseco Denmark"
      },
      "IdentifyingCode": {
        "required": [
          "DCSAResponsibleAgencyCode",
          "partyCode"
        ],
        "type": "object",
        "properties": {
          "DCSAResponsibleAgencyCode": {
            "$ref": "#/components/schemas/DCSAResponsibleAgencyCode"
          },
          "partyCode": {
            "$ref": "#/components/schemas/partyCode"
          },
          "codeListName": {
            "$ref": "#/components/schemas/codeListName"
          }
        }
      },
      "DCSAResponsibleAgencyCode": {
        "maxLength": 5,
        "type": "string",
        "description": "A DCSA provided code for [UN/CEFACT](https://unece.org/fileadmin/DAM/trade/untdid/d16b/tred/tred3055.htm) code list providers:\n- ISO (International Standards Organization)\n- UNECE (United Nations Economic Commission for Europe)\n- LLOYD (Lloyd's register of shipping)\n- BIC (Bureau International des Containeurs)\n- IMO (International Maritime Organization)\n- SCAC (Standard Carrier Alpha Code)\n- ITIGG (International Transport Implementation Guidelines Group)\n- ITU (International Telecommunication Union)\n- SMDG (Shipplanning Message Development Group)\n- EXIS (Exis Technologies Ltd.)\n- FMC (Federal Maritime Commission)\n- CBSA (Canada Border Services Agency)\n- DCSA (Digitial Container Shipping Association)\n- DID (Decentralized Identifier)\n- LEI (Legal Entity Identifier)\n- EPI (EBL Platform Identifier)\n- ZZZ (Mutually defined)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/codelistresponsibleagencycodes.csv).\n",
        "example": "SMDG"
      },
      "partyCode": {
        "maxLength": 100,
        "type": "string",
        "description": "Code to identify the party as provided by the agency\n",
        "example": "MSK"
      },
      "codeListName": {
        "maxLength": 100,
        "type": "string",
        "description": "The name of the list, provided by the responsible agency\n",
        "example": "LCL"
      },
      "TaxLegalReference": {
        "required": [
          "countryCode",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/taxLegalReferenceType"
          },
          "countryCode": {
            "$ref": "#/components/schemas/countryCode"
          },
          "value": {
            "$ref": "#/components/schemas/taxLegalReferenceValue"
          }
        },
        "description": "Reference that uniquely identifies a party for tax and/or legal purposes in accordance with the relevant jurisdiction.\n\nA list of examples:\n\n| Type  | Country | Description |\n|-------|:-------:|-------------|\n|PAN|IN|Goods and Services Tax Identification Number in India|\n|GSTIN|IN|Goods and Services Tax Identification Number in India|\n|IEC|IN|Importer-Exported Code in India|\n|RUC|EC|Registro Único del Contribuyente in Ecuador|\n|RUC|PE|Registro Único del Contribuyente in Peru|\n|NIF|MG|Numéro d’Identification Fiscal in Madagascar|\n|NIF|DZ|Numéro d’Identification Fiscal in Algeria|\n\nAllowed combinations of `type` and `country` are maintained in [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/taxandlegalreferences.csv).\n"
      },
      "taxLegalReferenceType": {
        "maxLength": 50,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The reference type code as defined by the relevant tax and/or legal authority.\n",
        "example": "PAN"
      },
      "countryCode": {
        "maxLength": 2,
        "minLength": 2,
        "pattern": "^[A-Z]{2}$",
        "type": "string",
        "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n",
        "example": "DK"
      },
      "taxLegalReferenceValue": {
        "maxLength": 100,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The value of the `taxLegalReference`\n",
        "example": "AAAAA0000A"
      },
      "partyFunction": {
        "maxLength": 3,
        "type": "string",
        "description": "Specifies the role of the party in a given context\n- OS (Original shipper)\n- CN (Consignee)\n- COW (Invoice payer on behalf of the consignor (shipper))\n- COX (Invoice payer on behalf of the consignee)\n- MS (Document/message issuer/sender)\n- N1 (First Notify Party)\n- N2 (Second Notify Party)\n- NI (Other Notify Party)\n- DDR (Consignor's freight forwarder)\n- DDS (Consignee's freight forwarder)\n- HE (Carrier booking office (transportation office))\n- SCO (Service contract owner - Defined by DCSA)\n- BA (Booking Agency)\n- END (Endorsee Party)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/partyfunctioncodes.csv)\n",
        "example": "DDS"
      },
      "addressLine": {
        "maxLength": 35,
        "type": "string",
        "description": "A single address line to be used when a B/L needs to be printed.\n",
        "example": "Kronprincessegade 54"
      },
      "isToBeNotified": {
        "type": "boolean",
        "description": "Used to decide whether the party will be notified of the arrival of the cargo.",
        "example": true
      },
      "ConsignmentItem_SHI": {
        "required": [
          "cargoItems",
          "commoditySubreference"
        ],
        "type": "object",
        "properties": {
          "commoditySubreference": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "A unique reference to the commodity object assigned by the carrier in the booking confirmation. The reference must be provided by the shipper as part of the `Shipping Instructions` for the carrier to link this consignment item to the commodity. A commodity reference is only unique in the context of a booking.\n",
            "example": "COM-001"
          },
          "cargoItems": {
            "$ref": "#/components/schemas/ConsignmentItem_SHI_cargoItems"
          }
        },
        "description": "Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConsignmentItem"
          }
        ]
      },
      "ConsignmentItem": {
        "required": [
          "HSCodes",
          "cargoItems",
          "carrierBookingReference",
          "descriptionOfGoods",
          "weight",
          "weightUnit"
        ],
        "type": "object",
        "properties": {
          "carrierBookingReference": {
            "maxLength": 35,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The associated booking number provided by the carrier for this `Consignment Item`.\n\nWhen multiple `carrierBookingReferences` are used then the bookings referred to must all contain the same:\n- transportPlan\n- shipmentLocations\n- receiptTypeAtOrigin\n- deliveryTypeAtDestination\n- cargoMovementTypeAtOrigin\n- cargoMovementTypeAtDestination\n- serviceContractReference\n- termsAndConditions\n- Place of B/L Issue (if provided)\n",
            "example": "ABC709951"
          },
          "weight": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The total weight of all the `CargoItems` listed in the `ConsignmentItem`. Excludes the tare weight of the container(s).\n",
            "format": "float",
            "example": 13000.3
          },
          "weightUnit": {
            "$ref": "#/components/schemas/weightUnit"
          },
          "volume": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The total volume of all the `CargoItems` listed in the `ConsignmentItem`.\n",
            "format": "float",
            "example": 12
          },
          "volumeUnit": {
            "$ref": "#/components/schemas/volumeUnit"
          },
          "descriptionOfGoods": {
            "$ref": "#/components/schemas/descriptionOfGoods"
          },
          "HSCodes": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `HS Codes` that apply to this `consignmentItem`\n",
            "items": {
              "$ref": "#/components/schemas/HSCode"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`\n"
      },
      "weightUnit": {
        "type": "string",
        "description": "The unit of measure which can be expressed in imperial or metric terms\n- KGM (Kilograms)\n- LBR (Pounds)\n",
        "example": "KGM",
        "enum": [
          "KGM",
          "LBR"
        ]
      },
      "volumeUnit": {
        "type": "string",
        "description": "The unit of measure which can be expressed in either imperial or metric terms\n- FTQ (Cubic foot)\n- MTQ (Cubic meter)\n",
        "example": "MTQ",
        "enum": [
          "MTQ",
          "FTQ"
        ]
      },
      "descriptionOfGoods": {
        "maxLength": 5000,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The cargo description are details which accurately and properly describe the cargo being shipped in the container(s) as provided by the shipper.",
        "example": "300 boxes of blue shoes size 47"
      },
      "HSCode": {
        "maxLength": 10,
        "minLength": 6,
        "pattern": "^\\d{6,10}$",
        "type": "string",
        "description": "Used by customs to classify the product being shipped. More information can be found here: [Harmonized Commodity Description and Coding Systems (HS)](https://unstats.un.org/wiki/pages/viewpage.action?pageId=87426301) or here: [Harmonized System Codes](https://www.foreign-trade.com/reference/hscode.htm)\n",
        "example": "851712"
      },
      "Reference": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/referenceType"
          },
          "value": {
            "$ref": "#/components/schemas/referenceValue"
          }
        },
        "description": "References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\n"
      },
      "referenceType": {
        "maxLength": 3,
        "type": "string",
        "description": "The reference type codes defined by DCSA.\n- FF (Freight Forwarder’s Reference)\n- SI (Shipper’s Reference)\n- SPO (Shippers Purchase Order Reference)\n- CPO (Consignees Purchase Order Reference)\n- CR (Customer’s Reference)\n- AAO (Consignee’s Reference)\n- ECR (Empty container release reference)\n- CSI (Customer shipment ID)\n- BPR (Booking party reference number)\n- BID (Booking Request ID)\n- SAC (Shipping Agency Code)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/referencetypes.csv).\n",
        "example": "FF"
      },
      "referenceValue": {
        "maxLength": 100,
        "type": "string",
        "description": "The actual value of the reference. \n",
        "example": "HHL00103004"
      },
      "CustomsReference": {
        "required": [
          "countryCode",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/customsReferenceType"
          },
          "countryCode": {
            "$ref": "#/components/schemas/countryCode"
          },
          "value": {
            "$ref": "#/components/schemas/customsReferenceValue"
          }
        },
        "description": "Reference associated with customs and/or excise purposes required by the relevant authorities for the import, export, or transit of the goods.\n\nA (small) list of examples:\n\n| Type  | Country | Description |\n|-------|:-------:|-------------|\n|ACID|EG|Advance Cargo Information Declaration in Egypt|\n|CERS|CA|Canadian Export Reporting System|\n|ITN|US|Internal Transaction Number in US|\n|PEB|ID|PEB reference number|\n|CSN|IN|Cargo Summary Notification (CSN)|\n\nAllowed combinations of `type` and `country` are maintained in [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/customsreferences.csv).\n"
      },
      "customsReferenceType": {
        "maxLength": 50,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The reference type code as defined in the relevant customs jurisdiction.\n",
        "example": "ACID"
      },
      "customsReferenceValue": {
        "maxLength": 100,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The value of the `customsReference`\n",
        "example": "4988470982020120017"
      },
      "CargoItem_SHI": {
        "required": [
          "equipmentReference",
          "outerPackaging",
          "weight",
          "weightUnit"
        ],
        "type": "object",
        "properties": {
          "shippingMarks": {
            "$ref": "#/components/schemas/ShippingMarks"
          },
          "equipmentReference": {
            "$ref": "#/components/schemas/equipmentReference"
          },
          "weight": {
            "$ref": "#/components/schemas/weight"
          },
          "volume": {
            "$ref": "#/components/schemas/volume"
          },
          "weightUnit": {
            "$ref": "#/components/schemas/weightUnit"
          },
          "volumeUnit": {
            "$ref": "#/components/schemas/volumeUnit"
          },
          "outerPackaging": {
            "$ref": "#/components/schemas/OuterPackaging_SHI"
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.\n"
      },
      "ShippingMarks": {
        "minItems": 1,
        "type": "array",
        "description": "A list of the `ShippingMarks` applicable to this `cargoItem`\n",
        "items": {
          "maxLength": 500,
          "type": "string",
          "description": "The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.\n",
          "example": "Made in China"
        }
      },
      "equipmentReference": {
        "maxLength": 11,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
        "example": "APZU4812090"
      },
      "weight": {
        "minimum": 0,
        "exclusiveMinimum": true,
        "type": "number",
        "description": "The total weight of the cargo including packaging items being carried in the container(s). Excludes the tare weight of the container(s).\n",
        "format": "float",
        "example": 13000.3
      },
      "volume": {
        "minimum": 0,
        "exclusiveMinimum": true,
        "type": "number",
        "description": "Calculated by multiplying the width, height, and length of the packed cargo.\n",
        "format": "float",
        "example": 12
      },
      "OuterPackaging_SHI": {
        "required": [
          "numberOfPackages"
        ],
        "type": "object",
        "properties": {
          "packageCode": {
            "$ref": "#/components/schemas/packageCode"
          },
          "numberOfPackages": {
            "minimum": 1,
            "type": "integer",
            "description": "Specifies the number of outer packagings/overpacks associated with this `Cargo Item`.\n",
            "format": "int32",
            "example": 18
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "description": "Description of the outer packaging/overpack.\n",
            "example": "Drum, steel"
          }
        },
        "description": "Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport. It is an array of the attributes below.\n"
      },
      "packageCode": {
        "pattern": "^[A-Z0-9]{2}$",
        "type": "string",
        "description": "A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation N°21 - Revision 12  Annexes V and VI](https://unece.org/sites/default/files/2021-06/rec21_Rev12e_Annex-V-VI_2021.xls)\n\n**Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.\n",
        "example": "5H"
      },
      "UtilizedTransportEquipmentShipper": {
        "required": [
          "seals"
        ],
        "type": "object",
        "properties": {
          "seals": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Seals`\n",
            "items": {
              "$ref": "#/components/schemas/Seal"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "Specifies the container (`Equipment`), `Seals` and `References`\n",
        "discriminator": {
          "propertyName": "isShipperOwned",
          "mapping": {
            "true": "#/components/schemas/UTEquipment",
            "false": "#/components/schemas/UTEquipmentReference"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/UTEquipment"
          },
          {
            "$ref": "#/components/schemas/UTEquipmentReference"
          }
        ]
      },
      "UTEquipment": {
        "title": "Shipper Owned Equipment (SoC)",
        "required": [
          "equipment",
          "isShipperOwned"
        ],
        "type": "object",
        "properties": {
          "isShipperOwned": {
            "$ref": "#/components/schemas/isShipperOwned"
          },
          "equipment": {
            "$ref": "#/components/schemas/Equipment"
          }
        },
        "description": "To be used for SoC (Shipper owned Containers). If `isShipperOwned` is true then the equipment used needs to be specified\n"
      },
      "isShipperOwned": {
        "type": "boolean",
        "description": "Indicates whether the container is shipper owned (SOC).",
        "example": true
      },
      "Equipment": {
        "required": [
          "equipmentReference"
        ],
        "type": "object",
        "properties": {
          "equipmentReference": {
            "$ref": "#/components/schemas/equipmentReference"
          },
          "ISOEquipmentCode": {
            "$ref": "#/components/schemas/ISOEquipmentCode"
          },
          "tareWeight": {
            "$ref": "#/components/schemas/tareWeight"
          },
          "weightUnit": {
            "$ref": "#/components/schemas/weightUnit"
          }
        },
        "description": "Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.\n"
      },
      "ISOEquipmentCode": {
        "maxLength": 4,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "Unique code for the different equipment size and type used to transport commodities. The code can refer to either the ISO size type (e.g. 22G1) or the ISO type group (e.g. 22GP) following the [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346) standard.\n",
        "example": "22GP"
      },
      "tareWeight": {
        "minimum": 0,
        "exclusiveMinimum": true,
        "type": "number",
        "description": "The weight of an empty container (gross container weight).\n",
        "format": "float",
        "example": 4800
      },
      "UTEquipmentReference": {
        "title": "Carrier Owned Equipment",
        "required": [
          "equipmentReference",
          "isShipperOwned"
        ],
        "type": "object",
        "properties": {
          "isShipperOwned": {
            "type": "boolean",
            "description": "Indicates whether the container is shipper owned (SOC).",
            "example": false
          },
          "equipmentReference": {
            "$ref": "#/components/schemas/equipmentReference"
          }
        },
        "description": "To be used when referring to carrier owned containers (`isShipperOwned` is false). In this case it is only necessary to provide `equipmentReference`\n"
      },
      "Seal": {
        "required": [
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "$ref": "#/components/schemas/sealNumber"
          },
          "source": {
            "$ref": "#/components/schemas/sealSource"
          },
          "type": {
            "$ref": "#/components/schemas/sealType"
          }
        },
        "description": "Addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This `Seal` is meant to stay on until the shipment equipment reaches its final destination.\n"
      },
      "sealNumber": {
        "maxLength": 15,
        "type": "string",
        "description": "Identifies a seal affixed to the container."
      },
      "sealSource": {
        "maxLength": 5,
        "type": "string",
        "description": "The source of the seal, namely who has affixed the seal. This attribute links to the Seal Source ID defined in the Seal Source reference data entity.\n- CAR (Carrier)\n- SHI (Shipper)\n- PHY (Phytosanitary)\n- VET (Veterinary)\n- CUS (Customs)\n\n**Condition:** Conditional on type of commodity\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/sealsourcecodes.csv)\n",
        "example": "CUS"
      },
      "sealType": {
        "maxLength": 5,
        "type": "string",
        "description": "The type of seal. This attribute links to the Seal Type ID defined in the Seal Type reference data entity.\n- KLP (Keyless padlock)\n- BLT (Bolt)\n- WIR (Wire)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/sealtypecodes.csv)\n",
        "example": "WIR"
      },
      "AdvanceManifestFilingEBL": {
        "required": [
          "advanceManifestFilingsHouseBLPerformedBy"
        ],
        "type": "object",
        "properties": {
          "advanceManifestFilingsHouseBLPerformedBy": {
            "type": "string",
            "description": "Indicates whether the shipper (`SHIPPER`) will perform the advance manifest filing(s) for the House BL directly or if the carrier (`CARRIER`) should file them on their behalf. Allowed values are:\n\n- `SHIPPER` (the shipper does the filing)\n- `CARRIER` (the carrier does the filing)\n\nIn case of self-filing (`SHIPPER`), the shipper can provide their `selfFilerCode` for each manifest.\n\n**Condition:** The `selfFilerCode` must be provided when `manifestTypeCode` is either `ACE` (US) or `ACI` (CA) and the `advanceManifestFilingsHouseBLPerformedBy` is set to `SHIPPER`.\n",
            "example": "SHIPPER",
            "enum": [
              "SHIPPER",
              "CARRIER"
            ]
          },
          "selfFilerCode": {
            "$ref": "#/components/schemas/selfFilerCode"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AdvanceManifestFilingBKG"
          }
        ]
      },
      "AdvanceManifestFilingBKG": {
        "required": [
          "countryCode",
          "manifestTypeCode"
        ],
        "type": "object",
        "properties": {
          "manifestTypeCode": {
            "$ref": "#/components/schemas/manifestTypeCode"
          },
          "countryCode": {
            "$ref": "#/components/schemas/countryCode"
          }
        },
        "description": "An Advance Maifest Filing defined by a Manifest type code in combination with a country code.\n\nA list of `manifestTypeCodes` together with `countryCode` is maintained in [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/advancedmanifestfilings.csv). A (small) subset can be seen here:\n\n| manifestTypeCode | countryCode | Description |\n|-----------------------|:-------------:|-------------|\n|ACI|EG|Advance Cargo Information in Egypt|\n|ACE|US|Automated Commercial Environment in the United States|\n|AFR|JP|Cargo Summary Notification (CSN)|\n",
        "example": {
          "manifestTypeCode": "ACE",
          "countryCode": "US"
        }
      },
      "manifestTypeCode": {
        "maxLength": 50,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The Manifest type code as defined by the provider. A list of `manifestTypeCodes` together with `countryCode` is maintained in [GitHub (to be created)]()\n",
        "example": "ACE"
      },
      "selfFilerCode": {
        "maxLength": 100,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "Code identifying the party who will submit the advance manifest filing(s) for the House BL.\n\n**Mandatory** if `manifestTypeCode` is either `ACE` (US) or `ACI` (CA) and `advanceManifestFilingsHouseBLPerformedBy` is set to `SHIPPER`.\n",
        "example": "FLXP"
      },
      "RequestedCarrierCertificate": {
        "maxLength": 100,
        "type": "string",
        "description": "Name of the certificate. Possible values are:\n- `SHIPMENT_VOYAGE_PARTICULARS_1` (Shipment-Voyage Particulars 1)\n- `SHIPMENT_VOYAGE_PARTICULARS_2` (Shipment-Voyage Particulars 2)\n- `SHIPMENT_VOYAGE_PARTICULARS_3` (Shipment-Voyage Particulars 3)\n- `SHIPMENT_VOYAGE_PARTICULARS_4` (Shipment-Voyage Particulars 4)\n- `SHIPMENT_VOYAGE_PARTICULARS_5` (Shipment-Voyage Particulars 5)\n- `SHIPMENT_VOYAGE_PARTICULARS_6` (Shipment-Voyage Particulars 6)\n- `SHIPMENT_VOYAGE_PARTICULARS_7` (Shipment-Voyage Particulars 7)\n- `VESSEL_PARTICULARS_1` (Vessel Particulars 1)\n- `VESSEL_PARTICULARS_2` (Vessel Particulars 2)\n- `VESSEL_PARTICULARS_3` (Vessel Particulars 3)\n- `VESSEL_PARTICULARS_4` (Vessel Particulars 4)\n- `VESSEL_PARTICULARS_5` (Vessel Particulars 5)\n- `VESSEL_PARTICULARS_6` (Vessel Particulars 6)\n- `VESSEL_PARTICULARS_7` (Vessel Particulars 7)\n- `VESSEL_PARTICULARS_8` (Vessel Particulars 8)\n- `VESSEL_PARTICULARS_9` (Vessel Particulars 9)\n- `VESSEL_PARTICULARS_10` (Vessel Particulars 10)\n- `VESSEL_PARTICULARS_11` (Vessel Particulars 11)\n- `VESSEL_PARTICULARS_12` (Vessel Particulars 12)\n- `VESSEL_PARTICULARS_13` (Vessel Particulars 13)\n- `VESSEL_PARTICULARS_14` (Vessel Particulars 14)\n- `VESSEL_PARTICULARS_15` (Vessel Particulars 15)\n- `VESSEL_PARTICULARS_16` (Vessel Particulars 16)\n- `VESSEL_PARTICULARS_17` (Vessel Particulars 17)\n- `VESSEL_PARTICULARS_18` (Vessel Particulars 18)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/carriercertificates.csv).\n",
        "example": "VESSEL_PARTICULARS_1"
      },
      "RequestedCarrierClause": {
        "maxLength": 100,
        "type": "string",
        "description": "A clause to request from the carrier. Possible values are:\n- `CARGO_CARGOSPECIFICS` (Cargo/Cargo specifics)\n- `VESSELCONVEYANCE_COUNTRYSPECIFIC` (Vessel conveyance/Country Specific)\n- `CARGO_RETURNOFEMPTYCONTAINER` (Cargo/Return of Empty Container)\n- `CARGO_CARGOVALUE` (Cargo/Cargo value)\n- `CARGO_REEFERTEMPERATURE` (Cargo/Reefer temperature)\n- `CARGO_CONFLICTINGTEMPERATURES_MIXEDLOADS` (Cargo/Conflicting temperatures / Mixed loads)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/carrierclauses.csv).\n",
        "example": "CARGO_CARGOSPECIFICS"
      },
      "ShippingInstructionsRefStatus": {
        "required": [
          "documentStatus",
          "shippingInstructionsReference"
        ],
        "type": "object",
        "properties": {
          "shippingInstructionsReference": {
            "$ref": "#/components/schemas/shippingInstructionsReference"
          },
          "documentStatus": {
            "$ref": "#/components/schemas/eblStatus"
          },
          "requestedChanges": {
            "$ref": "#/components/schemas/requestedChanges"
          }
        },
        "description": "The `shippingInstructionsReference` along with the `documentStatus` and an optional list of `requestedChanges` to be applied to the `Shipping Instructions` is returned.\n"
      },
      "shippingInstructionsReference": {
        "maxLength": 100,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The identifier for a `Shipping Istructions` provided by the carrier for system purposes.\n",
        "example": "e0559d83-00e2-438e-afd9-fdd610c1a008"
      },
      "eblStatus": {
        "maxLength": 50,
        "type": "string",
        "description": "The status of the ebl. Possible values are:\n- RECEIVED\n- PENDING UPDATE\n- INITIAL DRAFT\n- PENDING CHANGE APPROVAL\n- DRAFT\n- PENDING DRAFT AMENDMENT APPROVAL\n- APPROVED\n- ISSUED\n- CANCELLED\n- PENDING AMENDMENT APPROVAL\n- AMENDMENT APPROVED\n- PENDING SURRENDER FOR AMENDMENT\n- SURRENDER FOR AMENDMENT\n- PENDING SURRENDER FOR DELIVERY\n- SURRENDER FOR DELIVERY\n- VOIDED\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/eblstatuses.csv).\n",
        "example": "RECEIVED"
      },
      "requestedChanges": {
        "type": "array",
        "description": "A list of changes requirested by the carrier to the document in order for it to be accepted.\n",
        "items": {
          "$ref": "#/components/schemas/requestedChange"
        }
      },
      "requestedChange": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "path": {
            "maxLength": 500,
            "type": "string",
            "description": "A [JSONpath](https://github.com/json-path/JsonPath) describing where in the payload structure a particular error exists.\n",
            "example": "location.facilityCode"
          },
          "message": {
            "maxLength": 500,
            "type": "string",
            "description": "A description of the problem that needs attention.\n",
            "example": "Spaces not allowed in facility code"
          }
        },
        "description": "A change required to the document in order for the carrier to accepted it\n"
      },
      "error": {
        "required": [
          "errorDateTime",
          "errors",
          "httpMethod",
          "requestUri",
          "statusCode",
          "statusCodeText"
        ],
        "type": "object",
        "properties": {
          "httpMethod": {
            "type": "string",
            "description": "The http request method type e.g. GET, POST\n",
            "example": "POST",
            "enum": [
              "GET",
              "HEAD",
              "POST",
              "PUT",
              "DELETE",
              "OPTION",
              "PATCH"
            ]
          },
          "requestUri": {
            "type": "string",
            "description": "The request URI as it was sent\n",
            "example": "/v1/events"
          },
          "statusCode": {
            "type": "integer",
            "description": "The HTTP status code\n",
            "format": "int32",
            "example": 400
          },
          "statusCodeText": {
            "maxLength": 50,
            "type": "string",
            "description": "The textual representation of the status code\n",
            "example": "Bad Request"
          },
          "errorMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "Other error information\n",
            "example": "The supplied data could not be accepted"
          },
          "providerCorrelationID": {
            "maxLength": 100,
            "type": "string",
            "description": "A unique identifier for the transaction, e.g. a UUID\n",
            "example": "4426d965-0dd8-4005-8c63-dc68b01c4962"
          },
          "errorDateTime": {
            "type": "string",
            "description": "The date and time (in ISO 8601 format) the error occurred.\n",
            "format": "date-time",
            "example": "2019-11-12T07:41:00+08:30"
          },
          "errors": {
            "minItems": 1,
            "type": "array",
            "description": "List of detailed errors, e.g. fields that could not pass validation\n",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/detailedError"
                }
              ]
            }
          }
        }
      },
      "detailedError": {
        "required": [
          "message",
          "reason"
        ],
        "type": "object",
        "properties": {
          "errorCode": {
            "maximum": 9999,
            "minimum": 7000,
            "type": "integer",
            "description": "Standard error code see http://dcsa.org/error-codes (to be created). Examples: 7003 – out or range value, 7004 -  invalid type\n",
            "format": "int32",
            "example": 7003
          },
          "field": {
            "maxLength": 500,
            "type": "string",
            "description": "The field that caused the error, e.g. a failed validation. The field can be expressed as a [JSONpath](https://github.com/json-path/JsonPath)\n",
            "example": "location.facilityCode"
          },
          "value": {
            "maxLength": 500,
            "type": "string",
            "description": "The value of the field that caused the error\n",
            "example": "SG SIN WHS"
          },
          "reason": {
            "maxLength": 100,
            "type": "string",
            "description": "High level error message\n",
            "example": "invalidData"
          },
          "message": {
            "maxLength": 200,
            "type": "string",
            "description": "Additional information as to why the error occured\n",
            "example": "Spaces not allowed in facility code"
          }
        }
      },
      "ShippingInstructionsResponse": {
        "required": [
          "documentStatus",
          "shippingInstructionsReference"
        ],
        "type": "object",
        "properties": {
          "shippingInstructionsReference": {
            "$ref": "#/components/schemas/shippingInstructionsReference"
          },
          "transportDocumentReference": {
            "maxLength": 20,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The transportDocumentReference if know. Often this will not be known until the Transport Document has been `DRAFTED`. Is available during a Transport Document amendment.\n",
            "example": "HHL71800000"
          },
          "documentStatus": {
            "$ref": "#/components/schemas/eblStatus"
          },
          "requestedChanges": {
            "type": "array",
            "description": "A list of changes requirested by the carrier to the document in order for it to be accepted.\n",
            "items": {
              "$ref": "#/components/schemas/requestedChange"
            }
          }
        },
        "description": "The `Shipping Instructions` as provided by the Shipper.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingInstructionsRequest"
          }
        ]
      },
      "ShippingInstructionsUpdate": {
        "required": [
          "shippingInstructionsReference"
        ],
        "type": "object",
        "properties": {
          "shippingInstructionsReference": {
            "$ref": "#/components/schemas/shippingInstructionsReference"
          }
        },
        "description": "The `Shipping Instructions` to update.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingInstructionsRequest"
          }
        ]
      },
      "ShippingInstructions": {
        "required": [
          "consignmentItems",
          "documentParties",
          "documentStatus",
          "freightPaymentTermCode",
          "invoicePayableAt",
          "isElectronic",
          "isShippedOnBoardType",
          "isToOrder",
          "partyContactDetails",
          "shippingInstructionsReference",
          "transportDocumentTypeCode",
          "utilizedTransportEquipments"
        ],
        "type": "object",
        "properties": {
          "shippingInstructionsReference": {
            "$ref": "#/components/schemas/shippingInstructionsReference"
          },
          "transportDocumentReference": {
            "maxLength": 20,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The transportDocumentReference if know. Often this will not be known until the Transport Document has been `DRAFTED`. Is available during a Transport Document amendment.\n",
            "example": "HHL71800000"
          },
          "documentStatus": {
            "$ref": "#/components/schemas/eblStatus"
          },
          "transportDocumentTypeCode": {
            "$ref": "#/components/schemas/transportDocumentTypeCode"
          },
          "isShippedOnBoardType": {
            "$ref": "#/components/schemas/isShippedOnBoardType"
          },
          "freightPaymentTermCode": {
            "$ref": "#/components/schemas/freightPaymentTermCode"
          },
          "originChargesPaymentTermCode": {
            "$ref": "#/components/schemas/originChargesPaymentTermCode"
          },
          "destinationChargesPaymentTermCode": {
            "$ref": "#/components/schemas/destinationChargesPaymentTermCode"
          },
          "isElectronic": {
            "$ref": "#/components/schemas/isElectronic"
          },
          "isToOrder": {
            "$ref": "#/components/schemas/isToOrder"
          },
          "numberOfCopiesWithCharges": {
            "$ref": "#/components/schemas/numberOfCopiesWithCharges"
          },
          "numberOfCopiesWithoutCharges": {
            "$ref": "#/components/schemas/numberOfCopiesWithoutCharges"
          },
          "numberOfOriginalsWithCharges": {
            "$ref": "#/components/schemas/numberOfOriginalsWithCharges"
          },
          "numberOfOriginalsWithoutCharges": {
            "$ref": "#/components/schemas/numberOfOriginalsWithoutCharges"
          },
          "displayedNameForPlaceOfReceipt": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPortOfLoad": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPortOfDischarge": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPlaceOfDelivery": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "placeOfIssue": {
            "type": "object",
            "description": "General purpose object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or an `Address`.\n",
            "example": {
              "locationName": "DCSA Headquarters",
              "locationType": "UNLO",
              "UNLocationCode": "NLAMS"
            },
            "discriminator": {
              "propertyName": "locationType",
              "mapping": {
                "ADDR": "#/components/schemas/addressLocation",
                "UNLO": "#/components/schemas/unLocationLocation"
              }
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/addressLocation"
              },
              {
                "$ref": "#/components/schemas/unLocationLocation"
              }
            ]
          },
          "invoicePayableAt": {
            "type": "object",
            "description": "General purpose object to capture `Invoice Payable At` location specified as: location where payment by the customer will take place. Usually refers to Basic Ocean Freight alone.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or an `Address`.\n",
            "example": {
              "locationName": "Eiffel Tower",
              "locationType": "UNLO",
              "UNLocationCode": "FRPAR"
            },
            "discriminator": {
              "propertyName": "locationType",
              "mapping": {
                "ADDR": "#/components/schemas/addressLocation",
                "UNLO": "#/components/schemas/unLocationLocation"
              }
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/addressLocation"
              },
              {
                "$ref": "#/components/schemas/unLocationLocation"
              }
            ]
          },
          "partyContactDetails": {
            "type": "array",
            "description": "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "documentParties": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Document Parties`\n",
            "items": {
              "$ref": "#/components/schemas/DocumentParty"
            }
          },
          "consignmentItems": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `ConsignmentItems`\n",
            "items": {
              "$ref": "#/components/schemas/ConsignmentItem_CAR"
            }
          },
          "utilizedTransportEquipments": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
            "items": {
              "$ref": "#/components/schemas/UtilizedTransportEquipmentCarrier"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          },
          "advanceManifestFilings": {
            "type": "array",
            "description": "A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing\n",
            "items": {
              "$ref": "#/components/schemas/AdvanceManifestFilingEBL"
            }
          },
          "requestedCarrierCertificates": {
            "type": "array",
            "description": "Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack\n",
            "items": {
              "$ref": "#/components/schemas/RequestedCarrierCertificate"
            }
          },
          "requestedCarrierClauses": {
            "type": "array",
            "description": "Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`\n",
            "items": {
              "$ref": "#/components/schemas/RequestedCarrierClause"
            }
          }
        },
        "description": "The `Shipping Instructions` enriched with information from the `Booking`.\n"
      },
      "ConsignmentItem_CAR": {
        "required": [
          "cargoItems"
        ],
        "type": "object",
        "properties": {
          "cargoItems": {
            "minItems": 1,
            "type": "array",
            "description": "A list of all `cargoItems`\n",
            "items": {
              "$ref": "#/components/schemas/CargoItem_CAR"
            }
          }
        },
        "description": "Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConsignmentItem"
          }
        ]
      },
      "CargoItem_CAR": {
        "required": [
          "equipmentReference",
          "outerPackaging",
          "weight",
          "weightUnit"
        ],
        "type": "object",
        "properties": {
          "shippingMarks": {
            "$ref": "#/components/schemas/ShippingMarks"
          },
          "equipmentReference": {
            "$ref": "#/components/schemas/equipmentReference"
          },
          "weight": {
            "$ref": "#/components/schemas/weight"
          },
          "volume": {
            "$ref": "#/components/schemas/volume"
          },
          "weightUnit": {
            "$ref": "#/components/schemas/weightUnit"
          },
          "volumeUnit": {
            "$ref": "#/components/schemas/volumeUnit"
          },
          "outerPackaging": {
            "$ref": "#/components/schemas/OuterPackaging_CAR"
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.\n"
      },
      "OuterPackaging_CAR": {
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "imoPackagingCode": {
            "pattern": "^[A-Z0-9]{1,5}$",
            "type": "string",
            "description": "The code of the packaging as per IMO.\n\n**Condition:** only applicable to dangerous goods if specified in the IMO IMDG code amendment version 41-22. If not available, the package code as per UN recommendation 21 should be used.\n",
            "example": "1A2"
          },
          "dangerousGoods": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Dangerous Goods`\n",
            "items": {
              "$ref": "#/components/schemas/DangerousGoods_CAR"
            }
          }
        },
        "description": "Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport. It is an array of the attributes below.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/OuterPackaging_SHI"
          }
        ]
      },
      "DangerousGoods_CAR": {
        "required": [
          "imoClass",
          "properShippingName"
        ],
        "type": "object",
        "description": "Specification for `Dangerous Goods`. It is mandatory to either provide the `unNumber` or the `naNumber`. Dangerous Goods is based on **IMDG Amendment Version 41-22**.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/DangerousGoods"
          }
        ]
      },
      "DangerousGoods": {
        "type": "object",
        "properties": {
          "codedVariantList": {
            "$ref": "#/components/schemas/codedVariantList"
          },
          "properShippingName": {
            "$ref": "#/components/schemas/properShippingName"
          },
          "technicalName": {
            "$ref": "#/components/schemas/technicalName"
          },
          "imoClass": {
            "$ref": "#/components/schemas/imoClass"
          },
          "subsidiaryRisk1": {
            "$ref": "#/components/schemas/subsidiaryRisk"
          },
          "subsidiaryRisk2": {
            "$ref": "#/components/schemas/subsidiaryRisk"
          },
          "isMarinePollutant": {
            "$ref": "#/components/schemas/isMarinePollutant"
          },
          "packingGroup": {
            "$ref": "#/components/schemas/packingGroup"
          },
          "isLimitedQuantity": {
            "$ref": "#/components/schemas/isLimitedQuantity"
          },
          "isExceptedQuantity": {
            "$ref": "#/components/schemas/isExceptedQuantity"
          },
          "isSalvagePackings": {
            "$ref": "#/components/schemas/isSalvagePackings"
          },
          "isEmptyUncleanedResidue": {
            "$ref": "#/components/schemas/isEmptyUncleanedResidue"
          },
          "isWaste": {
            "$ref": "#/components/schemas/isWaste"
          },
          "isHot": {
            "$ref": "#/components/schemas/isHot"
          },
          "isCompetentAuthorityApprovalProvided": {
            "$ref": "#/components/schemas/isCompetentAuthorityApprovalProvided"
          },
          "competentAuthorityApproval": {
            "$ref": "#/components/schemas/competentAuthorityApproval"
          },
          "segregationGroups": {
            "type": "array",
            "description": "List of the segregation groups applicable to specific hazardous goods according to the IMO IMDG Code.\n\n**Condition:** only applicable to specific hazardous goods.\n",
            "items": {
              "maxLength": 2,
              "type": "string",
              "description": "Grouping of Dangerous Goods having certain similar chemical properties. Possible values are:\n\n- `1` (Acids)\n- `2` (Ammonium Compounds)\n- `3` (Bromates)\n- `4` (Chlorates)\n- `5` (Chlorites)\n- `6` (Cyanides)\n- `7` (Heavy metals and their salts)\n- `8` (Hypochlorites)\n- `9` (Lead and its compounds)\n- `10` (Liquid halogenated hydrocarbons)\n- `11` (Mercury and mercury compounds)\n- `12` (Nitrites and their mixtures)\n- `13` (Perchlorates)\n- `14` (Permanganates)\n- `15` (Powdered metals)\n- `16` (Peroxides),\n- `17` (Azides)\n- `18` (Alkalis)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/segregationgroups.csv)\n",
              "example": "12"
            }
          },
          "innerPackagings": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Inner Packings` contained inside this `outer packaging/overpack`.\n",
            "items": {
              "$ref": "#/components/schemas/InnerPackaging"
            }
          },
          "emergencyContactDetails": {
            "$ref": "#/components/schemas/EmergencyContactDetails"
          },
          "EMSNumber": {
            "$ref": "#/components/schemas/EMSNumber"
          },
          "endOfHoldingTime": {
            "$ref": "#/components/schemas/endOfHoldingTime"
          },
          "fumigationDateTime": {
            "$ref": "#/components/schemas/fumigationDateTime"
          },
          "isReportableQuantity": {
            "$ref": "#/components/schemas/isReportableQuantity"
          },
          "inhalationZone": {
            "$ref": "#/components/schemas/inhalationZone"
          },
          "grossWeight": {
            "$ref": "#/components/schemas/DangerousGoods_grossWeight"
          },
          "netWeight": {
            "$ref": "#/components/schemas/DangerousGoods_netWeight"
          },
          "netExplosiveContent": {
            "$ref": "#/components/schemas/DangerousGoods_netExplosiveContent"
          },
          "volume": {
            "$ref": "#/components/schemas/DangerousGoods_volume"
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          }
        },
        "oneOf": [
          {
            "title": "UN Number",
            "required": [
              "unNumber"
            ],
            "type": "object",
            "properties": {
              "unNumber": {
                "$ref": "#/components/schemas/unNumber"
              }
            }
          },
          {
            "title": "NA Number",
            "required": [
              "naNumber"
            ],
            "type": "object",
            "properties": {
              "naNumber": {
                "$ref": "#/components/schemas/naNumber"
              }
            }
          }
        ]
      },
      "codedVariantList": {
        "pattern": "^[0-3][0-9A-Z]{3}$",
        "type": "string",
        "description": "Four-character code supplied by Exis Technologies that assists to remove ambiguities when identifying a variant within a single UN number or NA number that may occur when two companies exchange DG information.\n\nCharacter | Valid Characters | Description\n:--------:|------------------|------------\n1| 0, 1, 2, 3|The packing group. Code 0 indicates there is no packing group\n2|0 to 9 and A to Z|A sequence letter for the PSN, or 0 if there were no alternative PSNs\n3 and 4|0 to 9 and A to Z|Two sequence letters for other information, for the cases where the variant is required because of different in subrisks, packing instruction etc.\n",
        "example": "2200"
      },
      "properShippingName": {
        "maxLength": 250,
        "type": "string",
        "description": "The proper shipping name for goods under IMDG Code, or the product name for goods under IBC Code and IGC Code, or the bulk cargo shipping name for goods under IMSBC Code, or the name of oil for goods under Annex I to the MARPOL Convention.\n",
        "example": "Chromium Trioxide, anhydrous"
      },
      "technicalName": {
        "maxLength": 250,
        "type": "string",
        "description": "The recognized chemical or biological name or other name currently used for the referenced dangerous goods as described in chapter 3.1.2.8 of the IMDG Code.\n"
      },
      "imoClass": {
        "maxLength": 4,
        "type": "string",
        "description": "The hazard class code of the referenced dangerous goods according to the specified regulation. Examples of possible values are:\n      \n      - `1.1A` (Substances and articles which have a mass explosion hazard)\n      - `1.6N` (Extremely insensitive articles which do not have a mass explosion hazard)\n      - `2.1` (Flammable gases)\n      - `8` (Corrosive substances)\n\nThe value must comply with one of the values in the [DG IMO Class value table](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/imoclasses.csv)\n",
        "example": "1.4S"
      },
      "subsidiaryRisk": {
        "pattern": "^[0-9](\\.[0-9])?$",
        "type": "string",
        "description": "Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.\n",
        "example": "1.2"
      },
      "isMarinePollutant": {
        "type": "boolean",
        "description": "Indicates if the goods belong to the classification of Marine Pollutant.\n",
        "example": false
      },
      "packingGroup": {
        "maximum": 3,
        "minimum": 1,
        "type": "integer",
        "description": "The packing group according to the UN Recommendations on the Transport of Dangerous Goods and IMO IMDG Code.\n",
        "format": "int32",
        "example": 3
      },
      "isLimitedQuantity": {
        "type": "boolean",
        "description": "Indicates if the dangerous goods can be transported as limited quantity in accordance with Chapter 3.4 of the IMO IMDG Code.\n",
        "example": false
      },
      "isExceptedQuantity": {
        "type": "boolean",
        "description": "Indicates if the dangerous goods can be transported as excepted quantity in accordance with Chapter 3.5 of the IMO IMDG Code.\n",
        "example": false
      },
      "isSalvagePackings": {
        "type": "boolean",
        "description": "Indicates if the cargo has special packaging for the transport, recovery or disposal of damaged, defective, leaking or nonconforming hazardous materials packages, or hazardous materials that have spilled or leaked.\n",
        "example": false
      },
      "isEmptyUncleanedResidue": {
        "type": "boolean",
        "description": "Indicates if the cargo is residue.\n",
        "example": false
      },
      "isWaste": {
        "type": "boolean",
        "description": "Indicates if waste is being shipped\n",
        "example": false
      },
      "isHot": {
        "type": "boolean",
        "description": "Indicates if high temperature cargo is shipped.\n",
        "example": false
      },
      "isCompetentAuthorityApprovalProvided": {
        "type": "boolean",
        "description": "Indicates if the cargo require approval from authorities\n",
        "example": false
      },
      "competentAuthorityApproval": {
        "maxLength": 70,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "Name and reference number of the competent authority providing the approval.\n",
        "example": "{Name and reference...}"
      },
      "InnerPackaging": {
        "required": [
          "description",
          "material",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Count of `Inner Packagings` of the referenced `Dangerous Goods`.\n",
            "format": "int32",
            "example": 20
          },
          "material": {
            "maxLength": 100,
            "type": "string",
            "description": "The `material` used for the `Inner Packaging` of the referenced `Dangerous Goods`.\n",
            "example": "Plastic"
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "description": "Description of the packaging.\n",
            "example": "Wowen plastic water resistant Bag"
          }
        },
        "description": "Object for inner packaging specification\n"
      },
      "EmergencyContactDetails": {
        "required": [
          "contact",
          "phone"
        ],
        "type": "object",
        "properties": {
          "contact": {
            "maxLength": 255,
            "type": "string",
            "description": "Name of the Contact person during an emergency.\n",
            "example": "Henrik Larsen"
          },
          "provider": {
            "maxLength": 255,
            "type": "string",
            "description": "Name of the third party vendor providing emergency support\n",
            "example": "GlobeTeam"
          },
          "phone": {
            "$ref": "#/components/schemas/contactPhone"
          },
          "referenceNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "Contract reference for the emergency support provided by an external third party vendor.\n",
            "example": "12234"
          }
        },
        "description": "24 hr emergency contact details\n"
      },
      "EMSNumber": {
        "maxLength": 7,
        "type": "string",
        "description": "The emergency schedule identified in the IMO EmS Guide – Emergency Response Procedures for Ships Carrying Dangerous Goods. Comprises 2 values; 1 for spillage and 1 for fire. Possible values spillage: S-A to S-Z. Possible values fire: F-A to F-Z.\n",
        "example": "F-A S-Q"
      },
      "endOfHoldingTime": {
        "type": "string",
        "description": "Date by when the refrigerated liquid needs to be delivered.\n",
        "format": "date",
        "example": "2021-09-03"
      },
      "fumigationDateTime": {
        "type": "string",
        "description": "Date & time when the container was fumigated\n",
        "format": "date-time",
        "example": "2021-09-03T09:03:00-02:00"
      },
      "isReportableQuantity": {
        "type": "boolean",
        "description": "Indicates if a container of hazardous material is at the reportable quantity level. If `TRUE`, a report to the relevant authority must be made in case of spill.\n",
        "example": false
      },
      "inhalationZone": {
        "maxLength": 1,
        "minLength": 1,
        "type": "string",
        "description": "The zone classification of the toxicity of the inhalant. Possible values are:\n- `A` (Hazard Zone A) can be asigned to specific gases and liquids\n- `B` (Hazard Zone B) can be asigned to specific gases and liquids\n- `C` (Hazard Zone C) can **only** be asigned to specific gases\n- `D` (Hazard Zone D) can **only** be asigned to specific gases\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/inhalationzones.csv)\n",
        "example": "A"
      },
      "dgGrossWeight": {
        "minimum": 0,
        "exclusiveMinimum": true,
        "type": "number",
        "description": "The grand total weight of the DG cargo and weight per UNNumber/NANumber including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.\n",
        "format": "float",
        "example": 12000
      },
      "netWeight": {
        "type": "number",
        "description": "Total weight of the goods carried, excluding packaging.\n",
        "format": "float",
        "example": 2.4
      },
      "netWeightUnit": {
        "type": "string",
        "description": "Unit of measure used to describe the `netWeight`. Possible values are\n- KGM (Kilograms)\n- LBR (Pounds)\n",
        "example": "KGM",
        "enum": [
          "KGM",
          "LBR"
        ]
      },
      "netExplosiveContent": {
        "type": "number",
        "description": "The total weight of the explosive substances, without the packaging’s, casings, etc.\n",
        "format": "float",
        "example": 2.4
      },
      "netExplosiveContentUnit": {
        "type": "string",
        "description": "Unit of measure used to describe the `netExplosiveWeight`. Possible values are\n- KGM (Kilograms)\n- GRM (Grams)\n",
        "example": "KGM",
        "enum": [
          "KGM",
          "GRM"
        ]
      },
      "dgVolume": {
        "type": "number",
        "description": "The volume of the referenced dangerous goods.\n",
        "format": "float",
        "example": 2.4
      },
      "volumeUnitDG": {
        "type": "string",
        "description": "The unit of measure which can be expressed in either imperial or metric terms\n- FTQ (Cubic foot)\n- MTQ (Cubic meter)\n- LTR (Litre)\n",
        "example": "MTQ",
        "enum": [
          "MTQ",
          "FTQ",
          "LTR"
        ]
      },
      "Limits": {
        "required": [
          "temperatureUnit"
        ],
        "type": "object",
        "properties": {
          "temperatureUnit": {
            "type": "string",
            "description": "The unit for **all attributes in the limits structure** in Celsius or Fahrenheit\n\n- CEL (Celsius)\n- FAH (Fahrenheit)\n",
            "example": "CEL",
            "enum": [
              "CEL",
              "FAH"
            ]
          },
          "flashPoint": {
            "$ref": "#/components/schemas/flashPoint"
          },
          "transportControlTemperature": {
            "$ref": "#/components/schemas/transportControlTemperature"
          },
          "transportEmergencyTemperature": {
            "$ref": "#/components/schemas/transportEmergencyTemperature"
          },
          "SADT": {
            "$ref": "#/components/schemas/sadt"
          },
          "SAPT": {
            "$ref": "#/components/schemas/sapt"
          }
        },
        "description": "Limits for the `Dangerous Goods`. The same `Temperature Unit` needs to apply to all attributes in this structure.\n"
      },
      "flashPoint": {
        "type": "number",
        "description": "The flashpoint of the referenced dangerous goods according to the IMO IMDG Code expressed in degrees Celsius or Fahrenheit.\n",
        "format": "float",
        "example": 42
      },
      "transportControlTemperature": {
        "type": "number",
        "description": "Maximum temperature at which certain substance (such as organic peroxides and self-reactive and related substances) can be safely transported for a prolonged period.\n",
        "format": "float",
        "example": 24.1
      },
      "transportEmergencyTemperature": {
        "type": "number",
        "description": "Temperature at which emergency procedures shall be implemented\n",
        "format": "float",
        "example": 74.1
      },
      "sadt": {
        "type": "number",
        "description": "Lowest temperature in which self-accelerating decomposition may occur in a substance\n",
        "format": "float",
        "example": 54.1
      },
      "sapt": {
        "type": "number",
        "description": "Lowest temperature in which self-accelerating polymerization may occur in a substance\n",
        "format": "float",
        "example": 70
      },
      "UtilizedTransportEquipmentCarrier": {
        "required": [
          "equipment",
          "isShipperOwned",
          "seals"
        ],
        "type": "object",
        "properties": {
          "equipment": {
            "$ref": "#/components/schemas/Equipment"
          },
          "isShipperOwned": {
            "$ref": "#/components/schemas/isShipperOwned"
          },
          "isNonOperatingReefer": {
            "$ref": "#/components/schemas/isNonOperatingReefer"
          },
          "activeReeferSettings": {
            "$ref": "#/components/schemas/ActiveReeferSettings"
          },
          "seals": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Seals`\n",
            "items": {
              "$ref": "#/components/schemas/Seal"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "Specifies the container (`equipment`), the total `weight`, total `volume`, `numberOfPacakges`, possible `ActiveReeferSettings`, `seals` and `references`\n"
      },
      "isNonOperatingReefer": {
        "type": "boolean",
        "description": "If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.\n\n**Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.\n",
        "example": false
      },
      "ActiveReeferSettings": {
        "type": "object",
        "properties": {
          "temperatureSetpoint": {
            "$ref": "#/components/schemas/temperatureSetpoint"
          },
          "temperatureUnit": {
            "$ref": "#/components/schemas/temperatureUnit"
          },
          "o2Setpoint": {
            "$ref": "#/components/schemas/o2Setpoint"
          },
          "co2Setpoint": {
            "$ref": "#/components/schemas/co2Setpoint"
          },
          "humiditySetpoint": {
            "$ref": "#/components/schemas/humiditySetpoint"
          },
          "airExchangeSetpoint": {
            "$ref": "#/components/schemas/airExchangeSetpoint"
          },
          "airExchangeUnit": {
            "$ref": "#/components/schemas/airExchangeUnit"
          },
          "isVentilationOpen": {
            "$ref": "#/components/schemas/isVentilationOpen"
          },
          "isDrainholesOpen": {
            "$ref": "#/components/schemas/isDrainholesOpen"
          },
          "isBulbMode": {
            "$ref": "#/components/schemas/isBulbMode"
          },
          "isColdTreatmentRequired": {
            "$ref": "#/components/schemas/isColdTreatmentRequired"
          },
          "isControlledAtmosphereRequired": {
            "$ref": "#/components/schemas/isControlledAtmosphereRequired"
          }
        },
        "description": "The specifications for a Reefer equipment.\n\n**Condition:** Only applicable when`isNonOperatingReefer` is set to `false`\n"
      },
      "temperatureSetpoint": {
        "type": "number",
        "description": "Target value of the temperature for the Reefer based on the cargo requirement.\n",
        "format": "float",
        "example": -15
      },
      "temperatureUnit": {
        "type": "string",
        "description": "The unit for temperature in Celsius or Fahrenheit\n\n- CEL (Celsius)\n- FAH (Fahrenheit)\n",
        "example": "CEL",
        "enum": [
          "CEL",
          "FAH"
        ]
      },
      "o2Setpoint": {
        "maximum": 100,
        "minimum": 0,
        "type": "number",
        "description": "The percentage of the controlled atmosphere O<sub>2</sub> target value\n",
        "format": "float",
        "example": 75.3
      },
      "co2Setpoint": {
        "maximum": 100,
        "minimum": 0,
        "type": "number",
        "description": "The percentage of the controlled atmosphere CO<sub>2</sub> target value\n",
        "format": "float",
        "example": 25
      },
      "humiditySetpoint": {
        "maximum": 100,
        "minimum": 0,
        "type": "number",
        "description": "The percentage of the controlled atmosphere humidity target value\n",
        "format": "float",
        "example": 95.6
      },
      "airExchangeSetpoint": {
        "minimum": 0,
        "type": "number",
        "description": "Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container\n",
        "format": "float",
        "example": 15.4
      },
      "airExchangeUnit": {
        "type": "string",
        "description": "The unit for `airExchange` in metrics- or imperial- units per hour\n\n- MQH (Cubic metre per hour)\n- FQH (Cubic foot per hour)\n\n**NB:** This is a conditional field. If `airExchange` is specified then this field is required\n",
        "example": "MQH",
        "enum": [
          "MQH",
          "FQH"
        ]
      },
      "isVentilationOpen": {
        "type": "boolean",
        "description": "If `true` the ventilation orifice is `Open` - if `false` the ventilation orifice is `closed`\n",
        "example": true
      },
      "isDrainholesOpen": {
        "type": "boolean",
        "description": "Is drainholes open on the container\n",
        "example": true
      },
      "isBulbMode": {
        "type": "boolean",
        "description": "Is special container setting for handling flower bulbs active\n",
        "example": true
      },
      "isColdTreatmentRequired": {
        "type": "boolean",
        "description": "Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD\n",
        "example": true
      },
      "isControlledAtmosphereRequired": {
        "type": "boolean",
        "description": "Indicator of whether cargo requires Controlled Atmosphere.\n",
        "example": true
      },
      "transportDocumentReference": {
        "maxLength": 20,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
        "example": "HHL71800000"
      },
      "DraftTransportDocumentResponse": {
        "required": [
          "documentStatus"
        ],
        "type": "object",
        "properties": {
          "documentStatus": {
            "$ref": "#/components/schemas/eblStatus"
          },
          "reason": {
            "maxLength": 250,
            "type": "string",
            "description": "This field can be used to explain why an update to a `Draft Transport Document` has been declined.\n",
            "example": "Declined due to local strike..."
          }
        },
        "description": "The `Draft Transport Document` as provided by the Shipper.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/DraftTransportDocumentUpdate"
          }
        ]
      },
      "DraftTransportDocumentUpdate": {
        "required": [
          "consignmentItems",
          "documentParties",
          "freightPaymentTermCode",
          "invoicePayableAt",
          "isElectronic",
          "isShippedOnBoardType",
          "isToOrder",
          "partyContactDetails",
          "shippingInstructionsReference",
          "transportDocumentReference",
          "transportDocumentTypeCode",
          "utilizedTransportEquipments"
        ],
        "type": "object",
        "properties": {
          "transportDocumentReference": {
            "$ref": "#/components/schemas/transportDocumentReference"
          },
          "shippingInstructionsReference": {
            "$ref": "#/components/schemas/shippingInstructionsReference"
          },
          "transportDocumentTypeCode": {
            "$ref": "#/components/schemas/transportDocumentTypeCode"
          },
          "isShippedOnBoardType": {
            "$ref": "#/components/schemas/isShippedOnBoardType"
          },
          "freightPaymentTermCode": {
            "$ref": "#/components/schemas/freightPaymentTermCode"
          },
          "originChargesPaymentTermCode": {
            "$ref": "#/components/schemas/originChargesPaymentTermCode"
          },
          "destinationChargesPaymentTermCode": {
            "$ref": "#/components/schemas/destinationChargesPaymentTermCode"
          },
          "isElectronic": {
            "$ref": "#/components/schemas/isElectronic"
          },
          "isToOrder": {
            "$ref": "#/components/schemas/isToOrder"
          },
          "numberOfCopiesWithCharges": {
            "$ref": "#/components/schemas/numberOfCopiesWithCharges"
          },
          "numberOfCopiesWithoutCharges": {
            "$ref": "#/components/schemas/numberOfCopiesWithoutCharges"
          },
          "numberOfOriginalsWithCharges": {
            "$ref": "#/components/schemas/numberOfOriginalsWithCharges"
          },
          "numberOfOriginalsWithoutCharges": {
            "$ref": "#/components/schemas/numberOfOriginalsWithoutCharges"
          },
          "displayedNameForPlaceOfReceipt": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPortOfLoad": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPortOfDischarge": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPlaceOfDelivery": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "receivedForShipmentDate": {
            "$ref": "#/components/schemas/receivedForShipmentDate"
          },
          "serviceContractReference": {
            "$ref": "#/components/schemas/serviceContractReference"
          },
          "contractQuotationReference": {
            "$ref": "#/components/schemas/contractQuotationReference"
          },
          "declaredValue": {
            "$ref": "#/components/schemas/declaredValue"
          },
          "declaredValueCurrency": {
            "$ref": "#/components/schemas/declaredValueCurrency"
          },
          "placeOfIssue": {
            "type": "object",
            "description": "General purpose object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or an `Address`.\n",
            "example": {
              "locationName": "DCSA Headquarters",
              "locationType": "UNLO",
              "UNLocationCode": "NLAMS"
            },
            "discriminator": {
              "propertyName": "locationType",
              "mapping": {
                "ADDR": "#/components/schemas/addressLocation",
                "UNLO": "#/components/schemas/unLocationLocation"
              }
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/addressLocation"
              },
              {
                "$ref": "#/components/schemas/unLocationLocation"
              }
            ]
          },
          "invoicePayableAt": {
            "type": "object",
            "description": "General purpose object to capture `Invoice Payable At` location specified as: location where payment by the customer will take place. Usually refers to Basic Ocean Freight alone.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or an `Address`.\n",
            "example": {
              "locationName": "Eiffel Tower",
              "locationType": "UNLO",
              "UNLocationCode": "FRPAR"
            },
            "discriminator": {
              "propertyName": "locationType",
              "mapping": {
                "ADDR": "#/components/schemas/addressLocation",
                "UNLO": "#/components/schemas/unLocationLocation"
              }
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/addressLocation"
              },
              {
                "$ref": "#/components/schemas/unLocationLocation"
              }
            ]
          },
          "partyContactDetails": {
            "type": "array",
            "description": "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "documentParties": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Document Parties`\n",
            "items": {
              "$ref": "#/components/schemas/DocumentParty"
            }
          },
          "consignmentItems": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `ConsignmentItems`\n",
            "items": {
              "$ref": "#/components/schemas/ConsignmentItem_SHI"
            }
          },
          "utilizedTransportEquipments": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
            "items": {
              "$ref": "#/components/schemas/UtilizedTransportEquipmentShipper"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          },
          "advanceManifestFilings": {
            "type": "array",
            "description": "A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing\n",
            "items": {
              "$ref": "#/components/schemas/AdvanceManifestFilingEBL"
            }
          },
          "requestedCarrierCertificates": {
            "type": "array",
            "description": "Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack\n",
            "items": {
              "$ref": "#/components/schemas/RequestedCarrierCertificate"
            }
          },
          "requestedCarrierClauses": {
            "type": "array",
            "description": "Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`\n",
            "items": {
              "$ref": "#/components/schemas/RequestedCarrierClause"
            }
          }
        },
        "description": "The `Draft Transport Document` to update.\n"
      },
      "receivedForShipmentDate": {
        "type": "string",
        "description": "Date when the last container linked to the transport document is physically in the terminal (customers cleared against the intended vessel).\n\nWhen provided on a transport document, the transportDocument is a `Received For Shipment` B/L.\n\nExactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.\n",
        "format": "date",
        "example": "2020-12-12"
      },
      "serviceContractReference": {
        "maxLength": 30,
        "type": "string",
        "description": "Reference number for agreement between shipper and carrier through which the shipper commits to provide a certain minimum quantity of cargo over a fixed period, and the carrier commits to a certain rate or rate schedule.",
        "example": "HHL51800000"
      },
      "contractQuotationReference": {
        "maxLength": 35,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference. Mandatory if service contract (owner) is not provided.\n",
        "example": "HHL1401"
      },
      "declaredValue": {
        "minimum": 0,
        "type": "number",
        "description": "The value of the cargo that the shipper declares to avoid the carrier's limitation of liability and \"Ad Valorem\" freight, i.e. freight which is calculated based on the value of the goods declared by the shipper.\n",
        "format": "float",
        "example": 1231.1
      },
      "declaredValueCurrency": {
        "maxLength": 3,
        "pattern": "^[A-Z]{3}$",
        "type": "string",
        "description": "The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n",
        "example": "DKK"
      },
      "DraftTransportDocumentRefStatus": {
        "required": [
          "documentStatus",
          "transportDocumentReference"
        ],
        "type": "object",
        "properties": {
          "transportDocumentReference": {
            "$ref": "#/components/schemas/transportDocumentReference"
          },
          "documentStatus": {
            "$ref": "#/components/schemas/eblStatus"
          },
          "reason": {
            "maxLength": 250,
            "type": "string",
            "description": "This field can be used to explain why a `Draft Transport Document` has been declined.\n",
            "example": "Declined due to local strike..."
          }
        },
        "description": "The `transportDocumentReference` along with the `documentStatus` for `Draft Transport Document` is returned.\n"
      },
      "DraftTransportDocument": {
        "required": [
          "cargoMovementTypeAtDestination",
          "cargoMovementTypeAtOrigin",
          "carrierCode",
          "carrierCodeListProvider",
          "consignmentItems",
          "deliveryTypeAtDestination",
          "documentParties",
          "documentStatus",
          "freightPaymentTermCode",
          "invoicePayableAt",
          "isElectronic",
          "isShippedOnBoardType",
          "isToOrder",
          "issuingParty",
          "partyContactDetails",
          "receiptTypeAtOrigin",
          "shippingInstructionsReference",
          "termsAndConditions",
          "transportDocumentReference",
          "transportDocumentTypeCode",
          "utilizedTransportEquipments"
        ],
        "type": "object",
        "properties": {
          "transportDocumentReference": {
            "$ref": "#/components/schemas/transportDocumentReference"
          },
          "shippingInstructionsReference": {
            "$ref": "#/components/schemas/shippingInstructionsReference"
          },
          "documentStatus": {
            "$ref": "#/components/schemas/eblStatus"
          },
          "transportDocumentTypeCode": {
            "$ref": "#/components/schemas/transportDocumentTypeCode"
          },
          "isShippedOnBoardType": {
            "$ref": "#/components/schemas/isShippedOnBoardType"
          },
          "freightPaymentTermCode": {
            "$ref": "#/components/schemas/freightPaymentTermCode"
          },
          "originChargesPaymentTermCode": {
            "$ref": "#/components/schemas/originChargesPaymentTermCode"
          },
          "destinationChargesPaymentTermCode": {
            "$ref": "#/components/schemas/destinationChargesPaymentTermCode"
          },
          "isElectronic": {
            "$ref": "#/components/schemas/isElectronic"
          },
          "isToOrder": {
            "$ref": "#/components/schemas/isToOrder"
          },
          "numberOfCopiesWithCharges": {
            "$ref": "#/components/schemas/numberOfCopiesWithCharges"
          },
          "numberOfCopiesWithoutCharges": {
            "$ref": "#/components/schemas/numberOfCopiesWithoutCharges"
          },
          "numberOfOriginalsWithCharges": {
            "$ref": "#/components/schemas/numberOfOriginalsWithCharges"
          },
          "numberOfOriginalsWithoutCharges": {
            "$ref": "#/components/schemas/numberOfOriginalsWithoutCharges"
          },
          "displayedNameForPlaceOfReceipt": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPortOfLoad": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPortOfDischarge": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPlaceOfDelivery": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "shippedOnBoardDate": {
            "$ref": "#/components/schemas/shippedOnBoardDate"
          },
          "termsAndConditions": {
            "$ref": "#/components/schemas/termsAndConditions"
          },
          "receiptTypeAtOrigin": {
            "$ref": "#/components/schemas/receiptTypeAtOrigin"
          },
          "deliveryTypeAtDestination": {
            "$ref": "#/components/schemas/deliveryTypeAtDestination"
          },
          "cargoMovementTypeAtOrigin": {
            "$ref": "#/components/schemas/cargoMovementTypeAtOrigin"
          },
          "cargoMovementTypeAtDestination": {
            "$ref": "#/components/schemas/cargoMovementTypeAtDestination"
          },
          "issueDate": {
            "$ref": "#/components/schemas/issueDate"
          },
          "receivedForShipmentDate": {
            "$ref": "#/components/schemas/receivedForShipmentDate"
          },
          "serviceContractReference": {
            "$ref": "#/components/schemas/serviceContractReference"
          },
          "contractQuotationReference": {
            "$ref": "#/components/schemas/contractQuotationReference"
          },
          "declaredValue": {
            "$ref": "#/components/schemas/declaredValue"
          },
          "declaredValueCurrency": {
            "$ref": "#/components/schemas/declaredValueCurrency"
          },
          "carrierCode": {
            "$ref": "#/components/schemas/carrierCode"
          },
          "carrierCodeListProvider": {
            "$ref": "#/components/schemas/carrierCodeListProvider"
          },
          "issuingParty": {
            "$ref": "#/components/schemas/Party"
          },
          "carrierClauses": {
            "type": "array",
            "description": "Additional clauses for a specific shipment added by the carrier to the Bill of Lading, subject to local rules / guidelines or certain mandatory information required to be shared with the customer.\n",
            "items": {
              "$ref": "#/components/schemas/clauseContent"
            }
          },
          "numberOfRiderPages": {
            "$ref": "#/components/schemas/numberOfRiderPages"
          },
          "transports": {
            "$ref": "#/components/schemas/Transports"
          },
          "charges": {
            "type": "array",
            "description": "A list of `Charges`\n",
            "items": {
              "$ref": "#/components/schemas/Charge"
            }
          },
          "placeOfIssue": {
            "type": "object",
            "description": "General purpose object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or an `Address`.\n",
            "example": {
              "locationName": "DCSA Headquarters",
              "locationType": "UNLO",
              "UNLocationCode": "NLAMS"
            },
            "discriminator": {
              "propertyName": "locationType",
              "mapping": {
                "ADDR": "#/components/schemas/addressLocation",
                "UNLO": "#/components/schemas/unLocationLocation"
              }
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/addressLocation"
              },
              {
                "$ref": "#/components/schemas/unLocationLocation"
              }
            ]
          },
          "invoicePayableAt": {
            "type": "object",
            "description": "General purpose object to capture `Invoice Payable At` location specified as: location where payment by the customer will take place. Usually refers to Basic Ocean Freight alone.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or an `Address`.\n",
            "example": {
              "locationName": "Eiffel Tower",
              "locationType": "UNLO",
              "UNLocationCode": "FRPAR"
            },
            "discriminator": {
              "propertyName": "locationType",
              "mapping": {
                "ADDR": "#/components/schemas/addressLocation",
                "UNLO": "#/components/schemas/unLocationLocation"
              }
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/addressLocation"
              },
              {
                "$ref": "#/components/schemas/unLocationLocation"
              }
            ]
          },
          "partyContactDetails": {
            "type": "array",
            "description": "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "documentParties": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Document Parties`\n",
            "items": {
              "$ref": "#/components/schemas/DocumentParty"
            }
          },
          "consignmentItems": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `ConsignmentItems`\n",
            "items": {
              "$ref": "#/components/schemas/ConsignmentItem_CAR"
            }
          },
          "utilizedTransportEquipments": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
            "items": {
              "$ref": "#/components/schemas/UtilizedTransportEquipmentCarrier"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "The `Draft Transport Document` to be approved by the Shipper.\n"
      },
      "shippedOnBoardDate": {
        "type": "string",
        "description": "Date when the last container that is linked to the transport document is physically loaded onboard the vessel indicated on the transport document.\n\nWhen provided on a transport document, the transportDocument is a `Shipped On Board` B/L.\n\nExactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.\n",
        "format": "date",
        "example": "2020-12-12"
      },
      "termsAndConditions": {
        "maxLength": 20000,
        "type": "string",
        "description": "Carrier terms and conditions of transport.\n"
      },
      "receiptTypeAtOrigin": {
        "maxLength": 3,
        "type": "string",
        "description": "Indicates the type of service offered at Origin. Options are defined in the Receipt/Delivery entity.\n- CY (Container yard (incl. rail ramp))\n- SD (Store Door)\n- CFS (Container Freight Station)\n",
        "example": "CY",
        "enum": [
          "CY",
          "SD",
          "CFS"
        ]
      },
      "deliveryTypeAtDestination": {
        "maxLength": 3,
        "type": "string",
        "description": "Indicates the type of service offered at Destination. Options are defined in the Receipt/Delivery entity.\n- CY (Container yard (incl. rail ramp))\n- SD (Store Door)\n- CFS (Container Freight Station)\n",
        "example": "CY",
        "enum": [
          "CY",
          "SD",
          "CFS"
        ]
      },
      "cargoMovementTypeAtOrigin": {
        "maxLength": 3,
        "type": "string",
        "description": "Refers to the shipment term at the loading of the cargo into the container. Options are defined in the Cargo Movement Type entity.\n- FCL (Full Container Load)\n- LCL (Less than Container Load)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/cargoMovementType.csv)\n",
        "example": "FCL"
      },
      "cargoMovementTypeAtDestination": {
        "maxLength": 3,
        "type": "string",
        "description": "Refers to the shipment term at the unloading of the cargo out of the container. Options are defined in the Cargo Movement Type entity.\n- FCL (Full Container Load)\n- LCL (Less than Container Load)\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/cargoMovementType.csv)\n",
        "example": "FCL"
      },
      "issueDate": {
        "type": "string",
        "description": "Local date when the transport document has been issued.\n\nCan be omitted on draft transport documents, but must be provided when the document has been issued.\n",
        "format": "date",
        "example": "2020-12-12"
      },
      "carrierCode": {
        "maxLength": 4,
        "pattern": "^\\S+$",
        "type": "string",
        "description": "The code containing the SCAC and/or the SMDG code to specify the issuing carrier.  Details about the issuer can be given in the Document Parties entity using the party function code MS.\n",
        "example": "MMCU"
      },
      "carrierCodeListProvider": {
        "type": "string",
        "description": "The provider used for identifying the issuer Code. Possible values are:\n- SMDG (Ship Message Design Group)\n- NMFTA (National Motor Freight Traffic Association) _includes SPLC (Standard Point Location Code)_\n",
        "example": "NMFTA",
        "enum": [
          "SMDG",
          "NMFTA"
        ]
      },
      "clauseContent": {
        "maxLength": 20000,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The content of the clause.\n",
        "example": "It is not allowed to..."
      },
      "numberOfRiderPages": {
        "minimum": 0,
        "type": "integer",
        "description": "The number of additional pages required to contain the goods description on a transport document. Only applicable for physical transport documents.",
        "format": "int32",
        "example": 2
      },
      "Transports": {
        "required": [
          "carrierExportVoyageNumber",
          "plannedArrivalDate",
          "plannedDepartureDate",
          "portOfDischarge",
          "portOfLoading",
          "vesselName"
        ],
        "type": "object",
        "properties": {
          "plannedArrivalDate": {
            "$ref": "#/components/schemas/plannedArrivalDate"
          },
          "plannedDepartureDate": {
            "$ref": "#/components/schemas/plannedDepartureDate"
          },
          "preCarriageBy": {
            "maxLength": 50,
            "type": "string",
            "description": "Mode of transportation for pre-carriage when transport to the port of loading is organized by the carrier. If this attributes is populated, then a Place of Receipt must also be defined. The currently supported values include:\n- VESSEL\n- RAIL\n- TRUCK\n- BARGE\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/modeoftransportcodes.csv)\n",
            "example": "RAIL"
          },
          "onCarriageBy": {
            "maxLength": 50,
            "type": "string",
            "description": "Mode of transportation for on-carriage when transport from the port of discharge is organized by the carrier. If this attributes is populated, then a Place of Delivery must also be defined. The currently supported values include:\n- VESSEL\n- RAIL\n- TRUCK\n- BARGE\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/modeoftransportcodes.csv)\n",
            "example": "TRUCK"
          },
          "placeOfReceipt": {
            "$ref": "#/components/schemas/PlaceOfReceipt"
          },
          "portOfLoading": {
            "$ref": "#/components/schemas/PortOfLoading"
          },
          "portOfDischarge": {
            "$ref": "#/components/schemas/PortOfDischarge"
          },
          "placeOfDelivery": {
            "$ref": "#/components/schemas/PlaceOfDelivery"
          },
          "onwardInlandRouting": {
            "$ref": "#/components/schemas/OnwardInlandRouting"
          },
          "vesselName": {
            "maxLength": 35,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The name of the first sea going Vessel on board which the cargo is loaded or intended to be loaded\n",
            "example": "King of the Seas"
          },
          "carrierExportVoyageNumber": {
            "$ref": "#/components/schemas/carrierExportVoyageNumber"
          },
          "universalExportVoyageReference": {
            "$ref": "#/components/schemas/universalExportVoyageReference"
          }
        }
      },
      "plannedArrivalDate": {
        "type": "string",
        "description": "The planned date of arrival.\n",
        "format": "date"
      },
      "plannedDepartureDate": {
        "type": "string",
        "description": "The planned date of departure.\n",
        "format": "date"
      },
      "PlaceOfReceipt": {
        "description": "General purpose object to capture `Place of Receipt` location specified as: the location where the cargo is handed over by the shipper, or his agent, to the shipping line. This indicates the point at which the shipping line takes on responsibility for carriage of the container.\n\n**Condition:** Only when pre-carriage is done by the carrier.\n\nThe location can be specified in **one** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n",
        "example": {
          "locationName": "Hamburg",
          "locationType": "UNLO",
          "UNLocationCode": "DEHAM"
        },
        "discriminator": {
          "propertyName": "locationType",
          "mapping": {
            "ADDR": "#/components/schemas/addressLocation",
            "FACI": "#/components/schemas/facilityLocation",
            "UNLO": "#/components/schemas/unLocationLocation"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/addressLocation"
          },
          {
            "$ref": "#/components/schemas/facilityLocation"
          },
          {
            "$ref": "#/components/schemas/unLocationLocation"
          }
        ]
      },
      "facilityLocation": {
        "required": [
          "facilityCode",
          "facilityCodeListProvider",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationName": {
            "$ref": "#/components/schemas/locationName"
          },
          "locationType": {
            "type": "string",
            "description": "Discriminator used to identify this as a `Facility Location` interface\n",
            "example": "FACI"
          },
          "UNLocationCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UNLocationCode"
              },
              {
                "description": "The UN Location code specifying where the place is located.\n\nThis field is **conditionally mandatory** depending on the value of the `facilityCodeListProvider` field.\n"
              }
            ]
          },
          "facilityCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/facilityCode"
              },
              {
                "description": "The code used for identifying the specific facility. This code does not include the UN Location Code.\n\nThe definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:\n\n- for `SMDG` - the codeList used is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx) \n- for `BIC` - the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/)\n"
              }
            ]
          },
          "facilityCodeListProvider": {
            "$ref": "#/components/schemas/facilityCodeListProvider"
          }
        },
        "description": "An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\n"
      },
      "facilityCode": {
        "maxLength": 6,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\n",
        "nullable": false,
        "example": "ADT"
      },
      "facilityCodeListProvider": {
        "type": "string",
        "description": "The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\n- BIC (Requires a UN Location Code)\n- SMDG (Requires a UN Location Code)\n",
        "example": "SMDG",
        "enum": [
          "BIC",
          "SMDG"
        ]
      },
      "PortOfLoading": {
        "description": "General purpose object to capture `Port of Loading` location specified as: the location where the cargo is loaded onto a first sea-going vessel for water transportation.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or `City and Country`.\n",
        "example": {
          "locationName": "Hamburg",
          "locationType": "UNLO",
          "UNLocationCode": "DEHAM"
        },
        "discriminator": {
          "propertyName": "locationType",
          "mapping": {
            "CITY": "#/components/schemas/cityLocation",
            "UNLO": "#/components/schemas/unLocationLocation"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/cityLocation"
          },
          {
            "$ref": "#/components/schemas/unLocationLocation"
          }
        ]
      },
      "cityLocation": {
        "required": [
          "city",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationName": {
            "$ref": "#/components/schemas/locationName"
          },
          "locationType": {
            "type": "string",
            "description": "Discriminator used to identify this as a `City Location` interface\n",
            "example": "CITY"
          },
          "city": {
            "$ref": "#/components/schemas/city"
          }
        },
        "description": "An interface used to express a location using a `City`, `state/region` and `country`\n"
      },
      "city": {
        "required": [
          "city",
          "country"
        ],
        "type": "object",
        "properties": {
          "city": {
            "$ref": "#/components/schemas/cityName"
          },
          "stateRegion": {
            "$ref": "#/components/schemas/stateRegion"
          },
          "country": {
            "$ref": "#/components/schemas/country"
          }
        },
        "description": "An object for storing city, state/region and coutry related information\n"
      },
      "PortOfDischarge": {
        "description": "General purpose object to capture `Port of Discharge` location specified as: the location where the cargo is discharged from the last sea-going vessel.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or `City and Country`.\n",
        "example": {
          "locationName": "Hamburg",
          "locationType": "UNLO",
          "UNLocationCode": "DEHAM"
        },
        "discriminator": {
          "propertyName": "locationType",
          "mapping": {
            "CITY": "#/components/schemas/cityLocation",
            "UNLO": "#/components/schemas/unLocationLocation"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/cityLocation"
          },
          {
            "$ref": "#/components/schemas/unLocationLocation"
          }
        ]
      },
      "PlaceOfDelivery": {
        "description": "General purpose object to capture `Place of Delivery` location specified as: the location where the cargo is handed over to the consignee, or his agent, by the shipping line and where responsibility of the shipping line ceases.\n\n**Condition:** Only when onward transport is done by the carrier\n\nThe location can be specified in **one** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n",
        "example": {
          "locationName": "Hamburg",
          "locationType": "UNLO",
          "UNLocationCode": "DEHAM"
        },
        "discriminator": {
          "propertyName": "locationType",
          "mapping": {
            "ADDR": "#/components/schemas/addressLocation",
            "FACI": "#/components/schemas/facilityLocation",
            "UNLO": "#/components/schemas/unLocationLocation"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/addressLocation"
          },
          {
            "$ref": "#/components/schemas/facilityLocation"
          },
          {
            "$ref": "#/components/schemas/unLocationLocation"
          }
        ]
      },
      "OnwardInlandRouting": {
        "description": "General purpose object to capture `Onward Inland Routing` location specified as the end location of the inland movement that takes place after the container(s) being delivered to the port of discharge/place of delivery for account and risk of merchant (merchant haulage).\n\nThe location can be specified in **one** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n",
        "example": {
          "locationName": "Hamburg",
          "locationType": "UNLO",
          "UNLocationCode": "DEHAM"
        },
        "discriminator": {
          "propertyName": "locationType",
          "mapping": {
            "ADDR": "#/components/schemas/addressLocation",
            "FACI": "#/components/schemas/facilityLocation",
            "UNLO": "#/components/schemas/unLocationLocation"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/addressLocation"
          },
          {
            "$ref": "#/components/schemas/facilityLocation"
          },
          {
            "$ref": "#/components/schemas/unLocationLocation"
          }
        ]
      },
      "carrierExportVoyageNumber": {
        "maxLength": 50,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The identifier of an export voyage. The carrier-specific identifier of the export Voyage.\n",
        "example": "2103S"
      },
      "universalExportVoyageReference": {
        "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
        "type": "string",
        "description": "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWSR]`\n- `2 digits` for the year\n- `2 alphanumeric characters` for the sequence number of the voyage\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).\n",
        "example": "2103N"
      },
      "Charge": {
        "required": [
          "calculationBasis",
          "chargeName",
          "currencyAmount",
          "currencyCode",
          "paymentTermCode",
          "quantity",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "chargeName": {
            "$ref": "#/components/schemas/chargeName"
          },
          "currencyAmount": {
            "$ref": "#/components/schemas/currencyAmount"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/currencyCode"
          },
          "paymentTermCode": {
            "$ref": "#/components/schemas/paymentTermCode"
          },
          "calculationBasis": {
            "$ref": "#/components/schemas/calculationBasis"
          },
          "unitPrice": {
            "$ref": "#/components/schemas/unitPrice"
          },
          "quantity": {
            "$ref": "#/components/schemas/quantity"
          }
        },
        "description": "addresses the monetary value of freight and other service charges for a `Transport Document`.\n"
      },
      "chargeName": {
        "maxLength": 50,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "Free text field describing the charge to apply\n",
        "example": "Documentation fee - Destination"
      },
      "currencyAmount": {
        "minimum": 0,
        "type": "number",
        "description": "The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.\n",
        "format": "float",
        "example": 1012.12
      },
      "currencyCode": {
        "maxLength": 3,
        "pattern": "^[A-Z]{3}$",
        "type": "string",
        "description": "The currency for the charge, using a 3-character code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)).\n",
        "example": "DKK"
      },
      "paymentTermCode": {
        "type": "string",
        "description": "Indicates whether freight & charges are due for payment before the shipment is effected, practically before the transport document is released to shipper (Prepaid) or before the shipment is finalized meaning cargo released to consignee (Collect)\n- PRE (Prepaid)\n- COL (Collect)\n",
        "example": "PRE",
        "enum": [
          "PRE",
          "COL"
        ]
      },
      "calculationBasis": {
        "maxLength": 50,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.",
        "example": "Per day"
      },
      "unitPrice": {
        "minimum": 0,
        "type": "number",
        "description": "The unit price of this charge item in the currency of the charge.\n",
        "format": "float",
        "example": 3456.6
      },
      "quantity": {
        "minimum": 0,
        "type": "number",
        "description": "The amount of unit for this charge item.\n",
        "format": "float",
        "example": 34.4
      },
      "approvedDocumentStatus": {
        "maxLength": 50,
        "type": "string",
        "description": "The status of the ebl. It can only be `APPROVED`\n",
        "example": "APPROVED"
      },
      "TransportDocumentRefStatus": {
        "required": [
          "documentStatus",
          "transportDocumentReference"
        ],
        "type": "object",
        "properties": {
          "transportDocumentReference": {
            "$ref": "#/components/schemas/transportDocumentReference"
          },
          "documentStatus": {
            "$ref": "#/components/schemas/eblStatus"
          }
        },
        "description": "The `transportDocumentReference` along with the `documentStatus` for the `Transport Document` is returned.\n"
      },
      "TransportDocument": {
        "required": [
          "cargoMovementTypeAtDestination",
          "cargoMovementTypeAtOrigin",
          "carrierCode",
          "carrierCodeListProvider",
          "consignmentItems",
          "deliveryTypeAtDestination",
          "documentParties",
          "documentStatus",
          "freightPaymentTermCode",
          "invoicePayableAt",
          "isElectronic",
          "isShippedOnBoardType",
          "isToOrder",
          "issuingParty",
          "partyContactDetails",
          "receiptTypeAtOrigin",
          "termsAndConditions",
          "transportDocumentReference",
          "transportDocumentTypeCode",
          "utilizedTransportEquipments"
        ],
        "type": "object",
        "properties": {
          "transportDocumentReference": {
            "$ref": "#/components/schemas/transportDocumentReference"
          },
          "shippingInstructionsReference": {
            "$ref": "#/components/schemas/shippingInstructionsReference"
          },
          "documentStatus": {
            "$ref": "#/components/schemas/eblStatus"
          },
          "transportDocumentTypeCode": {
            "$ref": "#/components/schemas/transportDocumentTypeCode"
          },
          "isShippedOnBoardType": {
            "$ref": "#/components/schemas/isShippedOnBoardType"
          },
          "freightPaymentTermCode": {
            "$ref": "#/components/schemas/freightPaymentTermCode"
          },
          "originChargesPaymentTermCode": {
            "$ref": "#/components/schemas/originChargesPaymentTermCode"
          },
          "destinationChargesPaymentTermCode": {
            "$ref": "#/components/schemas/destinationChargesPaymentTermCode"
          },
          "isElectronic": {
            "$ref": "#/components/schemas/isElectronic"
          },
          "isToOrder": {
            "$ref": "#/components/schemas/isToOrder"
          },
          "numberOfCopiesWithCharges": {
            "$ref": "#/components/schemas/numberOfCopiesWithCharges"
          },
          "numberOfCopiesWithoutCharges": {
            "$ref": "#/components/schemas/numberOfCopiesWithoutCharges"
          },
          "numberOfOriginalsWithCharges": {
            "$ref": "#/components/schemas/numberOfOriginalsWithCharges"
          },
          "numberOfOriginalsWithoutCharges": {
            "$ref": "#/components/schemas/numberOfOriginalsWithoutCharges"
          },
          "displayedNameForPlaceOfReceipt": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPortOfLoad": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPortOfDischarge": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "displayedNameForPlaceOfDelivery": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "$ref": "#/components/schemas/displayedName"
            }
          },
          "shippedOnBoardDate": {
            "$ref": "#/components/schemas/shippedOnBoardDate"
          },
          "termsAndConditions": {
            "$ref": "#/components/schemas/termsAndConditions"
          },
          "receiptTypeAtOrigin": {
            "$ref": "#/components/schemas/receiptTypeAtOrigin"
          },
          "deliveryTypeAtDestination": {
            "$ref": "#/components/schemas/deliveryTypeAtDestination"
          },
          "cargoMovementTypeAtOrigin": {
            "$ref": "#/components/schemas/cargoMovementTypeAtOrigin"
          },
          "cargoMovementTypeAtDestination": {
            "$ref": "#/components/schemas/cargoMovementTypeAtDestination"
          },
          "issueDate": {
            "$ref": "#/components/schemas/issueDate"
          },
          "receivedForShipmentDate": {
            "$ref": "#/components/schemas/receivedForShipmentDate"
          },
          "serviceContractReference": {
            "$ref": "#/components/schemas/serviceContractReference"
          },
          "contractQuotationReference": {
            "$ref": "#/components/schemas/contractQuotationReference"
          },
          "declaredValue": {
            "$ref": "#/components/schemas/declaredValue"
          },
          "declaredValueCurrency": {
            "$ref": "#/components/schemas/declaredValueCurrency"
          },
          "carrierCode": {
            "$ref": "#/components/schemas/carrierCode"
          },
          "carrierCodeListProvider": {
            "$ref": "#/components/schemas/carrierCodeListProvider"
          },
          "issuingParty": {
            "$ref": "#/components/schemas/Party"
          },
          "carrierClauses": {
            "type": "array",
            "description": "Additional clauses for a specific shipment added by the carrier to the Bill of Lading, subject to local rules / guidelines or certain mandatory information required to be shared with the customer.\n",
            "items": {
              "$ref": "#/components/schemas/clauseContent"
            }
          },
          "numberOfRiderPages": {
            "$ref": "#/components/schemas/numberOfRiderPages"
          },
          "transports": {
            "$ref": "#/components/schemas/Transports"
          },
          "charges": {
            "type": "array",
            "description": "A list of `Charges`\n",
            "items": {
              "$ref": "#/components/schemas/Charge"
            }
          },
          "placeOfIssue": {
            "type": "object",
            "description": "General purpose object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or an `Address`.\n",
            "example": {
              "locationName": "DCSA Headquarters",
              "locationType": "UNLO",
              "UNLocationCode": "NLAMS"
            },
            "discriminator": {
              "propertyName": "locationType",
              "mapping": {
                "ADDR": "#/components/schemas/addressLocation",
                "UNLO": "#/components/schemas/unLocationLocation"
              }
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/addressLocation"
              },
              {
                "$ref": "#/components/schemas/unLocationLocation"
              }
            ]
          },
          "invoicePayableAt": {
            "type": "object",
            "description": "General purpose object to capture `Invoice Payable At` location specified as: location where payment by the customer will take place. Usually refers to Basic Ocean Freight alone.\n\nThe location can be specified in **one** of the following ways: `UN Location Code` or an `Address`.\n",
            "example": {
              "locationName": "Eiffel Tower",
              "locationType": "UNLO",
              "UNLocationCode": "FRPAR"
            },
            "discriminator": {
              "propertyName": "locationType",
              "mapping": {
                "ADDR": "#/components/schemas/addressLocation",
                "UNLO": "#/components/schemas/unLocationLocation"
              }
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/addressLocation"
              },
              {
                "$ref": "#/components/schemas/unLocationLocation"
              }
            ]
          },
          "partyContactDetails": {
            "type": "array",
            "description": "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "documentParties": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Document Parties`\n",
            "items": {
              "$ref": "#/components/schemas/DocumentParty"
            }
          },
          "consignmentItems": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `ConsignmentItems`\n",
            "items": {
              "$ref": "#/components/schemas/ConsignmentItem_CAR"
            }
          },
          "utilizedTransportEquipments": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
            "items": {
              "$ref": "#/components/schemas/UtilizedTransportEquipment_CAR"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "The document that governs the terms of carriage between shipper and carrier for maritime transportation. Two distinct types of transport documents exist:\n- Bill of Lading\n- Sea Waybill. \n"
      },
      "UtilizedTransportEquipment_CAR": {
        "required": [
          "equipment",
          "isShipperOwned",
          "seals"
        ],
        "type": "object",
        "properties": {
          "equipment": {
            "$ref": "#/components/schemas/Equipment"
          },
          "isShipperOwned": {
            "$ref": "#/components/schemas/isShipperOwned"
          },
          "isNonOperatingReefer": {
            "$ref": "#/components/schemas/isNonOperatingReefer"
          },
          "activeReeferSettings": {
            "$ref": "#/components/schemas/ActiveReeferSettings"
          },
          "seals": {
            "minLength": 1,
            "type": "array",
            "description": "A list of `Seals`\n",
            "items": {
              "$ref": "#/components/schemas/Seal"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "Specifies the container (`equipment`), the total `weight`, total `volume`, `numberOfPacakges`, possible `ActiveReeferSettings`, `seals` and `references`\n"
      },
      "carrierBookingReference": {
        "maxLength": 35,
        "pattern": "^\\S+(\\s+\\S+)*$",
        "type": "string",
        "description": "A set of unique characters provided by carrier to identify a booking.",
        "example": "ABC709951"
      },
      "unNumber": {
        "pattern": "^\\d{4}$",
        "type": "string",
        "description": "United Nations Dangerous Goods Identifier (UNDG) assigned by the UN Sub-Committee of Experts on the Transport of Dangerous Goods and shown in the IMO IMDG.\n",
        "example": "1463"
      },
      "naNumber": {
        "pattern": "^\\d{4}$",
        "type": "string",
        "description": "Four-digit number that is assigned to dangerous, hazardous, and harmful substances by the United States Department of Transportation.\n",
        "example": "9037"
      },
      "transportdocumentdrafts_transportDocumentReference_body": {
        "required": [
          "documentStatus"
        ],
        "type": "object",
        "properties": {
          "documentStatus": {
            "$ref": "#/components/schemas/approvedDocumentStatus"
          }
        }
      },
      "ConsignmentItem_SHI_cargoItems": {
        "type": "object",
        "properties": {
          "cargoItems": {
            "minItems": 1,
            "type": "array",
            "description": "A list of all `cargoItems`\n",
            "items": {
              "$ref": "#/components/schemas/CargoItem_SHI"
            }
          }
        }
      },
      "DangerousGoods_grossWeight": {
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/dgGrossWeight"
          },
          "unit": {
            "$ref": "#/components/schemas/weightUnit"
          }
        },
        "description": "Total weight of the goods carried, including packaging.\n"
      },
      "DangerousGoods_netWeight": {
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/netWeight"
          },
          "unit": {
            "$ref": "#/components/schemas/netWeightUnit"
          }
        },
        "description": "Total weight of the goods carried, excluding packaging.\n"
      },
      "DangerousGoods_netExplosiveContent": {
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/netExplosiveContent"
          },
          "unit": {
            "$ref": "#/components/schemas/netExplosiveContentUnit"
          }
        },
        "description": "The total weight of the explosive substances, without the packaging’s, casings, etc.\n"
      },
      "DangerousGoods_volume": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/dgVolume"
          },
          "unit": {
            "$ref": "#/components/schemas/volumeUnitDG"
          }
        },
        "description": "The volume of the referenced dangerous goods.\n\n**Condition:** only applicable to liquids and gas.\n"
      }
    },
    "parameters": {
      "shippingInstructionsReference": {
        "name": "shippingInstructionsReference",
        "in": "path",
        "description": "The identifier for a `Shipping Instructions` provided by the carrier\n",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/shippingInstructionsReference"
        }
      },
      "transportDocumentReference": {
        "name": "transportDocumentReference",
        "in": "path",
        "description": "The transportDocumentReference of the Transport Document\n",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/transportDocumentReference"
        }
      },
      "carrierBookingReferences": {
        "name": "carrierBookingReference",
        "in": "query",
        "description": "The bookingReference in the Bill of Lading process to filter by.\n\nIt is possible to insert multiple values by comma `,` separating them. For multiple values the OR-operator is used. For example\n\n    carrierBookingReference=ABC123123,DEF987987\n",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/carrierBookingReference"
          }
        },
        "example": [
          "ABC123123",
          "DEF987987"
        ]
      },
      "documentStatus": {
        "name": "documentStatus",
        "in": "query",
        "description": "Filter by the status of the `Shipping Instructions` in the process. Possible values are:\n- RECEIVED\n- PENDING UPDATE\n- INITIAL DRAFT\n- PENDING CHANGES APPROVAL\n- DRAFT\n- PENDING AMENDMENTS APPROVAL\n- APPROVED\n- AUTO-APPROVED\n- ISSUED\n- AMENDMENTS APPROVED\n- PENDING SURRENDER FOR AMENDMENTS\n- PENDING SURRENDER FOR DELIVERY\n- SURRENDERED FOR AMENDMENTS\n- SURRENDERED FOR DELIVERY\n- VOIDED\n- REJECTED\n\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/eblstatuses.csv).\n",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/eblStatus"
        }
      },
      "Api-Version-Major": {
        "name": "API-Version",
        "in": "header",
        "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
        "required": false,
        "schema": {
          "type": "string",
          "example": "1"
        }
      }
    },
    "headers": {
      "API-Version": {
        "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
        "schema": {
          "type": "string",
          "example": "1.0.0"
        }
      }
    }
  }
}