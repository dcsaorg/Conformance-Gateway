openapi: 3.0.3
info:
  version: 2.0.0
  title: |
    DCSA Just in Time Port Calls API
  description: |
    # DCSA OpenAPI specification for Just in Time Port Call process
    The DCSA API for **Just In Time Port Call** aims to simplify and standardize the exchange of operational information between carriers, terminals, port authorities, and service providers, to orchestrate and optimize port calls. JIT can be used for negotiating services execution via timestamps, informing timestamps, or informing moves forecasts, between the parties involved in any given location.

    The planning and execution of events always follow the same pattern, in which several instances of the estimated (`E`), requested (`R`), and planned (`P`) times (from now on referred to as: `ERP`-pattern) can occur if a new estimated or requested time is given after the initially planned time. Some events, specified in this document, do not need the `ERP`-pattern, as they are informative and reflect actuals (`A`) only (i.e. vessel readiness for cargo operations).

    For more information about the ERP-pattern please check [GUIDELINES FOR HARMONIZED COMMUNICATION AND ELECTRONIC EXCHANGE OF OPERATIONAL DATA FOR PORT CALLS](https://wwwcdn.imo.org/localresources/en/OurWork/Facilitation/FAL%20related%20nonmandatory%20documents/FAL.5-Circ.52.pdf) by IMO. Link to IMO GIA [Just In Time Arrival Guide](https://greenvoyage2050.imo.org/wp-content/uploads/2021/01/GIA-just-in-time-hires.pdf)

    ## Port Call Services in the scope of this API
    Negotiable **Port Call Services** through an `ERP`-pattern including an `A`:
    - Berth
    - Cargo operations
    - Pilotage
    - Towage
    - Mooring
    - Bunkering
    - Pilot Boarding Place
    - Anchorage
    - Sludge

    **Non**-negotiable **Port Call Services** (without `ERP`-pattern) having only an `A`:
    - Sea Passage
    - All Fast
    - Gangway down and secure
    - Vessel Ready for cargo operations
    - Vessel Ready to sail
    - Discharge cargo operations
    - Loading cargo operations
    - Lashing
    - Safety - Terminal ready for vessel departure
    - Anchorage Operations
    - ShorePower

    Also in scope:
    - Moves forecast
    - cancel (by provider) or decline (by consumer) of a Port Call Service
    - omission of **Port Call** or **Terminal Call**

    ## How to create a Port Call Service
    To request a **Port Call Service** do the following:
     - Create a **Port Call** by calling the

            PUT /v2/port-calls/{portCallID}

     - Create a **Terminal Call** and link it to the **Port Call** created above by calling

            PUT /v2/terminal-calls/{terminalCallID}
            
     - Create a **Port Call Service** and link it to the **Terminal Call** created above by calling
            
            PUT /v2/port-call-services/{portCallServiceID}

    It is the responsibility of the Provider of the initial **Port Call Service** to create a:
    - `portCallID` to identify all communication regarding the **Port Call**
    - `terminalCallID` to identify each **Terminal Call** inside the same `portCallID`. One **Port Call** can contain many **Terminal Calls**
    - `portCallServiceID` to identify each **Port Call Service** inside the same `terminalCallID`. One **Terminal Call** can contain many **Port Call Services**

    It is the responsibility of the creator of a **Timestamp** (Estimated, Requested, Planned or Actual) to create the `timestampID` as an identifier for the **Timestamp** for any further referral. One **Port Call Service** can contain many **Timestamps**

    ### API Design & Implementation Principles
    This API follows the guidelines defined in version 2.0 of the API Design & Implementation Principles which can be found on the [DCSA Developer Portal](https://developer.dcsa.org/api_design)

    For a changelog, please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/jit/v2#v200). If you have any questions, feel free to [Contact Us](https://dcsa.org/get-involved/contact-us).
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'https://dcsa.org'
    email: info@dcsa.org
security: []
tags:
  - name: Port Call Service - Consumer
    description: |
      **Consumer** implemented endPoints
  - name: Port Call Service - Provider
    description: |
      **Provider** implemented endPoints
  - name: Port Call Service
    description: |
      **Provider** and **Consumer** implemented endPoints
paths:
  '/v2/port-calls/{portCallID}':
    put:
      parameters:
        - $ref: '#/components/parameters/portCallIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      tags:
        - Port Call Service - Consumer
      operationId: put-port-call
      summary: Initiates a new or updates a Port Call
      description: |
        Creates or updates a **Port Call** record. The caller must provide a unique portCallID (UUIDv4), which identifies the **Port Call**. The `portCallID` must remain consistent across all subsequent communications and linked **Terminal Calls**. If updating an existing **Port Call**, e.g. including the `portVisitReference`, the provided `portCallID` must match the existing record.

        The **Port Call** includes:
          
          - Location information (required): `UNLocationCode`
          - static **Vessel** information (required): `vessel`
          - an optional business identifier for the port visit: `portVisitReference`
          - The ability to send the record with informational purpose only, using `isFYI= true`

        This call is often provided as the first call from a **Carrier** to a **Terminal** before creating a **Terminal Call** and then sending `ETA-Berth` or `Moves`.
      requestBody:
        description: Initiates a new or updates a Port Call
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortCall'
            examples:
              CreateNewPortCallForETA:
                summary: |
                  Create a new Port Call to be used for an ETA
                description: |
                  A new `Port Call` for **Port of Amsterdam** for the **YM WHOLESOME**. After this call is accepted by consumer - a **Transport Call** can be created. In this example no `portVisitReference` has yet been assigned to the **Port Call**.
                value:
                  portCallID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                  UNLocationCode: NLAMS
                  vessel:
                    vesselIMONumber: '9704611'
                    MMSINumber: '477524700'
                    name: YM WHOLESOME
                    lengthOverall: 368.07
                    dimensionUnit: MTR
                    callSign: VROO4
                    typeCode: CONT
              SendFYI:
                summary: |
                  Send a FYI to a consumer
                description: |
                  A `Port Call` has already been created - now send the **Port Call** as a FYI to a (secondary) consumer. In this example all properties are the same as the example above.
                value:
                  portCallID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                  UNLocationCode: NLAMS
                  vessel:
                    vesselIMONumber: '9704611'
                    MMSINumber: '477524700'
                    name: YM WHOLESOME
                    lengthOverall: 368.07
                    dimensionUnit: MTR
                    callSign: VROO4
                    typeCode: CONT
                  isFYI: true
      responses:
        '204':
          description: |
            A new or updated Port Call accepted by the consumer.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case creating a new `Port Call` fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Port Call missing Vessel object
                  description: |
                    `vessel` is a mandatory property in the `Port Call`. This is an example of how the error object would look in case this property is missing.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: Vessel object not found - it is a mandatory property in Port Call.
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: vessel
                        errorCodeText: mandatory property missing
                        errorCodeMessage: vessel must be provided as part of a Port Call
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Port Call
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Port Calls
                  description: |
                    Calling the endPoint

                        PUT /v2/port-calls/{portCallID}
                        
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PUT
                    requestUri: /v2/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    statusCodeMessage: Too many request to create a Port Call has been requested. Please try again in 1 hour
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Max Port Call creations reached
                        errorCodeMessage: A maximum of 100 unique Port Calls can be created per hour
  '/v2/port-calls/{portCallID}/omit':
    post:
      parameters:
        - $ref: '#/components/parameters/portCallIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      tags:
        - Port Call Service - Consumer
      operationId: omit-port-call
      summary: Omits a Port Call
      description: |
        Allows the provider to `OMIT` a **Port Call**, signaling that the **Port Call** is no longer going to happen.

        When a consumer receives an `OMIT`, it is their responsibility to propagate this information to any secondary recipients, they previously informed using the `isFYI=true` property, while creating **Port Calls** or sending related updates.

        The provider is responsible for:
          - sending an `OMIT` to all **Terminal Calls** linked to the `portCallID`
          - **Cancel** all `PortCallServices` associatedwith the omitted **Terminal Calls** and **Port Call**

            Once a **Port Call** has been `OMITTED`, this action **CANNOT** be undone. In case the `OMIT` has to be "undone" a new **Port Call** must be created with new **Terminal Calls** and new **Port Call Services**.
      requestBody:
        description: |
          Omits a **Port Call**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OmitPortCall'
            examples:
              omit:
                summary: |
                  Send an OMIT
                description: |
                  Send an `OMIT` to a **Port Call** because the vessel has engine problems. Sending this OMIT is irreversible.
                value:
                  reason: 'Engine failures'
      responses:
        '204':
          description: |
            **Port Call** successfully marked as omitted.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case omitting a `Port Call` fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    isFYI provided as a number
                  description: |
                    `isFYI` is a boolean property - cannot set the value to '12'. This is an example of how the error object would look in case the value of this property is specified wrongly.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7004` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: isFYI has wrong type - boolean expected but integer found
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7004
                        property: isFYI
                        errorCodeText: wrong property type
                        errorCodeMessage: isFYI should be a boolean. '12' provided as value
        '404':
          description: |
            In case the implementor does not know of the `portCallID` used in the request (this could be because of a `PUT` request that has not finished processing or simply because the resource does not exist), it is possible for the implementor to reject the requests by returning a `404` (Not Found).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    portCallID not Found
                  description: |
                    The provided `portCallID` cannot be found. This can be because a `PUT` request has not been finished processing or because the `portCallID` does not exist in the implementor system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: portCallID not found
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: portCallID Not Found
                        errorCodeMessage: The Port Call does not exist
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Port Call
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflictingOmit:
                  summary: |
                    Omit is being called twice on the same Port Call
                  description: |
                    In case a **Port Call** has already been OMITTED - it is possible to send a 409 (Conflict) indicating that the OMIT cannot be performed again.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit
                    statusCode: 409
                    statusCodeText: Port Call already omitted
                    statusCodeMessage: It is not possible to Omit a Port Call twice
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: Conflicting omit
                        errorCodeMessage: Trying to omit an already Omitted Port Call
  '/v2/port-calls':
    get:
      parameters:
        - $ref: '#/components/parameters/portCallIDQueryParam'
        - $ref: '#/components/parameters/portVisitReferenceQueryParam'
        - $ref: '#/components/parameters/UNLocationCodeQueryParameter'

        - $ref: '#/components/parameters/vesselIMONumberQueryParam'
        - $ref: '#/components/parameters/vesselNameQueryParam'
        - $ref: '#/components/parameters/MMSINumberQueryParam'

        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/cursorQueryParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      tags:
        - Port Call Service
      operationId: get-port-call
      summary: Retrieves a list of Port Calls
      description: |
        Retrieves a list of **Port Calls** that match the specified filter criteria. To retrieve details for a specific **Port Call**, use the `portCallID` filter. This will return an array containing at most a single object. The response will return an empty array if no **Port Call** known by the consumer is linked to the provided `portCallID`.
      responses:
        '200':
          description: |
            Retrieve a list of Port Calls
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortCalls'
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call request
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/port-calls
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Port Call request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                tooManyRequestsExample:
                  summary: |
                    Making too many Port Call requests
                  description: |
                    Calling the endPoint

                        GET /v2/port-calls
                        
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: GET
                    requestUri: /v2/port-calls
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    statusCodeMessage: Too many request to fetch Port Calls has been requested. Please try again in 1 hour
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Max Port Call requests reached
                        errorCodeMessage: A maximum of 500 Port Call requests can be created per hour
  '/v2/terminal-calls/{terminalCallID}':
    put:
      parameters:
        - $ref: '#/components/parameters/terminalCallIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      tags:
        - Port Call Service - Consumer
      operationId: put-terminal-call
      summary: Initiates a new or updates a Terminal Call
      description: |
        Description...
      requestBody:
        description: Initiates a new or updates a Terminal Call
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TerminalCall'
      responses:
        '204':
          description: |
            A new or updated Terminal Call accepted
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case creating a new `Terminal Call` fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    carrierServiceCode is missing
                  description: |
                    `carrierServiceCode` is a mandatory property in the `Terminal Call`. This is an example of how the error object would look in case this property is missing

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: carrierServiceCode not found - it is a mandatory property in Terminal Call
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: carrierServiceCode
                        errorCodeText: mandatory property missing
                        errorCodeMessage: carrierServiceCode must be provided as part of a Terminal Call
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Terminal Call
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Terminal Call
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v2/terminal-calls/{terminalCallID}/omit':
    post:
      parameters:
        - $ref: '#/components/parameters/terminalCallIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      tags:
        - Port Call Service - Consumer
      operationId: omit-terminal-call
      summary: Omits a Terminal Call
      description: |
        Provider `OMITTING` a **Terminal Call**
      requestBody:
        description: |
          Omits a **Terminal Call**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OmitTerminalCall'
      responses:
        '204':
          description: |
            **Terminal Call** successfully marked as omitted.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case omitting a `Terminal Call` does not schema validate a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    isFYI provided as a number
                  description: |
                    `isFYI` is a boolean property - cannot set the value to '12'. This is an example of how the error object would look in case the value of this property is specified wrongly

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7004` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: isFYI has wrong type - boolean expected but integer found
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7004
                        property: isFYI
                        errorCodeText: wrong property type
                        errorCodeMessage: isFYI should be a boolean. '12' provided as value
        '404':
          description: |
            In case the implementor does not know of the `terminalCallID` used in the request (this could be because of a `PUT` request that has not finished processing or simply because the resource does not exist) - it is possible for the implementor to reject the requests by returning a `404` (Not Found).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `terminalCallID` cannot be found. This can be because a `PUT` request has not been finished processing or because the `terminalCallID` does not exist in the implementor system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: terminalCallID not found
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: terminalCallID Not Found
                        errorCodeMessage: The Terminal Call does not exist
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Terminal Call
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v2/terminal-calls':
    get:
      parameters:
        - $ref: '#/components/parameters/portCallIDQueryParam'
        - $ref: '#/components/parameters/terminalCallIDQueryParam'
        - $ref: '#/components/parameters/terminalCallReferenceQueryParam'
        - $ref: '#/components/parameters/terminalCallSequenceNumberQueryParam'

        - $ref: '#/components/parameters/carrierServiceNameQueryParam'
        - $ref: '#/components/parameters/carrierServiceCodeQueryParam'
        - $ref: '#/components/parameters/universalServiceReferenceQueryParam'
        - $ref: '#/components/parameters/carrierImportVoyageNumberQueryParam'
        - $ref: '#/components/parameters/carrierExportVoyageNumberQueryParam'
        - $ref: '#/components/parameters/universalImportVoyageReferenceQueryParam'
        - $ref: '#/components/parameters/universalExportVoyageReferenceQueryParam'

        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/cursorQueryParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      tags:
        - Port Call Service
      operationId: get-terminal-call
      summary: Retrieves a list of Terminal Calls
      description: |
        Description...
      responses:
        '200':
          description: |
            Retrieve a list of **Terminal Calls**
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TerminalCalls'
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/terminal-calls
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Terminal Call request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v2/port-call-services/{portCallServiceID}':
    put:
      parameters:
        - $ref: '#/components/parameters/portCallServiceIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      tags:
        - Port Call Service - Consumer
      operationId: put-port-call-service
      summary: Initiates a new or updates a Port Call Service
      description: |
        Description...
      requestBody:
        description: Initiates a new or updates a Port Call Service
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortCallService'
      responses:
        '204':
          description: |
            A new Port Call Service accepted
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case creating a new `Port Call Service` fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Port Call Service missing portCallServiceType
                  description: |
                    `portCallServiceType` is a mandatory property in the `Port Call Service`. This is an example of how the error object would look in case this property is missing

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/port-call-services/085a3207-5e45-49cf-8e1b-f8442beaf545
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: portCallServiceType not found - it is a mandatory property in Port Call Service.
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: portCallServiceType
                        errorCodeText: mandatory property missing
                        errorCodeMessage: portCallServiceType must be provided as part of a Port Call Service
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/port-call-services/085a3207-5e45-49cf-8e1b-f8442beaf545
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Port Call Service
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v2/port-call-services/{portCallServiceID}/cancel':
    post:
      parameters:
        - $ref: '#/components/parameters/portCallServiceIDPathParam'
      tags:
        - Port Call Service - Consumer
      operationId: cancel-port-call-service
      summary: Cancel a Port Call Service
      description: |
        Provider canceling a **Port Call Service**.
      requestBody:
        description: Cancels a **Port Call Service**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cancel'
      responses:
        '204':
          description: |
            **Port Call Service** successfully cancelled
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case cancelling a `Port Call Service` fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    isFYI provided as a number
                  description: |
                    `isFYI` is a boolean property - cannot set the value to '12'. This is an example of how the error object would look in case the value of this property is specified wrongly

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7004` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/port-call-services/085a3207-5e45-49cf-8e1b-f8442beaf545/cancel
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: isFYI has wrong type - boolean expected but integer found
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7004
                        property: isFYI
                        errorCodeText: wrong property type
                        errorCodeMessage: isFYI should be a boolean. '12' provided as value
        '404':
          description: |
            In case the implementor does not know of the `portCallServiceID` used in the request (this could be because of a `PUT` request that has not finished processing or simply because the resource does not exist) - it is possible for the implementor to reject the requests by returning a `404` (Not Found).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `portCallServiceID` cannot be found. This can be because a `PUT` request has not been finished processing or because the `portCallServiceID` does not exist in the implementor system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/port-call-services/085a3207-5e45-49cf-8e1b-f8442beaf545/cancel
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: portCallServiceID not found
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: portCallServiceID Not Found
                        errorCodeMessage: The Port Call Service does not exist
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/port-call-services/085a3207-5e45-49cf-8e1b-f8442beaf545/cancel
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Port Call Service
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v2/port-call-services':
    get:
      parameters:
        - $ref: '#/components/parameters/terminalCallIDQueryParam'
        - $ref: '#/components/parameters/portCallServiceIDQueryParam'

        - $ref: '#/components/parameters/portCallServiceTypeQueryParam'
        - $ref: '#/components/parameters/portCallServiceEventTypeCodeQueryParam'

        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/cursorQueryParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      tags:
        - Port Call Service
      operationId: get-port-call-services
      summary: Retrieves a list of Port Call Services
      description: |
        Retrieves a list of Port Call Services
      responses:
        '200':
          description: |
            Get the list of Port Call Services matching the specified filter
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortCallServices'
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while fetching the Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/port-call-services
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while fetching Port Call Service
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v2/timestamps/{timestampID}':
    put:
      parameters:
        - $ref: '#/components/parameters/timestampIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      tags:
        - Port Call Service
      operationId: put-timestamp
      summary: Timestamp for a Port Call Service
      description: |
        Description...
      requestBody:
        description: Any `ERP-A` timestamp
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timestamp'
      responses:
        '204':
          description: |
            Timestamp for a **Port Call Service** accepted
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case creating a new `Timestamp` fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Timestamp missing classifierCode
                  description: |
                    `classifierCode` is a mandatory property in the `Timestamp`. This is an example of how the error object would look in case this property is missing

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/timestamps/085a3207-5e45-49cf-8e1b-f8442beaf545
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: classifierCode property not found - it is a mandatory property in Timestamp
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: classifierCode
                        errorCodeText: mandatory property missing
                        errorCodeMessage: classifierCode must be provided as part of a Timestamp
        '404':
          description: |
            In case the implementor does not know of the `portCallServiceID` used in the request, it is possible for the implementor to reject the requests by returning a `404` (Not Found). This could be because of a `PUT` request, for creating/initiating the Port Call Service, that has not finished processing or simply because the resource does not exist.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `portCallServiceID` cannot be found. This can be because a `PUT` request, for creating/initiating the **Port Call Service**, has not been finished processing or because the `portCallServiceID` does not exist in the implementor system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/timestamps/085a3207-5e45-49cf-8e1b-f8442beaf545
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: portCallServiceID not found
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: portCallServiceID Not Found
                        errorCodeMessage: The Port Call Service does not exist
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/timestamps/085a3207-5e45-49cf-8e1b-f8442beaf545
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Timestamp
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v2/timestamps':
    get:
      parameters:
        - $ref: '#/components/parameters/portCallServiceIDQueryParam'
        - $ref: '#/components/parameters/timestampIDQueryParam'
        - $ref: '#/components/parameters/classifierCodeQueryParam'

        - $ref: '#/components/parameters/startDateTimeQueryParam'
        - $ref: '#/components/parameters/endDateTimeQueryParam'

        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/cursorQueryParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      tags:
        - Port Call Service
      operationId: get-timestamp
      summary: Retrieves a list of Timestamps
      description: |
        Description...
      responses:
        '200':
          description: |
            Get the list of **Timestamp** matching the specified filter
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timestamps'
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/timestamps
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Timestamp
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v2/vessel-statuses/{portCallServiceID}':
    put:
      parameters:
        - $ref: '#/components/parameters/portCallServiceIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      tags:
        - Port Call Service - Consumer
      operationId: put-vessel-status
      summary: Send Vessel Status for a **Port Call Service**
      description: |
        Description...
      requestBody:
        description: ...
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VesselStatus'
      responses:
        '204':
          description: |
            Timestamp for a **Port Call Service** accepted
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case creating a new `Timestamp` fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Vessel Status missing portCallServiceID
                  description: |
                    `portCallServiceID` is a mandatory property in the **Vessel Status**. This is an example of how the error object would look in case this property is missing

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/vessel-statuses/085a3207-5e45-49cf-8e1b-f8442beaf545
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: portCallServiceID object not found - it is a mandatory property in Vessel Status
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: portCallServiceID
                        errorCodeText: mandatory property missing
                        errorCodeMessage: portCallServiceID must be provided as part of a Vessel Status
        '404':
          description: |
            In case the implementor does not know of the `portCallServiceID` used in the request, it is possible for the implementor to reject the requests by returning a `404` (Not Found). This could be because of a `PUT` request, for creating/initiating the Port Call Service, that has not finished processing or simply because the resource does not exist.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `portCallServiceID` cannot be found. This can be because a `PUT` request, for creating/initiating the **Port Call Service**, has not been finished processing or because the `portCallServiceID` does not exist in the implementor system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/vessel-statuses/085a3207-5e45-49cf-8e1b-f8442beaf545
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: portCallServiceID not found
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: portCallServiceID Not Found
                        errorCodeMessage: The Port Call Service does not exist
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/vessel-statuses/085a3207-5e45-49cf-8e1b-f8442beaf545
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Vessel Status
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v2/vessel-statuses':
    get:
      parameters:
        - $ref: '#/components/parameters/portCallServiceIDQueryParam'

        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/cursorQueryParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      tags:
        - Port Call Service
      operationId: get-vessel-status
      summary: Retrieves a list of **Vessel Statuses**
      description: |
        Retrieves a list of **Vessel Statuses**
      responses:
        '200':
          description: |
            Get the list of **Vessel Statuses** matching the specified filter
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VesselStatuses'
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/vessel-statuses
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Vessel Status
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v2/port-call-services/{portCallServiceID}/decline':
    post:
      parameters:
        - $ref: '#/components/parameters/portCallServiceIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      tags:
        - Port Call Service - Provider
      operationId: decline-port-call-service
      summary: Decline a Port Call service
      description: |
        Consumer declining a **Port Call Service**.
      requestBody:
        description: Consumer declining a **Port Call service**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Decline'
      responses:
        '204':
          description: |
            **Port Call Service** successfully declined
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case declining a `Port Call Service` fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    isFYI provided as a number
                  description: |
                    `isFYI` is a boolean property - cannot set the value to '12'. This is an example of how the error object would look in case the value of this property is specified wrongly

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7004` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/port-call-services/085a3207-5e45-49cf-8e1b-f8442beaf545/decline
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: isFYI has wrong type - boolean expected but integer found
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7004
                        property: isFYI
                        errorCodeText: wrong property type
                        errorCodeMessage: isFYI should be a boolean. '12' provided as value
        '404':
          description: |
            In case the implementor does not know of the `portCallServiceID` used in the request (this could be because of a `PUT` request that has not finished processing or simply because the resource does not exist) - it is possible for the implementor to reject the requests by returning a `404` (Not Found).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `portCallServiceID` cannot be found. This can be because a `PUT` request has not been finished processing or because the `portCallServiceID` does not exist in the implementor system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/port-call-services/085a3207-5e45-49cf-8e1b-f8442beaf545/decline
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: portCallServiceID not found
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: portCallServiceID Not Found
                        errorCodeMessage: The Port Call Service does not exist
        '500':
          description: |
            In case a server error occurs in implementor system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementor-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/port-call-services/085a3207-5e45-49cf-8e1b-f8442beaf545/decline
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Port Call Service
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  headers:
    API-Version:
      schema:
        type: string
        example: 2.0.0
      description: |
        SemVer used to indicate the version of the contract (API version) returned.
  parameters:
    Api-Version-Major:
      in: header
      name: API-Version
      required: false
      schema:
        type: string
        example: '2'
      description: |
        An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
    ##############
    # Query params
    ##############

    # Technical query parameters

    portCallIDQueryParam:
      in: query
      name: portCallID
      description: |
        The **Port Call Identifier** to filter by. Specifying this filter will ensure that the result set contains only objects where the `portCallID` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
    terminalCallIDQueryParam:
      in: query
      name: terminalCallID
      description: |
        The **Terminal Call Identifier** to filter by. Specifying this filter will ensure that the result set contains only objects where the `terminalCallID` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
    portCallServiceIDQueryParam:
      in: query
      name: portCallServiceID
      description: |
        The **Port Call Service Identifier** to filter by. Specifying this filter will ensure that the result set contains only objects where the `portCallServiceID` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563

    # Timestamp query parameters

    startDateTimeQueryParam:
      in: query
      name: startDateTime
      description: |
        The starting point of the time range for filtering **Port Call Service** timestamps. If the date and time of any timestamp (Estimated, Requested, Planned, or Actual) of a **Port Call Service** is **on or after (≥)** the specified `startDateTime`, that timestamp will be included in the results. Matching is based on the local date and time of the **Port Call Service** location.

        **Note:** If this filter is not provided the **default value is 1 month prior** to request date time.
      schema:
        type: string
        format: date-time
        example: '2020-04-06T07:41:00+08:30'
    endDateTimeQueryParam:
      in: query
      name: endDateTime
      description: |
        The endpoint of the time range for filtering **Port Call Service** timestamps. If the date and time of any timestamp (Estimated, Requested, Planned, or Actual) of a **Port Call Service** is **on or before (≤)** the specified `endDateTime`, that timestamp will be included in the results. Matching is based on the local date and time of the **Port Call Service** location.

        **Note:** If this filter is not provided the default value is 1 month after the request date time.
      schema:
        type: string
        format: date-time
        example: '2020-04-10T07:41:00+08:30'

    # Port Call query parameters

    UNLocationCodeQueryParameter:
      in: query
      name: UNLocationCode
      description: |
        The **UN Location Code** specifying where a port is located. Specifying this filter will ensure that the result set contains only objects where the `UNLocationCode` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        pattern: ^[A-Z]{2}[A-Z2-9]{3}$
        minLength: 5
        maxLength: 5
        example: NLAMS
    portVisitReferenceQueryParam:
      in: query
      name: portVisitReference
      description: |
        The **Port Visit Reference** to filter by. Specifying this filter will ensure that the result set contains only objects where the `portVisitReference` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        maxLength: 50
        example: NLAMS1234589
    carrierServiceNameQueryParam:
      in: query
      name: carrierServiceName
      description: |
        The **Carrier specific Service Name** to filter by. Specifying this filter will ensure that the result set contains only objects where the `carrierServiceName` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        maxLength: 50
        pattern: ^\S(?:.*\S)?$
        example: Great Lion Service
    carrierServiceCodeQueryParam:
      in: query
      name: carrierServiceCode
      description: |
        The **Carrier specific Service Code** to filter by. Specifying this filter will ensure that the result set contains only objects where the `carrierServiceCode` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        maxLength: 11
        pattern: ^\S(?:.*\S)?$
        example: FE1
    universalServiceReferenceQueryParam:
        in: query
        name: universalServiceReference
        description: |
          The **Universal Service Reference** (`USR`) as defined by DCSA to filter by. Specifying this filter will ensure that the result set contains only objects where the `universalServiceReference` property is present and its value matches one of the values of the corresponding filter query parameter.
        schema:
          type: string
          pattern: ^SR\d{5}[A-Z]$
          maxLength: 8
          minLength: 8
          example: SR12345A

    # Terminal Call query parameters

    terminalCallReferenceQueryParam:
      in: query
      name: terminalCallReference
      description: |
        The **Terminal Call Reference** to filter by. Specifying this filter will ensure that the result set contains only objects where the `terminalCallReference` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        maxLength: 100
        example: '15063401'
    terminalCallSequenceNumberQueryParam:
      in: query
      name: terminalCallSequenceNumber
      description: |
        The **Terminal Call Sequence Number** to filter by. Specifying this filter will ensure that the result set contains only objects where the `terminalCallSequenceNumber` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: integer
        format: int32
        example: 2
    carrierImportVoyageNumberQueryParam:
      in: query
      name: carrierImportVoyageNumber
      description: |
        The **Carrier Import Voyage Number** to filter by. Specifying this filter will ensure that the result set contains only objects where the `carrierImportVoyageNumber` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        maxLength: 50
        pattern: ^\S(?:.*\S)?$
        example: 2103N
    carrierExportVoyageNumberQueryParam:
      in: query
      name: carrierExportVoyageNumber
      description: |
        The **Carrier Export Voyage Number** to filter by. Specifying this filter will ensure that the result set contains only objects where the `carrierExportVoyageNumber` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        maxLength: 50
        pattern: ^\S(?:.*\S)?$
        example: 2103S
    universalImportVoyageReferenceQueryParam:
      in: query
      name: universalImportVoyageReference
      description: |
        The **Universal Import Voyage Reference** to filter by. Specifying this filter will ensure that the result set contains only objects where the `universalImportVoyageReference` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
        minLength: 5
        maxLength: 5
        example: 2103N
    universalExportVoyageReferenceQueryParam:
      in: query
      name: universalExportVoyageReference
      description: |
        The **Universal Export Voyage Reference** to filter by. Specifying this filter will ensure that the result set contains only objects where the `universalExportVoyageReference` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
        minLength: 5
        maxLength: 5
        example: 2103N

    # Port Call Service query parameters

    portCallServiceTypeQueryParam:
      in: query
      name: portCallServiceType
      description: |
        The **Port Call Service Type** to filter by. Specifying this filter will ensure that the result set contains only objects where the `portCallServiceType` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        maxLength: 50
        pattern: ^\S(?:.*\S)?$
        example: BERTH
    portCallServiceEventTypeCodeQueryParam:
      in: query
      name: portCallServiceEventTypeCode
      description: |
        The **Port Call Service Event Type Code** to filter by. Specifying this filter will ensure that the result set contains only objects where the `portCallServiceEventTypeCode` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        enum:
          - STRT
          - CMPL
          - ARRI
          - DEPA
        example: STRT

    # Vessel query parameters

    vesselIMONumberQueryParam:
      in: query
      name: vesselIMONumber
      description: |
        The **Vessel IMO Number** to filter by. Specifying this filter will ensure that the result set contains only objects where the `vesselIMONumber` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        pattern: ^\d{7,8}$
        minLength: 7
        maxLength: 8
        example: '9321483'
    vesselNameQueryParam:
      in: query
      name: vesselName
      description: |
        The **Vessel Name** to filter by. Specifying this filter will ensure that the result set contains only objects where the `vesselName` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        pattern: ^\S(?:.*\S)?$
        maxLength: 50
        example: King of the Seas
    MMSINumberQueryParam:
      in: query
      name: MMSINumber
      description: |
        The **MMSI Number** to filter by. Specifying this filter will ensure that the result set contains only objects where the `MMSINumber` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        pattern: ^\d{9}$
        minLength: 9
        maxLength: 9
        example: '278111222'

    # Timestamp query parameters
    timestampIDQueryParam:
      in: query
      name: timestampID
      description: |
        The **Timestamp Identifier** to filter by. Specifying this filter will ensure that the result set contains only objects where the `timestampID` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
    classifierCodeQueryParam:
      in: query
      name: classifierCode
      description: |
        The **Classifier Code** to filter by. Specifying this filter will ensure that the result set contains only objects where the `classifierCode` property is present and its value matches one of the values of the corresponding filter query parameter.
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
    
    # Pagination query parameters

    limitQueryParam:
      in: query
      name: limit
      description: |
        Specifies the maximum number of objects in the result set.
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 100
        example: 100
    cursorQueryParam:
      in: query
      name: cursor
      description: |
        A server generated value to specify a specific point in a collection result, used for pagination.
      schema:
        type: string
        maxLength: 1024
        example: fE9mZnNldHw9MTAmbGltaXQ9MTA

    #############
    # Path params
    #############
    portCallServiceIDPathParam:
      in: path
      name: portCallServiceID
      description: |
        The provider created identifier for the **Port Call Service**
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
      required: true
    portCallIDPathParam:
      in: path
      name: portCallID
      description: |
        The provider created identifier for the **Port Call**
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
      required: true
    terminalCallIDPathParam:
      in: path
      name: terminalCallID
      description: |
        The provider created identifier for the **Terminal Call**
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
      required: true
    timestampIDPathParam:
      in: path
      name: timestampID
      description: |
        The provider or consumer created identifier for the **Timestamp**
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
      required: true
  schemas:
    ###########
    # Port Call
    ###########
    PortCalls:
      type: array
      description: |
        An array of **Port Call** objects matching the filters provided.
      items:
        $ref: '#/components/schemas/PortCall'

    PortCall:
      type: object
      title: Port Call
      description: |
        **Port Call** information. The `portCallID` uniquely identifies the **Port Call**. Any subsequent **Terminal Calls** linked to the same **Port Call** MUST use the same `portCallID`. An optional `portVisitReference` can be added in order to link the **Port Call** to external systems. It is mandatory to provide the **Vessel** information
      properties:
        portCallID:
          type: string
          format: uuid
          description: |
            Universal unique identifier for the **Port call**. The `portCallID` is created by the provider. The `portCallID` **MUST** only be created once per **Port Call**. To be used in all communication regarding the **Port Call**.
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        portVisitReference:
          type: string
          maxLength: 50
          description: |
            The unique reference that can be used to link different **Terminal Calls** to the same port visit. The reference is provided by the port to uniquely identify a **Port Call**.
          example: NLAMS1234589
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
        vessel:
          $ref: '#/components/schemas/Vessel'
        omitted:
          type: boolean
          readOnly: true
          description: |
            If set to `true` it indicates that the **Port Call** has been omitted by the carrier
          example: false
        isFYI:
          type: boolean
          writeOnly: true
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true
      required:
        - portCallID
        - UNLocationCode
        - vessel

    ###############
    # Terminal Call
    ###############
    TerminalCalls:
      type: array
      description: |
        An array of **Terminal Call** objects matching the filters provided.
      items:
        $ref: '#/components/schemas/TerminalCall'

    TerminalCall:
      type: object
      title: Terminal Call
      description: |
        **Terminal Call** information. The `terminalCallID` uniquely identifies the **Terminal Call**. Any subsequent **Port Call Services** linked to the same **Terminal Call** MUST use the same `terminalCallID`. An optional `terminalCallReference` can be added in order to link the **Terminal Call** to external systems (e.g OVS).
      properties:
        terminalCallID:
          type: string
          format: uuid
          description: |
            Universal unique identifier for the **Terminal Call**. The `terminalCallID` is created by the provider. The `terminalCallID` **MUST** only be created once per **Terminal Call**. To be used in all communication regarding the **Terminal Call**.
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        portCallID:
          type: string
          format: uuid
          description: |
            Universal unique identifier for the **Port call**. The `portCallID` is created by the provider. The `portCallID` **MUST** only be created once per **Port Call**. To be used in all communication regarding the **Port Call**.
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        terminalCallReference:
          type: string
          description: |
            The unique reference for a **Terminal Call**. It’s the vessel operator’s responsibility to provide the **Terminal Call Reference**, other parties are obliged to pick it up and use it. 

            In **OVS 3.0** can be found as `transportCallReference`
          maxLength: 100
          example: '15063401'
        terminalCallSequenceNumber:
          type: integer
          format: int32
          description: |
            A sequential number assigned to each **Terminal Call** within a **Port Call**, indicating the order in which the calls are scheduled to occur. This number helps differentiate multiple terminal visits in the same **Port Call**. 
          example: 2
        carrierServiceName:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: |
            The carrier specific name of the service for which the schedule details are published
          example: Great Lion Service
        carrierServiceCode:
          type: string
          maxLength: 11
          pattern: ^\S(?:.*\S)?$
          description: |
            The carrier specific code of the service for which the schedule details are published.
          example: FE1
        universalServiceReference:
          type: string
          pattern: ^SR\d{5}[A-Z]$
          minLength: 8
          maxLength: 8
          description: |
            A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.
          example: SR12345A
        carrierImportVoyageNumber:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: |
            The identifier of an import voyage. The carrier-specific identifier of the import Voyage.
          example: 2103N
        carrierExportVoyageNumber:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: |
            The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
          example: 2103S
        universalImportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          minLength: 5
          maxLength: 5
          description: |
            A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`

            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
          example: 2103N
        universalExportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          minLength: 5
          maxLength: 5
          description: |
            A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`

            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
          example: 2103N
        omitted:
          type: boolean
          readOnly: true
          description: |
            If set to `true` it indicates that the **Terminal Call** has been omitted by the carrier
          example: false
        isFYI:
          type: boolean
          writeOnly: true
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true
      required:
        - terminalCallID
        - portCallID
        - carrierServiceName
        - carrierServiceCode

    ###################
    # Port Call Service
    ###################
    PortCallServices:
      type: array
      description: |
        An array of **Port Call Services** matching the filters provided.
      items:
        $ref: '#/components/schemas/PortCallService'

    PortCallService:
      type: object
      title: Port Call Service
      description: |
        The **Port Call Service** contains all information about the service being provided.
      properties:
        terminalCallID:
          type: string
          format: uuid
          description: |
            Universal unique identifier for the **Terminal Call**. The `terminalCallID` is created by the provider. The `terminalCallID` **MUST** only be created once per **Terminal Call**. To be used in all communication regarding the **Terminal Call**.
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        portCallServiceID:
          type: string
          format: uuid
          description: |
            Universal unique identifier for the **Port Call Service**. The `portCallServiceID` is created by the provider. To be used in all communication regarding the **Port Call Service** (i.e. sending a timestamp with the timestamps endpoint).
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        portCallServiceType:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: |
            The type of the **Port Call Service**.

            **Port Call Services** negotiable through an `ERP`-pattern including an `A`, can be one of:
            - `BERTH` (Berth)
            - `CARGO_OPERATIONS` (Cargo operations)
            - `PILOTAGE` (Pilotage)
            - `TOWAGE` (Towage)
            - `MOORING` (Mooring)
            - `BUNKERING` (Bunkering)
            - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)
            - `ANCHORAGE` (Anchorage)
            - `SLUDGE` (Sludge)

            **Port Call Services** without `ERP`-pattern having only an `A`, can be one of:

            - `SEA_PASSAGE` (Sea Passage)
            - `ALL_FAST` (All Fast)
            - `GANGWAY_DOWN_AND_SECURE` (Gangway down and secure)
            - `VESSEL_READY_FOR_CARGO_OPERATIONS` (Vessel Ready for cargo operations)
            - `VESSEL_READY_TO_SAIL` (Vessel Ready to sail)
            - `DISCHARGE_CARGO_OPERATIONS` (Discharge cargo operations)
            - `LOADING_CARGO_OPERATIONS` (Loading cargo operations)
            - `LASHING` (Lashing)
            - `SAFETY` (Safety)
            - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
            - `SHORE_POWER` (ShorePower)

            **Port Call Service** without an `ERP` and without an `A`, can be one of:
            - `MOVES` (Moves)
          example: BERTH
        portCallServiceEventTypeCode:
          type: string
          description: |
            The code to identify the type of event that is related to the **Port Call Service**
            - `STRT` (Started)
            - `CMPL` (Completed)
            - `ARRI` (Arrived)
            - `DEPA` (Departed)

            **Condition:** `STRT` and `CMPL` - can only be used with the following `portCallServiceType`:
              - `CARGO_OPERATIONS` (Cargo operations)
              - `PILOTAGE` (Pilotage)
              - `TOWAGE` (Towage)
              - `MOORING` (Mooring)
              - `BUNKERING` (Bunkering)
              - `ANCHORAGE` (Anchorage)
              - `SLUDGE` (Sludge)
              - `SEA_PASSAGE` (Sea Passage)
              - `DISCHARGE_CARGO_OPERATIONS` (Discharge cargo operations)
              - `LOADING_CARGO_OPERATIONS` (Loading cargo operations)
              - `LASHING` (Lashing)
              - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
              - `SHORE_POWER` (ShorePower)
            
            **Condition:** both `ARRI` and `DEPA` can only be used with `portCallServiceType='BERTH'` (Berth)

            **Condition:** `ARRI` can only be used with the following `portCallServiceType`:
              - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)
              - `ALL_FAST` (All Fast)
              - `GANGWAY_DOWN_AND_SECURE` (Gangway down and secure)
              - `VESSEL_READY_FOR_CARGO_OPERATIONS` (Vessel Ready for cargo operations)
              - `VESSEL_READY_TO_SAIL` (Vessel Ready to sail)
              - `MOVES` (Moves)

            **Condition:** `DEPA` can only be used with the following `portCallServiceType`:
              - `SAFETY` (Safety)
          enum:
            - STRT
            - CMPL
            - ARRI
            - DEPA
          example: STRT
        portCallPhaseTypeCode:
          type: string
          description: |
            The general direction of the `Vessel` for which information applies
            - `INBD` (Inbound)
            - `ALGS` (Alongside)
            - `SHIF` (Shifting)
            - `OUTB` (Outbound)

            **Condition:** `INBD` should only be used with the following `portCallServiceType`:
              - `BERTH` (Berth)
              - `PILOTAGE` (Pilotage)
              - `TOWAGE` (Towage)
              - `MOORING` (Mooring)
              - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)
              - `SEA_PASSAGE` (Sea Passage)

            **Condition:** `ALGS` should only be used with the following `portCallServiceType`:
              - `BERTH` (Berth)
              - `BUNKERING` (Bunkering)
              - `CARGO_OPERATIONS` (Cargo operations)
              - `ALL_FAST` (All Fast)
              - `GANGWAY_DOWN_AND_SECURE` (Gangway down and secure)
              - `VESSEL_READY_FOR_CARGO_OPERATIONS` (Vessel Ready for cargo operations)
              - `VESSEL_READY_TO_SAIL` (Vessel Ready to sail)
              - `DISCHARGE_CARGO_OPERATIONS` (Discharge cargo operations)
              - `LOADING_CARGO_OPERATIONS` (Loading cargo operations)
              - `LASHING` (Lashing)
              - `SAFETY` (Safety)
              - `SHORE_POWER` (ShorePower)

            **Condition:** `SHIF` should only be used with the following `portCallServiceType`:
              - `PILOTAGE` (Pilotage)
              - `TOWAGE` (Towage)
              - `MOORING` (Mooring)

            **Condition:** `OUTB` should only be used with the following `portCallServiceType`:
              - `BERTH` (Berth)
              - `PILOTAGE` (Pilotage)
              - `TOWAGE` (Towage)
              - `MOORING` (Mooring)
              - `SEA_PASSAGE` (Sea Passage)

            **Condition:** The property `portCallPhaseTypeCode` should **not** be sent with the following `portCallServiceType`:
              - `ANCHORAGE` (Anchorage)
              - `SLUDGE` (Sludge)
              - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
              - `MOVES` (Moves)
          enum:
            - INBD
            - ALGS
            - SHIF
            - OUTB
          example: ALGS
        facilityTypeCode:
          type: string
          maxLength: 4
          description: |
            A specialized version of the facilityCode to be used in the **Port Call Service**. The code to identify the specific type of facility.
            - `PBPL` (Pilot boarding place)
            - `BRTH` (Berth)
            - `ANCH` (Anchorage Location)

            **Condition:** `PBPL`, when used, should be used with the following `portCallServiceType`:
              - `PILOTAGE` (Pilotage)
              - `TOWAGE` (Towage)
              - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)

            **Condition:** `BRTH`, when used, should be used with the following `portCallServiceType`:
            - `BERTH` (Berth)
            - `CARGO_OPERATIONS` (Cargo operations)
            - `PILOTAGE` (Pilotage)
            - `TOWAGE` (Towage)
            - `MOORING` (Mooring)
            - `BUNKERING` (Bunkering)
            - `SLUDGE` (Sludge)
            - `ALL_FAST` (All Fast)
            - `GANGWAY_DOWN_AND_SECURE` (Gangway down and secure)
            - `VESSEL_READY_FOR_CARGO_OPERATIONS` (Vessel Ready for cargo operations)
            - `VESSEL_READY_TO_SAIL` (Vessel Ready to sail)
            - `DISCHARGE_CARGO_OPERATIONS` (Discharge cargo operations)
            - `LOADING_CARGO_OPERATIONS` (Loading cargo operations)
            - `LASHING` (Lashing)
            - `SAFETY` (Safety)
            - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
            - `SHORE_POWER` (ShorePower)

            **Condition:** `ANCH`, when used, should be used with the following `portCallServiceType`:
            - `ANCHORAGE` (Anchorage)
            - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
          enum:
            - PBPL
            - BRTH
            - ANCH
          example: BRTH
        portCallServiceLocation:
          $ref: '#/components/schemas/PortCallServiceLocation'
        moves:
          $ref: '#/components/schemas/MovesList'
        cancelled:
          type: boolean
          readOnly: true
          description: |
            The **Port Call Service** has been `cancelled` by the Provider.
          example: false
        declined:
          type: boolean
          readOnly: true
          description: |
            The **Port Call Service** has been `declined` by the Consumer.
          example: false
        isFYI:
          type: boolean
          writeOnly: true
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true
      required:
        - terminalCallID
        - portCallServiceID
        - portCallServiceType
        - portCallServiceEventTypeCode
        - portCallServiceLocation

    ###########
    # Timestamp
    ###########
    Timestamps:
      type: array
      description: |
         An array of **Timestamps** matching the filters provided.
      items:
        $ref: '#/components/schemas/Timestamp'

    Timestamp:
      title: Timestamp
      type: object
      description: |
        Date and time for an `ERP-A` **Timestamp** when a **Port Call Service** should be provided (for `ERP`) or has been provided (for `A`).
      properties:
        timestampID:
          type: string
          format: uuid
          description: |
            Universally unique identifier for the **Timestamp**. The creator of the **Timestamp** is responsible to create the `timestampID`
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        replyToTimestampID:
          type: string
          format: uuid
          description: |
            The identifier of the **Timestamp** being replied to. Omitted in case the **Timestamp** is the initial **Timestamp**.

            **Condition:** Only applicable after initial **Timestamp** has been sent.

            **Condition:** Can only reply to a **Timestamp** with the same `portCallServiceID`
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        portCallServiceID:
          type: string
          format: uuid
          description: |
            Links the timestamp to a **Port Call Service**.
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        classifierCode:
          type: string
          description: |
            Code for describing the timestamp.

            Possible values are:
            - `ACT` (Actual)
            - `EST` (Estimated)
            - `PLN` (Planned)
            - `REQ` (Requested)

            **Condition:** `EST`, `PLN` and `ACT` are **only** to be used by the **provider** when sending a **Timestamp** to the **consumer**.

            **Condition:** `REQ` is **only** to be used by the **consumer** when sending a **Timestamp** to the **provider**.

            **Condition:** `ACT` can be used in a **Timestamp** for any **Port Call Service** except `portCallServiceType='MOVES'`

            **Condition:** `EST`, `REQ`and `PLN` can be used in a **Timestamp** for any **Port Call Service** with `portCallServiceType` having one of the following values:
              - `BERTH` (Berth)
              - `CARGO_OPERATIONS` (Cargo operations)
              - `PILOTAGE` (Pilotage)
              - `TOWAGE` (Towage)
              - `MOORING` (Mooring)
              - `BUNKERING` (Bunkering)
              - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)
              - `ANCHORAGE` (Anchorage)
              - `SLUDGE` (Sludge)

          enum:
            - ACT
            - EST
            - PLN
            - REQ
          example: EST
        dateTime:
          type: string
          format: date-time
          description: |
            The local date and time, when the **Port Call Service Event Type Code** of a **Port Call Service Type** is estimated, requested, planned to happen, or has happened, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.
          example: '2019-11-12T07:41:00+08:30'
        portCallServiceLocation:
          $ref: '#/components/schemas/PortCallServiceLocation'
        delayReasonCode:
          type: string
          maxLength: 3
          description: |
            Reason code for the delay. See SMDG [Code list DELAY](https://smdg.org/documents/smdg-code-lists/delay-reason-and-port-call-activity/) for a list of valid codes to be used for this attribute.
          example: STR
        remark:
          type: string
          maxLength: 500
          description: |
            Free text to provide additional information on the context.
          example: Port closed due to strike
        isFYI:
          type: boolean
          writeOnly: true
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true
      required:
        - timestampID
        - portCallServiceID
        - classifierCode
        - dateTime

    ########
    # Vessel
    ########
    Vessel:
      type: object
      title: Vessel
      description: |
        **Vessel** related to this **Port Call**.
      properties:
        vesselIMONumber:
          type: string
          pattern: ^\d{7,8}$
          minLength: 7
          maxLength: 8
          description: |
            The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd's register code, which does not change during the lifetime of the vessel

            **Condition:** One of `vesselIMONumber` or `MMSINumber` **MUST** be specified in order to identify the `Vessel`
          example: '9321483'
        MMSINumber:
          type: string
          description: |
            Maritime Mobile Service Identities (MMSIs) are nine-digit numbers used by maritime digital selective calling (DSC), automatic identification systems (AIS) and certain other equipment to uniquely identify a ship or a coast radio station.

            **Condition:** One of `vesselIMONumber` or `MMSINumber` **MUST** be specified in order to identify the `Vessel`
          pattern: ^\d{9}$
          minLength: 9
          maxLength: 9
          example: '278111222'
        name:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The name of the Vessel given by the Vessel Operator and registered with IMO.
          example: King of the Seas
        lengthOverall:
          type: number
          format: float
          description: |
            The maximum length of a ship's hull measured parallel to the waterline (Length OverAll).

            If the length is specified in feet (`FOT`) then the decimal part should be considered as a fraction of a foot and **not** as a number of inches. E.g. 120.5 feet means 120 and a half foot (which would be 120'6")
          example: 245.45
        width:
          type: number
          format: float
          description: |
            Overall width of the ship measured at the widest point of the nominal waterline.

            If the width is specified in feet (`FOT`) then the decimal part should be considered as a fraction of a foot and **not** as a number of inches. E.g. 120.5 feet means 120 and a half foot (which would be 120'6")
          example: 37.33
        dimensionUnit:
          type: string
          description: |
            The unit of measure which can be expressed in
            - `MTR` (Meter)
            - `FOT` (Foot)
            
            **Condition:** Mandatory to provide if `lengthOverall` or `width` is provided
          enum:
            - MTR
            - FOT
          example: MTR
        callSign:
          type: string
          maxLength: 10
          pattern: ^\S(?:.*\S)?$
          description: |
            A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a three letter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.
          example: NCVV
        typeCode:
          type: string
          description: |
            Categorization of ocean-going vessels distinguished by the main cargo the vessel carries. Possible values:
            - `GCGO` (General cargo)
            - `CONT` (Container)
            - `RORO` (RoRo)
            - `CARC` (Car carrier)
            - `PASS` (Passenger)
            - `FERY` (Ferry)
            - `BULK` (Bulk)
            - `TANK` (Tanker)
            - `LGTK` (Liquefied gas tanker)
            - `ASSI` (Assistance)
            - `PILO` (Pilot boat)
          enum:
            - GCGO
            - CONT
            - RORO
            - CARC
            - PASS
            - FERY
            - BULK
            - TANK
            - LGTK
            - ASSI
            - PILO
          example: CONT

    ##############
    # VesselStatus
    ##############
    VesselStatuses:
      type: array
      description: |
        An array of **Vessel Status** objects matching the filters provided.
      items:
        $ref: '#/components/schemas/VesselStatus'
    
    VesselStatus:
      title: Vessel Status
      type: object
      description: |
        Dynamic data for a **Vessel**. This includes `draft`(s), `milesToDestinationPort` and the location of the vessel.
      properties:
        portCallServiceID:
          type: string
          format: uuid
          description: |
            Universal unique identifier for the **Port Call Service**. The `portCallServiceID` is created by the provider. To be used in all communication regarding the **Port Call Service** (i.e. sending a timestamp with the timestamps endpoint).
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        draft:
          type: number
          format: float
          description: |
            The vertical distance between the waterline and the bottom of the hull (keel) of a ship. The depth to which a ship is immersed in water.

            **Note:** If the draft is specified in feet (`FOT`) then the decimal part should be considered as a fraction of a foot and **not** as a number of inches. E.g. 120.5 feet means 120 and a half foot (which would be 120'6")
          example: 12.5
        airDraft:
          type: number
          format: float
          description: |
            The vertical distance from the surface of the water to the highest point of mast or aerial.

            **Note:** If the vertical draft is specified in feet (`FOT`) then the decimal part should be considered as a fraction of a foot and **not as a number of inches. E.g. 120.5 feet means 120 and a half foot (which would be 120'6")
          example: 55
        aftDraft:
          type: number
          format: float
          description: |
            The vertical distance between the waterline and the bottom of the hull (keel) at the stern (after part) of the vessel. The depth to which the after part of the ship is immersed in water.

            **Note:** If the vertical draft is specified in feet (`FOT`) then the decimal part should be considered as a fraction of a foot and **not as a number of inches. E.g. 120.5 feet means 120 and a half foot (which would be 120'6")
          example: 37
        forwardDraft:
          type: number
          format: float
          description: |
            The vertical distance between the waterline and the bottom of the hull (keel) at the bow (forward part) of the vessel. The depth to which the forward part of the ship is immersed in water.

            **Note:** If the vertical draft is specified in feet (`FOT`) then the decimal part should be considered as a fraction of a foot and **not as a number of inches. E.g. 120.5 feet means 120 and a half foot (which would be 120'6")
          example: 35
        dimensionUnit:
          type: string
          description: |
            The unit of measure which can be expressed in
            - `MTR` (Meter)
            - `FOT` (Foot)
            
            **Condition:** This is mandatory to provide if `draft`, `airDraft`, `aftDraft` or `forwardDraft` is provided
          enum:
            - MTR
            - FOT
          example: MTR
        vesselPosition:
          $ref: '#/components/schemas/VesselPosition'
        milesToDestinationPort:
          type: number
          format: float
          description: |
            Remaining distance reported by the vessel to the next destination port in nautical miles to the berth in that port.
          example: 245.45
        isFYI:
          type: boolean
          writeOnly: true
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true
      required:
        - portCallServiceID

    #################
    # Vessel position
    #################
    VesselPosition:
      type: object
      title: Vessel Position
      description: |
        The location can be specified using **any** of the nested structures:
        - `UNLocationCode`
        - `facility` (used to specify a location using a `facilityCode` and a `facilityCodeListProvider`)
        - `geoCoordinate` (used to specify a location using `latitude` and `longitude`)

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as a `Facility` and as a `GeoCoordinate`) that both ways point to the same location.
      example:
        locationName: CMP Container Terminal Copenhagen
        UNLocationCode: DKCPH
        facility:
          facilityCode: CMPDK
          facilityCodeListProvider: SMDG
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        facility:
          $ref: '#/components/schemas/Facility'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'

    ############################
    # Port Call Service Location
    ############################
    PortCallServiceLocation:
      type: object
      title: Port Call Service Location
      description: |
        The location **MUST** be specified as a `UNLocationCode` and can also be specified using **any** of the nested structures:
        - `facility` (used to specify a location using a `facilityCode` and a `facilityCodeListProvider`)
        - `geoCoordinate` (used to specify a location using `latitude` and `longitude`)

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as a `Facility` and as a `GeoCoordinate`) that both ways point to the same location.

        **Condition:** this property is **only** to be used in combination with `classifierCode=REQ` (a requested **Timestamp**) and can only be used by a **consumer**
      example:
        locationName: CMP Container Terminal Copenhagen
        UNLocationCode: DKCPH
        facility:
          facilityCode: CMPDK
          facilityCodeListProvider: SMDG
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        facility:
          $ref: '#/components/schemas/Facility'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'
      required:
        - UNLocationCode

    ###################
    # Facility Location
    ###################
    Facility:
      title: Facility
      type: object
      description: |
        An object used to express a location using a `Facility`. The facility can be expressed using one of `BIC` code or `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
      properties:
        facilityCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 6
          description: |
            The code used for identifying the specific facility. This code does not include the UN Location Code.

            The definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:

            - `SMDG` (the codeList used is the [SMDG Terminal Code List](https://smdg.org/documents/smdg-code-lists/))
            - `BIC` (the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/))
          example: ADT
        facilityCodeListProvider:
          type: string
          description: |
            The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`
            - `BIC` (Requires a UN Location Code)
            - `SMDG` (Requires a UN Location Code)
          enum:
            - BIC
            - SMDG
          example: SMDG
        subFacility:
          type: string
          maxLength: 100
          pattern: ^\S(?:.*\S)?$
          description: |
            The position along the line of a berth, specified by one point (e.g. bollard, manifold, ramp number), allowing the ship to berth in the correct position along the berth.
          example: Bollard 20
      required:
        - facilityCode
        - facilityCodeListProvider

    #########################
    # Geo Coordinate Location
    #########################
    GeoCoordinate:
      type: object
      title: Geo Coordinate
      description: |
        An object used to express a location using `latitude` and `longitude`.
      properties:
        latitude:
          type: string
          description: Geographic coordinate that specifies the north–south position of a point on the Earth's surface.
          maxLength: 10
          example: '48.8585500'
        longitude:
          type: string
          description: Geographic coordinate that specifies the east–west position of a point on the Earth's surface.
          maxLength: 11
          example: '2.294492036'
      required:
        - latitude
        - longitude

    ########
    # Cancel
    ########
    Cancel:
      type: object
      title: Cancel
      description: |
        Used by provider to cancel a **Port Call Service**
      properties:
        reason:
          type: string
          maxLength: 500
          description: |
            Free text to provide additional information on the context.
          example: Storms ahead
        isFYI:
          type: boolean
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true

    #########
    # Decline
    #########
    Decline:
      type: object
      title: Decline
      description: |
        Used by consumer to decline a **Port Call Service**
      properties:
        reason:
          type: string
          maxLength: 500
          description: |
            Free text to provide additional information on the context.
          example: Crane broken
        isFYI:
          type: boolean
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true

    ######
    # Omit
    ######
    OmitPortCall:
      type: object
      title: Omit Port Call
      description: |
        Used by consumer to omit a **Port Call**
      properties:
        reason:
          type: string
          maxLength: 500
          description: |
            Free text to provide additional information on the context.
          example: Engine failure
        isFYI:
          type: boolean
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true

    OmitTerminalCall:
      type: object
      title: Omit Terminal Call
      description: |
        Used by consumer to omit a **Terminal Call**
      properties:
        reason:
          type: string
          maxLength: 500
          description: |
            Free text to provide additional information on the context.
          example: Engine failure
        isFYI:
          type: boolean
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true

    #######
    # Moves
    #######
    MovesList:
      type: array
      description: |
        An array of `Moves`. Each object in the array can represent moves data for a specific VSA partner in the vessel or as an accumulated result for the remaining VSA partners in the vessel.
      items:
        $ref: '#/components/schemas/Moves'
    Moves:
      type: object
      title: Moves
      description: |
        Forecasted units of containers to move for loading and discharging, empty or laden, covering various types such as Dry, reefer, Out-of-Gauge (OOG), and units of containers to restow at a terminal. These can be detailed at varying levels of granularity.

        ### Multiple Moves Objects with Carrier Codes
        If `carrierCode` and `carrierCodeListProvider` are provided for multiple `Moves` objects, any object without these fields represents the accumulated result of moves for the remaining VSA partners in the vessel.
        
        ### Single Moves Object Without Carrier Codes
        If only one `Moves` object exists and does not include `carrierCode` and `carrierCodeListProvider`, it represents the accumulated result for all VSA partners on the vessel.

        ### Single Moves Object with Carrier Codes
        If only one `Moves` object exists and includes `carrierCode` and `carrierCodeListProvider`, it represents moves specifically for the indicated carrier.

        **Condition:** Can only be provided if `portCallServiceType` is `MOVES`
      properties:
        carrierCode:
          type: string
          description: |
            Providing this property means that the `Moves` is only related to this particular `carrierCode`. Omitting this property means that the `Moves` is an aggregated result from all VSA-Partners.

            The carrier code based on either the **SMDG** or **SCAC** code lists.

            **Condition:** This is required if `carrierCodeListProvider` is provided
          maxLength: 4
          pattern: ^\S+$
          example: MAEU
        carrierCodeListProvider:
          type: string
          description: |
            Identifies the code list provider used for the `carrierCode`. Possible values are:
              - `SMDG` (Ship Message Design Group)
              - `NMFTA` (National Motor Freight Traffic Association)

            **Condition:** This is required if `carrierCode` is provided
          example: NMFTA
          enum:
            - SMDG
            - NMFTA
        restows:
          $ref: '#/components/schemas/Restows'
      oneOf:
        - $ref: '#/components/schemas/TotalUnits'
        - $ref: '#/components/schemas/SpecificUnits'

    Restows:
      type: object
      title: Restows
      description: |
        Forecasted container units to restow, where containers are off loaded from on board the ship and put back onto the ship either at the same stow position or a different stow position.
      oneOf:
        - $ref: '#/components/schemas/TotalRestows'
        - $ref: '#/components/schemas/ContainerRestows'

    TotalRestows:
      type: object
      title: Total Restows
      additionalProperties: false
      description: |
        Forecasted total container units to restow.
      properties:
        totalRestows:
          type: integer
          format: int32
          description: |
            Forecasted total container units to restow.
          example: 155
      required:
        - totalRestows

    ContainerRestows:
      type: object
      title: Container Restows
      description: |
        Forecasted container units to restow, covering three sizes: `20-foot`, `40-foot` containers, and `45-foot` containers
      properties:
        _20_units:
          type: integer
          format: int32
          description: |
            Forecasted units of `20-foot` containers
          example: 25
        _40_units:
          type: integer
          format: int32
          description: |
            Forecasted units of `40-foot` containers
          example: 30
        _45_units:
          type: integer
          format: int32
          description: |
            Forecasted units of `45-foot` containers
          example: 30
      required:
        - _20_units
        - _40_units
        - _45_units

    TotalUnits:
      type: object
      title: Total Units (Dry + Reefer + OOG)
      additionalProperties: false
      description: |
        Forecasted total units of containers to move for loading and discharging, empty or laden, at a terminal, covering various types such as Dry, Reefer, Out-of-Gauge (OOG)
      properties:
        totalUnits:
          type: integer
          format: int32
          description: |
            Forecasted total units of containers to move for loading and discharging, empty or laden, at a terminal, covering various types such as Dry, Reefer, Out-of-Gauge (OOG)
          example: 155
      required:
        - totalUnits

    SpecificUnits:
      type: object
      title: Specific Units (for load and discharge)
      description: |
        Forecasted units of containers to move for loading and discharging, empty or laden, at a terminal, covering various types such as Dry, Reefer, Out-of-Gauge (OOG)
      properties:
        loadUnits:
          $ref: '#/components/schemas/LoadUnits'
        dischargeUnits:
          $ref: '#/components/schemas/DischargeUnits'

    LoadUnits:
      type: object
      title: Load Units
      description: |
        Forecasted total units of containers to move for loading, empty or laden, at a terminal, covering various types such as Dry, Reefer, Out-of-Gauge (OOG)
      properties:
        ladenContainerUnits:
          $ref: '#/components/schemas/LadenContainerUnits'
        emptyContainerUnits:
          $ref: '#/components/schemas/EmptyContainerUnits'
        reeferPluggedContainerUnits:
          $ref: '#/components/schemas/ReeferPluggedContainerUnits'
        oogUnits:
          type: integer
          format: int32
          description: |
            Forecasted Out-of-gauge (OOG) units
          example: 2
    DischargeUnits:
      type: object
      title: Discharge Units
      description: |
        Forecasted total units of containers to move for discharging, empty or laden, at a terminal, covering various types such as Dry, Reefer, Out-of-Gauge (OOG)
      properties:
        ladenContainerUnits:
          $ref: '#/components/schemas/LadenContainerUnits'
        emptyContainerUnits:
          $ref: '#/components/schemas/EmptyContainerUnits'
        reeferPluggedContainerUnits:
          $ref: '#/components/schemas/ReeferPluggedContainerUnits'
        oogUnits:
          type: integer
          format: int32
          description: |
            Forecasted Out-of-gauge (OOG) units
          example: 2

    LadenContainerUnits:
      type: object
      title: Laden Container Units
      description: |
        Forecasted laden containers
      oneOf:
        - $ref: '#/components/schemas/TotalUnits'
        - $ref: '#/components/schemas/ContainerUnits'

    ContainerUnits:
      type: object
      title: Container Units
      description: |
        Forecasted units of containers to move for `20-foot`, `40-foot` and `45-foot` containers
      properties:
        _20_units:
          type: integer
          format: int32
          description: |
            Forecasted units of `20-foot` containers
          example: 25
        _40_units:
          type: integer
          format: int32
          description: |
            Forecasted units of `40-foot` containers
          example: 30
        _45_units:
          type: integer
          format: int32
          description: |
            Forecasted units of `45-foot` containers
          example: 15
      required:
        - _20_units
        - _40_units
        - _45_units

    EmptyContainerUnits:
      type: object
      title: Empty Container Units
      description: |
        Forecasted empty containers
      oneOf:
        - $ref: '#/components/schemas/TotalUnits'
        - $ref: '#/components/schemas/ContainerUnits'

    ReeferPluggedContainerUnits:
      type: object
      title: Reefer Plugged Container Units
      description: |
        Forecasted reefer containers that are plugged
      oneOf:
        - $ref: '#/components/schemas/TotalUnits'
        - $ref: '#/components/schemas/ContainerUnits'

    ################
    # Error Response
    ################
    ErrorResponse:
      title: Error Response
      type: object
      description: Unexpected error
      properties:
        httpMethod:
          description: |
            The HTTP method used to make the request e.g. `GET`, `POST`, etc
          type: string
          example: POST
          enum:
            - GET
            - HEAD
            - POST
            - PUT
            - DELETE
            - OPTION
            - PATCH
        requestUri:
          description: |
            The URI that was requested.
          type: string
          example: /v2/port-call-services/0342254a-5927-4856-b9c9-aa12e7c00563
        statusCode:
          description: |
            The HTTP status code returned.
          type: integer
          format: int32
          example: 400
        statusCodeText:
          description: |
            A standard short description corresponding to the HTTP status code.
          type: string
          maxLength: 50
          example: Bad Request
        statusCodeMessage:
          description: |
            A long description corresponding to the HTTP status code with additional information.
          type: string
          maxLength: 200
          example: The supplied data could not be accepted
        providerCorrelationReference:
          description: |
            A unique identifier to the HTTP request within the scope of the API provider.
          type: string
          maxLength: 100
          example: 4426d965-0dd8-4005-8c63-dc68b01c4962
        errorDateTime:
          description: |
            The DateTime corresponding to the error occurring. Must be formatted using [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.
          type: string
          format: date-time
          example: '2024-09-04T09:41:00Z'
        errors:
          type: array
          description: |
            An array of errors providing more detail about the root cause.
          minItems: 1
          items:
            $ref: '#/components/schemas/DetailedError'
      required:
        - httpMethod
        - requestUri
        - statusCode
        - statusCodeText
        - errorDateTime
        - errors
    DetailedError:
      type: object
      title: Detailed Error
      description: |
        A detailed description of what has caused the error.
      properties:
        errorCode:
          type: integer
          format: int32
          description: |
            The detailed error code returned.

              - `7000-7999` Technical error codes
              - `8000-8999` Functional error codes
              - `9000-9999` API provider-specific error codes            

            [Error codes as specified by DCSA](https://developer.dcsa.org/standard-error-codes).
          minimum: 7000
          maximum: 9999
          example: 7003
        property:
          type: string
          maxLength: 100
          description: |
            The name of the property causing the error.
          example: facilityCode
        value:
          type: string
          maxLength: 500
          description: |
            The value of the property causing the error serialised as a string exactly as in the original request.
          example: SG SIN WHS
        jsonPath:
          type: string
          maxLength: 500
          description: |
            A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).
          example: $.location.facilityCode
        errorCodeText:
          description: |
            A standard short description corresponding to the `errorCode`.
          type: string
          maxLength: 100
          example: invalidData
        errorCodeMessage:
          type: string
          maxLength: 5000
          description: |
            A long description corresponding to the `errorCode` with additional information.
          example: Spaces not allowed in facility code
      required:
        - errorCodeText
        - errorCodeMessage
