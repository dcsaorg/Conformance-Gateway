{
  "openapi": "3.0.3",
  "info": {
    "title": "Operational Vessel Schedules",
    "description": "API specification issued by DCSA.org\r\n\r\nThis API supports <b>OVS</b> (Operational Vessel Schedules)\r\n\r\nThe Interface Standards for OVS and other documentation can be found on the [DCSA Website](https://dcsa.org/standards/operational-vessel-schedules/).\r\n\r\nFor explanation to specific values or objects please refer to the [Information Model](https://dcsa.org/wp-content/uploads/2024/01/DCSA-Information-Model-2023.Q4.pdf).\r\n\r\n### Stats API\r\nThe Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to the Operational Vessel Schedules API. Further details can be found [here](https://developer.dcsa.org/#/http/guides/api-guides/stats-api)\r\n\r\nFor a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/ovs/v3#v300). Please [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new)",
    "contact": {
      "name": "Digital Container Shipping Association (DCSA)",
      "url": "https://dcsa.org",
      "email": "info@dcsa.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "3.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "Operational Vessel Schedules",
      "description": " "
    }
  ],
  "paths": {
    "/v3/service-schedules": {
      "get": {
        "tags": [
          "Operational Vessel Schedules"
        ],
        "summary": "Get a list of Schedules",
        "description": "Get a list of service schedules. The result is `Vessel-Centric` - this means that the `Vessel` is in the top of the hierarchy of the response structure. A service is a heirarchical structure with the following elements:\r\n- One or more `Services` which can contain one or more `Vessels`\r\n- A `Vessel` which can call multiple `Ports` (`TransportCalls`).\r\n- A `Port` (`TransportCall`) can contain one or more `TimeStamps`.\r\n\r\nThe number of service schedules in the list can be narrowed down by providing filter parameters. The resulting payload will always include **entire voyage(s) being matched**. This means that even though a filter only matches a single `Port` in a `Voyage` or a single `Timestamp` within a `Port` in a `Voyage` - **the entire Voyage matched** is returned. If the `carrierImportVoyageNumber` of the `Port` differs from the `carrierExportVoyageNumber` of the `Port` then the **entire Voyage** for both these Voyage numbers are included.\r\n\r\nAn example of this is when `&UNLocationCode=DEHAM` is used as a filter parameter. In this case **entire Voyages** would be listed where `DEHAM` is a `Port`.\r\n\r\nBe aware that it is possible to specify filters that are mutially exclusive resulting in an empty response list. An example of this could be when both using `vesselIMONumber` and `vesselName` filters at the same time:\r\n\r\n&vesselIMONumber=9321483&vesselName=King of the Seas\r\n\r\nIf no `Vessel` exists where `vesselIMONumber` is **9321483** and `vesselName` is **King of the Seas** then the result will be an empty list\r\n\r\nIf no `startDate` filter is provided then **3 months** prior to the request data is used. If no `endDate` filters is provided then **6 months** after the request date is used.",
        "operationId": "get-v3-service-schedules",
        "parameters": [
          {
            "name": "carrierServiceName",
            "in": "query",
            "description": "The carrier service name to filter by. The result will only return schedules including the service name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Great Lion Service"
            }
          },
          {
            "name": "carrierServiceCode",
            "in": "query",
            "description": "The carrier specific service code to filter by. The result will only return schedules including the service code.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 11,
              "type": "string",
              "example": "FE1"
            }
          },
          {
            "name": "universalServiceReference",
            "in": "query",
            "description": "The **U**niversal **S**ervice **R**eference (`USR`) as defined by **DCSA** to filter by. The service code must match the regular expression pattern: `SR\\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`. The result will only return schedules including the service reference",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 8,
              "pattern": "^SR\\d{5}[A-Z]$",
              "type": "string",
              "example": "SR12345A"
            }
          },
          {
            "name": "vesselIMONumber",
            "in": "query",
            "description": "The identifier of a vessel. The result will only return schedules including the vessel with the specified IMO number.              It is not a requirement for dummy vessels to have an `IMO Number`. In this case filtering by `vesselName` should be used.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 7,
              "pattern": "^\\d{7}$",
              "type": "string",
              "example": "9321483"
            }
          },
          {
            "name": "vesselName",
            "in": "query",
            "description": "The name of a vessel. The result will only return schedules including the vessel with the specified name.              Be aware that the `vesselName` is not unique and might match multiple vessels. If possible, filtering by `IMO Number` is preferred.              In case of dummy vessels an `IMO Number` might not exist in which case this filter is to be used.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 35,
              "type": "string",
              "example": "King of the Seas"
            }
          },
          {
            "name": "carrierVoyageNumber",
            "in": "query",
            "description": "The carrier specific identifier of a `Voyage` - can be both **importVoyageNumber** and **exportVoyageNumber**. The result will only return schedules including the `Ports` where `carrierVoyageNumber` is either `carrierImportVoyageNumber` or `carrierExportVoyageNumber`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "2103S"
            }
          },
          {
            "name": "universalVoyageReference",
            "in": "query",
            "description": "The Universal Reference of a `Voyage` - can be both **importUniversalVoyageReference** and **exportUniversalVoyageReference**. The result will only return schedules including the `Ports` where `universalVoyageReference` is either `importUniversalVoyageReference` or `exportUniversalVoyageReference`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 5,
              "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
              "type": "string",
              "example": "2201N"
            }
          },
          {
            "name": "UNLocationCode",
            "in": "query",
            "description": "The `UN Location Code` specifying where a port is located.              Specifying this filter will only return schedules including **entire Voyages** related to this particular `UN Location Code`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 5,
              "minLength": 5,
              "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
              "type": "string",
              "example": "NLAMS"
            }
          },
          {
            "name": "facilitySMDGCode",
            "in": "query",
            "description": "The `facilitySMDGCode` specifying a specific facility (using SMDG Code). Be aware that the `facilitySMDGCode` does not contain a `UNLocationCode` - this must be specified in the `UNLocationCode` filter.              Specifying this filter will only return schedules including **entire Voyages** related to this particular `facilitySMDGCode`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "APM"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date of the period for which schedule information is requested. If a date of any Timestamp (`ATA`, `ETA` or `PTA`) inside a `PortCall` matches a date on or after (`â‰¥`) the `startDate` the **entire Voyage** (import- and export-Voyage) matching the `PortCall` will be included in the result. All matching is done towards local Date at the place of the port call.              If this filter is not provided the default value is **3 months** prior to request time.              The value is populated in `ISO 8601` date format.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-04-06"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date of the period for which schedule information is requested. If a date of any Timestamp (`ATA`, `ETA` or `PTA`) inside a `PortCall` matches a date on or before (`â‰¤`) the `endDate` the **entire Voyage**(import- and export-Voyage) matching the `PortCall` will be included in the result. All matching is done towards local Date at the place of the port call.              If this filter is not provided the default value is **6 months** after request time.              The value is populated in `ISO 8601` date format.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-04-10"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "3"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "number",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceSchedule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "https://dcsa.org/ovs/v3/service-schedules",
                      "statusCode": 400,
                      "statusCodeText": "Bad Request",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2019-11-12T07:41:00+08:30",
                      "errors": [
                        {
                          "errorCode": 7007,
                          "property": "UNLocationCode",
                          "value": "NA",
                          "errorCodeText": "invalidQuery",
                          "erorCodeMessage": "UNLocationCode does not exist"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "httpMethod": "GET",
                      "requestUri": "https://dcsa.org/ovs/v3/service-schedules",
                      "statusCode": 500,
                      "statusCodeText": "Internal Server Error",
                      "statusCodeMessage": "Cannot process request.",
                      "providerCorrelationReference": "4426d965-0dd8-4005-8c63-dc68b01c4962",
                      "errorDateTime": "2019-11-12T07:41:00+08:30",
                      "errors": []
                    }
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://localhost:3000"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "serviceSchedules": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ServiceSchedule"
        }
      },
      "ServiceSchedule": {
        "title": "ServiceSchedule",
        "required": [
          "carrierServiceCode",
          "carrierServiceName"
        ],
        "type": "object",
        "properties": {
          "carrierServiceName": {
            "maxLength": 50,
            "type": "string",
            "description": "The name of the service.",
            "example": "Great Lion Service"
          },
          "carrierServiceCode": {
            "maxLength": 11,
            "type": "string",
            "description": "The carrier-specific code of the service for which the schedule details are published.",
            "example": "FE1"
          },
          "universalServiceReference": {
            "maxLength": 8,
            "pattern": "^SR\\d{5}[A-Z]$",
            "type": "string",
            "description": "A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.",
            "example": "SR12345A"
          },
          "vesselSchedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VesselSchedule"
            }
          }
        }
      },
      "VesselSchedule": {
        "title": "VesselSchedule",
        "required": [
          "isDummyVessel",
          "vesselOperatorSMDGLinerCode"
        ],
        "type": "object",
        "properties": {
          "vesselOperatorSMDGLinerCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The carrier who is in charge of the vessel operation based on the SMDG code.\r\nIf not available at the moment of sharing the schedule, use `TBD` (To be defined).\r\nIn the case an operator is still using a code not from SMDG, use the available code.",
            "example": "HLC"
          },
          "vesselIMONumber": {
            "maxLength": 7,
            "pattern": "^\\d{7}$",
            "type": "string",
            "description": "The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd's register code, which does not change during the lifetime of the vessel\r\n\r\nCondition: If the vessel is not dummy, there needs to be an IMO. If the vessel is dummy, the IMO is optional.",
            "example": "9321483"
          },
          "vesselName": {
            "maxLength": 35,
            "type": "string",
            "description": "The name of the Vessel given by the Vessel Operator and registered with IMO.",
            "example": "King of the Seas"
          },
          "vesselCallSign": {
            "maxLength": 10,
            "type": "string",
            "description": "A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a threeletter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.",
            "example": "NCVV"
          },
          "isDummyVessel": {
            "type": "boolean",
            "description": "Is this a dummy vessel. In case no vessel has been asigned yet - this property can be set to `true` indicating that the vesselIMONumber does not exist."
          },
          "transportCalls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportCall"
            }
          }
        }
      },
      "TransportCall": {
        "title": "TransportCall",
        "required": [
          "carrierImportVoyageNumber",
          "transportCallReference"
        ],
        "type": "object",
        "properties": {
          "portVisitReference": {
            "maxLength": 50,
            "type": "string",
            "description": "The unique reference that can be used to link different `transportCallReferences` to the same port visit. The reference is provided by the port to uniquely identify a port call",
            "example": "NLAMS1234589"
          },
          "transportCallReference": {
            "maxLength": 100,
            "type": "string",
            "description": "The unique reference for a transport call. Itâ€™s the vessel operatorâ€™s responsibility to provide the Transport Call Reference, other parties are obliged to pick it up and use it. It can take the form of Port Call References as defined in OVS Definitions Document, or alternatively a reference as defined by the vessel operator.",
            "example": "SR11111X-9321483-2107W-NLAMS-ACT-1-1"
          },
          "carrierImportVoyageNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The identifier of an import voyage. The carrier-specific identifier of the import Voyage.",
            "example": "2103N"
          },
          "carrierExportVoyageNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The identifier of an export voyage. The carrier-specific identifier of the export Voyage.",
            "example": "2103S"
          },
          "universalImportVoyageReference": {
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWSR]`\r\n- `2 digits` for the year\r\n- `2 alphanumeric characters` for the sequence number of the voyage\r\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).",
            "example": "2103N"
          },
          "universalExportVoyageReference": {
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWSR]`\r\n- `2 digits` for the year\r\n- `2 alphanumeric characters` for the sequence number of the voyage\r\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).",
            "example": "2103N"
          },
          "location": {
            "description": "General purpose object to capture location-related data, the location can be specified in **one** of the following ways: `UN Location Code`, a `Facility` or an `Address`.",
            "discriminator": {
              "propertyName": "locationType",
              "mapping": {
                "UNLO": "#/components/schemas/UNLocationLocation",
                "FACS": "#/components/schemas/FacilitySMDGLocation",
                "ADDR": "#/components/schemas/AddressLocation"
              }
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/UNLocationLocation"
              },
              {
                "$ref": "#/components/schemas/FacilitySMDGLocation"
              },
              {
                "$ref": "#/components/schemas/AddressLocation"
              }
            ]
          },
          "statusCode": {
            "type": "string",
            "description": "The set of codes in `Status Code` are ONLY meant to communicate any change / exception to the published schedule. This is not required in case of normal schedule. Possible values are:\r\n\r\n- OMIT (Omit)\r\n- BLNK (Blank)\r\n- ADHO (Ad Hoc)\r\n- PHOT (Phase Out)\r\n- PHIN (Phase In)\r\n- SLID (Sliding)\r\n- ROTC (Rotation Change)\r\n- CUTR (Cut and Run)\r\n\r\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/ovs/v3/reference-data/portcallstatuscodes-v300.csv)",
            "example": "OMIT"
          },
          "timestamps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Timestamp"
            }
          }
        },
        "description": "\t\nA transportCall in the schedule. A transportCall can be either just a Port or further specified as a terminalCall.\n\nThe order of the list is the sequence of the list"
      },
      "UNLocationLocation": {
        "title": "UNLocationLocation",
        "required": [
          "UNLocationCode",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S+(\\s+\\S+)*$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "locationType": {
            "maxLength": 4,
            "type": "string",
            "description": "Discriminator used to identify this as a `UNLocation` location interface.",
            "example": "UNLO"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
            "example": "NLAMS"
          }
        },
        "description": "An interface used to express a location using a `Un Location Code`."
      },
      "FacilitySMDGLocation": {
        "title": "FacilitySMDGLocation",
        "required": [
          "UNLocationCode",
          "facilitySMDGCode",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "locationType": {
            "maxLength": 4,
            "type": "string",
            "description": "Discriminator used to identify this as a `Facility Location` interface only using `SMDG` code list.",
            "example": "FACS"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n - 2 characters for the country code using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://en.wikipedia.org/wiki/UN/LOCODE)",
            "example": "NLAMS"
          },
          "facilitySMDGCode": {
            "maxLength": 6,
            "type": "string",
            "description": "The code used for identifying the specific facility. This code does not include the UN Location Code.\n\nThe codeList used by SMDG is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)",
            "example": "ACT"
          }
        },
        "description": "An interface used to express a location using a `Facility` by the `SMDG` code list. The `facilitySMDGCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute."
      },
      "AddressLocation": {
        "title": "AddressLocation",
        "required": [
          "address",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "locationType": {
            "maxLength": 4,
            "type": "string",
            "description": "Discriminator used to identify this as an `Address` location interface.",
            "example": "ADDR"
          },
          "address": {
            "$ref": "#/components/schemas/AddressLocation_address"
          }
        },
        "description": "An interface used to express a location using an `Address` object."
      },
      "Timestamp": {
        "title": "Timestamp",
        "required": [
          "eventClassifierCode",
          "eventDateTime",
          "eventTypeCode"
        ],
        "type": "object",
        "properties": {
          "eventTypeCode": {
            "type": "string",
            "description": "Identifier for type of `transportEvent`\r\n\r\n- ARRI (Arrived)\r\n- DEPA (Departed)\r\n\r\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/ovs/v3/reference-data/transporteventtypecodes-v300.csv).",
            "enum": [
              "ARRI",
              "DEPA"
            ]
          },
          "eventClassifierCode": {
            "type": "string",
            "description": "Code for the event classifier. Values can vary depending on eventType.\n\nPossible values are:\n- ACT (Actual)\n- EST (Estimated)\n- PLN (Planned)\n",
            "enum": [
              "PLN",
              "EST",
              "ACT"
            ]
          },
          "eventDateTime": {
            "type": "string",
            "description": "Time in the timestamp",
            "format": "date-time",
            "example": "2025-01-14T09:21:00+01:00"
          },
          "delayReasonCode": {
            "maxLength": 3,
            "type": "string",
            "description": "Reason code for the delay. See SMDG [Code list DELAY](https://smdg.org/documents/smdg-code-lists/delay-reason-and-port-call-activity/) for a list of valid codes to be used for this attribute.",
            "example": "WEA"
          },
          "changeRemark": {
            "maxLength": 250,
            "type": "string",
            "description": "Free text field to provide information as to why the `TransportEvent` was sent.",
            "example": "Bad weather"
          }
        },
        "description": "\t\nA timestamp for a port."
      },
      "ErrorResponse": {
        "title": "ErrorResponse",
        "required": [
          "errorDateTime",
          "errors",
          "httpMethod",
          "requestUri",
          "statusCode",
          "statusCodeText"
        ],
        "type": "object",
        "properties": {
          "httpMethod": {
            "type": "string",
            "description": "The HTTP method used to make the request e.g. `GET`, `POST`, etc\n",
            "example": "POST",
            "enum": [
              "GET",
              "HEAD",
              "POST",
              "PUT",
              "DELETE",
              "OPTION",
              "PATCH"
            ]
          },
          "requestUri": {
            "type": "string",
            "description": "The URI that was requested.\n",
            "example": "/v1/events"
          },
          "statusCode": {
            "type": "integer",
            "description": "The HTTP status code returned.\n",
            "format": "int32",
            "example": 400
          },
          "statusCodeText": {
            "maxLength": 50,
            "type": "string",
            "description": "A standard short description corresponding to the HTTP status code.\n",
            "example": "Bad Request"
          },
          "statusCodeMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "A long description corresponding to the HTTP status code with additional information.\n",
            "example": "The supplied data could not be accepted"
          },
          "providerCorrelationReference": {
            "maxLength": 100,
            "type": "string",
            "description": "A unique identifier to the HTTP request within the scope of the API provider.\n",
            "example": "4426d965-0dd8-4005-8c63-dc68b01c4962"
          },
          "errorDateTime": {
            "type": "string",
            "description": "The DateTime corresponding to the error occuring. Must be formatted using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\n",
            "format": "date-time",
            "example": "2019-11-12T07:41:00+08:30"
          },
          "errors": {
            "type": "array",
            "description": "An array of errors provding more detail about the root cause.\n",
            "items": {
              "$ref": "#/components/schemas/DetailedError"
            }
          }
        },
        "description": "Unexpected error"
      },
      "AddressLocation_address": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Name of the address.",
            "example": "John"
          },
          "street": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the street of the partyâ€™s address.",
            "example": "Ruijggoordweg"
          },
          "streetNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The number of the street of the partyâ€™s address.",
            "example": "100"
          },
          "floor": {
            "maxLength": 50,
            "type": "string",
            "description": "The floor of the partyâ€™s street number.",
            "example": "N/A"
          },
          "postCode": {
            "maxLength": 50,
            "type": "string",
            "description": "The post code of the partyâ€™s address.",
            "example": "1047 HM"
          },
          "city": {
            "maxLength": 65,
            "type": "string",
            "description": "The city name of the partyâ€™s address.",
            "example": "Amsterdam"
          },
          "stateRegion": {
            "maxLength": 65,
            "type": "string",
            "description": "The state/region of the partyâ€™s address.",
            "example": "North Holland"
          },
          "country": {
            "maxLength": 75,
            "type": "string",
            "description": "The country of the partyâ€™s address.",
            "example": "The Netherlands"
          }
        },
        "description": "An object for storing address related information."
      },
      "DetailedError": {
        "title": "DetailedError",
        "required": [
          "errorCodeText"
        ],
        "type": "object",
        "properties": {
          "errorCode": {
            "maximum": 9999,
            "minimum": 7000,
            "type": "integer",
            "description": "The detailed error code returned.\n\n  - `7000-7999` Technical error codes\n  - `8000-8999` Functional error codes\n  - `9000-9999` API provider-specific error codes            \n\n[Error codes as specified by DCSA](https://dcsa.atlassian.net/wiki/spaces/DTG/pages/197132308/Standard+Error+Codes).\n",
            "format": "int32",
            "example": 7003
          },
          "property": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the property causing the error.\n",
            "example": "facilityCode"
          },
          "value": {
            "maxLength": 500,
            "type": "string",
            "description": "The value of the property causing the error serialised as a string exactly as in the original request.\n",
            "example": "SG SIN WHS"
          },
          "jsonPath": {
            "maxLength": 500,
            "type": "string",
            "description": "A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).\n",
            "example": "$.location.facilityCode"
          },
          "errorCodeText": {
            "maxLength": 100,
            "type": "string",
            "description": "A standard short description corresponding to the `errorCode`.\n",
            "example": "invalidData"
          },
          "erorCodeMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "A long description corresponding to the `errorCode` with additional information.\n",
            "example": "Spaces not allowed in facility code"
          }
        }
      }
    },
    "parameters": {
      "Limit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of items to return.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "minimum": 0,
          "type": "number",
          "default": 100
        }
      },
      "APIVersionMajor": {
        "name": "API-Version",
        "in": "header",
        "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "3"
        }
      }
    },
    "headers": {
      "API-Version": {
        "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "3.0.0"
        }
      }
    }
  }
}
