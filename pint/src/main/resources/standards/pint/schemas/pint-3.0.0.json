{
  "openapi": "3.0.3",
  "info": {
    "title": "DCSA eBL Platform Interoperability API",
    "description": "<h1>DCSA OpenAPI specification for electronic Bill of Lading (eBL) Platform Interoperability (PINT) standard </h1>\n\n<h2>The Envelope Transfer</h2>\n\nThe PINT API is designed to support transfer of eBL documents with non-repudiation and any number of additional documents between two eBL platforms. \n\nIn the most common scenario, the sending eBL platform executes the envelope transfer by:\n0. Optionally, using the [**'Receiver Validation'**](#/Receiver%20validation/post-receiver-validation) endpoint to allow the sending user to validate the identity of the receiver,  before they transfer the eBL.\n1. Initiating the envelope transfer using [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint\n2. Transferring the additional documents (one at the time) using [**'Transfer additional document'**](#/Transfer%20additional%20document) endpoint\n3. Completing the envelope transfer using [**'Finish envelope transfer'**](#/Finish%20envelope%20transfer) endpoint\n\n<h2>The eBL document</h2>\n\nThe envelope transfer from the sending eBL Platform to the receiving eBL Platform always contains the **eBL document** (transferred via [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint request body [`EblEnvelope.transportDocument`](#/EblEnvelope) schema object). The eBL document must be unchanged between different envelope transfers for the lifetime of the eBL document. \n\nThe PINT API is designed to support transfer of the following types of eBL documents:\n1. Straight eBL documents. This type of eBL document is defined by [`EblEnvelope.transportDocument.isToOrder`](#/EblEnvelope) attribute to `false`\n2. Blank-endorsed eBL documents. This type of eBL document is created by setting [`EblEnvelope.transportDocument.isToOrder`](#/EblEnvelope) attribute to `true`, and making sure that [`EblEnvelope.transportDocument.documentparties[]`](#/EblEnvelope) list does not contain document party where `DocumentParty.partyFunction` has value `END` (Endorsee)\n3. To-order/Negotiable eBL documents. This type of eBL document is created by setting the [`EblEnvelope.transportDocument.isToOrder`](#/EblEnvelope) attribute to `true`, and making sure that [`EblEnvelope.transportDocument.documentparties[]`](#/EblEnvelope) list contains document party where `DocumentParty.partyFunction` has value `END` (Endorsee). If the current endorsee party is also in possession of the eBL (possessor), this party can endorse some other party on the same eBL Platform (and make that other party new endorsee) by executing transaction with [`Transaction.action`](#/Transaction) type `ENDO` (Endorsement). The DCSA PINT API support To-order/Negotiable documents, however, given that not all of the eBL solution providers support the split between possession and endorsements, this doesn't apply yet to interoperable eBL\n\n<h2>The Additional Documents</h2>\n\nThe envelope transfer can optionally contain one or more **additional documents** which can be transferred via [**'Transfer additional document'**](#/Transfer%20additional%20document) endpoint:\n- **'Digital copy of the original physical B/L document' document** (described via [`EnvelopeManifest.eBLVisualisationByCarrier`](#/EnvelopeManifest) schema object that has been previously transferred via [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint as JWS-signed payload of [`EblEnvelope.envelopeManifestSignedContent`](#/EblEnvelope) schema object) a.k.a. **eBLVisualisationByCarrier document**. If transferred with the initial eBL envelope transfer, eBLVisualisationByCarrier document must be transferred with every subsequent envelope transfer for the lifetime of the eBL document. Also, eBLVisualisationByCarrier document must be unchanged between different envelope transfers for the lifetime of the eBL document.\n- **Supporting document** (described via entry in the [`EnvelopeManifest.supportingDocuments[]`](#/EnvelopeManifest) list object that has been previously transferred via [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint  as JWS-signed payload of [`EblEnvelope.envelopeManifestSignedContent`](#/EblEnvelope) schema object). For every envelope transfer, the sending platform can choose which supporting documents it wants to send to the receiving platform irrespective of the contents of the previously received envelope transfer. All details of the supporting documents transferred from sending to receiving platform as a part of the envelope transfer are only privy to these 2 platforms.\n\n<h2>Non-repudiation</h2> \n\nWhen receiving [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint request, the receiving platform should confirm the integrity of the received [`EblEnvelope`](#/EblEnvelope) schema object for non-repudiation purposes. Since it has been decided not to use JWS for signing of [`EblEnvelope`](#/EblEnvelope) (for network traffic optimization purposes) itself, the receiving platform can confirm the integrity of the envelope data by confirming integrity of the [`EblEnvelope.envelopeManifestSignedContent`](#/EblEnvelope) JWS-signed payload [`EnvelopeManifest`](#/EnvelopeManifest), and then use contents of [`EnvelopeManifest`](#/EnvelopeManifest) schema object to confirm the integrity of the other [`EblEnvelope`](#/EblEnvelope) schema object attributes (further details can be found in the description of [`EblEnvelope`](#/EblEnvelope) schema attributes).\n\nAt various stages during the envelope transfer process, the receiving platform can inform the sending platform whether envelope transfer has been accepted or rejected by sending the final response using the [`EnvelopeTransferFinishedResponse`](#/EnvelopeTransferFinishedResponse) schema object which has been wrapped in JWS-signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) schema object for non-repudiation purposes. All other response schema types are unsigned, and therefore they can not be used by the sending platform for the non-repudiation purposes.\n\n### API Design & Implementation Principles\nThis API follows the guidelines defined in version 2.1 of the API Design & Implementation Principles which can be found on the [DCSA Developer page](https://developer.dcsa.org/api_design)\n\nFor a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/pint/v3#v300).\nPlease [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\n",
    "contact": {
      "name": "Digital Container Shipping Association (DCSA)",
      "url": "https://dcsa.org",
      "email": "info@dcsa.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "3.0.0"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/dcsaorg/DCSA_EBL_PINT/3.0.0",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "tags": [
    {
      "name": "Receiver validation",
      "description": "Receiver validation"
    },
    {
      "name": "Start envelope transfer",
      "description": "Start envelope transfer"
    },
    {
      "name": "Transfer additional document",
      "description": "Transfer additional document"
    },
    {
      "name": "Finish envelope transfer",
      "description": "Finish envelope transfer"
    }
  ],
  "paths": {
    "/v3/envelopes": {
      "post": {
        "tags": [
          "Start envelope transfer"
        ],
        "summary": "Start the eBL envelope transfer",
        "description": "Start the eBL envelope transfer.\n",
        "operationId": "post-envelopes",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "3"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EblEnvelope"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Receiving platform either accepts the envelope transfer immediately (if there are no additional documents to be transferred, or if it concludes that it is already in the possession of all the additional documents mentioned in the [`EnvelopeManifest`](#/EnvelopeManifest)), or concludes that in has previously accepted the envelope transfer with the same contents.\n\nThe signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) that signals the accepted envelope transfer (`RECE` or `DUPE`).\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvelopeTransferFinishedResponseSignedContent"
                }
              }
            }
          },
          "201": {
            "description": "The Receiving platform acknowledges that the envelope transfer is now active for this envelope transfer request.\n\nThe sending platform should transfer all supporting documents listed in the [`EblEnvelope.envelopeManifestSignedContent`](#/EblEnvelope) JWS-signed payload [`EnvelopeManifest.supportingDocuments`](#/EnvelopeManifest) list, as well as eBLVisualisationByCarrier document if attribute [`EnvelopeManifest.eBLVisualisationByCarrier`](#/EnvelopeManifest) was defined, prior to sending request to finish the envelope transfer.\n\nIf the sending platform attempts to start a new envelope transfer for an eBL that already has the active envelope transfer that is not yet completed, the receiving platform should assume that the sending platform is retrying the envelope transfer. The receiving platform should assume that the sending platform is aware that the previous envelope transfer failed or that the sending platform is not aware that the previous envelope transfer started.\n\nThe [`EnvelopeTransferStartedResponse`](#/EnvelopeTransferStartedResponse) response is unsigned. The sending platform is required to finish the envelope transfer via [**'Finish envelope transfer'**](#/Finish%20envelope%20transfer) endpoint in order to get a signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) with the JWS-signed payload `EnvelopeTransferFinishedResponse` carrying the information whether the receiving platform has accepted or rejected the envelope transfer.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvelopeTransferStartedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Receiving platform rejects the envelope transfer.\n\nThe signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value that signals the rejected envelope transfer (`BENV` or `BSIG`).\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvelopeTransferFinishedResponseSignedContent"
                }
              }
            }
          },
          "default": {
            "description": "Request failed for the unexpected reason. The unsigned response contains all the error details.\n\nThe sending platform is required to retry the envelope transfer until they get a signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) with the JWS-signed payload [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value providing the information whether the receiving platform has accepted or rejected the envelope transfer.  \n\nIn the rare corner cases, the unsigned `error` response could come from middleware and hide a true envelope transfer acceptance/rejection message. The sending platform will be liable if they act on an unsigned response that does *not* match the actions of the receiving platform.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/envelopes/{envelopeReference}/additional-documents/{documentChecksum}": {
      "put": {
        "tags": [
          "Transfer additional document"
        ],
        "summary": "Transfer additional document associated with the eBL envelope transfer",
        "description": "Transfer **additional document** associated with an eBL envelope transfer. The transferred document should be either one of the **supporting documents** from the [`EnvelopeManifest.supportingDocuments`](#/EnvelopeManifest) list, or **eBLVisualisationByCarrier document** if attribute [`EnvelopeManifest.eBLVisualisationByCarrier`](#/EnvelopeManifest) was defined.\n\nThe `requestBody` should contain the document being transferred. It is recommended to use the `application/json` media type for the `requestBody`. The media type provided in the initial `ISSU` (Issuance) transaction is the one that will be associated with the transferred additional document in the end.\n\nThe receiving platform should check that the transferred document has been declared at the start of the eBL envelope transfer.\nThis should be done by verifying that the `documentChecksum` URL path parameter matches either [`EnvelopeManifest.eBLVisualisationByCarrier.documentChecksum`](#/EnvelopeManifest) attribute value (in which case the receiving platform can conclude that the sending platform has transferred the **eBLVisualisationByCarrier document**), or one of the [`DocumentMetadata.documentChecksum`](#/DocumentMetadata) values from the [`EnvelopeManifest.supportingDocuments[]`](#/EnvelopeManifest) list (in which case the receiving platform can conclude that the sending platform has transferred the **supporting document**)\n \nFurthermore, the receiving platform should compute the SHA-256 checksum of the transferred additional document, and verify that it matches the value of `documentChecksum` URL path parameter. The SHA-256 checksum MUST be calculated based on the deserialized payload.\n\nIf all the above mentioned verifications have been successfully, the receiving platform can conclude that the additional document was transferred successfully.\n",
        "operationId": "put-additional-documents",
        "parameters": [
          {
            "name": "envelopeReference",
            "in": "path",
            "description": "The receiving platform-provided unique identifier for the given eBL envelope.\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "4TkP5nvgTly0MwFrDxfIkR2rvOjkUIgzibBoKABU"
            }
          },
          {
            "name": "documentChecksum",
            "in": "path",
            "description": "The checksum of the document computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 64,
              "minLength": 64,
              "pattern": "^[0-9a-f]+$",
              "type": "string",
              "example": "7d00064ed0b90467ff7aff6032d8e2d94845745b6590895cd95708d2ee4243d8"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "3"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "description": "A Base64 encoded payload containing the file to transfer.\n",
                "format": "byte",
                "example": "UmF3IGNvbnRlbnQgb2YgdGhlIGZpbGUgYmVpbmcgdHJhbnNmZXJyZWQ="
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The receiving platform acknowledges that the additional document was transferred successfully.\n\nIf the envelope transfer eventually gets accepted,the receiving platform will acknowledge the additional document transfer with a JWS-signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) containing JWS-signed payload [`EnvelopeTransferFinishedResponse.receivedAdditionalDocumentChecksums[]`](#/EnvelopeTransferFinishedResponse) list containing the additional document checksum. Therefore, this is unsigned response.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            }
          },
          "409": {
            "description": "The Receiving platform has discovered conflict between the request and the current state of the envelope transfer.\nE.g. the checksum or the size of the transferred additional document does not match the data provided in the URL path or in the request at the start of the envelope transfer.\n\nThe signed response `EnvelopeTransferFinishedResponseSignedContent` JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value that signals the issue with the envelope transfer that does *not* reject the envelope transfer (`INCD`).\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvelopeTransferFinishedResponseSignedContent"
                }
              }
            }
          },
          "422": {
            "description": "The Receiving platform rejects the envelope transfer.\n\nThe signed response `EnvelopeTransferFinishedResponseSignedContent` JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value that signals the rejected envelope transfer (`BENV` or `BSIG`).\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvelopeTransferFinishedResponseSignedContent"
                }
              }
            }
          },
          "default": {
            "description": "Request failed for the unexpected reason. The unsigned response contains all the error details.\n\nThe sending platform is required to retry the additional document transfer until they get a signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) with the JWS-signed payload [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value providing the information whether the receiving platform has accepted or rejected the envelope transfer.  \n\nIn the rare corner cases, the unsigned `error` response could come from middleware and hide a true envelope transfer acceptance/rejection message. The sending platform will be liable if they act on an unsigned response that does *not* match the actions of the receiving platform.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/envelopes/{envelopeReference}/finish-transfer": {
      "put": {
        "tags": [
          "Finish envelope transfer"
        ],
        "summary": "Finish the eBL envelope transfer",
        "description": "Finish the eBL envelope transfer.\n\nThe sending platform believes all additional documents have been transferred and the envelope transfer can now be completed. \n\nPrior to accepting envelope transfer, the receiving platform should ensure that all supporting documents listed in the [`EnvelopeManifest.supportingDocument`](#/EnvelopeManifest) list have been successfully transferred, as well as eBLVisualisationByCarrier document if attribute [`EnvelopeManifest.eBLVisualisationByCarrier`](#/EnvelopeManifest) was defined. Otherwise, The receiving platform should reject the envelope transfer.\n",
        "operationId": "put-finish-transfer",
        "parameters": [
          {
            "name": "envelopeReference",
            "in": "path",
            "description": "The receiving platform-provided unique identifier for the given eBL envelope.\n",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "4TkP5nvgTly0MwFrDxfIkR2rvOjkUIgzibBoKABU"
            }
          },
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Receiving platform accepts the envelope transfer.\n\nThe signed response `EnvelopeTransferFinishedResponseSignedContent` JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value that signals the accepted envelope transfer (`RECE` or `DUPE`).\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvelopeTransferFinishedResponseSignedContent"
                }
              }
            }
          },
          "409": {
            "description": "The Receiving platform has discovered conflict between the request and the current state of the envelope transfer.\n\nThe signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value that signals the issue with the envelope transfer that does *not* reject the envelope transfer (`DISE` or `MDOC`).\n\nIn the case of `MDOC` [`responseCode`](#/EnvelopeTransferFinishedResponse), the receiving platform cannot accept the envelope transfer due to one or more missing additional documents. In this case, the sending platform should (re)send the missing documents (provided in [`EnvelopeTransferFinishedResponse.missingAdditionalDocumentChecksums[]`](#/EnvelopeTransferFinishedResponse) list)  and then retry to finish the envelope transfer.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvelopeTransferFinishedResponseSignedContent"
                }
              }
            }
          },
          "422": {
            "description": "The Receiving platform rejects the envelope transfer.\n\nThe signed response `EnvelopeTransferFinishedResponseSignedContent` JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value that signals the rejected envelope transfer (`BENV` or `BSIG`).\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvelopeTransferFinishedResponseSignedContent"
                }
              }
            }
          },
          "default": {
            "description": "Request failed for the unexpected reason. The unsigned response contains all the error details.\n\nThe sending platform should retry to finish the envelope transfer until it gets the signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) with the JWS-signed payload [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value providing the information whether the receiving platform has accepted or rejected the envelope transfer.  \n\nIn the rare corner cases, the unsigned `error` response could come from middleware and hide a true envelope transfer acceptance/rejection message. The sending platform will be liable if they act on an unsigned response that does *not* match the actions of the receiving platform.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/receiver-validation": {
      "post": {
        "tags": [
          "Receiver validation"
        ],
        "summary": "Enable a user to validate the receiver",
        "description": "Request the name of a party given a party code. This enables the sending user to validate\nthe receiver information (similar how bank transfers enable users to conform the receiver\nbefore confirming the transfer).\n\nA successful response to this query asserts that the platform will accept an eBL for the\naccount or user denoted by the provided identifying code and that said account or user\nis \"active and able to accept interoperable eBLs\" as defined by the platform hosting\nthe account or user.\n\nThe transfer can still be rejected due to an unknown user if the transfer has\nmultiple conflicting identifying codes. Platforms that supports using multiple identifying\ncodes when transferring an eBL will need to consider how they ensure they do not by accident\ninclude conflicting codes.\n",
        "operationId": "post-receiver-validation",
        "parameters": [
          {
            "name": "API-Version",
            "in": "header",
            "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "3"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentifyingCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "On a successful match, this response includes the relevant information that should be displayed to the user\nto help them assert they have the correct party.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiverValidationResponse"
                }
              }
            }
          },
          "404": {
            "description": "If the server cannot identify an account or user via the given party code, then it should use this\nresponse code. This response is also applicable if the query matches multiple distinct accounts or\nwhen the platform would reject a transfer request to said account or user.\n\nNote this code is also used, if the client is using a code list provider that the server cannot\n(or will not) support. As an example, platforms are not required to support codes issued by\nother eBL platforms and can unconditionally reject lookup requests for them with this response.\n\nThe response is deliberately vague on negative results to limit data exposure by default. The\nserver may at its discretion include more details about the underlying issue in the response\nbody.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Request failed for the unexpected reason. The unsigned response contains all the error details.\n",
            "headers": {
              "API-Version": {
                "$ref": "#/components/headers/API-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DocumentChecksum": {
        "maxLength": 64,
        "minLength": 64,
        "pattern": "^[0-9a-f]+$",
        "type": "string",
        "description": "The checksum of the document computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234). The transport document must be in the [RFC 8785](https://datatracker.ietf.org/doc/html/rfc8785) canonical form before the checksum is computed.\n",
        "example": "76a7d14c83d7268d643ae7345c448de60701f955d264a743e6928a0b8268b24f"
      },
      "ErrorResponse": {
        "title": "Error Response",
        "required": [
          "errorDateTime",
          "errors",
          "httpMethod",
          "requestUri",
          "statusCode",
          "statusCodeText"
        ],
        "type": "object",
        "properties": {
          "httpMethod": {
            "type": "string",
            "description": "The HTTP method used to make the request e.g. `GET`, `POST`, etc\n",
            "example": "POST",
            "enum": [
              "GET",
              "HEAD",
              "POST",
              "PUT",
              "DELETE",
              "OPTION",
              "PATCH"
            ]
          },
          "requestUri": {
            "type": "string",
            "description": "The URI that was requested.\n",
            "example": "/v1/events"
          },
          "statusCode": {
            "type": "integer",
            "description": "The HTTP status code returned.\n",
            "format": "int32",
            "example": 400
          },
          "statusCodeText": {
            "maxLength": 50,
            "type": "string",
            "description": "A standard short description corresponding to the HTTP status code.\n",
            "example": "Bad Request"
          },
          "statusCodeMessage": {
            "maxLength": 200,
            "type": "string",
            "description": "A long description corresponding to the HTTP status code with additional information.\n",
            "example": "The supplied data could not be accepted"
          },
          "providerCorrelationReference": {
            "maxLength": 100,
            "type": "string",
            "description": "A unique identifier to the HTTP request within the scope of the API provider.\n",
            "example": "4426d965-0dd8-4005-8c63-dc68b01c4962"
          },
          "errorDateTime": {
            "type": "string",
            "description": "The DateTime corresponding to the error occurring. Must be formatted using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\n",
            "format": "date-time",
            "example": "2024-09-04T09:41:00Z"
          },
          "errors": {
            "minItems": 1,
            "type": "array",
            "description": "An array of errors providing more detail about the root cause.\n",
            "items": {
              "$ref": "#/components/schemas/DetailedError"
            }
          }
        },
        "description": "Unexpected error"
      },
      "DetailedError": {
        "title": "Detailed Error",
        "required": [
          "errorCodeMessage",
          "errorCodeText"
        ],
        "type": "object",
        "properties": {
          "errorCode": {
            "maximum": 9999,
            "minimum": 7000,
            "type": "integer",
            "description": "The detailed error code returned.\n\n  - `7000-7999` Technical error codes\n  - `8000-8999` Functional error codes\n  - `9000-9999` API provider-specific error codes            \n\n[Error codes as specified by DCSA](https://dcsa.atlassian.net/wiki/spaces/DTG/pages/197132308/Standard+Error+Codes).\n",
            "format": "int32",
            "example": 7003
          },
          "property": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the property causing the error.\n",
            "example": "facilityCode"
          },
          "value": {
            "maxLength": 500,
            "type": "string",
            "description": "The value of the property causing the error serialised as a string exactly as in the original request.\n",
            "example": "SG SIN WHS"
          },
          "jsonPath": {
            "maxLength": 500,
            "type": "string",
            "description": "A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).\n",
            "example": "$.location.facilityCode"
          },
          "errorCodeText": {
            "maxLength": 100,
            "type": "string",
            "description": "A standard short description corresponding to the `errorCode`.\n",
            "example": "invalidData"
          },
          "errorCodeMessage": {
            "maxLength": 5000,
            "type": "string",
            "description": "A long description corresponding to the `errorCode` with additional information.\n",
            "example": "Spaces not allowed in facility code"
          }
        },
        "description": "A detailed description of what has caused the error.\n"
      },
      "EblEnvelope": {
        "title": "Ebl Envelope",
        "required": [
          "envelopeManifestSignedContent",
          "envelopeTransferChain",
          "transportDocument"
        ],
        "type": "object",
        "properties": {
          "transportDocument": {
            "$ref": "#/components/schemas/TransportDocument"
          },
          "envelopeManifestSignedContent": {
            "$ref": "#/components/schemas/EnvelopeManifestSignedContent"
          },
          "envelopeTransferChain": {
            "type": "array",
            "description": "The ordered list of [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entries associated with the eBL document.\n\nThe receiving platform is required to validate that all the list entries are present, valid, and they are correctly ordered by:\n1. Computing the SHA-256 checksum of the last [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the `envelopeTransferChain[]` list, and confirming it's equal to received `EblEnvelope.envelopeManifestSignedContent` JWS-signed payload [`EnvelopeManifest.lastEnvelopeTransferChainEntrySignedContentChecksum`](#/EnvelopeManifest) attribute value. \n2. Walking back through the `envelopeTransferChain[]` list from the last entry, for each previous [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the list, computing the SHA-256 checksum and confirming it's equal to the current [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry JWT-signed payload [`EnvelopeTransferChainEntry.previousEnvelopeTransferChainEntrySignedContentChecksum`](#/EnvelopeTransferChainEntry) attribute value.\n\nThe receiving platform can reject the envelope with `BENV` [`responseCode`](#/EnvelopeTransferFinishedResponse) if it concludes that the list entries are not correctly ordered by the sending platform, or discovers any other validity-related issue in the list.\n\nThe first [`EnvelopeTransferChainEntry`](#/EnvelopeTransferChainEntry) in the `envelopeTransferChain[]` list should contain the ISSU (issuance) transaction as the first transaction in the [`EnvelopeTransferChainEntry.transactions[]`](#/EnvelopeTransferChainEntry) list. \n",
            "items": {
              "$ref": "#/components/schemas/EnvelopeTransferChainEntrySignedContent"
            }
          }
        }
      },
      "ReceiverValidationResponse": {
        "title": "Receiver Validation Response",
        "required": [
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 70,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "Globeteam"
          }
        },
        "description": "Response to a receiver validation response, where the party code could successfully identified.\n"
      },
      "EnvelopeManifest": {
        "title": "Envelope Manifest",
        "required": [
          "lastEnvelopeTransferChainEntrySignedContentChecksum",
          "supportingDocuments",
          "transportDocumentChecksum"
        ],
        "type": "object",
        "properties": {
          "transportDocumentChecksum": {
            "maxLength": 64,
            "minLength": 64,
            "pattern": "^[0-9a-f]+$",
            "type": "string",
            "description": "The checksum of the eBL document (a.k.a. transport document) computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).\n\nIn order to guard itself against different types of MITM attacks (e.g. 'replay attack' where last entry in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list is replaced with the similar entry extracted from the another envelope transfer previously sent by the same sending platform), upon start of the envelope transfer the receiving platform should validate that the [`EnvelopeManifest.transportDocumentChecksum`](#/EnvelopeManifest) attribute and the [`EnvelopeTransferChainEntry.transportDocumentChecksum`](#/EnvelopeTransferChainEntry) attribute of the last entry in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list have the same value.\n\nThe checksum is computed on the [canonical form of the JSON object](https://gibson042.github.io/canonicaljson-spec/).\n",
            "example": "583c29ab3e47f2d80899993200d3fbadb9f8a367f3a39f715935c46d7a283006"
          },
          "lastEnvelopeTransferChainEntrySignedContentChecksum": {
            "maxLength": 64,
            "minLength": 64,
            "pattern": "^[0-9a-f]+$",
            "type": "string",
            "description": "This attribute should contain the checksum of the last [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list. The checksum is computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).\n",
            "example": "20a0257b313ae08417e07f6555c4ec829a512c083f3ead16b41158018a22abe9"
          },
          "eBLVisualisationByCarrier": {
            "description": "actual type: [`DocumentMetadata`](#\\DocumentMetadata)\n\nThis attribute is used to simplify validation of the document metadata of the **'Digital copy of the original physical B/L document' document** a.k.a. **eBLVisualisationByCarrier document**. If this attribute is defined, for each [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list, JWS-signed payload [`EnvelopeTransferChainEntry.eBLVisualisationByCarrier`](#/EnvelopeTransferChainEntry) attribute value should be identical to the value of this attribute.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DocumentMetadata"
              }
            ]
          },
          "supportingDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMetadata"
            }
          }
        }
      },
      "EnvelopeManifestSignedContent": {
        "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_\\-\\+\\/=]+)$",
        "type": "string",
        "description": "JWS content with compact serialization according to [RFC 7515](https://datatracker.ietf.org/doc/html/rfc7515#section-7.1). JWS-signed payload is defined in schema [EnvelopeManifest](#/EnvelopeManifest).\n",
        "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IlVhRVdLNmt2ZkRITzNZT2NwUGl2M1RCT2JQTzk2SFZhR2U0czFhUUxBZU0ifQ.eyJkb2N1bWVudEhhc2giOiI4ZGM5OWQ4YWM5MjIyNDBjNTVjMDM4NDVmNDlkZWY2NDE4NzE0NjY1MWJhZTRmOWE2MzEzMTI3N2NmMDBkOWRmIiwicHJldmlvdXNFbnZlbG9wZUhhc2giOm51bGwsInRyYW5zYWN0aW9ucyI6W3siYWN0aW9uIjoiSVNTVSIsImNvbW1lbnRzIjoiVGhlIEIvTCBoYXMgYmVlbiBpc3N1ZWQuIiwidGltZXN0YW1wIjoxNjU4Mzg1MTY2MzAyNDQyMjAwLCJpc1RvT3JkZXIiOnRydWUsInBsYXRmb3JtSG9zdCI6ImxvY2FsaG9zdDo4NDQzIiwidHJhbnNmZXJlZSI6IjQzNTQ5ODUwMjQ4QGxvY2FsaG9zdDo4NDQzIn1dfQ.c4SJ9-61fE6RmeIuZ3EI-TSM0M6qXuOudtr3YhpDjqVMaYk_RYpaWYvw75ssTbjgGFKTBKCy5lpmOfb8Fq--Qu2k0MWbH6qdX5jTYwl0DX946RQg-hnmVTg9np3bmqVeKqKURyV-UUdG-KK_XCGzPZ-lZkeUlpMcIthQFs0pCODR9GPytv7ZXLPZFOmHM9fn3FD2yRqVhQzcs7HdcxMjCx6hkBW8Z-jW4qteVy2_E9uqjkKwlu_cQLoY83Z0mcjn0PZNQvKF10x7q1_Jjf_Su19UigTUu3pFMrzo4iPS_jcrFoIb3TSZNSzbgAwtujSBFOufPDyEmxlx1sH0ZowMvA"
      },
      "IssuanceManifest": {
        "title": "Issuance Manifest",
        "required": [
          "documentChecksum",
          "issueToChecksum"
        ],
        "type": "object",
        "properties": {
          "documentChecksum": {
            "maxLength": 64,
            "minLength": 64,
            "pattern": "^[0-9a-f]+$",
            "type": "string",
            "description": "The checksum of the transport document computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234). The transport document must be in the [RFC 8785](https://datatracker.ietf.org/doc/html/rfc8785) canonical form before the checksum is computed.\n",
            "example": "76a7d14c83d7268d643ae7345c448de60701f955d264a743e6928a0b8268b24f"
          },
          "eBLVisualisationByCarrierChecksum": {
            "maxLength": 64,
            "minLength": 64,
            "pattern": "^[0-9a-f]+$",
            "type": "string",
            "description": "The checksum of the document computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234). The checksum is computed on the `content` field in its decoded form.\n",
            "example": "76a7d14c83d7268d643ae7345c448de60701f955d264a743e6928a0b8268b24f"
          },
          "issueToChecksum": {
            "maxLength": 64,
            "minLength": 64,
            "pattern": "^[0-9a-f]+$",
            "type": "string",
            "description": "The checksum of the `issueTo` attribute computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234). The value must be in the [RFC 8785](https://datatracker.ietf.org/doc/html/rfc8785) canonical form before the checksum is computed.\n",
            "example": "76a7d14c83d7268d643ae7345c448de60701f955d264a743e6928a0b8268b24f"
          }
        },
        "description": "Checksums of the carrier provided documents from the issuance time.\n"
      },
      "EnvelopeTransferChainEntry": {
        "title": "Envelope Transfer Chain Entry",
        "required": [
          "eblPlatform",
          "transactions",
          "transportDocumentChecksum"
        ],
        "type": "object",
        "properties": {
          "eblPlatform": {
            "maxLength": 4,
            "pattern": "^\\S+$",
            "type": "string",
            "description": "The EBL platform of the transaction party. \nThe value **MUST** be one of:\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ESSD` (EssDOCS)\n- `IDT` (ICE Digital Trade)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGO)\n- `ETEU` (eTEU)\n- `TRAC` (TRACE Original)\n- `BRIT` (BRITC eBL)\n",
            "example": "BOLE"
          },
          "transportDocumentChecksum": {
            "maxLength": 64,
            "minLength": 64,
            "pattern": "^[0-9a-f]+$",
            "type": "string",
            "description": "The checksum of the eBL document (a.k.a. transport document) computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).\n\nIn order to guard itself against different types of MITM attacks (e.g. 'replay attack' where last entry in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list is replaced with the similar entry extracted from the another envelope transfer previously sent by the same sending platform), upon start of the envelope transfer the receiving platform should validate that the [`EnvelopeManifest.transportDocumentChecksum`](#/EnvelopeManifest) attribute and the [`EnvelopeTransferChainEntry.transportDocumentChecksum`](#/EnvelopeTransferChainEntry) attribute of the last entry in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list have the same value.\n\nThe checksum is computed on the [canonical form of the JSON object](https://gibson042.github.io/canonicaljson-spec/).\n",
            "example": "583c29ab3e47f2d80899993200d3fbadb9f8a367f3a39f715935c46d7a283006"
          },
          "previousEnvelopeTransferChainEntrySignedContentChecksum": {
            "maxLength": 64,
            "minLength": 64,
            "pattern": "^[0-9a-f]+$",
            "type": "string",
            "description": "This attribute should *not* be defined for the first entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list. For all other entries after the first entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list, this attribute **must** be defined and contain the checksum of the previous [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list. This attribute can be used to track signed envelope transfers between platforms (for details check description of [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope)).\n\nThe checksum is computed over the entire [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry (JWS-signed payload is described in the `EnvelopeTransferChainEntry` schema). The checksum is computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).\n",
            "nullable": true,
            "example": "20a0257b313ae08417e07f6555c4ec829a512c083f3ead16b41158018a22abe9"
          },
          "issuanceManifestSignedContent": {
            "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_\\-\\+\\/=]+)$",
            "type": "string",
            "description": "JWS content with compact serialization according to [RFC 7515](https://datatracker.ietf.org/doc/html/rfc7515#section-7.1). JWS-signed payload is defined in schema [IssuanceManifest](#/IssuanceManifest).\nThe field is conditional and must be provided in the first EnvelopeTransferChainEntry. The value must be signed by the carrier.\n",
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IlVhRVdLNmt2ZkRITzNZT2NwUGl2M1RCT2JQTzk2SFZhR2U0czFhUUxBZU0ifQ.eyJkb2N1bWVudEhhc2giOiI4ZGM5OWQ4YWM5MjIyNDBjNTVjMDM4NDVmNDlkZWY2NDE4NzE0NjY1MWJhZTRmOWE2MzEzMTI3N2NmMDBkOWRmIiwicHJldmlvdXNFbnZlbG9wZUhhc2giOm51bGwsInRyYW5zYWN0aW9ucyI6W3siYWN0aW9uIjoiSVNTVSIsImNvbW1lbnRzIjoiVGhlIEIvTCBoYXMgYmVlbiBpc3N1ZWQuIiwidGltZXN0YW1wIjoxNjU4Mzg1MTY2MzAyNDQyMjAwLCJpc1RvT3JkZXIiOnRydWUsInBsYXRmb3JtSG9zdCI6ImxvY2FsaG9zdDo4NDQzIiwidHJhbnNmZXJlZSI6IjQzNTQ5ODUwMjQ4QGxvY2FsaG9zdDo4NDQzIn1dfQ.c4SJ9-61fE6RmeIuZ3EI-TSM0M6qXuOudtr3YhpDjqVMaYk_RYpaWYvw75ssTbjgGFKTBKCy5lpmOfb8Fq--Qu2k0MWbH6qdX5jTYwl0DX946RQg-hnmVTg9np3bmqVeKqKURyV-UUdG-KK_XCGzPZ-lZkeUlpMcIthQFs0pCODR9GPytv7ZXLPZFOmHM9fn3FD2yRqVhQzcs7HdcxMjCx6hkBW8Z-jW4qteVy2_E9uqjkKwlu_cQLoY83Z0mcjn0PZNQvKF10x7q1_Jjf_Su19UigTUu3pFMrzo4iPS_jcrFoIb3TSZNSzbgAwtujSBFOufPDyEmxlx1sH0ZowMvA"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "EnvelopeTransferChainEntrySignedContent": {
        "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_\\-\\+\\/=]+)$",
        "type": "string",
        "description": "JWS content with compact serialization according to [RFC 7515](https://datatracker.ietf.org/doc/html/rfc7515#section-7.1). JWS-signed payload is defined in schema [EnvelopeTransferChainEntry](#/EnvelopeTransferChainEntry).\n",
        "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IlVhRVdLNmt2ZkRITzNZT2NwUGl2M1RCT2JQTzk2SFZhR2U0czFhUUxBZU0ifQ.eyJkb2N1bWVudEhhc2giOiI4ZGM5OWQ4YWM5MjIyNDBjNTVjMDM4NDVmNDlkZWY2NDE4NzE0NjY1MWJhZTRmOWE2MzEzMTI3N2NmMDBkOWRmIiwicHJldmlvdXNFbnZlbG9wZUhhc2giOm51bGwsInRyYW5zYWN0aW9ucyI6W3siYWN0aW9uIjoiSVNTVSIsImNvbW1lbnRzIjoiVGhlIEIvTCBoYXMgYmVlbiBpc3N1ZWQuIiwidGltZXN0YW1wIjoxNjU4Mzg1MTY2MzAyNDQyMjAwLCJpc1RvT3JkZXIiOnRydWUsInBsYXRmb3JtSG9zdCI6ImxvY2FsaG9zdDo4NDQzIiwidHJhbnNmZXJlZSI6IjQzNTQ5ODUwMjQ4QGxvY2FsaG9zdDo4NDQzIn1dfQ.c4SJ9-61fE6RmeIuZ3EI-TSM0M6qXuOudtr3YhpDjqVMaYk_RYpaWYvw75ssTbjgGFKTBKCy5lpmOfb8Fq--Qu2k0MWbH6qdX5jTYwl0DX946RQg-hnmVTg9np3bmqVeKqKURyV-UUdG-KK_XCGzPZ-lZkeUlpMcIthQFs0pCODR9GPytv7ZXLPZFOmHM9fn3FD2yRqVhQzcs7HdcxMjCx6hkBW8Z-jW4qteVy2_E9uqjkKwlu_cQLoY83Z0mcjn0PZNQvKF10x7q1_Jjf_Su19UigTUu3pFMrzo4iPS_jcrFoIb3TSZNSzbgAwtujSBFOufPDyEmxlx1sH0ZowMvA"
      },
      "EnvelopeTransferStartedResponse": {
        "title": "Envelope Transfer Started Response",
        "required": [
          "envelopeReference",
          "lastEnvelopeTransferChainEntrySignedContentChecksum",
          "missingAdditionalDocumentChecksums",
          "transportDocumentChecksum"
        ],
        "type": "object",
        "properties": {
          "envelopeReference": {
            "maxLength": 100,
            "type": "string",
            "description": "Opaque receiving platform-provided identifier for a given eBL envelope.\n",
            "example": "4TkP5nvgTly0MwFrDxfIkR2rvOjkUIgzibBoKABU"
          },
          "transportDocumentChecksum": {
            "maxLength": 64,
            "minLength": 64,
            "pattern": "^[0-9a-f]+$",
            "type": "string",
            "description": "The checksum of the eBL document (a.k.a. transport document) computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).\n\nIn order to guard itself against different types of MITM attacks (e.g. 'replay attack' where last entry in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list is replaced with the similar entry extracted from the another envelope transfer previously sent by the same sending platform), upon start of the envelope transfer the receiving platform should validate that the [`EnvelopeManifest.transportDocumentChecksum`](#/EnvelopeManifest) attribute and the [`EnvelopeTransferChainEntry.transportDocumentChecksum`](#/EnvelopeTransferChainEntry) attribute of the last entry in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list have the same value.\n\nThe checksum is computed on the [canonical form of the JSON object](https://gibson042.github.io/canonicaljson-spec/).\n",
            "example": "583c29ab3e47f2d80899993200d3fbadb9f8a367f3a39f715935c46d7a283006"
          },
          "lastEnvelopeTransferChainEntrySignedContentChecksum": {
            "maxLength": 64,
            "minLength": 64,
            "pattern": "^[0-9a-f]+$",
            "type": "string",
            "description": "This attribute should contain the checksum of the last [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list received. The checksum is computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).\n",
            "example": "20a0257b313ae08417e07f6555c4ec829a512c083f3ead16b41158018a22abe9"
          },
          "missingAdditionalDocumentChecksums": {
            "type": "array",
            "description": "The list of the checksums of the additional documents that the receiving platform expect to receive in good order before it can accept the envelope transfer.\n",
            "items": {
              "$ref": "#/components/schemas/DocumentChecksum"
            }
          }
        }
      },
      "EnvelopeTransferFinishedResponse": {
        "required": [
          "lastEnvelopeTransferChainEntrySignedContentChecksum",
          "responseCode"
        ],
        "type": "object",
        "properties": {
          "lastEnvelopeTransferChainEntrySignedContentChecksum": {
            "maxLength": 64,
            "minLength": 64,
            "pattern": "^[0-9a-f]+$",
            "type": "string",
            "description": "This attribute should contain the checksum of the last [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list received. The checksum is computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).\n",
            "example": "20a0257b313ae08417e07f6555c4ec829a512c083f3ead16b41158018a22abe9"
          },
          "responseCode": {
            "type": "string",
            "description": "The response code can have one of the following values:\n- `RECE` (Received)\n- `DUPE` (Duplicated Envelope)\n- `BSIG` (Bad Signature)\n- `BENV` (Bad Envelope)\n- `INCD` (Inconclusive Document)\n- `MDOC` (Missing Document)\n- `DISE` (Disputed Envelope)\n\nThe `RECE` `responseCode` is used when the receiving platform acknowledges that the envelope transfer is accepted. \nThis response code can also be used when replying to [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint request if and only if the receiving platform is already in possession of all the additional documents listed in the `EnvelopeManifest`, and is ready to commit to accepting the envelope transfer.  This should only happen in special cases (e.g. Platform A which has performed the initial envelope transfer with additional documents to platform B later during the lifetime of the same eBL receives [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint request from some other Platform C with `EnvelopeManifest` listing additional documents, for which it concludes (based on checksum comparison) that they are identical to the addition documents from the initial envelope transfer). The `RECE` `responseCode` should be used together with the HTTP `200 Ok` response status code.\n\nThe `DUPE` `responseCode` is used in place of `RECE` `responseCode` when the receiving platform has already previously acknowledged and accepted the transfer of this envelope. In this case, the receiving platform asserts that this envelope transfer request is invalid but the prior envelope transfer was successful.  The receiving platform should include accepted version of last `EnvelopeTransferChainEntrySignedContent` entry in `EblEnvelope.envelopeTransferChain` list in the `duplicateOfAcceptedEnvelopeTransferChainEntrySignedContent` field. The receiving platform is only required to detect DUPE `responseCode` if the EnvelopeTransferChainEntrySignedContentChecksum is the same between the two transfer attempt and the sending platform is expected to reuse the same envelope. The `DUPE` `responseCode` should be used together with the HTTP `200 Ok` response status code.\n\nThe `BSIG` `responseCode` is used when the receiving platform could not process the envelope related to a signature and rejects the concrete transfer request. This response code should be used when the receiving platform decides to reject envelope transfer due to the issues with the signature used to create JWS content when starting envelope transfer (`EblEnvelope.envelopeManifestSignedContent`, and/or one or more `EnvelopeTransferChainEntrySignedContentChecksum` entries in the `EblEnvelope.envelopeTransferChain` list). Example use cases: the signature was made by an unknown key, the key or signature expired, the signed content does not match the EnvelopeTransferChainEntrySignedContentChecksum, etc. In this case, the receiving platform makes no assertions about the validity of the envelope contents. The sending platform may attempt to resolve the signature issue and retry with the same EnvelopeTransferChainEntrySignedContentChecksum. The `BSIG` `responseCode` should be used together with a HTTP `422 Unprocessable Content` response status code.\n\nThe `BENV` `responseCode` is used when the receiving platform can not process the envelope and rejects the concrete envelope transfer request. This response code can be used when the receiving platform knows the transfer cannot succeed in the future and the sending platform should retain the eBL. Example use cases could be that the envelope does not list the receiving platform as the intended recipient, the transferee ID is unknown, an invalid action code was used in the transactions for this envelope transfer, etc. In this case, the receiving platform is asserting that the envelope itself is not acceptable. Basically any use case where the receiving platform decides to reject the envelope transfer for technical reasons that are not covered by `BSIG` `responseCode`. The `BENV` `responseCode` should be used together with a HTTP `422 Unprocessable Content` response status code.\n\nThe `INCD` `responseCode` is used when the receiving platform concludes that the transferred additional document's checksum or size does not match the document checksum or size provided either directly in URL path or in `EnvelopeManifest` sent in the start envelope transfer request. The `INCD` `responseCode` does *not* reject the envelope transfer. The sending platform should try to either resend the correct document, or attempt to start new envelope transfer request with changed `EnvelopeManifest` that will contain correct document checksum and/or size for the inconclusive document. The `INCD` `responseCode` is not valid as a response to the start of a envelope transfer.  The `INCD` `responseCode` should be used together with a HTTP `409 Conflict` response status code.\n\nThe `MDOC` `responseCode` is used when the receiving platform cannot accept the envelope transfer due to a missing additional document.  The `MDOC` `responseCode` does *not* reject the envelope transfer. The sending platform should resend relevant documents (provided in `missingAdditionalDocumentChecksums`) and then retry finishing the envelope transfer. The `MDOC` `responseCode` is not valid as a response to the start of a envelope transfer.  The `MDOC` `responseCode` should be used together with a HTTP `409 Conflict` response status code.\n\nThe `DISE` `responseCode` is used when the receiving platform has successfully parsed the envelope and validated the signatures.  However, the receiving platform believes the envelope contradicts its current knowledge of the envelope transfer chain for the eBL document and there is a risk of double spending. The concrete detection method is implementation-specific. However, a method would be for the receiving platform to confirm whether it has `EnvelopeTransferChainEntrySignedContentChecksum` for the document, which are not listed in the transferred eBL envelope. Dispute resolution is not covered in the API and must be handled in via out of band process. The `DISE` `responseCode` should be used together with the HTTP `409 Conflict` response status code.\n\nUnless otherwise stated for a given response code, receiving platform will reject the active envelope transfer (if any). Some failures that result in receiving platform rejecting the envelope transfer may be retriable, in which case the sending platform can attempt a new envelope transfer for the same envelope.\n\nThe sending platform must not rely on the HTTP response status code alone as it is not covered by the signature. When there is a mismatch between the HTTP response status code and the signed response `EnvelopeTransferFinishedResponseSignedResponse` JWS-signed payload [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse), [`responseCode`](#/EnvelopeTransferFinishedResponse) decides the outcome.\n",
            "example": "RECE",
            "enum": [
              "RECE",
              "DUPE",
              "BSIG",
              "BENV",
              "MDOC",
              "DISE"
            ]
          },
          "duplicateOfAcceptedEnvelopeTransferChainEntrySignedContent": {
            "description": "actual type: [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) \n\nThis attribute should be defined only in the case that [`responseCode`](#/EnvelopeTransferFinishedResponse) attribute has `DUPE` value, indicating that receiving platform has already received and accepted envelope transfer for the eBL document that is the sending platform trying to resend in the duplicate envelope transfer.\nThis attribute should contain the last [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list received at the start of already received and accepted envelope transfer. \n\nThe provided entry might differ in the retry (e.g. due to signing with the private key that differs from the private key used to sign already received and accepted envelope transfer). \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnvelopeTransferChainEntrySignedContent"
              }
            ]
          },
          "reason": {
            "maxLength": 255,
            "type": "string",
            "description": "Free text comment for clarifying the result or suggesting follow up actions. Should be null or omitted when [`responseCode`](#/EnvelopeTransferFinishedResponse) is `RECE`, where there is no additional information to be given.\n",
            "nullable": true
          },
          "missingAdditionalDocumentChecksums": {
            "type": "array",
            "description": "Used with the `MDOC` [`responseCode`](#/EnvelopeTransferFinishedResponse) to signal which additional documents the receiving platform believes have not been transferred.\n\nFor other response codes, this attribute should be omitted.\n",
            "items": {
              "$ref": "#/components/schemas/DocumentChecksum"
            }
          },
          "receivedAdditionalDocumentChecksums": {
            "type": "array",
            "description": "The receiving platform includes this attribute with the `RECE` or `DUPE` [`responseCode`](#/EnvelopeTransferFinishedResponse) to confirm all additional documents it received during the envelope transfer. This attribute must include all the additional documents included in the envelope transfer request (including the ones the receiving platform already had). This attribute provides the sending platform with a signed receipt of the documents.\n\nFor other response codes, this attribute should be omitted.\n",
            "items": {
              "$ref": "#/components/schemas/DocumentChecksum"
            }
          }
        },
        "example": {
          "lastEnvelopeTransferChainEntrySignedContentChecksum": "d56a93a7e9f86a2d895df818e0440bdca6ffe03246e2fee14131f2e66c84c75a",
          "responseCode": "RECE"
        }
      },
      "EnvelopeTransferFinishedResponseSignedContent": {
        "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_\\-\\+\\/=]*)$",
        "type": "string",
        "description": "JWS content with compact serialization according to [RFC 7515](https://datatracker.ietf.org/doc/html/rfc7515#section-7.1). JWS-signed payload is defined in schema [EnvelopeTransferFinishedResponse](#/EnvelopeTransferFinishedResponse).\n",
        "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IlVhRVdLNmt2ZkRITzNZT2NwUGl2M1RCT2JQTzk2SFZhR2U0czFhUUxBZU0ifQ.eyJyZXNwb25zZVRvRW52ZWxvcGVIYXNoIjoiZDU2YTkzYTdlOWY4NmEyZDg5NWRmODE4ZTA0NDBiZGNhNmZmZTAzMjQ2ZTJmZWUxNDEzMWYyZTY2Yzg0Yzc1YSIsInJlc3BvbnNlQ29kZSI6IlJFQ1YifQ.P2_evKyvHH25BrvW4eIxp7xo9S73oK90QomKEjZDrn3AX8drv7aeVrNYYPPh4vqK78fTVair-0Ww9G7czX9Q3xlATTPlTQrNPuThh_-nPOvNDqHBwZuq_nop6lQwIS210OQa__C4z-oGvO8m56pfXvpgfTIC9nesnIuNFtrdr1lU81q4ZQnnZI0GvWaB_4Q320PoAXmKN4EwjY5gTqdKMAvz9a5PNnWfGPkIrM-CBm_MNLpl9NAcpJONRdwI9i9zTi42NZCUnbowHuHnYNuz3WfWzVA43U4IdEBDU6XeIem0Zm331KlBAukOhZiyN8Bp7ZK7XGx50a6XcY3190lX5Q"
      },
      "DocumentMetadata": {
        "required": [
          "documentChecksum",
          "mediaType",
          "name",
          "size"
        ],
        "type": "object",
        "properties": {
          "name": {
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "example": "Carrier rendered copy of the original B/L document.pdf"
          },
          "size": {
            "minimum": 1,
            "pattern": "^\\d+$",
            "type": "number",
            "description": "the Size of the document in bytes",
            "example": 4194304
          },
          "mediaType": {
            "type": "string",
            "description": "The Media Type (MIME type) of the document",
            "example": "application/pdf"
          },
          "documentChecksum": {
            "$ref": "#/components/schemas/DocumentChecksum"
          }
        },
        "description": "The document metadata that describes the document.\n"
      },
      "Transaction": {
        "required": [
          "action",
          "actor",
          "recipient",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Action denotes the transaction type, which can have one of the following values:\n- `ISSU` (Issuance)\n- `TRNS` (Transfer of possession)\n- `ENDO` (Endorsement a.k.a. Transfer of title)\n- `RESD` (Request to surrender for delivery)\n- `RESA` (Request to surrender for amendment)\n- `SACC` (Surrender accepted)\n- `SREJ` (Surrender rejected)\n\nThe `ISSU` `action` is used for the eBL issuance transaction from the carrier party to the shipper party, and must appear exactly once in the first transaction of the first [`EnvelopeTransferChainEntry`](#/EnvelopeTransferChainEntry) entry (as JWS payload of [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry) in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list. If the eBL document is issued to the shipper party that resides on the different eBL Platform from the carrier's platform, initial envelope transfer should contain envelope transfer chain where first entry's first transaction has `ISSU` `action` type. \n\nThe `TRNS` `action` is used for the transfer of possession of the eBL from the current possessor party to the new possessor party.\n\nThe `ENDO` `action` is used for the endorsement (a.k.a. transfer of title, or the right to take the delivery of the goods) of To-order eBL documents, where the new endorsee party is not named in the eBL document. The endorsement should always happen on the platform of the user that is not only the current endorsee, but also the current possessor of the eBL document. If the new endorsee party resides on the different eBL Platform from the current endorsee's platform, the envelope transfer process is used to notify the new endorsee of the `ENDO` `action` transaction for non-repudiation purposes, and will NOT result in the transfer of possession of the eBL document contained in the envelope. \n\nIf the party is the current possessor, and the party is the current consignee/endorsee/shipper (or eBL document is blank-endorsed), the party may request to surrender the eBL to the carrier. This is done by using one of the Request to surrender action types (`RESD` `action` or `RESA` `action`) and with the issuing carrier or the relevant carrier agent as the `recipient` of the action. \n \n The `RESD` `action` is used when the party wants to request the delivery of the goods. If the request is accepted (for details see `SACC` `action`), the carrier and the party submitting the surrender request will negotiate how the goods will be delivered (e.g. via DCSA shipment release API).\n \n The `RESA` `action` is used when the party wants to surrender the eBL document, so that the carrier can issue an amended eBL document. If the request is accepted (for details see `SACC` `action` response), the alignment on the exact change(s) that need to be made to the eBL document is done outside of the PINT API (e.g. via the DCSA EBL API). If the request is accepted, the existing eBL document is voided along with its envelope transfer chain, and the amended eBL document must be reissued with a new envelope transfer chain (for details see the `ISSU` `action` type description paragraph above). The `RESA` `action` is also used for switch to paper as the DCSA process flow for switching to paper is part of the amendment process (e.g. to note how many originals and copies with and without charges should be issued).\n\nIf a surrender request (`RESD` `action` or `RESA` `action`) is not addressed to the carrier that issued the eBL document or to their legal representative, then the receiving platform should reject the envelope transfer with the [`EnvelopeTransferFinishedResponse`](#/EnvelopeTransferFinishedResponse) containing `BENV` [`responseCode`](#/EnvelopeTransferFinishedResponse).\n\nThe `SACC` `action` is used by the carrier to asynchronously accept the surrender request initiated via `RESD` `action` or `RESA` `action`. If the party that submitted the surrender request is on the different platform, the envelope transfer process is used to notify the (surrender request submitter) party of the `SACC` `action` transaction for non-repudiation purposes, and will NOT result in the transfer of possession of the eBL document contained in the envelope. No transactions may occur after a `SACC` `action` transaction. Any envelope transfer chain changes with new transactions after a `SACC` `action` transaction are invalid and should be answered with the [`EnvelopeTransferFinishedResponse`](#/EnvelopeTransferFinishedResponse) containing `BENV` [`responseCode`](#/EnvelopeTransferFinishedResponse). \n\nThe `SREJ` `action` is used by the carrier to asynchronously reject the surrender request initiated via `RESD` `action` or `RESA` `action`, and return the eBL document possession to the party that submitted the surrender request.\n\nWhen the transaction recipient is residing on the different platform from the transaction actor's platform, the transaction should be followed by the envelope transfer from the actor's (sending) platform to the recipient's (receiving) platform. If the envelope transfer is caused by either `ENDO` `action` or `SACC` `action` transaction (where the recipient is on the different platform), the envelope transfer process is NOT causing transfer of possession of the eBL document, but is merely used as notification for the non-repudiation purposes.\n",
            "example": "ISSU",
            "enum": [
              "ISSU",
              "ENDO",
              "TRNS",
              "RESD",
              "RESA",
              "SACC",
              "SREJ"
            ]
          },
          "actor": {
            "$ref": "#/components/schemas/TransactionParty"
          },
          "recipient": {
            "$ref": "#/components/schemas/TransactionParty"
          },
          "timestamp": {
            "type": "integer",
            "description": "Unix epoch with millisecond precision of when the transaction was created.",
            "format": "int64",
            "example": 1713342679531
          },
          "reason": {
            "maxLength": 4,
            "type": "string",
            "description": "A code defined by DCSA indicating the reason for `RESA` (Request to surrender for amendment). Possible values are: \n-\t`SWTP` (Switch to paper)\n\n**Condition:** on `action` being `RESA`\n",
            "example": "SWTP"
          },
          "comments": {
            "maxLength": 255,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Free text comment for the party receiving the transaction.",
            "example": "The B/L has been issued."
          }
        }
      },
      "TransactionParty": {
        "title": "Transaction Party",
        "required": [
          "eblPlatform",
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 70,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "Globeteam"
          },
          "eblPlatform": {
            "maxLength": 4,
            "pattern": "^\\S+$",
            "type": "string",
            "description": "The EBL platform of the transaction party. \nThe value **MUST** be one of:\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ESSD` (EssDOCS)\n- `IDT` (ICE Digital Trade)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGO)\n- `ETEU` (eTEU)\n- `TRAC` (TRACE Original)\n- `BRIT` (BRITC eBL)\n",
            "example": "BOLE"
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          }
        },
        "description": "Refers to a company or a legal entity."
      },
      "IdentifyingCode": {
        "title": "Identifying Code",
        "required": [
          "codeListProvider",
          "partyCode"
        ],
        "type": "object",
        "properties": {
          "codeListProvider": {
            "maxLength": 100,
            "type": "string",
            "description": "A list of codes identifying a party. Possible values are:\n\n- `WAVE` (Wave)\n- `CARX` (CargoX)\n- `ESSD` (EssDOCS)\n- `IDT` (ICE Digital Trade)\n- `BOLE` (Bolero)\n- `EDOX` (EdoxOnline)\n- `IQAX` (IQAX)\n- `SECR` (Secro)\n- `TRGO` (TradeGO)\n- `ETEU` (eTEU)\n- `TRAC` (TRACE Original)\n- `BRIT` (BRITC eBL)\n- `GSBN` (Global Shipping Business Network)\n- `WISE` (WiseTech)\n- `GLEIF` (Global Legal Entity Identifier Foundation)\n- `W3C` (World Wide Web Consortium)\n- `DNB` (Dun and Bradstreet)\n- `FMC` (Federal Maritime Commission)\n- `DCSA` (Digital Container Shipping Association)\n- `EU` (European Union Member State Customs Authority)\n- `ZZZ` (Mutually defined)\n",
            "example": "W3C"
          },
          "partyCode": {
            "maxLength": 150,
            "type": "string",
            "description": "Code to identify the party as provided by the code list provider\n",
            "example": "MSK"
          },
          "codeListName": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the code list, code generation mechanism or code authority for the `partyCode`. Example values could be:\n\n- `DID` (Decentralized Identifier) for `codeListProvider` `W3C`\n- `LEI` (Legal Entity Identifier) for `codeListProvider` `GLEIF`\n- `DUNS` (Data Universal Numbering System) for `codeListProvider` `DNB`\n- `EORI` (Economic Operators Registration and Identification) for codeListProvider `EU`\n",
            "example": "DID"
          }
        }
      },
      "TaxLegalReference": {
        "title": "Tax & Legal Reference",
        "required": [
          "countryCode",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The reference type code as defined by the relevant tax and/or legal authority.\n",
            "example": "PAN"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "IN"
          },
          "value": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The value of the `taxLegalReference`\n",
            "example": "AAAAA0000A"
          }
        },
        "description": "Reference that uniquely identifies a party for tax and/or legal purposes in accordance with the relevant jurisdiction.\n\nA small list of **potential** examples:\n\n| Type  | Country | Description |\n|-------|:-------:|-------------|\n|PAN|IN|Goods and Services Tax Identification Number in India|\n|GSTIN|IN|Goods and Services Tax Identification Number in India|\n|IEC|IN|Importer-Exported Code in India|\n|RUC|EC|Registro Único del Contribuyente in Ecuador|\n|RUC|PE|Registro Único del Contribuyente in Peru|\n|NIF|MG|Numéro d'Identification Fiscal in Madagascar|\n|NIF|DZ|Numéro d'Identification Fiscal in Algeria|\n"
      },
      "TransportDocument": {
        "title": "Transport Document",
        "required": [
          "cargoMovementTypeAtDestination",
          "cargoMovementTypeAtOrigin",
          "carrierCode",
          "carrierCodeListProvider",
          "consignmentItems",
          "deliveryTypeAtDestination",
          "documentParties",
          "invoicePayableAt",
          "isElectronic",
          "isShippedOnBoardType",
          "isToOrder",
          "partyContactDetails",
          "receiptTypeAtOrigin",
          "termsAndConditions",
          "transportDocumentReference",
          "transportDocumentStatus",
          "transportDocumentTypeCode",
          "transports",
          "utilizedTransportEquipments"
        ],
        "type": "object",
        "properties": {
          "transportDocumentReference": {
            "maxLength": 20,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\n",
            "example": "HHL71800000"
          },
          "shippingInstructionsReference": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The identifier for a `Shipping Instructions` provided by the carrier for system purposes.\n",
            "example": "e0559d83-00e2-438e-afd9-fdd610c1a008"
          },
          "transportDocumentStatus": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the `Transport Document`. Possible values are:\n- DRAFT\n- APPROVED\n- ISSUED\n- PENDING_SURRENDER_FOR_AMENDMENT\n- SURRENDERED_FOR_AMENDMENT\n- PENDING_SURRENDER_FOR_DELIVERY\n- SURRENDERED_FOR_DELIVERY\n- VOIDED\n",
            "example": "DRAFT"
          },
          "transportDocumentTypeCode": {
            "type": "string",
            "description": "Specifies the type of the transport document\n- `BOL` (Bill of Lading)\n- `SWB` (Sea Waybill)\n",
            "example": "SWB",
            "enum": [
              "BOL",
              "SWB"
            ]
          },
          "isShippedOnBoardType": {
            "type": "boolean",
            "description": "Specifies whether the Transport Document is a received for shipment, or shipped on board.\n",
            "example": true
          },
          "freightPaymentTermCode": {
            "type": "string",
            "description": "An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "isElectronic": {
            "type": "boolean",
            "description": "An indicator whether the transport document is electronically transferred.\n",
            "example": true
          },
          "isToOrder": {
            "type": "boolean",
            "description": "Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).\n\n`isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).\n",
            "example": false
          },
          "numberOfCopiesWithCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "The requested number of copies of the `Transport Document` to be issued by the carrier including charges.",
            "format": "int32",
            "example": 2
          },
          "numberOfCopiesWithoutCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "The requested number of copies of the `Transport Document` to be issued by the carrier **NOT** including charges.",
            "format": "int32",
            "example": 2
          },
          "numberOfOriginalsWithCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of originals of the Bill of Lading that has been requested by the customer with charges.\n        \n**Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)\n",
            "format": "int32",
            "example": 1
          },
          "numberOfOriginalsWithoutCharges": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of originals of the Bill of Lading that has been requested by the customer without charges.\n        \n**Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)\n",
            "format": "int32",
            "example": 1
          },
          "displayedNameForPlaceOfReceipt": {
            "maxItems": 5,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n",
              "example": "Strawinskylaan 4117"
            }
          },
          "displayedNameForPortOfLoad": {
            "maxItems": 5,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n",
              "example": "Strawinskylaan 4117"
            }
          },
          "displayedNameForPortOfDischarge": {
            "maxItems": 5,
            "type": "array",
            "description": "The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n",
              "example": "Strawinskylaan 4117"
            }
          },
          "displayedNameForPlaceOfDelivery": {
            "maxItems": 5,
            "type": "array",
            "description": "The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A line of the address to be displayed on the transport document.\n",
              "example": "Strawinskylaan 4117"
            }
          },
          "shippedOnBoardDate": {
            "type": "string",
            "description": "Date when the last container that is linked to the transport document is physically loaded onboard the vessel indicated on the transport document.\n\nWhen provided on a transport document, the transportDocument is a `Shipped On Board` B/L.\n\nExactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.\n",
            "format": "date",
            "example": "2020-12-12"
          },
          "displayedShippedOnBoardReceivedForShipment": {
            "maxLength": 250,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The text to be displayed on the `Transport Document` as evidence that the goods have been received for shipment or shipped on board.\n",
            "example": "Received for Shipment CMA CGM CONCORDE 28-Jul-2022 CMA CGM Agences France SAS As agents for the Carrier"
          },
          "termsAndConditions": {
            "maxLength": 50000,
            "type": "string",
            "description": "Carrier terms and conditions of transport.\n",
            "example": "Any reference in..."
          },
          "receiptTypeAtOrigin": {
            "maxLength": 3,
            "type": "string",
            "description": "Indicates the type of service offered at `Origin`. The options are:\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
            "example": "CY",
            "enum": [
              "CY",
              "SD",
              "CFS"
            ]
          },
          "deliveryTypeAtDestination": {
            "maxLength": 3,
            "type": "string",
            "description": "Indicates the type of service offered at `Destination`. The options are:\n\n- `CY` (Container yard (incl. rail ramp))\n- `SD` (Store Door)\n- `CFS` (Container Freight Station)\n",
            "example": "CY",
            "enum": [
              "CY",
              "SD",
              "CFS"
            ]
          },
          "cargoMovementTypeAtOrigin": {
            "maxLength": 3,
            "type": "string",
            "description": "Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:\n\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
            "example": "FCL"
          },
          "cargoMovementTypeAtDestination": {
            "maxLength": 3,
            "type": "string",
            "description": "Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:\n\n- `FCL` (Full Container Load)\n- `LCL` (Less than Container Load)\n",
            "example": "FCL"
          },
          "issueDate": {
            "type": "string",
            "description": "Local date when the transport document has been issued.\n\nCan be omitted on draft transport documents, but must be provided when the document has been issued.\n",
            "format": "date",
            "example": "2020-12-12"
          },
          "receivedForShipmentDate": {
            "type": "string",
            "description": "Date when the last container linked to the transport document is physically in the terminal (customers cleared against the intended vessel).\n\nWhen provided on a transport document, the transportDocument is a `Received For Shipment` B/L.\n\nExactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.\n",
            "format": "date",
            "example": "2020-12-12"
          },
          "serviceContractReference": {
            "maxLength": 30,
            "type": "string",
            "description": "Reference number for agreement between shipper and carrier, which optionally includes a certain minimum quantity commitment (usually referred as “MQC”) of cargo that the shipper commits to over a fixed period, and the carrier commits to a certain rate or rate schedule.\n",
            "example": "HHL51800000"
          },
          "contractQuotationReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference.\n",
            "example": "HHL1401"
          },
          "declaredValue": {
            "minimum": 0,
            "type": "number",
            "description": "The value of the cargo that the shipper declares in order to avoid the carrier's limitation of liability and \"Ad Valorem\" freight, i.e., freight which is calculated based on the value of the goods declared by the shipper.\n\n**Condition:** Included in the transport document upon customer request. If customers want the value to show, evidence is required, and customers need to approve additional insurance fee charge from the carrier (very exceptional).\n",
            "format": "float",
            "example": 1231.1
          },
          "declaredValueCurrency": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "^[A-Z]{3}$",
            "type": "string",
            "description": "The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html).\n",
            "example": "DKK"
          },
          "carrierCode": {
            "maxLength": 4,
            "pattern": "^\\S+$",
            "type": "string",
            "description": "The `NMFTA` or `SMDG` code of the issuing carrier of the `Transport Document`\n",
            "example": "MMCU"
          },
          "carrierCodeListProvider": {
            "type": "string",
            "description": "The code list provider for the carrier code. Possible values are:\n- `SMDG` (Ship Message Design Group)\n- `NMFTA` (National Motor Freight Traffic Association)\n",
            "example": "NMFTA",
            "enum": [
              "SMDG",
              "NMFTA"
            ]
          },
          "carrierClauses": {
            "type": "array",
            "description": "Additional clauses for a specific shipment added by the carrier to the Bill of Lading, subject to local rules / guidelines or certain mandatory information required to be shared with the customer.\n",
            "items": {
              "maxLength": 20000,
              "pattern": "^\\S(?:.*\\S)?$",
              "type": "string",
              "description": "The content of the clause.\n",
              "example": "It is not allowed to..."
            }
          },
          "numberOfRiderPages": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of additional pages required to contain the goods description on a transport document. Only applicable for physical transport documents.\n",
            "format": "int32",
            "example": 2
          },
          "transports": {
            "$ref": "#/components/schemas/Transports"
          },
          "charges": {
            "type": "array",
            "description": "A list of `Charges`\n",
            "items": {
              "$ref": "#/components/schemas/Charge"
            }
          },
          "placeOfIssue": {
            "$ref": "#/components/schemas/Place of Issue"
          },
          "invoicePayableAt": {
            "title": "Invoice Payable At",
            "type": "object",
            "description": "Location where payment of ocean freight and charges for the main transport will take place by the customer.\n\nThe location can be provided as a `UN Location Code` or as a fallback - a `freeText` field\n",
            "oneOf": [
              {
                "title": "UN Location Code",
                "required": [
                  "UNLocationCode"
                ],
                "type": "object",
                "properties": {
                  "UNLocationCode": {
                    "maxLength": 5,
                    "minLength": 5,
                    "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
                    "type": "string",
                    "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
                    "example": "NLAMS"
                  }
                }
              },
              {
                "title": "Free text",
                "required": [
                  "freeText"
                ],
                "type": "object",
                "properties": {
                  "freeText": {
                    "maxLength": 35,
                    "type": "string",
                    "description": "The name of the location where payment will be rendered by the customer.\n",
                    "example": "DCSA Headquarters"
                  }
                }
              }
            ]
          },
          "partyContactDetails": {
            "minItems": 1,
            "type": "array",
            "description": "The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) \n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "documentParties": {
            "$ref": "#/components/schemas/Document Parties"
          },
          "routingOfConsignmentCountries": {
            "type": "array",
            "description": "A list of countries the goods will be routed through from origin to destination defined by the 2 characters country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "items": {
              "maxLength": 2,
              "minLength": 2,
              "pattern": "^[A-Z]{2}$",
              "type": "string",
              "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
              "example": "NL"
            }
          },
          "consignmentItems": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `ConsignmentItems`\n",
            "items": {
              "$ref": "#/components/schemas/ConsignmentItem"
            }
          },
          "utilizedTransportEquipments": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Utilized Transport Equipments` describing the equipment being used.\n",
            "items": {
              "$ref": "#/components/schemas/UtilizedTransportEquipment"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "The receiving platform is required to validate the eBL document (a.k.a. transport document) by computing the SHA-256 checksum of the `transportDocument` attribute value, and confirming it's equal to received 'EblEnvelope.envelopeManifestSignedContent' JWS-signed payload [`EnvelopeManifest.transportDocumentChecksum`](#/EnvelopeManifest) attribute value.\n"
      },
      "PartyContactDetail": {
        "title": "Party Contact Detail",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the contact\n",
            "example": "Henrik"
          }
        },
        "description": "The contact details of the person to contact. It is mandatory to provide either `phone` and/or `email` along with the `name`.\n",
        "example": {
          "name": "Henrik",
          "phone": "+45 51801234"
        },
        "anyOf": [
          {
            "title": "Phone required",
            "required": [
              "phone"
            ],
            "type": "object",
            "properties": {
              "phone": {
                "maxLength": 30,
                "pattern": "^\\S(?:.*\\S)?$",
                "type": "string",
                "description": "Phone number for the contact\n",
                "example": "+45 70262970"
              }
            },
            "description": "`Phone` is mandatory to provide\n"
          },
          {
            "title": "Email required",
            "required": [
              "email"
            ],
            "type": "object",
            "properties": {
              "email": {
                "maxLength": 100,
                "pattern": "^.+@\\S+$",
                "type": "string",
                "description": "`E-mail` address to be used\n",
                "example": "info@dcsa.org"
              }
            },
            "description": "`Email` is mandatory to provide\n"
          }
        ]
      },
      "Reference": {
        "title": "Reference",
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 3,
            "type": "string",
            "description": "The reference type codes defined by DCSA. Possible values are:\n- `CR` (Customer’s Reference)\n- `AKG` (Vehicle Identification Number)\n",
            "example": "CR"
          },
          "value": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The value of the reference. \n",
            "example": "HHL00103004"
          }
        },
        "description": "References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\n"
      },
      "ConsignmentItem": {
        "title": "Consignment Item",
        "required": [
          "HSCodes",
          "cargoItems",
          "carrierBookingReference",
          "descriptionOfGoods"
        ],
        "type": "object",
        "properties": {
          "carrierBookingReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The associated booking number provided by the carrier for this `Consignment Item`.\n\nWhen multiple `carrierBookingReferences` are used then the bookings referred to must all contain the same:\n- transportPlan\n- shipmentLocations\n- receiptTypeAtOrigin\n- deliveryTypeAtDestination\n- cargoMovementTypeAtOrigin\n- cargoMovementTypeAtDestination\n- serviceContractReference\n- termsAndConditions\n- Place of B/L Issue (if provided)\n",
            "example": "ABC709951"
          },
          "descriptionOfGoods": {
            "maxItems": 150,
            "type": "array",
            "description": "An array of lines accurately and properly describing the cargo being shipped in the container(s) as provided by the shipper.\n",
            "items": {
              "maxLength": 35,
              "pattern": "^\\S(?:.*\\S)?$",
              "type": "string",
              "description": "A line describing the cargo",
              "example": "blue shoes size 47"
            }
          },
          "HSCodes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `HS Codes` that apply to this `consignmentItem`\n",
            "items": {
              "maxLength": 10,
              "minLength": 6,
              "pattern": "^\\d{6,10}$",
              "type": "string",
              "description": "Used by customs to classify the product being shipped. The type of HS code depends on country and customs requirements. The code must be at least 6 and at most 10 digits.\n\nMore information can be found here: [HS Nomenclature](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools).\n",
              "example": "851713"
            }
          },
          "nationalCommodityCodes": {
            "type": "array",
            "description": "A list of `National Commodity Codes` that apply to this `commodity`\n",
            "items": {
              "$ref": "#/components/schemas/NationalCommodityCode"
            }
          },
          "shippingMarks": {
            "maxItems": 50,
            "type": "array",
            "description": "A list of the `ShippingMarks` applicable to this `consignmentItem`\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.\n",
              "example": "Made in China"
            }
          },
          "cargoItems": {
            "minItems": 1,
            "type": "array",
            "description": "A list of all `cargoItems`\n",
            "items": {
              "$ref": "#/components/schemas/CargoItem"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`\n"
      },
      "NationalCommodityCode": {
        "title": "National Commodity Code",
        "required": [
          "countryCode",
          "type",
          "values"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 10,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The national commodity classification code, which can be one of the following values defined by DCSA:\n- `NCM` (Nomenclatura Comum do Mercosul)\n- `HTS` (Harmonized Tariff Schedule)\n- `SCHEDULE_B` ( Schedule B)\n- `TARIC` (Integrated Tariff of the European Communities)\n- `CN` (Combined Nomenclature)\n- `CUS` (Customs Union and Statistics)\n",
            "example": "NCM"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "BR"
          },
          "values": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `national commodity codes` values.\n",
            "example": [
              "1515",
              "2106",
              "2507",
              "2512"
            ],
            "items": {
              "maxLength": 10,
              "pattern": "^\\S(?:.*\\S)?$",
              "type": "string",
              "description": "The value of the `National Commodity Code`\n",
              "example": "1515"
            }
          }
        },
        "description": "The national commodity classification code linked to a country with a value.\n\nAn example could look like this:\n\n| Type  | Country | Value |\n|-------|:-------:|-------------|\n|NCM|BR|['1515', '2106', '2507', '2512']|\n"
      },
      "CustomsReference": {
        "title": "Customs Reference",
        "required": [
          "countryCode",
          "type",
          "values"
        ],
        "type": "object",
        "properties": {
          "type": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The reference type code as defined in the relevant customs jurisdiction.\n",
            "example": "ACID"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "EG"
          },
          "values": {
            "minItems": 1,
            "type": "array",
            "items": {
              "maxLength": 35,
              "pattern": "^\\S(?:.*\\S)?$",
              "type": "string",
              "description": "The value of the `customsReference`\n",
              "example": "4988470982020120017"
            }
          }
        },
        "description": "Reference associated with customs and/or excise purposes required by the relevant authorities for the import, export, or transit of the goods.\n\nA small list of **potential** examples:\n\n| Type  | Country | Description |\n|-------|:-------:|-------------|\n|ACID|EG|Advance Cargo Information Declaration in Egypt|\n|CERS|CA|Canadian Export Reporting System|\n|ITN|US|Internal Transaction Number in US|\n|PEB|ID|PEB reference number|\n|CSN|IN|Cargo Summary Notification (CSN)|\n"
      },
      "CargoItem": {
        "title": "Cargo Item",
        "required": [
          "equipmentReference",
          "grossWeight",
          "outerPackaging"
        ],
        "type": "object",
        "properties": {
          "equipmentReference": {
            "maxLength": 11,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
            "example": "APZU4812090"
          },
          "grossWeight": {
            "$ref": "#/components/schemas/Gross Weight"
          },
          "grossVolume": {
            "$ref": "#/components/schemas/Gross Volume"
          },
          "outerPackaging": {
            "$ref": "#/components/schemas/OuterPackaging"
          },
          "nationalCommodityCodes": {
            "type": "array",
            "description": "A list of `National Commodity Codes` that apply to this `cargoItem`\n",
            "items": {
              "$ref": "#/components/schemas/NationalCommodityCode"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.\n"
      },
      "OuterPackaging": {
        "title": "Outer Packaging",
        "required": [
          "description",
          "numberOfPackages"
        ],
        "type": "object",
        "properties": {
          "packageCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z0-9]{2}$",
            "type": "string",
            "description": "A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation N°21](https://unece.org/trade/uncefact/cl-recommendations)\n\n**Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.\n",
            "example": "5H"
          },
          "imoPackagingCode": {
            "maxLength": 5,
            "minLength": 1,
            "pattern": "^[A-Z0-9]{1,5}$",
            "type": "string",
            "description": "The code of the packaging as per IMO.\n\n**Condition:** only applicable to dangerous goods if specified in the [IMO IMDG code](https://www.imo.org/en/publications/Pages/IMDG%20Code.aspx). If not available, the `packageCode` as per UN recommendation 21 should be used.\n",
            "example": "1A2"
          },
          "numberOfPackages": {
            "minimum": 1,
            "type": "integer",
            "description": "Specifies the number of outer packagings/overpacks associated with this `Cargo Item`.\n",
            "format": "int32",
            "example": 18
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "description": "Description of the outer packaging/overpack.\n",
            "example": "Drum, steel"
          },
          "woodDeclaration": {
            "maxLength": 30,
            "type": "string",
            "description": "Property to clearly indicate if the products, packaging and any other items are made of wood. Possible values include:\n- `NOT_APPLICABLE` (if no wood or any other wood product such as packaging and supports are being shipped)\n- `NOT_TREATED_AND_NOT_CERTIFIED` (if the wood or wooden materials have not been treated nor fumigated and do not include a certificate)\n- `PROCESSED` (if the wood or wooden materials are entirely made of processed wood, such as plywood, particle board, sliver plates of wood and wood laminate sheets produced using glue, heat, pressure or a combination of these)\n- `TREATED_AND_CERTIFIED` (if the wood or wooden materials have been treated and/or fumigated and include a certificate)\n",
            "example": "TREATED_AND_CERTIFIED"
          },
          "dangerousGoods": {
            "type": "array",
            "description": "A list of `Dangerous Goods`\n",
            "items": {
              "$ref": "#/components/schemas/DangerousGoods"
            }
          }
        },
        "description": "Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.\n"
      },
      "DangerousGoods": {
        "title": "Dangerous Goods",
        "required": [
          "imoClass",
          "properShippingName"
        ],
        "type": "object",
        "properties": {
          "codedVariantList": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "^[0-3][0-9A-Z]{3}$",
            "type": "string",
            "description": "Four-character code supplied by Exis Technologies that assists to remove ambiguities when identifying a variant within a single UN number or NA number that may occur when two companies exchange DG information.\n\nCharacter | Valid Characters | Description\n:--------:|------------------|------------\n1| 0, 1, 2, 3|The packing group. Code 0 indicates there is no packing group\n2|0 to 9 and A to Z|A sequence letter for the PSN, or 0 if there were no alternative PSNs\n3 and 4|0 to 9 and A to Z|Two sequence letters for other information, for the cases where the variant is required because of different in subrisks, packing instruction etc.\n",
            "example": "2200"
          },
          "properShippingName": {
            "maxLength": 250,
            "type": "string",
            "description": "The proper shipping name for goods under IMDG Code, or the product name for goods under IBC Code and IGC Code, or the bulk cargo shipping name for goods under IMSBC Code, or the name of oil for goods under Annex I to the MARPOL Convention.\n",
            "example": "Chromium Trioxide, anhydrous"
          },
          "technicalName": {
            "maxLength": 250,
            "type": "string",
            "description": "The recognized chemical or biological name or other name currently used for the referenced dangerous goods as described in chapter 3.1.2.8 of the IMDG Code.\n",
            "example": "xylene and benzene"
          },
          "imoClass": {
            "maxLength": 4,
            "type": "string",
            "description": "The hazard class code of the referenced dangerous goods according to the specified regulation. Examples of possible values are:\n\n- `1.1A` (Substances and articles which have a mass explosion hazard)\n- `1.6N` (Extremely insensitive articles which do not have a mass explosion hazard)\n- `2.1` (Flammable gases)\n- `8` (Corrosive substances)\n",
            "example": "1.4S"
          },
          "subsidiaryRisk1": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "^[0-9](\\.[0-9])?$",
            "type": "string",
            "description": "Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.\n",
            "example": "1.2"
          },
          "subsidiaryRisk2": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "^[0-9](\\.[0-9])?$",
            "type": "string",
            "description": "Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.\n",
            "example": "1.2"
          },
          "isMarinePollutant": {
            "type": "boolean",
            "description": "Indicates if the goods belong to the classification of Marine Pollutant.\n",
            "example": false
          },
          "packingGroup": {
            "maximum": 3,
            "minimum": 1,
            "type": "integer",
            "description": "The packing group according to the UN Recommendations on the Transport of Dangerous Goods and IMO IMDG Code.\n",
            "format": "int32",
            "example": 3
          },
          "isLimitedQuantity": {
            "type": "boolean",
            "description": "Indicates if the dangerous goods can be transported as limited quantity in accordance with Chapter 3.4 of the IMO IMDG Code.\n",
            "example": false
          },
          "isExceptedQuantity": {
            "type": "boolean",
            "description": "Indicates if the dangerous goods can be transported as excepted quantity in accordance with Chapter 3.5 of the IMO IMDG Code.\n",
            "example": false
          },
          "isSalvagePackings": {
            "type": "boolean",
            "description": "Indicates if the cargo has special packaging for the transport, recovery or disposal of damaged, defective, leaking or nonconforming hazardous materials packages, or hazardous materials that have spilled or leaked.\n",
            "example": false
          },
          "isEmptyUncleanedResidue": {
            "type": "boolean",
            "description": "Indicates if the cargo is residue.\n",
            "example": false
          },
          "isWaste": {
            "type": "boolean",
            "description": "Indicates if waste is being shipped\n",
            "example": false
          },
          "isHot": {
            "type": "boolean",
            "description": "Indicates if high temperature cargo is shipped.\n",
            "example": false
          },
          "isCompetentAuthorityApprovalRequired": {
            "type": "boolean",
            "description": "Indicates if the cargo require approval from authorities\n",
            "example": false
          },
          "competentAuthorityApproval": {
            "maxLength": 70,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name and reference number of the competent authority providing the approval.\n",
            "example": "{Name and reference...}"
          },
          "segregationGroups": {
            "type": "array",
            "description": "List of the segregation groups applicable to specific hazardous goods according to the IMO IMDG Code.\n\n**Condition:** only applicable to specific hazardous goods.\n",
            "items": {
              "maxLength": 2,
              "type": "string",
              "description": "Grouping of Dangerous Goods having certain similar chemical properties. Possible values are:\n\n- `1` (Acids)\n- `2` (Ammonium Compounds)\n- `3` (Bromates)\n- `4` (Chlorates)\n- `5` (Chlorites)\n- `6` (Cyanides)\n- `7` (Heavy metals and their salts)\n- `8` (Hypochlorites)\n- `9` (Lead and its compounds)\n- `10` (Liquid halogenated hydrocarbons)\n- `11` (Mercury and mercury compounds)\n- `12` (Nitrites and their mixtures)\n- `13` (Perchlorates)\n- `14` (Permanganates)\n- `15` (Powdered metals)\n- `16` (Peroxides),\n- `17` (Azides)\n- `18` (Alkalis)\n",
              "example": "12"
            }
          },
          "innerPackagings": {
            "type": "array",
            "description": "A list of `Inner Packings` contained inside this `outer packaging/overpack`.\n",
            "items": {
              "$ref": "#/components/schemas/InnerPackaging"
            }
          },
          "emergencyContactDetails": {
            "$ref": "#/components/schemas/EmergencyContactDetails"
          },
          "EMSNumber": {
            "maxLength": 7,
            "type": "string",
            "description": "The emergency schedule identified in the IMO EmS Guide – Emergency Response Procedures for Ships Carrying Dangerous Goods. Comprises 2 values; 1 for spillage and 1 for fire. Possible values spillage: S-A to S-Z. Possible values fire: F-A to F-Z.\n",
            "example": "F-A S-Q"
          },
          "endOfHoldingTime": {
            "type": "string",
            "description": "Date by when the refrigerated liquid needs to be delivered.\n",
            "format": "date",
            "example": "2021-09-03"
          },
          "fumigationDateTime": {
            "type": "string",
            "description": "Date & time when the container was fumigated\n",
            "format": "date-time",
            "example": "2024-09-04T09:41:00Z"
          },
          "isReportableQuantity": {
            "type": "boolean",
            "description": "Indicates if a container of hazardous material is at the reportable quantity level. If `TRUE`, a report to the relevant authority must be made in case of spill.\n",
            "example": false
          },
          "inhalationZone": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "The zone classification of the toxicity of the inhalant. Possible values are:\n\n- `A` (Hazard Zone A) can be assigned to specific gases and liquids\n- `B` (Hazard Zone B) can be assigned to specific gases and liquids\n- `C` (Hazard Zone C) can **only** be assigned to specific gases\n- `D` (Hazard Zone D) can **only** be assigned to specific gases\n",
            "example": "A"
          },
          "grossWeight": {
            "$ref": "#/components/schemas/Gross Weight_1"
          },
          "netWeight": {
            "$ref": "#/components/schemas/Net Weight"
          },
          "netExplosiveContent": {
            "$ref": "#/components/schemas/Net Explosive Content"
          },
          "netVolume": {
            "$ref": "#/components/schemas/Net Volume"
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          }
        },
        "description": "Specification for `Dangerous Goods`. It is mandatory to either provide the `unNumber` or the `naNumber`. Dangerous Goods is based on **IMDG Amendment Version 41-22**.\n",
        "oneOf": [
          {
            "title": "UN Number",
            "required": [
              "unNumber"
            ],
            "type": "object",
            "properties": {
              "unNumber": {
                "maxLength": 4,
                "minLength": 4,
                "pattern": "^\\d{4}$",
                "type": "string",
                "description": "United Nations Dangerous Goods Identifier (UNDG) assigned by the UN Sub-Committee of Experts on the Transport of Dangerous Goods and shown in the IMO IMDG.\n",
                "example": "1463"
              }
            }
          },
          {
            "title": "NA Number",
            "required": [
              "naNumber"
            ],
            "type": "object",
            "properties": {
              "naNumber": {
                "maxLength": 4,
                "minLength": 4,
                "pattern": "^\\d{4}$",
                "type": "string",
                "description": "Four-digit number that is assigned to dangerous, hazardous, and harmful substances by the United States Department of Transportation.\n",
                "example": "9037"
              }
            }
          }
        ]
      },
      "InnerPackaging": {
        "title": "Inner Packaging",
        "required": [
          "description",
          "material",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Count of `Inner Packagings` of the referenced `Dangerous Goods`.\n",
            "format": "int32",
            "example": 20
          },
          "material": {
            "maxLength": 100,
            "type": "string",
            "description": "The `material` used for the `Inner Packaging` of the referenced `Dangerous Goods`.\n",
            "example": "Plastic"
          },
          "description": {
            "maxLength": 100,
            "type": "string",
            "description": "Description of the packaging.\n",
            "example": "Woven plastic water resistant Bag"
          }
        },
        "description": "Object for inner packaging specification\n"
      },
      "EmergencyContactDetails": {
        "title": "Emergency Contact Details",
        "required": [
          "contact",
          "phone"
        ],
        "type": "object",
        "properties": {
          "contact": {
            "maxLength": 255,
            "type": "string",
            "description": "Name of the Contact person during an emergency.\n",
            "example": "Henrik Larsen"
          },
          "provider": {
            "maxLength": 255,
            "type": "string",
            "description": "Name of the third party vendor providing emergency support\n",
            "example": "GlobeTeam"
          },
          "phone": {
            "maxLength": 30,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Phone number for the contact\n",
            "example": "+45 70262970"
          },
          "referenceNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "Contract reference for the emergency support provided by an external third party vendor.\n",
            "example": "12234"
          }
        },
        "description": "24 hr emergency contact details\n"
      },
      "Limits": {
        "title": "Limits",
        "required": [
          "temperatureUnit"
        ],
        "type": "object",
        "properties": {
          "temperatureUnit": {
            "type": "string",
            "description": "The unit for **all attributes in the limits structure** in Celsius or Fahrenheit\n\n- `CEL` (Celsius)\n- `FAH` (Fahrenheit)\n",
            "example": "CEL",
            "enum": [
              "CEL",
              "FAH"
            ]
          },
          "flashPoint": {
            "type": "number",
            "description": "Lowest temperature at which a chemical can vaporize to form an ignitable mixture in air.\n\n**Condition:** only applicable to specific hazardous goods according to the IMO IMDG Code.\n",
            "format": "float",
            "example": 42
          },
          "transportControlTemperature": {
            "type": "number",
            "description": "Maximum temperature at which certain substance (such as organic peroxides and self-reactive and related substances) can be safely transported for a prolonged period.\n",
            "format": "float",
            "example": 24.1
          },
          "transportEmergencyTemperature": {
            "type": "number",
            "description": "Temperature at which emergency procedures shall be implemented\n",
            "format": "float",
            "example": 74.1
          },
          "SADT": {
            "type": "number",
            "description": "Lowest temperature in which self-accelerating decomposition may occur in a substance\n",
            "format": "float",
            "example": 54.1
          },
          "SAPT": {
            "type": "number",
            "description": "Lowest temperature in which self-accelerating polymerization may occur in a substance\n",
            "format": "float",
            "example": 70
          }
        },
        "description": "Limits for the `Dangerous Goods`. The same `Temperature Unit` needs to apply to all attributes in this structure.\n"
      },
      "UtilizedTransportEquipment": {
        "title": "Utilized Transport Equipment",
        "required": [
          "equipment",
          "isShipperOwned",
          "seals"
        ],
        "type": "object",
        "properties": {
          "equipment": {
            "$ref": "#/components/schemas/Equipment"
          },
          "isShipperOwned": {
            "type": "boolean",
            "description": "Indicates whether the container is shipper owned (SOC).\n",
            "example": true
          },
          "isNonOperatingReefer": {
            "type": "boolean",
            "description": "If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.\n\n**Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.\n",
            "example": false
          },
          "activeReeferSettings": {
            "$ref": "#/components/schemas/ActiveReeferSettings"
          },
          "shippingMarks": {
            "maxItems": 50,
            "type": "array",
            "description": "A list of the `ShippingMarks` applicable to this `UtilizedTransportEquipment`\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.\n",
              "example": "Made in China"
            }
          },
          "seals": {
            "minItems": 1,
            "type": "array",
            "description": "A list of `Seals`\n",
            "items": {
              "$ref": "#/components/schemas/Seal"
            }
          },
          "references": {
            "type": "array",
            "description": "A list of `References`\n",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "customsReferences": {
            "type": "array",
            "description": "A list of `Customs references`\n",
            "items": {
              "$ref": "#/components/schemas/CustomsReference"
            }
          }
        },
        "description": "Specifies the container (`equipment`), the total `weight`, total `volume`, possible `ActiveReeferSettings`, `seals` and `references`\n"
      },
      "Equipment": {
        "title": "Equipment",
        "required": [
          "equipmentReference"
        ],
        "type": "object",
        "properties": {
          "equipmentReference": {
            "maxLength": 11,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\nAccording to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).\n\nIf a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.\n",
            "example": "APZU4812090"
          },
          "ISOEquipmentCode": {
            "maxLength": 4,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Unique code for the different equipment size and type used to transport commodities. The code can refer to either the ISO size type (e.g. 22G1) or the ISO type group (e.g. 22GP) following the [ISO 6346](https://www.iso.org/standard/83558.html) standard.\n",
            "example": "22GP"
          },
          "tareWeight": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The weight of an empty container (gross container weight).\n",
            "format": "float",
            "example": 4800
          },
          "weightUnit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n\n**Condition:** Mandatory to provide if `tareWeight` is provided\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          }
        },
        "description": "Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.\n"
      },
      "Seal": {
        "title": "Seal",
        "required": [
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "maxLength": 15,
            "type": "string",
            "description": "Identifies a seal affixed to the container.",
            "example": "VET123"
          },
          "source": {
            "type": "string",
            "description": "The source of the seal, namely who has affixed the seal.\n- `CAR` (Carrier)\n- `SHI` (Shipper)\n- `VET` (Veterinary)\n- `CUS` (Customs)\n\n**Condition:** Seal source may be required depending on the type of commodity being shipped.\n",
            "example": "CUS",
            "enum": [
              "CAR",
              "SHI",
              "VET",
              "CUS"
            ]
          }
        },
        "description": "Addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This `Seal` is meant to stay on until the shipment equipment reaches its final destination.\n"
      },
      "ActiveReeferSettings": {
        "title": "Active Reefer Settings",
        "type": "object",
        "properties": {
          "temperatureSetpoint": {
            "type": "number",
            "description": "Target value of the temperature for the Reefer based on the cargo requirement.\n",
            "format": "float",
            "example": -15
          },
          "temperatureUnit": {
            "type": "string",
            "description": "The unit for temperature in Celsius or Fahrenheit\n\n- `CEL` (Celsius)\n- `FAH` (Fahrenheit)\n\n**Condition:** Mandatory to provide if `temperatureSetpoint` is provided\n",
            "example": "CEL",
            "enum": [
              "CEL",
              "FAH"
            ]
          },
          "o2Setpoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "The percentage of the controlled atmosphere CO<sub>2</sub> target value\n",
            "format": "float",
            "example": 25
          },
          "co2Setpoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "The percentage of the controlled atmosphere CO<sub>2</sub> target value\n",
            "format": "float",
            "example": 25
          },
          "humiditySetpoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "The percentage of the controlled atmosphere humidity target value\n",
            "format": "float",
            "example": 95.6
          },
          "airExchangeSetpoint": {
            "minimum": 0,
            "type": "number",
            "description": "Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container\n",
            "format": "float",
            "example": 15.4
          },
          "airExchangeUnit": {
            "type": "string",
            "description": "The unit for `airExchange` in metrics- or imperial- units per hour\n- `MQH` (Cubic metre per hour)\n- `FQH` (Cubic foot per hour)\n\n**Condition:** Mandatory to provide if `airExchange` is provided\n",
            "example": "MQH",
            "enum": [
              "MQH",
              "FQH"
            ]
          },
          "isVentilationOpen": {
            "type": "boolean",
            "description": "If `true` the ventilation orifice is `Open` - if `false` the ventilation orifice is `closed`\n",
            "example": true
          },
          "isDrainholesOpen": {
            "type": "boolean",
            "description": "Is drain holes open on the container\n",
            "example": true
          },
          "isBulbMode": {
            "type": "boolean",
            "description": "Is special container setting for handling flower bulbs active\n",
            "example": true
          },
          "isColdTreatmentRequired": {
            "type": "boolean",
            "description": "Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD\n",
            "example": true
          },
          "isControlledAtmosphereRequired": {
            "type": "boolean",
            "description": "Indicator of whether cargo requires Controlled Atmosphere.\n",
            "example": true
          }
        },
        "description": "The specifications for a Reefer equipment.\n\n**Condition:** Only applicable when `isNonOperatingReefer` is set to `false`\n"
      },
      "Transports": {
        "title": "Transports",
        "required": [
          "plannedArrivalDate",
          "plannedDepartureDate",
          "portOfDischarge",
          "portOfLoading",
          "vesselVoyages"
        ],
        "type": "object",
        "properties": {
          "plannedArrivalDate": {
            "type": "string",
            "description": "The planned date of arrival.\n",
            "format": "date",
            "example": "2024-06-07"
          },
          "plannedDepartureDate": {
            "type": "string",
            "description": "The planned date of departure.\n",
            "format": "date",
            "example": "2024-06-03"
          },
          "preCarriageBy": {
            "maxLength": 50,
            "type": "string",
            "description": "Mode of transportation for pre-carriage when transport to the port of loading is organized by the carrier. If this attributes is populated, then a Place of Receipt must also be defined. The currently supported values include:\n- `VESSEL` (Vessel)\n- `RAIL` (Rail)\n- `TRUCK` (Truck)\n- `BARGE` (Barge)\n- `MULTIMODAL` (if multiple modes are used)\n",
            "example": "RAIL"
          },
          "onCarriageBy": {
            "maxLength": 50,
            "type": "string",
            "description": "Mode of transportation for on-carriage when transport from the port of discharge is organized by the carrier. If this attributes is populated, then a Place of Delivery must also be defined. The currently supported values include:\n- `VESSEL` (Vessel)\n- `RAIL` (Rail)\n- `TRUCK` (Truck)\n- `BARGE` (Barge)\n- `MULTIMODAL` (if multiple modes are used)\n",
            "example": "TRUCK"
          },
          "placeOfReceipt": {
            "$ref": "#/components/schemas/PlaceOfReceipt"
          },
          "portOfLoading": {
            "$ref": "#/components/schemas/PortOfLoading"
          },
          "portOfDischarge": {
            "$ref": "#/components/schemas/PortOfDischarge"
          },
          "placeOfDelivery": {
            "$ref": "#/components/schemas/PlaceOfDelivery"
          },
          "onwardInlandRouting": {
            "$ref": "#/components/schemas/OnwardInlandRouting"
          },
          "vesselVoyages": {
            "minItems": 1,
            "type": "array",
            "description": "Allow the possibility to include multiple vessels/voyages in the `Transport Document` (e.g. the first sea going vessel and the mother vessel). At least one is mandatory to provide.\n",
            "items": {
              "$ref": "#/components/schemas/VesselVoyage"
            }
          }
        }
      },
      "VesselVoyage": {
        "title": "Vessel/Voyage",
        "required": [
          "carrierExportVoyageNumber",
          "vesselName"
        ],
        "type": "object",
        "properties": {
          "vesselName": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the first sea going Vessel on board which the cargo is loaded or intended to be loaded\n",
            "example": "King of the Seas"
          },
          "carrierExportVoyageNumber": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The identifier of an export voyage. The carrier-specific identifier of the export Voyage.\n",
            "example": "2103S"
          },
          "universalExportVoyageReference": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^\\d{2}[0-9A-Z]{2}[NEWSR]$",
            "type": "string",
            "description": "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWSR]`\n- `2 digits` for the year\n- `2 alphanumeric characters` for the sequence number of the voyage\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).\n",
            "example": "2103N"
          }
        },
        "description": "Vessel and export voyage"
      },
      "PlaceOfReceipt": {
        "title": "Place of Receipt",
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "facility": {
            "$ref": "#/components/schemas/Facility"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
            "example": "NLAMS"
          },
          "geoCoordinate": {
            "$ref": "#/components/schemas/GeoCoordinate"
          }
        },
        "description": "An object to capture `Place of Receipt` location specified as: the location where the cargo is handed over by the shipper, or his agent, to the shipping line. This indicates the point at which the shipping line takes on responsibility for carriage of the container.\n\n**Condition:** Only when pre-carriage is done by the carrier.\n\nThe location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.\n",
        "example": {
          "locationName": "Hamburg",
          "UNLocationCode": "DEHAM"
        }
      },
      "PortOfLoading": {
        "title": "Port of Loading",
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "city": {
            "$ref": "#/components/schemas/City"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
            "example": "NLAMS"
          }
        },
        "description": "An object to capture `Port of Loading` location specified as: the location where the cargo is loaded onto a first sea-going vessel for water transportation.\n\nThe location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.\n",
        "example": {
          "locationName": "Hamburg",
          "UNLocationCode": "DEHAM"
        }
      },
      "PortOfDischarge": {
        "title": "Port of Discharge",
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "city": {
            "$ref": "#/components/schemas/City"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
            "example": "NLAMS"
          }
        },
        "description": "An object to capture `Port of Discharge` location specified as: the location where the cargo is discharged from the last sea-going vessel.\n\nThe location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.\n",
        "example": {
          "locationName": "Hamburg",
          "UNLocationCode": "DEHAM"
        }
      },
      "PlaceOfDelivery": {
        "title": "Place of Delivery",
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "facility": {
            "$ref": "#/components/schemas/Facility"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
            "example": "NLAMS"
          },
          "geoCoordinate": {
            "$ref": "#/components/schemas/GeoCoordinate"
          }
        },
        "description": "An object to capture `Place of Delivery` location specified as: the location where the cargo is handed over to the consignee, or his agent, by the shipping line and where responsibility of the shipping line ceases.\n\n**Condition:** Only when onward transport is done by the carrier\n\nThe location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.\n",
        "example": {
          "locationName": "Hamburg",
          "UNLocationCode": "DEHAM"
        }
      },
      "OnwardInlandRouting": {
        "title": "Onward Inland Routing",
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "facility": {
            "$ref": "#/components/schemas/Facility"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
            "example": "NLAMS"
          }
        },
        "description": "An object to capture `Onward Inland Routing` location specified as the end location of the inland movement that takes place after the container(s) being delivered to the port of discharge/place of delivery for account and risk of merchant (merchant haulage).\n\nThe location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.\n\n**Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.\n",
        "example": {
          "locationName": "Hamburg",
          "UNLocationCode": "DEHAM"
        }
      },
      "Charge": {
        "title": "Charge",
        "required": [
          "calculationBasis",
          "chargeName",
          "currencyAmount",
          "currencyCode",
          "paymentTermCode",
          "quantity",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "chargeName": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Free text field describing the charge to apply\n",
            "example": "Documentation fee - Destination"
          },
          "currencyAmount": {
            "minimum": 0,
            "type": "number",
            "description": "The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.\n",
            "format": "float",
            "example": 1012.12
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "^[A-Z]{3}$",
            "type": "string",
            "description": "The currency for the charge, using a 3-character code ([ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)).\n",
            "example": "DKK"
          },
          "paymentTermCode": {
            "type": "string",
            "description": "An indicator of whether a charge is prepaid (PRE) or collect (COL). When prepaid, the charge is the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charge is the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).\n\n- `PRE` (Prepaid)\n- `COL` (Collect)\n",
            "example": "PRE",
            "enum": [
              "PRE",
              "COL"
            ]
          },
          "calculationBasis": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.\n",
            "example": "Per day"
          },
          "unitPrice": {
            "minimum": 0,
            "type": "number",
            "description": "The unit price of this charge item in the currency of the charge.\n",
            "format": "float",
            "example": 3456.6
          },
          "quantity": {
            "minimum": 0,
            "type": "number",
            "description": "The amount of unit for this charge item.\n",
            "format": "float",
            "example": 34.4
          }
        },
        "description": "Addresses the monetary value of freight and other service charges for a `Booking`.\n"
      },
      "Address": {
        "title": "Address",
        "required": [
          "city",
          "countryCode",
          "street"
        ],
        "type": "object",
        "properties": {
          "street": {
            "maxLength": 70,
            "type": "string",
            "description": "The name of the street of the party’s address.",
            "example": "Ruijggoordweg"
          },
          "streetNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The number of the street of the party’s address.",
            "example": "100"
          },
          "floor": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The floor of the party’s street number.\n",
            "example": "N/A"
          },
          "postCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The post code of the party’s address.",
            "example": "1047 HM"
          },
          "PObox": {
            "maxLength": 20,
            "type": "string",
            "description": "A numbered box at a post office where a person or business can have mail or parcels delivered.",
            "example": "123"
          },
          "city": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The city name of the party’s address.\n",
            "example": "Amsterdam"
          },
          "stateRegion": {
            "maxLength": 65,
            "type": "string",
            "description": "The state/region of the party’s address.",
            "example": "North Holland"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "NL"
          }
        },
        "description": "An object for storing address related information\n"
      },
      "City": {
        "title": "City",
        "required": [
          "city",
          "countryCode"
        ],
        "type": "object",
        "properties": {
          "city": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The city name of the party’s address.\n",
            "example": "Amsterdam"
          },
          "stateRegion": {
            "maxLength": 65,
            "type": "string",
            "description": "The state/region of the party’s address.\n",
            "example": "North Holland"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "NL"
          }
        },
        "description": "An object for storing city, state/region and country related information\n"
      },
      "Facility": {
        "title": "Facility",
        "required": [
          "facilityCode",
          "facilityCodeListProvider"
        ],
        "type": "object",
        "properties": {
          "facilityCode": {
            "maxLength": 6,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The code used for identifying the specific facility. This code does not include the UN Location Code.\nThe definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:\n- for `SMDG` - the codeList used is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)  - for `BIC` - the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/)",
            "example": "ADT"
          },
          "facilityCodeListProvider": {
            "type": "string",
            "description": "The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\n- `BIC` (Requires a UN Location Code)\n- `SMDG` (Requires a UN Location Code)\n",
            "example": "SMDG",
            "enum": [
              "BIC",
              "SMDG"
            ]
          }
        },
        "description": "An object used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\n"
      },
      "GeoCoordinate": {
        "title": "Geo Coordinate",
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "maxLength": 10,
            "type": "string",
            "description": "Geographic coordinate that specifies the north–south position of a point on the Earth's surface.",
            "example": "48.8585500"
          },
          "longitude": {
            "maxLength": 11,
            "type": "string",
            "description": "Geographic coordinate that specifies the east–west position of a point on the Earth's surface.",
            "example": "2.294492036"
          }
        },
        "description": "An object used to express a location using `latitude` and `longitude`.\n"
      },
      "OtherDocumentParty": {
        "title": "Other Document Party",
        "required": [
          "party",
          "partyFunction"
        ],
        "type": "object",
        "properties": {
          "party": {
            "$ref": "#/components/schemas/Party"
          },
          "partyFunction": {
            "maxLength": 3,
            "type": "string",
            "description": "Specifies the role of the party in a given context. Possible values are:\n\n- `SCO` (Service Contract Owner)\n- `DDR` (Consignor's freight forwarder)\n- `DDS` (Consignee's freight forwarder)\n- `COW` (Invoice payer on behalf of the consignor (shipper))\n- `COX` (Invoice payer on behalf of the consignee)\n",
            "example": "DDS"
          }
        },
        "description": "A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.\n"
      },
      "PartyAddress": {
        "title": "Party Address",
        "required": [
          "city",
          "countryCode",
          "street"
        ],
        "type": "object",
        "properties": {
          "street": {
            "maxLength": 70,
            "type": "string",
            "description": "The name of the street of the party’s address.",
            "example": "Ruijggoordweg"
          },
          "streetNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The number of the street of the party’s address.",
            "example": "100"
          },
          "floor": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The floor of the party’s street number.\n",
            "example": "2nd"
          },
          "postCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The post code of the party’s address.",
            "example": "1047 HM"
          },
          "PObox": {
            "maxLength": 20,
            "type": "string",
            "description": "A numbered box at a post office where a person or business can have mail or parcels delivered.",
            "example": "123"
          },
          "city": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The city name of the party’s address.\n",
            "example": "Amsterdam"
          },
          "UNLocationCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
            "type": "string",
            "description": "The UN Location code specifying where the carrier booking office is located. The pattern used must be\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)\n",
            "example": "NLAMS"
          },
          "stateRegion": {
            "maxLength": 65,
            "type": "string",
            "description": "The state/region of the party’s address.",
            "example": "North Holland"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
            "example": "NL"
          }
        },
        "description": "An object for storing address related information\n"
      },
      "Shipper": {
        "title": "Shipper",
        "required": [
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 70,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "IKEA Denmark"
          },
          "typeOfPerson": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
            "example": "NATURAL_PERSON"
          },
          "address": {
            "$ref": "#/components/schemas/PartyAddress"
          },
          "displayedAddress": {
            "maxItems": 6,
            "type": "array",
            "description": "The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.\n\n**Conditions:** if provided\n  - the displayed address must be included in the Transport Document.\n  - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters\n  - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A single address line\n",
              "example": "Strawinskylaan 4117"
            }
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          },
          "partyContactDetails": {
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "reference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference linked to the `Shipper`.\n",
            "example": "HHL007"
          },
          "purchaseOrderReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A purchase order reference linked to the `Shipper`.\n",
            "example": "HHL007"
          }
        },
        "description": "The party by whom or in whose name or on whose behalf a contract of carriage of goods by sea has been concluded with a carrier, or the party by whom or in whose name, or on whose behalf, the goods are actually delivered to the carrier in relation to the contract of carriage by sea.\n\n**Condition:** Either the `address` or the `displayedAddress` must be included in the `Transport Document`.\n"
      },
      "Consignee": {
        "title": "Consignee",
        "required": [
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 70,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "IKEA Denmark"
          },
          "typeOfPerson": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
            "example": "NATURAL_PERSON"
          },
          "address": {
            "$ref": "#/components/schemas/PartyAddress"
          },
          "displayedAddress": {
            "maxItems": 6,
            "type": "array",
            "description": "The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.\n\n**Conditions:** if provided\n  - the displayed address must be included in the Transport Document.\n  - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters\n  - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A single address line\n",
              "example": "Strawinskylaan 4117"
            }
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          },
          "partyContactDetails": {
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "reference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference linked to the `Consignee`.\n",
            "example": "HHL007"
          },
          "purchaseOrderReference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A purchase order reference linked to the `Consignee`.\n",
            "example": "HHL007"
          }
        },
        "description": "The party to which goods are consigned in the `Master Bill of Lading`.\n\n**Condition:** Mandatory for non-negotiable BL (`isToOrder=false`)\n"
      },
      "Endorsee": {
        "title": "Endorsee",
        "required": [
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 70,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "IKEA Denmark"
          },
          "address": {
            "$ref": "#/components/schemas/PartyAddress"
          },
          "displayedAddress": {
            "maxItems": 6,
            "type": "array",
            "description": "The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.\n\n**Conditions:** if provided\n  - the displayed address must be included in the Transport Document.\n  - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters\n  - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A single address line\n",
              "example": "Strawinskylaan 4117"
            }
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          },
          "partyContactDetails": {
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          }
        },
        "description": "The party to whom the title to the goods is transferred by means of endorsement.\n\n**Condition:** Can only be provided for negotiable BLs (`isToOrder=true`). If a negotiable BL does not have an `Endorsee`, the BL is said to be \"blank endorsed\". Note `Consignee` and `Endorsee` are mutually exclusive.\n"
      },
      "CarriersAgentAtDestination": {
        "title": "Carrier's Agent At Destination",
        "required": [
          "address",
          "partyContactDetails",
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 70,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "IKEA Denmark"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "partyContactDetails": {
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          }
        },
        "description": "The party on the import side assigned by the carrier to whom the customer need to reach out to for cargo release.\n"
      },
      "NotifyParty": {
        "title": "Notify Party",
        "required": [
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 70,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "IKEA Denmark"
          },
          "typeOfPerson": {
            "maxLength": 50,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Can be one of the following values as per the Union Customs Code art. 5(4):\n- `NATURAL_PERSON` (A person that is an individual living human being)\n- `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)\n- `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)\n",
            "example": "NATURAL_PERSON"
          },
          "address": {
            "$ref": "#/components/schemas/PartyAddress"
          },
          "displayedAddress": {
            "maxItems": 6,
            "type": "array",
            "description": "The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.\n\n**Conditions:** if provided\n  - the displayed address must be included in the Transport Document.\n  - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters\n  - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters\n",
            "items": {
              "maxLength": 35,
              "type": "string",
              "description": "A single address line\n",
              "example": "Strawinskylaan 4117"
            }
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          },
          "partyContactDetails": {
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "reference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference linked to the `NotifyParty`.\n",
            "example": "HHL007"
          }
        },
        "description": "The person to be notified when a shipment arrives at its destination.\n"
      },
      "Party": {
        "title": "Party",
        "required": [
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 70,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "Asseco Denmark"
          },
          "address": {
            "$ref": "#/components/schemas/PartyAddress"
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          },
          "partyContactDetails": {
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          },
          "reference": {
            "maxLength": 35,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "A reference linked to the `Party`.\n",
            "example": "HHL007"
          }
        },
        "description": "Refers to a company or a legal entity.\n"
      },
      "IssuingParty": {
        "title": "Issuing Party",
        "required": [
          "address",
          "partyName"
        ],
        "type": "object",
        "properties": {
          "partyName": {
            "maxLength": 70,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "Name of the party.\n",
            "example": "Asseco Denmark"
          },
          "address": {
            "$ref": "#/components/schemas/PartyAddress"
          },
          "identifyingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingCode"
            }
          },
          "taxLegalReferences": {
            "type": "array",
            "description": "A list of `Tax References` for a `Party`\n",
            "items": {
              "$ref": "#/components/schemas/TaxLegalReference"
            }
          },
          "partyContactDetails": {
            "type": "array",
            "description": "A list of contact details\n",
            "items": {
              "$ref": "#/components/schemas/PartyContactDetail"
            }
          }
        },
        "description": "Refers to a company or a legal entity.\n"
      },
      "Place of Issue": {
        "title": "Place of Issue",
        "type": "object",
        "properties": {
          "locationName": {
            "maxLength": 100,
            "pattern": "^\\S(?:.*\\S)?$",
            "type": "string",
            "description": "The name of the location.",
            "example": "Port of Amsterdam"
          }
        },
        "description": "An object to capture where the original Transport Document (`Bill of Lading`) will be issued.\n\nThe location can be specified either as a `UN Location Code` or as a `CountryCode`.\n",
        "oneOf": [
          {
            "title": "UN Location Code",
            "required": [
              "UNLocationCode"
            ],
            "type": "object",
            "properties": {
              "UNLocationCode": {
                "maxLength": 5,
                "minLength": 5,
                "pattern": "^[A-Z]{2}[A-Z2-9]{3}$",
                "type": "string",
                "description": "The UN Location code specifying where the place is located. The pattern used must be\n\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\n\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)",
                "example": "NLAMS"
              }
            }
          },
          {
            "title": "Country Code",
            "required": [
              "countryCode"
            ],
            "type": "object",
            "properties": {
              "countryCode": {
                "maxLength": 2,
                "minLength": 2,
                "pattern": "^[A-Z]{2}$",
                "type": "string",
                "description": "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\n",
                "example": "NL"
              }
            }
          }
        ]
      },
      "Document Parties": {
        "title": "Document Parties",
        "required": [
          "issuingParty",
          "shipper"
        ],
        "type": "object",
        "properties": {
          "shipper": {
            "$ref": "#/components/schemas/Shipper"
          },
          "consignee": {
            "$ref": "#/components/schemas/Consignee"
          },
          "endorsee": {
            "$ref": "#/components/schemas/Endorsee"
          },
          "issuingParty": {
            "$ref": "#/components/schemas/IssuingParty"
          },
          "carriersAgentAtDestination": {
            "$ref": "#/components/schemas/CarriersAgentAtDestination"
          },
          "notifyParties": {
            "maxItems": 3,
            "type": "array",
            "description": "List of up to 3 `Notify Parties`. The first item in the list is the **First Notify Party** (`N1`), the second item is the **Second Notify Party** (`N2`) and the last item is the **Other Notify Party** (`NI`).\n\n**Condition:** Mandatory for To Order BLs, `isToOrder=true`\n",
            "items": {
              "$ref": "#/components/schemas/NotifyParty"
            }
          },
          "other": {
            "type": "array",
            "description": "A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.",
            "items": {
              "$ref": "#/components/schemas/OtherDocumentParty"
            }
          }
        },
        "description": "All `Parties` with associated roles.\n"
      },
      "Gross Weight": {
        "title": "Gross Weight",
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "Total weight of the goods carried, including packaging. Excludes the tare weight of the container(s).\n",
            "format": "float",
            "example": 2.4
          },
          "unit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in imperial or metric terms\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          }
        },
        "description": "The total weight of the cargo including packaging items being carried in the container(s). Excludes the tare weight of the container(s).\n"
      },
      "Gross Volume": {
        "title": "Gross Volume",
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "Calculated by multiplying the width, height, and length of the packed cargo.\n",
            "format": "float",
            "example": 2.4
          },
          "unit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in either imperial or metric terms\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n",
            "example": "MTQ",
            "enum": [
              "MTQ",
              "FTQ"
            ]
          }
        },
        "description": "Calculated by multiplying the width, height, and length of the packed cargo.\n"
      },
      "Gross Weight_1": {
        "title": "Gross Weight",
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The grand total weight of the DG cargo and weight per `UNNumber`/`NANumber` including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.\n",
            "format": "float",
            "example": 12000.3
          },
          "unit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in imperial or metric terms\n\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          }
        },
        "description": "Total weight of the goods carried, including packaging.\n"
      },
      "Net Weight": {
        "title": "Net Weight",
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "Total weight of the goods carried, excluding packaging.\n",
            "format": "float",
            "example": 2.4
          },
          "unit": {
            "type": "string",
            "description": "Unit of measure used to describe the `netWeight`. Possible values are\n\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR"
            ]
          }
        },
        "description": "Total weight of the goods carried, excluding packaging.\n"
      },
      "Net Explosive Content": {
        "title": "Net Explosive Content",
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The total weight of the explosive substances, without the packaging’s, casings, etc.\n",
            "format": "float",
            "example": 2.4
          },
          "unit": {
            "type": "string",
            "description": "Unit of measure used to describe the `netExplosiveWeight`. Possible values are\n\n- `KGM` (Kilograms)\n- `LBR` (Pounds)\n- `GRM` (Grams)\n- `ONZ` (Ounce)\n",
            "example": "KGM",
            "enum": [
              "KGM",
              "LBR",
              "GRM",
              "ONZ"
            ]
          }
        },
        "description": "The total weight of the explosive substances, without the packaging’s, casings, etc.\n"
      },
      "Net Volume": {
        "title": "Net Volume",
        "required": [
          "unit",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The volume of the referenced dangerous goods.\n",
            "format": "float",
            "example": 2.4
          },
          "unit": {
            "type": "string",
            "description": "The unit of measure which can be expressed in either imperial or metric terms\n\n- `FTQ` (Cubic foot)\n- `MTQ` (Cubic meter)\n- `LTR` (Litre)\n",
            "example": "MTQ",
            "enum": [
              "MTQ",
              "FTQ",
              "LTR"
            ]
          }
        },
        "description": "The volume of the referenced dangerous goods.\n\n**Condition:** only applicable to liquids and gas.\n"
      }
    },
    "parameters": {
      "Api-Version-Major": {
        "name": "API-Version",
        "in": "header",
        "description": "An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.\n",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "3"
        }
      },
      "envelopeReference": {
        "name": "envelopeReference",
        "in": "path",
        "description": "The receiving platform-provided unique identifier for the given eBL envelope.\n",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "maxLength": 100,
          "type": "string",
          "example": "4TkP5nvgTly0MwFrDxfIkR2rvOjkUIgzibBoKABU"
        }
      },
      "documentChecksum": {
        "name": "documentChecksum",
        "in": "path",
        "description": "The checksum of the document computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "maxLength": 64,
          "minLength": 64,
          "pattern": "^[0-9a-f]+$",
          "type": "string",
          "example": "7d00064ed0b90467ff7aff6032d8e2d94845745b6590895cd95708d2ee4243d8"
        }
      }
    },
    "headers": {
      "API-Version": {
        "description": "SemVer used to indicate the version of the contract (API version) returned.\n",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "3.0.0"
        }
      }
    }
  }
}
