---
openapi: "3.0.3"
info:
  title: "DCSA Just in Time Port Call API"
  description: |
    # DCSA Just in Time Port Call API

    This is the OpenAPI specification of the **DCSA Just in Time Port Call** standard.

    This API allows the transfer of structured JIT events from a publisher to a subscriber.

    The event publisher implements the `GET /events` endpoint, which can be called by authorized API consumers to retrieve relevant available events.

    The event subscribers implement the `POST /events` endpoint, which can be called by event publishers call to send relevant events as they become available.

    The registration of event subscribers with event publishers is out of scope.

    The authentication and authorization in both directions between event publishers and subscribers is out of scope.

    ### Work in progress ⚠️

    The DCSA Just in Time Port Call standard, including this API, is currently being designed and is **not** ready for general adoption yet.
  contact:
    name: "Digital Container Shipping Association (DCSA)"
    url: "https://dcsa.org"
    email: "info@dcsa.org"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  version: "2.0.0"
tags:
- name: "Event Publisher Endpoints"
  description: "Endpoints implemented by the adopters who publish events"
- name: "Event Subscriber Endpoints"
  description: "Endpoints implemented by the adopters who receive events"
paths:
  /events:
    get:
      tags:
      - "Event Publisher Endpoints"
      summary: "Retrieves a list of events"
      description: |
        Retrieves the list of events matching the criteria provided as query parameters.

        If no events match the criteria provided as query parameters, the response should not be an HTTP 404 error message, but a regular HTTP 200 response with an empty array in the message body.

        The ordering of events in the response message is unspecified.

        The event publisher is expected to additionally filter the events based on the authorization and registration profile of the authenticated party calling this endpoint. Authorization, registration and any such additional filtering are out of scope in this standard.

        ## Filtering

        Every event publisher **must** support the retrieval of events based on the transport document references of one or more bills of lading, specified as the value(s) of the `transportDocumentReferences` query parameter.

        Each event publisher can decide whether to support any of the additional filtering query parameters defined in the standard for this endpoint, and should document the decision in their published copy of the API specification.

        When receiving requests containing an unsupported query parameter, an event publisher can choose to either ignore the query parameter (if possible) or to reject the request with an HTTP 400. In particular, the publisher can reject with HTTP 400 a GET request with a number of `transportDocumentReferences` or `equipmentReferences` larger than the maximum supported (which in the case of some publishers is likely to be `1`). Publishers should document these limits in their copy of the API specification.

        ### Filtering by transport document reference

        When filtering using the `transportDocumentReferences` query parameter, the response contains events for all the bills of lading with the specified transport document reference for which an event is available (and accessible by the party making the API request).

        Even when requesting event for a single transport document reference, in the absence of further explicit filtering in the request or implicit filtering by the event publisher, the response is expected to contain all the events corresponding to that bill of lading.

        ### Filtering alternatives to the transport document reference

        As an alternative to retrieving events by the bill of lading using the `transportDocumentReferences` query parameter, if support is implemented by the event publisher, it is also possible to filter events using these query parameters:
        * `equipmentReferences`
        * `vesselIMONumber` or `vesselName`
        * `carrierImportVoyageNumber` or `universalImportVoyageReference`
        * `carrierServiceCode` or `universalServiceReference`

        The event publisher can decide to also allow retrieving events without specifying any of these filtering query parameters, instead filtering the results only based on the authorization and registration profile of the authenticated party calling this endpoint.

        ### Filtering by event date-time

        Whenever the query parameters filter could retrieve large number of historical events (for example when filtering only by vessel name or IMO number), the request should also include at least the `eventDateTimeMin` query parameter and could also include the `eventDateTimeMax` query parameter.

        The event publisher can separately also decide to have default relative date ranges and only return events having an `eventDateTime` within those ranges.

        ## Pagination

        Response pagination uses a mechanism based on the `limit` and `cursor` query parameters and on the `Next-Page-Cursor` response header.

        ### Optional support

        Each event publisher can decide whether to support the pagination of results, or to only allow limiting the response size using filtering query parameters.

        If the event publisher does not provide pagination support, it can choose to either reject with an HTTP 400 any request containing the `limit` or `cursor` query parameters, or to handle the request normally while silently ignoring the pagination query parameters.

        ### Enabling pagination

        The event retriever can use the `limit` query parameter to specify a maximum number of events that should be included in the response.

        The event publisher can separately choose (and document on their copy of the published API specification) its own limit to the number of events that it would include in responses.

        The effective page size limit is the minimum between the `limit` query parameter (if specified) and the publisher's own maximum page size configuration setting.

        ### Retrieving results pages

        If based on filtering the response would include more events than this effective page size limit, the event publisher only adds events to the response up to this effective page size limit, setting in the response the `Next-Page-Cursor` to a value that it can accept as the value of the `cursor` query parameter in a subsequent request and use it to return the next page of results.

        The API client reads the value of the `Next-Page-Cursor` response header and sets it as the value of the `cursor` query parameter in its next request.

        The API client **must** keep alongside the `cursor` all the original query parameters from the request that retrieved the first page, in order to allow either a stateful or a stateless implementation of the pagination mechanism by the event publisher.

        The effect of changing any of the original query parameters in subsequent pagination requests is unspecified and may result in the rejection of the request by the event publisher with an HTTP 4xx response.

        The effect of attempting to use a cursor more than once (for example to "go back" to previous pages) is unspecified and may result in the rejection of the request by the event publisher with an HTTP 4xx response. (This is by design a backend-to-backend API, not intended for use directly from frontend applications and therefore not directly supporting a typical full set of web frontend pagination actions.)

        When responding with the last page of results, the event publisher no longer includes a `Next-Page-Cursor` response header. The last page of results may be empty, for example in the case of a stateless pagination implementation by the event publisher.
      operationId: "get-events"
      parameters:
      - name: "UNLocationCode"
        in: "query"
        description: "UN location code."
        schema:
          type: "string"
        example: "NLAMS"
      - name: "portVisitReference"
        in: "query"
        description: "Port visit reference."
        schema:
          type: "string"
        example: "NLAMS1234589"
      - name: "carrierServiceName"
        in: "query"
        description: "Carrier-specific service name."
        schema:
          type: "string"
        example: "Great Lion Service"
      - name: "carrierServiceCode"
        in: "query"
        description: "Carrier-specific service code."
        schema:
          type: "string"
        example: "FE1"
      - name: "universalServiceReference"
        in: "query"
        description: "A global unique service reference, as per DCSA standard, agreed by VSA partners for the service."
        schema:
          type: "string"
        example: "SR12345A"
      - name: "terminalCallReference"
        in: "query"
        description: "The terminal call reference for which to retrieve available events."
        schema:
          type: "string"
        example: "15063401"
      - name: "carrierImportVoyageNumber"
        in: "query"
        description: "The identifier of an import voyage. The carrier-specific identifier of the import Voyage."
        schema:
          type: "string"
        example: "1234N"
      - name: "universalImportVoyageReference"
        in: "query"
        description: "A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage."
        schema:
          type: "string"
        example: "2301W"
      - name: "carrierExportVoyageNumber"
        in: "query"
        description: "The identifier of an export voyage. The carrier-specific identifier of the export Voyage."
        schema:
          type: "string"
        example: "1234N"
      - name: "universalExportVoyageReference"
        in: "query"
        description: "A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage."
        schema:
          type: "string"
        example: "2301W"
      - name: "portCallServiceTypeCode"
        in: "query"
        description: "Port call service type."
        schema:
          type: "string"
        example: "BERTH"
      - name: "vesselIMONumber"
        in: "query"
        description: "Vessel IMO number."
        schema:
          type: "string"
        example: "12345678"
      - name: "vesselName"
        in: "query"
        description: "Vessel name."
        schema:
          type: "string"
        example: "King of the Seas"
      - name: "vesselMMSINumber"
        in: "query"
        description: "Vessel MMSI number."
        schema:
          type: "string"
        example: "278111222"
      - name: "portCallID"
        in: "query"
        description: "Unique identifier of a port call"
        schema:
          type: "string"
        example: "0342254a-5927-4856-b9c9-aa12e7c00563"
      - name: "terminalCallID"
        in: "query"
        description: "Unique identifier of a terminal call"
        schema:
          type: "string"
        example: "0342254a-5927-4856-b9c9-aa12e7c00563"
      - name: "portCallServiceID"
        in: "query"
        description: "Unique identifier of a port call service"
        schema:
          type: "string"
        example: "0342254a-5927-4856-b9c9-aa12e7c00563"
      - name: "timestampID"
        in: "query"
        description: "Unique identifier of a timestamp"
        schema:
          type: "string"
        example: "0342254a-5927-4856-b9c9-aa12e7c00563"
      - name: "classifierCode"
        in: "query"
        description: "Classifier code (EST / REQ / PLN / ACT)"
        schema:
          type: "string"
        example: "ACT"
      - name: "eventDateTimeMin"
        in: "query"
        description: "Retrieve events occurring at or after this timestamp"
        schema:
          type: "string"
          format: "date-time"
        example: "2025-01-23T01:23:45Z"
      - name: "eventDateTimeMax"
        in: "query"
        description: "Retrieve events occurring at or before this timestamp"
        schema:
          type: "string"
          format: "date-time"
        example: "2025-01-23T01:23:45Z"
      - name: "limit"
        in: "query"
        description: "Maximum number of events to include in each page of the response."
        schema:
          minimum: 1
          type: "integer"
          format: "int32"
        example: 10
      - name: "cursor"
        in: "query"
        description: "Set to the value of the `Next-Page-Cursor` header of the previous response to retrieve the next page."
        schema:
          type: "string"
        example: "ExampleNextPageCursor"
      - name: "API-Version"
        in: "header"
        description: "Every API request and response must contain the `API-Version` header, set to the full version of the implemented DCSA standard."
        required: false
        schema:
          type: "string"
        example: "2.0.0"
      - name: "Request-Sending-Party"
        in: "header"
        description: |
          When communicating through an optional system that acts as an application level JIT communication proxy,
          forwarding API calls between JIT **Service Providers** and JIT **Service Consumers**,
          the API client sets this request header to identify itself to the JIT proxy and to the API server
          as the original sending party of the API request.

          The assignment of party identifiers by the JIT proxy and the distribution of identifiers
          to the parties connecting through the JIT proxy are out of scope.
        required: false
        schema:
          type: "string"
          example: "Carrier-123"
      - name: "Request-Receiving-Party"
        in: "header"
        description: |
          When communicating through an optional system that acts as an application level JIT communication proxy,
          forwarding API calls between JIT **Service Providers** and JIT **Service Consumers**,
          the API client sets this request header to identify to the JIT proxy the target receiving party of the API request.

          The assignment of party identifiers by the JIT proxy and the distribution of identifiers
          to the parties connecting through the JIT proxy are out of scope.
        required: false
        schema:
          type: "string"
          example: "Terminal-456"
      responses:
        "200":
          description: "List of events matching the query parameters"
          headers:
            API-Version:
              $ref: "#/components/headers/API-Version"
            Next-Page-Cursor:
              $ref: "#/components/headers/Next-Page-Cursor"
            Response-Sending-Party:
              $ref: "#/components/headers/Response-Sending-Party"
            Response-Receiving-Party:
              $ref: "#/components/headers/Response-Receiving-Party"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEventsResponse"
        default:
          description: "Error response"
          headers:
            API-Version:
              $ref: "#/components/headers/API-Version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEventsError"
    post:
      tags:
      - "Event Subscriber Endpoints"
      summary: "Sends a list of events"
      description: |
        Used by an event publisher to send events to a registered subscriber.

        The subscription mechanism and the management of subscriber profiles, including any filtering or page limits similar with the GET endpoint, are out of scope in this standard.
      operationId: "post-events"
      requestBody:
        description: "List of events"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostEventsRequest"
        required: true
      responses:
        "200":
          description: "Events response"
          headers:
            API-Version:
              $ref: "#/components/headers/API-Version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostEventsResponse"
        default:
          description: "Error response"
          headers:
            API-Version:
              $ref: "#/components/headers/API-Version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostEventsError"
components:
  schemas:
    Address:
      type: "object"
      properties:
        street:
          maxLength: 70
          type: "string"
          description: "The name of the street."
          example: "Ruijggoordweg"
        streetNumber:
          maxLength: 50
          type: "string"
          description: "The number of the street."
          example: "100"
        floor:
          maxLength: 50
          type: "string"
          description: "The floor of the street number."
          example: "N/A"
        postCode:
          maxLength: 10
          type: "string"
          description: "The post code of the address."
          example: "1047 HM"
        POBox:
          maxLength: 20
          type: "string"
          description: "A numbered box at a post office where a person or business can have mail or parcels delivered."
          example: "123"
        city:
          maxLength: 35
          type: "string"
          description: "The name of the city."
          example: "Amsterdam"
        stateRegion:
          maxLength: 65
          type: "string"
          description: "The name of the state/region."
          example: "North Holland"
        countryCode:
          maxLength: 2
          type: "string"
          description: "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)"
          example: "NL"
      description: "An object for storing address-related information."
    ContainerCountBySize:
      type: "object"
      properties:
        totalUnits:
          type: "integer"
          description: |
            The total number of containers (relevant only if specific numbers for each container size are not provided).
          format: "int32"
          example: 123
        size20Units:
          type: "integer"
          description: "The number of 20-foot containers."
          format: "int32"
          example: 123
        size40Units:
          type: "integer"
          description: "The number of 40-foot containers."
          format: "int32"
          example: 123
        size45Units:
          type: "integer"
          description: "The number of 45-foot containers."
          format: "int32"
          example: 123
      description: |
        Number of containers by size (20-foot, 40-foot, 45-foot) or in total.
    ContainerCountByTypeAndSize:
      type: "object"
      properties:
        totalUnits:
          description: |
            The total number of containers (relevant only if specific numbers for each container type are not provided).
          allOf:
          - $ref: "#/components/schemas/ContainerCountBySize"
        ladenUnits:
          description: "The number of laden containers."
          allOf:
          - $ref: "#/components/schemas/ContainerCountBySize"
        emptyUnits:
          description: "The number of empty containers."
          allOf:
          - $ref: "#/components/schemas/ContainerCountBySize"
        pluggedReeferUnits:
          description: "The number of plugged reefer containers."
          allOf:
          - $ref: "#/components/schemas/ContainerCountBySize"
        outOfGaugeUnits:
          description: "The number of out-of-gauge containers."
          allOf:
          - $ref: "#/components/schemas/ContainerCountBySize"
      description: |
        Number of containers by type (laden, empty, plugged reefer, out-of-gauge) or in total,
        further categorized by size (20-foot, 40-foot, 45-foot) or in total.
    Event:
      type: "object"
      properties:
        isFYI:
          type: "boolean"
          description: |
            Flag indicating that this event is primarily meant for another party - but is sent as a FYI (for your information).
          example: false
        portCall:
          description: "Port call information"
          allOf:
          - $ref: "#/components/schemas/PortCall"
        terminalCall:
          description: "Terminal call information"
          allOf:
          - $ref: "#/components/schemas/TerminalCall"
        portCallService:
          description: "Port call service information"
          allOf:
          - $ref: "#/components/schemas/PortCallService"
        timestamp:
          description: |
            Date and time (and related metadata) of a port call service,
            exchanged between the service provider and service consumer as part of the "ERP" pattern.
          allOf:
          - $ref: "#/components/schemas/Timestamp"
      description: "Just in Time Port Call event"
    Facility:
      type: "object"
      properties:
        facilityCode:
          maxLength: 6
          type: "string"
          description: |
            Code identifying a specific facility, as defined by the `facilityCodeListProvider`.
          example: "ADT"
        facilityCodeListProvider:
          maxLength: 10
          type: "string"
          description: |
            Code list provider (each with its relevant code list) defining the `facilityCode`:
            - `SMDG` (using [SMDG Terminal Code List](https://smdg.org/documents/smdg-code-lists/smdg-terminal-code-list/))
            - `BIC` (using [BIC Facility Codes](https://www.bic-code.org/facility-codes/))
          example: "SMDG"
      description: |
        Facility identified by a code as defined by a code list provider.
    FeedbackElement:
      type: "object"
      properties:
        severity:
          maxLength: 50
          type: "string"
          description: |-
            Code denoting the severity of a `FeedbackElement`

            - `ERROR` - Error that fully or partially prevents the correct processing of the request
            - `WARN` - Warning about the request being processed in a potentially unexpected way
            - `INFO` - Informational message about how the request is processed
          example: "ERROR"
        message:
          maxLength: 5000
          type: "string"
          description: |
            Human readable feedback message that can be programmatically relayed to a user of the event publishing organization
          example: "The facility SMDG code does not match the location UN/LOCODE"
        propertyPath:
          maxLength: 1000
          type: "string"
          description: |
            [JSONPath](https://github.com/json-path/JsonPath) within the request message of the specific property
            about which the feedback is provided (if applicable)
          example: "$.events[2].location"
      description: |
        An individual piece of feedback (potentially out of several) providing information on how an API request is processed
    GeoCoordinate:
      type: "object"
      properties:
        latitude:
          maxLength: 10
          type: "string"
          description: |
            Geographic coordinate that specifies the north–south position of a point on the Earth's surface.
          example: "48.85855"
        longitude:
          maxLength: 11
          type: "string"
          description: |
            Geographic coordinate that specifies the east–west position of a point on the Earth's surface.
          example: "2.294492036"
      description: "An object used to express a location using `latitude` and `longitude`."
    GetEventsError:
      type: "object"
      properties:
        feedbackElements:
          type: "array"
          description: |
            Feedback elements indicating why the request could not be processed.

            At least one feedback element of severity `ERROR` is expected.
            Lower severity feedback elements may also be included.
          items:
            $ref: "#/components/schemas/FeedbackElement"
      description: |
        Error API response to a `GET Events` request
    GetEventsResponse:
      type: "object"
      properties:
        events:
          type: "array"
          description: |
            The list of events matching the filter specified by the request query parameters
          items:
            $ref: "#/components/schemas/Event"
        feedbackElements:
          type: "array"
          description: |
            Optional list of feedback elements indicating how the request was processed
          items:
            $ref: "#/components/schemas/FeedbackElement"
      description: |
        API response to a `GET Events` request
    Location:
      type: "object"
      properties:
        locationName:
          maxLength: 100
          type: "string"
          description: "The name of the location."
          example: "Port of Amsterdam"
        facilityTypeCode:
          maxLength: 10
          type: "string"
          description: |-
            Code identifying a specific type of facility

            - `BORD` - Border
            - `CLOC` - Customer location
            - `COFS` - Container freight station
            - `OFFD` - Off-dock storage
            - `DEPO` - Depot
            - `INTE` - Inland terminal
            - `POTE` - Port terminal
            - `RAMP` - Ramp
            - `WAYP` - Waypoint
          example: "RAMP"
        address:
          description: "Location address"
          allOf:
          - $ref: "#/components/schemas/Address"
        UNLocationCode:
          maxLength: 5
          type: "string"
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: "NLAMS"
        facility:
          description: |
            Facility identified by a code as defined by a code list provider.
          allOf:
          - $ref: "#/components/schemas/Facility"
        geoCoordinate:
          description: "An object used to express a location using `latitude` and `longitude`."
          allOf:
          - $ref: "#/components/schemas/GeoCoordinate"
      description: "Location information"
    MovesForecast:
      type: "object"
      properties:
        carrierCode:
          maxLength: 4
          type: "string"
          description: |
            SMDG or SCAC code of the carrier for which the moves forecast is provided.

            If left unspecified, this is the aggregated moves forecast is for all the VSA partner carriers on the vessel
            for which a dedicated moves forecast was not provided.
          example: "MAEU"
        carrierCodeListProvider:
          maxLength: 5
          type: "string"
          description: |
            The code list provider defining the `carrierCode`:
            - `SMDG` (Ship Message Design Group)
            - `NMFTA` (National Motor Freight Traffic Association)
          example: "SMDG"
        restowUnits:
          description: "The number of container to restow."
          allOf:
          - $ref: "#/components/schemas/ContainerCountBySize"
        loadUnits:
          description: "The number of container to load."
          allOf:
          - $ref: "#/components/schemas/ContainerCountByTypeAndSize"
        dischargeUnits:
          description: "The number of container to discharge."
          allOf:
          - $ref: "#/components/schemas/ContainerCountByTypeAndSize"
      description: |
        Forecasted units of containers to move for loading and discharging, empty or laden,
        covering various types such as Dry, reefer, Out-of-Gauge (OOG), and units of containers to restow at a terminal.
        These can be detailed at varying levels of granularity.

        The moves forecast of the VSA partner carriers on the vessel can be specified using:
        - one optional `MovesForecast` object (with a specified `carrierCode`) for each VSA partner carrier on the vessel,
        representing the moves forecast for that specific carrier;
        - one optional `MovesForecast` object (without a `carrierCode`) representing the aggregated moves forecast
        of all the VSA partner carriers on the vessel for which a dedicated moves forecast was not provided.
    PortCall:
      type: "object"
      properties:
        portCallID:
          type: "string"
          description: "Universal unique identifier of the port call"
          format: "uuid"
          example: "3910eb91-8791-4699-8029-8bba8cedb6f5"
        portVisitReference:
          maxLength: 50
          type: "string"
          description: |
            The unique reference that can be used to link different terminal calls to the same port visit.
            The reference is provided by the port to uniquely identify a port call.
          example: "NLAMS1234589"
        UNLocationCode:
          maxLength: 5
          type: "string"
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: "NLAMS"
        vessel:
          description: "Vessel information relevant for a port call service"
          allOf:
          - $ref: "#/components/schemas/Vessel"
        isOmitted:
          type: "boolean"
          description: "Flag indicating whether the port call is omitted by the carrier."
          example: false
      description: "Port call information"
    PortCallService:
      type: "object"
      properties:
        portCallID:
          type: "string"
          description: "Universal unique identifier of the port call service"
          format: "uuid"
          example: "3910eb91-8791-4699-8029-8bba8cedb6f5"
        portCallServiceTypeCode:
          maxLength: 50
          type: "string"
          description: |
            The type of the port call service, with the value from one of the service lists below.

            These port call services are negotiable through an "ERP" pattern including an "A":
            - `BERTH` (Berth)
            - `CARGO_OPERATIONS` (Cargo operations)
            - `PILOTAGE` (Pilotage)
            - `TOWAGE` (Towage)
            - `MOORING` (Mooring)
            - `BUNKERING` (Bunkering)
            - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)
            - `ANCHORAGE` (Anchorage)
            - `SLUDGE` (Sludge)

            These port call services only an "A" timestamp without an "ERP" pattern:
            - `SEA_PASSAGE` (Sea Passage)
            - `ALL_FAST` (All Fast)
            - `GANGWAY_DOWN_AND_SECURE` (Gangway down and secure)
            - `VESSEL_READY_FOR_CARGO_OPERATIONS` (Vessel Ready for cargo operations)
            - `VESSEL_READY_TO_SAIL` (Vessel Ready to sail)
            - `DISCHARGE_CARGO_OPERATIONS` (Discharge cargo operations)
            - `LOADING_CARGO_OPERATIONS` (Loading cargo operations)
            - `LASHING` (Lashing)
            - `SAFETY` (Safety)
            - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
            - `SHORE_POWER` (ShorePower)

            This port call service has neither an "A" timestamp nor an "ERP" pattern:
            - `MOVES` (Moves)
          example: "BERTH"
        portCallServiceEventTypeCode:
          maxLength: 4
          type: "string"
          description: |
            The code to identify the type of event that is related to the port call service:
            - `STRT` (Started)
            - `CMPL` (Completed)
            - `ARRI` (Arrived)
            - `DEPA` (Departed)

            Services with these `portCallServiceTypeCode` values only have `portCallServiceEventTypeCode` the values `STRT` or `CMPL`:
            - `CARGO_OPERATIONS` (Cargo operations)
            - `PILOTAGE` (Pilotage)
            - `TOWAGE` (Towage)
            - `MOORING` (Mooring)
            - `BUNKERING` (Bunkering)
            - `ANCHORAGE` (Anchorage)
            - `SLUDGE` (Sludge)
            - `SEA_PASSAGE` (Sea Passage)
            - `DISCHARGE_CARGO_OPERATIONS` (Discharge cargo operations)
            - `LOADING_CARGO_OPERATIONS` (Loading cargo operations)
            - `LASHING` (Lashing)
            - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
            - `SHORE_POWER` (ShorePower)

            Services with these `portCallServiceTypeCode` values only have the `portCallServiceEventTypeCode` value `ARRI`:
            - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)
            - `ALL_FAST` (All Fast)
            - `GANGWAY_DOWN_AND_SECURE` (Gangway down and secure)
            - `VESSEL_READY_FOR_CARGO_OPERATIONS` (Vessel Ready for cargo operations)
            - `VESSEL_READY_TO_SAIL` (Vessel Ready to sail)
            - `MOVES` (Moves)

            Services with  `portCallServiceTypeCode='SAFETY'` (Safety) only have the `portCallServiceEventTypeCode` value `DEPA`.

            Services with `portCallServiceTypeCode='BERTH'` (Berth) only have the `portCallServiceEventTypeCode` values `ARRI` or `DEPA`.
          example: "STRT"
        portCallPhaseTypeCode:
          maxLength: 4
          type: "string"
          description: |
            The general direction of the vessel during this port call service:
            - `INBD` (Inbound)
            - `ALGS` (Alongside)
            - `SHIF` (Shifting)
            - `OUTB` (Outbound)

            The direction `INBD` should be used with one of these `portCallServiceTypeCode` values:
            - `BERTH` (Berth)
            - `PILOTAGE` (Pilotage)
            - `TOWAGE` (Towage)
            - `MOORING` (Mooring)
            - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)
            - `SEA_PASSAGE` (Sea Passage)

            The direction `ALGS` should be used with one of these `portCallServiceTypeCode` values:
            - `BERTH` (Berth)
            - `BUNKERING` (Bunkering)
            - `CARGO_OPERATIONS` (Cargo operations)
            - `ALL_FAST` (All Fast)
            - `GANGWAY_DOWN_AND_SECURE` (Gangway down and secure)
            - `VESSEL_READY_FOR_CARGO_OPERATIONS` (Vessel Ready for cargo operations)
            - `VESSEL_READY_TO_SAIL` (Vessel Ready to sail)
            - `DISCHARGE_CARGO_OPERATIONS` (Discharge cargo operations)
            - `LOADING_CARGO_OPERATIONS` (Loading cargo operations)
            - `LASHING` (Lashing)
            - `SAFETY` (Safety)
            - `SHORE_POWER` (ShorePower)

            The direction `SHIF` should be used with one of these `portCallServiceTypeCode` values:
            - `PILOTAGE` (Pilotage)
            - `TOWAGE` (Towage)
            - `MOORING` (Mooring)

            The direction `OUTB` should be used with one of these `portCallServiceTypeCode` values:
            - `BERTH` (Berth)
            - `PILOTAGE` (Pilotage)
            - `TOWAGE` (Towage)
            - `MOORING` (Mooring)
            - `SEA_PASSAGE` (Sea Passage)

            The `portCallPhaseTypeCode` is not applicable for these `portCallServiceTypeCode` values:
            - `ANCHORAGE` (Anchorage)
            - `SLUDGE` (Sludge)
            - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
            - `MOVES` (Moves)
          example: "ALGS"
        facilityTypeCode:
          maxLength: 4
          type: "string"
          description: |
            Code identifying a specific type of facility involved in a port call service:
            - `PBPL` (Pilot boarding place)
            - `BRTH` (Berth)
            - `ANCH` (Anchorage Location)

            The `PBPL` facility type is relevant for port call services with the following `portCallServiceTypeCode`:
            - `PILOTAGE` (Pilotage)
            - `TOWAGE` (Towage)
            - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)

            The `BRTH` facility type is relevant for port call services with the following `portCallServiceTypeCode`:
            - `BERTH` (Berth)
            - `CARGO_OPERATIONS` (Cargo operations)
            - `PILOTAGE` (Pilotage)
            - `TOWAGE` (Towage)
            - `MOORING` (Mooring)
            - `BUNKERING` (Bunkering)
            - `SLUDGE` (Sludge)
            - `ALL_FAST` (All Fast)
            - `GANGWAY_DOWN_AND_SECURE` (Gangway down and secure)
            - `VESSEL_READY_FOR_CARGO_OPERATIONS` (Vessel Ready for cargo operations)
            - `VESSEL_READY_TO_SAIL` (Vessel Ready to sail)
            - `DISCHARGE_CARGO_OPERATIONS` (Discharge cargo operations)
            - `LOADING_CARGO_OPERATIONS` (Loading cargo operations)
            - `LASHING` (Lashing)
            - `SAFETY` (Safety)
            - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
            - `SHORE_POWER` (ShorePower)

            The `ANCH` facility type is relevant for port call services with the following `portCallServiceTypeCode`:
            - `ANCHORAGE` (Anchorage)
            - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
          example: "BRTH"
        serviceLocation:
          description: "The location at which the port call service is provided"
          allOf:
          - $ref: "#/components/schemas/Location"
        movesForecasts:
          type: "array"
          description: "The moves forecasts of a port call service with `portCallServiceTypeCode='MOVES'`"
          items:
            $ref: "#/components/schemas/MovesForecast"
        isCanceled:
          type: "boolean"
          description: "Flag indicating that this port call service is canceled by the service provider."
          example: false
        isDeclined:
          type: "boolean"
          description: "Flag indicating that this port call service is declined by the service consumer."
          example: false
      description: "Port call service information"
    PostEventsError:
      type: "object"
      properties:
        feedbackElements:
          type: "array"
          description: |
            Feedback elements indicating why request could not be processed.

            At least one feedback element of severity `ERROR` is expected.
            Lower severity feedback elements may also be included.

            When sent in response to a request that contains an array of events,
            the order of the `feedbackElements` is not related to the list of request events.
            Instead, the relevant request event is indicated by the `propertyPath` of each `FeedbackElement`.
          items:
            $ref: "#/components/schemas/FeedbackElement"
      description: |
        Error API response to a `POST Events` request.

        If some of the events in the request were successfully processed,
        a regular `PostEventsResponse` is expected to be used instead,
        with `feedbackElements` indicating which events were not processed and why.
    PostEventsRequest:
      type: "object"
      properties:
        events:
          type: "array"
          description: "List of events."
          items:
            $ref: "#/components/schemas/Event"
      description: "API message containing a list of events."
    PostEventsResponse:
      type: "object"
      properties:
        feedbackElements:
          type: "array"
          description: |
            Optional list of feedback elements indicating how the request was processed.

            There can be zero, one or more feedback elements per event in the request.
            The order of `feedbackElements` is not related to the order of events in the request.
            Instead, the relevant request event is indicated by the `propertyPath` of each `FeedbackElement`.
          items:
            $ref: "#/components/schemas/FeedbackElement"
      description: |
        API response to a `POST Events` request
    TerminalCall:
      type: "object"
      properties:
        terminalCallID:
          type: "string"
          description: "Universal unique identifier of the terminal call"
          format: "uuid"
          example: "3910eb91-8791-4699-8029-8bba8cedb6f5"
        terminalCallReference:
          maxLength: 100
          type: "string"
          description: |
            The unique reference of a terminal call, provided by the vessel operator.

            This corresponds to the property `transportCallReference` from the DCSA Operational Vessel Schedules (OVS) 3.0 standard.
          example: "15063401"
        sequenceNumber:
          type: "integer"
          description: |
            Sequential number assigned to each terminal call within a port call,
            indicating the order in which the terminal calls are scheduled to occur.
            This number helps differentiate multiple terminal visits in the same port call.
          format: "int32"
          example: 2
        carrierServiceName:
          maxLength: 50
          type: "string"
          description: "The carrier-specific name of the service for which the schedule details are published."
          example: "Great Lion Service"
        carrierServiceCode:
          maxLength: 11
          type: "string"
          description: "The carrier-specific code of the service for which the schedule details are published."
          example: "FE1"
        universalServiceReference:
          maxLength: 8
          type: "string"
          description: "A global unique service reference, as per DCSA standard, agreed by VSA partners for the service."
          example: "SR12345A"
        carrierImportVoyageNumber:
          maxLength: 50
          type: "string"
          description: "Carrier-specific identifier of the import voyage."
          example: "2208N"
        universalImportVoyageReference:
          maxLength: 5
          type: "string"
          description: "Universal identifier of the import voyage."
          example: "2301W"
        carrierExportVoyageNumber:
          maxLength: 50
          type: "string"
          description: "Carrier-specific identifier of the export voyage."
          example: "2208N"
        universalExportVoyageReference:
          maxLength: 5
          type: "string"
          description: "Universal identifier of the export voyage."
          example: "2301W"
        isOmitted:
          type: "boolean"
          description: "Flag indicating whether the terminal call is omitted by the carrier."
          example: false
      description: "Terminal call information"
    Timestamp:
      type: "object"
      properties:
        timestampID:
          type: "string"
          description: "Universal unique identifier of the timestamp"
          format: "uuid"
          example: "3910eb91-8791-4699-8029-8bba8cedb6f5"
        replyToTimestampID:
          type: "string"
          description: "Universal unique identifier of the timestamp to which this timestamp is a reply"
          format: "uuid"
          example: "3910eb91-8791-4699-8029-8bba8cedb6f5"
        classifierCode:
          maxLength: 3
          type: "string"
          description: |
            Code identifying the type of this timestamp:
            - `ACT` (Actual)
            - `EST` (Estimated)
            - `PLN` (Planned)
            - `REQ` (Requested)

            Timestamps of type `EST`, `PLN` and `ACT` are sent by the service provider to the service consumer.

            Timestamps of type `REQ` are sent by the service consumer to the service provider.

            Timestamps of type `ACT` are relevant in port call services of every type except for `MOVES`.

            Timestamps of type `EST`, `REQ` and `PLN` are relevant in port call services of these types:
            - `BERTH` (Berth)
            - `CARGO_OPERATIONS` (Cargo operations)
            - `PILOTAGE` (Pilotage)
            - `TOWAGE` (Towage)
            - `MOORING` (Mooring)
            - `BUNKERING` (Bunkering)
            - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)
            - `ANCHORAGE` (Anchorage)
            - `SLUDGE` (Sludge)
          example: "EST"
        serviceDateTime:
          maxLength: 30
          type: "string"
          description: "The date and time when the service was provided or is expected to be provided."
          format: "date-time"
          example: "2025-01-23T01:23:45Z"
        delayReasonCode:
          maxLength: 3
          type: "string"
          description: |
            Code identifying the reason for a delay, as defined by SMDG here:
            https://smdg.org/documents/smdg-code-lists/delay-reason-and-port-call-activity/
          example: "STR"
        remark:
          maxLength: 500
          type: "string"
          description: "Free text used to provide any relevant additional information."
          example: "Port closed due to strike"
      description: |
        Date and time (and related metadata) of a port call service,
        exchanged between the service provider and service consumer as part of the "ERP" pattern.
    Vessel:
      type: "object"
      properties:
        vesselIMONumber:
          maxLength: 8
          type: "string"
          description: |
            The unique reference for a registered vessel, which remains unchanged throughout the entire lifetime of the vessel.
            The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd's register code.
          example: "9321483"
        vesselMMSINumber:
          maxLength: 9
          type: "string"
          description: |
            Maritime Mobile Service Identities (MMSIs) are nine-digit numbers used by maritime digital selective calling (DSC),
            automatic identification systems (AIS) and certain other equipment to uniquely identify a ship or a coast radio station.
          example: "278111222"
        vesselName:
          maxLength: 50
          type: "string"
          description: "Vessel name"
          example: "King of the Seas"
        vesselCallSign:
          maxLength: 10
          type: "string"
          description: |
            A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU).
            It consists of a three-letter alphanumeric prefix that indicates nationality, followed by one to four characters
            to identify the individual vessel.
          example: "NCVV"
        vesselTypeCode:
          maxLength: 4
          type: "string"
          description: |
            Categorization of ocean-going vessels distinguished by the main cargo the vessel carries:
            - `GCGO` (General cargo)
            - `CONT` (Container)
            - `RORO` (RoRo)
            - `CARC` (Car carrier)
            - `PASS` (Passenger)
            - `FERY` (Ferry)
            - `BULK` (Bulk)
            - `TANK` (Tanker)
            - `LGTK` (Liquefied gas tanker)
            - `ASSI` (Assistance)
            - `PILO` (Pilot boat)
          example: "CONT"
        vesselPosition:
          description: "Current location of the vessel"
          allOf:
          - $ref: "#/components/schemas/Location"
        milesToDestinationPort:
          type: "number"
          description: |
            Remaining distance reported by the vessel to the berth in the next destination port, expressed in nautical miles.
          format: "double"
          example: 245.45
        dimensionUnit:
          maxLength: 3
          type: "string"
          description: |
            The unit of measure in which the vessel size and draft are expressed:
            - `MTR` (Meter)
            - `FOT` (Foot)

            If a length is specified in feet (`FOT`) then the decimal part means a fraction of a foot and **not** as a number of inches.
            E.g. 120.5 feet means 120 and a half foot (which would be 120'6").
          example: "MTR"
        lengthOverall:
          type: "number"
          description: |
            The maximum length of a ship's hull measured parallel to the waterline (Length OverAll).
          format: "float"
          example: 245.45
        width:
          type: "number"
          description: |
            Overall width of the ship measured at the widest point of the nominal waterline.
          format: "float"
          example: 37.33
        airDraft:
          type: "number"
          description: |
            The vertical distance from the surface of the water to the highest point of mast or aerial.
          format: "float"
          example: 55.0
        draft:
          type: "number"
          description: |
            The vertical distance between the waterline and the bottom of the hull (keel) of a ship.
            The depth to which a ship is immersed in water.
          format: "float"
          example: 12.5
        aftDraft:
          type: "number"
          description: |
            The vertical distance between the waterline and the bottom of the hull (keel) at the stern (after part) of the vessel.
            The depth to which the after part of the ship is immersed in water.
          format: "float"
          example: 37
        forwardDraft:
          type: "number"
          description: |
            The vertical distance between the waterline and the bottom of the hull (keel) at the bow (forward part) of the vessel.
            The depth to which the forward part of the ship is immersed in water.
          format: "float"
          example: 35
      description: "Vessel information relevant for a port call service"
  headers:
    API-Version:
      description: "Every API request and response must contain the `API-Version` header, set to the full version of the implemented DCSA standard."
      schema:
        type: "string"
        example: "2.0.0"
    Next-Page-Cursor:
      description: "A cursor value pointing to the next page of results in a paginated GET response."
      schema:
        type: "string"
        example: "ExampleNextPageCursor"
    Request-Sending-Party:
      description: |
        When communicating through an optional system that acts as an application level JIT communication proxy,
        forwarding API calls between JIT **Service Providers** and JIT **Service Consumers**,
        the API client sets this request header to identify itself to the JIT proxy and to the API server
        as the original sending party of the API request.

        The assignment of party identifiers by the JIT proxy and the distribution of identifiers
        to the parties connecting through the JIT proxy are out of scope.
      schema:
        type: "string"
        example: "Carrier-123"
    Request-Receiving-Party:
      description: |
        When communicating through an optional system that acts as an application level JIT communication proxy,
        forwarding API calls between JIT **Service Providers** and JIT **Service Consumers**,
        the API client sets this request header to identify to the JIT proxy the target receiving party of the API request.

        The assignment of party identifiers by the JIT proxy and the distribution of identifiers
        to the parties connecting through the JIT proxy are out of scope.
      schema:
        type: "string"
        example: "Terminal-456"
    Response-Sending-Party:
      description: |
        When communicating through an optional system that acts as an application level JIT communication proxy,
        forwarding API calls between JIT **Service Providers** and JIT **Service Consumers**,
        the API server sets this response header to identify itself to the JIT proxy and to the API client
        as the original sending party of the API response.

        The value of this response header must be the same as the value of the request header `Request-Receiving-Party`.

        The assignment of party identifiers by the JIT proxy and the distribution of identifiers
        to the parties connecting through the JIT proxy are out of scope.
      schema:
        type: "string"
        example: "Terminal-456"
    Response-Receiving-Party:
      description: |
        When communicating through an optional system that acts as an application level JIT communication proxy,
        forwarding API calls between JIT **Service Providers** and JIT **Service Consumers**,
        the API server sets this response header to identify to the JIT proxy the target receiving party of the API response.

        The value of this response header must be the same as the value of the request header `Request-Sending-Party`.

        The assignment of party identifiers by the JIT proxy and the distribution of identifiers
        to the parties connecting through the JIT proxy are out of scope.
      schema:
        type: "string"
        example: "Carrier-123"
