---
openapi: "3.0.3"
info:
  title: "DCSA Verified Gross Mass API"
  description: |
    # DCSA Verified Gross Mass (VGM) API

    This is the OpenAPI specification of the **DCSA Verified Gross Mass (VGM)** standard.

    This API allows the transfer of structured VGM data from a VGM Producer to a VGM Consumer.

    Each VGM Producer implements the `GET /vgms` endpoint, which can be called by the authorized VGM Consumers to retrieve relevant available VGMs.

    Each VGM Consumer implements the `POST /vgms` endpoint, which can be called by VGM Producers call to send relevant VGMs as they become available.

    The registration of VGM Consumers with VGM Producers is out of scope.

    The authentication and authorization in both directions between VGM Producers and VGM Consumers is out of scope.

    ### Work in progress ⚠️

    The DCSA Verified Gross Mass (VGM) standard, including this API, is currently being designed and is **not** ready for general adoption yet.
  contact:
    name: "Digital Container Shipping Association (DCSA)"
    url: "https://dcsa.org"
    email: "info@dcsa.org"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  version: "1.0.0"
tags:
- name: "VGM Producer Endpoints"
  description: "Endpoints implemented by the VGM Producers"
- name: "VGM Consumer Endpoints"
  description: "Endpoints implemented by the VGM Consumers"
paths:
  /vgms:
    get:
      tags:
      - "VGM Producer Endpoints"
      summary: "Retrieves a list of VGMs"
      description: |
        Retrieves the list of VGMs matching the criteria provided as query parameters.

        If no VGMs match the criteria provided as query parameters, the response should not be an HTTP 404 error message, but a regular HTTP 200 response with an empty array in the message body.

        The ordering of VGMs in the response message is unspecified.

        The VGM Producer is expected to additionally filter the VGMs based on the authorization and registration profile of the authenticated VGM Consumer calling this endpoint. Authorization, registration and any such additional filtering are out of scope in this standard.

        ## VGM filtering

        Every VGM Producer must support the following combinations of query parameter filters:
        * `carrierBookingReference`
        * `carrierBookingReference`, `equipmentReference`
        * `transportDocumentReference`
        * `transportDocumentReference`, `equipmentReference`

        Every VGM Producer must support combining any of the query parameter filters above with all of these additional filters:
        * `vgmUpdatedDateTimeMin`
        * `vgmUpdatedDateTimeMax`
        * `vgmUpdatedDateTimeMin`, `vgmUpdatedDateTimeMax`

        Each VGM Producer can separately also decide to have default relative date ranges and only return VGMs having an `vgmUpdatedDateTime` within those ranges.

        When receiving requests containing an unsupported query parameter, a VGM Producer can choose to either ignore the query parameter (if possible) or to reject the request with an HTTP 400.

        ## Pagination

        Response pagination uses a mechanism based on the `limit` and `cursor` query parameters and on the `Next-Page-Cursor` response header.

        ### Optional support

        Each VGM Producer can decide whether to support the pagination of results, or to only allow limiting the response size using filtering query parameters.

        If the VGM Producer does not provide pagination support, it can choose to either reject with an HTTP 400 any request containing the `limit` or `cursor` query parameters, or to handle the request normally while silently ignoring the pagination query parameters.

        ### Enabling pagination

        The VGM Consumer can use the `limit` query parameter to specify a maximum number of VGMs that should be included in the response.

        The VGM Producer can separately choose (and document on their copy of the published API specification) its own limit to the number of VGMs that it would include in responses.

        The effective page size limit is the minimum between the `limit` query parameter (if specified) and the VGM Producer's own maximum page size configuration setting.

        ### Retrieving results pages

        If based on filtering the response would include more VGMs than this effective page size limit, the VGM Producer only adds VGMs to the response up to this effective page size limit, setting in the response the `Next-Page-Cursor` to a value that it can accept as the value of the `cursor` query parameter in a subsequent request and use it to return the next page of results.

        The VGM Consumer reads the value of the `Next-Page-Cursor` response header and sets it as the value of the `cursor` query parameter in its next request.

        The VGM Consumer **must** keep alongside the `cursor` all the original query parameters from the request that retrieved the first page, in order to allow either a stateful or a stateless implementation of the pagination mechanism by the VGM Producer.

        The effect of changing any of the original query parameters in subsequent pagination requests is unspecified and may result in the rejection of the request by the VGM Producer with an HTTP 4xx response.

        The effect of attempting to use a cursor more than once (for example to "go back" to previous pages) is unspecified and may result in the rejection of the request by the VGM Producer with an HTTP 4xx response. (This is by design a backend-to-backend API, not intended for use directly from frontend applications and therefore not directly supporting a typical full set of web frontend pagination actions.)

        When responding with the last page of results, the VGM Producer no longer includes a `Next-Page-Cursor` response header. The last page of results may be empty, for example in the case of a stateless pagination implementation by the VGM Producer.
      operationId: "get-vgms"
      parameters:
      - name: "carrierBookingReference"
        in: "query"
        description: "Reference of the transport document for which to return the associated VGMs"
        schema:
          type: "string"
        example: "HHL71800000"
      - name: "transportDocumentReference"
        in: "query"
        description: "Reference of the transport document for which to return the associated VGMs"
        schema:
          type: "string"
        example: "HHL71800000"
      - name: "equipmentReference"
        in: "query"
        description: "Reference of the equipment for which to return the associated VGMs"
        schema:
          type: "string"
        example: "APZU4812090"
      - name: "updatedDateTimeMin"
        in: "query"
        description: "Retrieve VGMs with an `updatedDateTime` at or after this timestamp"
        schema:
          type: "string"
          format: "date-time"
        example: "2025-01-23T01:23:45Z"
      - name: "updatedDateTimeMax"
        in: "query"
        description: "Retrieve VGMs with an `updatedDateTime` at or before this timestamp"
        schema:
          type: "string"
          format: "date-time"
        example: "2025-01-23T01:23:45Z"
      - name: "limit"
        in: "query"
        description: "Maximum number of VGMs to include in each page of the response."
        schema:
          type: "integer"
          format: "int32"
        example: 10
      - name: "cursor"
        in: "query"
        description: "Set to the value of the `Next-Page-Cursor` header of the previous response to retrieve the next page."
        schema:
          type: "string"
        example: "ExampleNextPageCursor"
      - name: "API-Version"
        in: "header"
        description: "Every API request and response must contain the `API-Version` header, set to the full version of the implemented DCSA standard."
        required: false
        schema:
          type: "string"
        example: "1.0.0"
      responses:
        "200":
          description: "List of VGMs matching the query parameters"
          headers:
            API-Version:
              $ref: "#/components/headers/API-Version"
            Next-Page-Cursor:
              $ref: "#/components/headers/Next-Page-Cursor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetVGMsResponse"
        default:
          description: "Error response"
          headers:
            API-Version:
              $ref: "#/components/headers/API-Version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetVGMsError"
    post:
      tags:
      - "VGM Consumer Endpoints"
      summary: "Sends a list of VGMs"
      description: |
        Used by a VGM Producer to send VGM data to a registered VGM Consumer.

        The subscription mechanism and the management of VGM Consumer profiles, including any filtering or page limits similar with the GET endpoint, are out of scope in this standard.
      operationId: "post-vgms"
      parameters:
      - name: "API-Version"
        in: "header"
        description: "Every API request and response must contain the `API-Version` header, set to the full version of the implemented DCSA standard."
        required: false
        schema:
          type: "string"
        example: "1.0.0"
      requestBody:
        description: "List of VGMs"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostVGMsRequest"
        required: true
      responses:
        "200":
          description: "VGMs response"
          headers:
            API-Version:
              $ref: "#/components/headers/API-Version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostVGMsResponse"
        default:
          description: "Error response"
          headers:
            API-Version:
              $ref: "#/components/headers/API-Version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostVGMsError"
components:
  schemas:
    Address:
      type: "object"
      properties:
        street:
          maxLength: 70
          type: "string"
          description: "The name of the street."
          example: "Ruijggoordweg"
        streetNumber:
          maxLength: 50
          type: "string"
          description: "The number of the street."
          example: "100"
        floor:
          maxLength: 50
          type: "string"
          description: "The floor of the street number."
          example: "N/A"
        postCode:
          maxLength: 10
          type: "string"
          description: "The post code of the address."
          example: "1047 HM"
        POBox:
          maxLength: 20
          type: "string"
          description: "A numbered box at a post office where a person or business can have mail or parcels delivered."
          example: "123"
        city:
          maxLength: 35
          type: "string"
          description: "The name of the city."
          example: "Amsterdam"
        stateRegion:
          maxLength: 65
          type: "string"
          description: "The name of the state/region."
          example: "North Holland"
        countryCode:
          maxLength: 2
          type: "string"
          description: "The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)"
          example: "NL"
      description: "An object for storing address-related information."
    ClassifiedDateTime:
      type: "object"
      properties:
        value:
          maxLength: 30
          type: "string"
          description: |
            Timestamp representation [in RFC 3339 format](https://swagger.io/docs/specification/v3_0/data-models/data-types/#strings)
          format: "date-time"
          example: "2025-01-23T01:23:45Z"
        classifier:
          maxLength: 10
          type: "string"
          description: |-
            Classifier denoting whether an event is planned, estimated or actual
            - `PLN` - Planned
            - `EST` - Estimated
            - `ACT` - Actual
          example: "EST"
      description: "Date and time classified as planned, estimated or actual"
    Facility:
      type: "object"
      properties:
        facilityCode:
          maxLength: 6
          type: "string"
          description: |
            Code identifying a specific facility, as defined by the `facilityCodeListProvider`.
          example: "ADT"
        facilityCodeListProvider:
          maxLength: 10
          type: "string"
          description: |
            Code list provider (each with its relevant code list) defining the `facilityCode`:
            - `SMDG` (using [SMDG Terminal Code List](https://smdg.org/documents/smdg-code-lists/smdg-terminal-code-list/))
            - `BIC` (using [BIC Facility Codes](https://www.bic-code.org/facility-codes/))
          example: "SMDG"
      description: |
        Facility identified by a code as defined by a code list provider.
    FeedbackElement:
      type: "object"
      properties:
        severity:
          maxLength: 50
          type: "string"
          description: |-
            Code denoting the severity of a `FeedbackElement`

            - `ERROR` - Error that fully or partially prevents the correct processing of the request
            - `WARN` - Warning about the request being processed in a potentially unexpected way
            - `INFO` - Informational message about how the request is processed
          example: "ERROR"
        message:
          maxLength: 5000
          type: "string"
          description: |
            Human readable feedback message that can be programmatically relayed to a user of the VGM publishing organization
          example: "The facility SMDG code does not match the location UN/LOCODE"
        propertyPath:
          maxLength: 1000
          type: "string"
          description: |
            [JSONPath](https://github.com/json-path/JsonPath) within the request message of the specific property
            about which the feedback is provided (if applicable)
          example: "$.VGMs[2].location"
      description: |
        An individual piece of feedback (potentially out of several) providing information on how an API request is processed
    GeoCoordinate:
      type: "object"
      properties:
        latitude:
          maxLength: 10
          type: "string"
          description: |
            Geographic coordinate that specifies the north–south position of a point on the Earth's surface.
          example: "48.85855"
        longitude:
          maxLength: 11
          type: "string"
          description: |
            Geographic coordinate that specifies the east–west position of a point on the Earth's surface.
          example: "2.294492036"
      description: "An object used to express a location using `latitude` and `longitude`."
    GetVGMsError:
      type: "object"
      properties:
        feedbackElements:
          type: "array"
          description: |
            Feedback elements indicating why the request could not be processed.

            At least one feedback element of severity `ERROR` is expected.
            Lower severity feedback elements may also be included.
          items:
            $ref: "#/components/schemas/FeedbackElement"
      description: |
        Error API response to a `GET VGMs` request
    GetVGMsResponse:
      type: "object"
      properties:
        VGMs:
          type: "array"
          description: |
            The list of VGMs matching the filter specified by the request query parameters
          items:
            $ref: "#/components/schemas/VGM"
        feedbackElements:
          type: "array"
          description: |
            Optional list of feedback elements indicating how the request was processed
          items:
            $ref: "#/components/schemas/FeedbackElement"
      description: |
        API response to a `GET VGMs` request
    Location:
      type: "object"
      properties:
        locationName:
          maxLength: 100
          type: "string"
          description: "The name of the location."
          example: "Port of Amsterdam"
        facilityTypeCode:
          maxLength: 10
          type: "string"
          description: |-
            Code identifying a specific type of facility

            - `BORD` - Border
            - `CLOC` - Customer location
            - `COFS` - Container freight station
            - `OFFD` - Off-dock storage
            - `DEPO` - Depot
            - `INTE` - Inland terminal
            - `POTE` - Port terminal
            - `RAMP` - Ramp
            - `WAYP` - Waypoint
          example: "RAMP"
        address:
          description: "Location address"
          allOf:
          - $ref: "#/components/schemas/Address"
        UNLocationCode:
          maxLength: 5
          type: "string"
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: "NLAMS"
        facility:
          description: |
            Facility identified by a code as defined by a code list provider.
          allOf:
          - $ref: "#/components/schemas/Facility"
        geoCoordinate:
          description: "An object used to express a location using `latitude` and `longitude`."
          allOf:
          - $ref: "#/components/schemas/GeoCoordinate"
      description: "Location information"
    Party:
      type: "object"
      properties:
        partyCode:
          maxLength: 150
          type: "string"
          description: |
            Code identifying the party as per the `codeListProvider` and `codeListName`.
          example: "MSK"
        codeListProvider:
          maxLength: 100
          type: "string"
          description: |
            Code of the provider of a list of codes identifying a party, including but not limited to:
            - `BOLE` (Bolero)
            - `BRIT` (BRITC eBL)
            - `CARX` (CargoX)
            - `COVA` (Covantis)
            - `CRED` (Credore)
            - `DCSA` (Digital Container Shipping Association)
            - `DNB` (Dun and Bradstreet)
            - `ESSD` (EssDOCS)
            - `ETEU` (eTEU)
            - `ETIT` (e-title)
            - `FMC` (Federal Maritime Commission)
            - `GLEIF` (Global Legal Entity Identifier Foundation)
            - `GSBN` (Global Shipping Business Network)
            - `IDT` (ICE Digital Trade)
            - `IQAX` (IQAX)
            - `KTNE` (KTNET)
            - `NMFTA` (National Motor Freight Traffic Association)
            - `SECR` (Secro)
            - `SMDG` (Ship Message Design Group)
            - `TRAC` (Enigio trace:original)
            - `TRGO` (TradeGO)
            - `W3C` (World Wide Web Consortium)
            - `WAVE` (Wave)
            - `WISE` (WiseTech)
            - `ZZZ` (Mutually defined)
          example: "W3C"
        codeListName:
          maxLength: 100
          type: "string"
          description: |
            Name of the code list in which the `codeListProvider` defines the `partyCode`, including but not limited to:
            - `DID` (Decentralized Identifier) for `codeListProvider` `W3C`
            - `LEI` (Legal Entity Identifier) for `codeListProvider` `GLEIF`
            - `DUNS` (Data Universal Numbering System) for `codeListProvider` `DNB`
          example: "DID"
        partyFunction:
          maxLength: 3
          type: "string"
          description: |
            Code identifying the function of the party, as defined in
            [UN/CEFACT Revision 2004B](https://www.stylusstudio.com/edifact/D04B/3035.htm)
            or a subsequent revision.
          example: "CA"
      description: "Identification of a container shipping party"
    PostVGMsError:
      type: "object"
      properties:
        feedbackElements:
          type: "array"
          description: |
            Feedback elements indicating why request could not be processed.

            At least one feedback element of severity `ERROR` is expected.
            Lower severity feedback elements may also be included.

            When sent in response to a request that contains an array of VGMs,
            the order of the `feedbackElements` is not related to the list of request VGMs.
            Instead, the relevant request VGM is indicated by the `propertyPath` of each `FeedbackElement`.
          items:
            $ref: "#/components/schemas/FeedbackElement"
      description: |
        Error API response to a `POST VGMs` request.

        If some of the VGMs in the request were successfully processed,
        a regular `PostVGMsResponse` is expected to be used instead,
        with `feedbackElements` indicating which VGMs were not processed and why.
    PostVGMsRequest:
      type: "object"
      properties:
        VGMs:
          type: "array"
          description: "List of VGMs."
          items:
            $ref: "#/components/schemas/VGM"
      description: "API message containing a list of VGMs."
    PostVGMsResponse:
      type: "object"
      properties:
        feedbackElements:
          type: "array"
          description: |
            Optional list of feedback elements indicating how the request was processed.

            There can be zero, one or more feedback elements per event in the request.
            The order of `feedbackElements` is not related to the order of VGMs in the request.
            Instead, the relevant request VGM is indicated by the `propertyPath` of each `FeedbackElement`.
          items:
            $ref: "#/components/schemas/FeedbackElement"
      description: |
        API response to a `POST VGMs` request
    VGM:
      type: "object"
      properties:
        VGMRouting:
          description: |
            Routing of an event from the originating party, via forwarding parties, to the destination party.
          allOf:
          - $ref: "#/components/schemas/VGMRouting"
        VGMID:
          maxLength: 500
          type: "string"
          description: |
            ID of the VGM, unique among all the VGMs published by a VGM Producer.

            A VGM overrides any other VGM that has the same `vgmID` and an earlier `updatedDateTime`.

            Each VGM is uniquely identified within each VGM 1.x standard ecosystem of connected implementers
            by a composite key including:
            - `VGMRouting.originatingParty.partyCode`
            - `VGMRouting.originatingParty.codeListProvider`
            - `VGMRouting.originatingParty.codeListName`
            - `VGMID`
          example: "VGM-HHL71800000-APZU4812090-2025-01-23T01:23:45Z"
        isRetracted:
          type: "boolean"
          description: |
            Flag indicating that the VGM is retracted.

            The data in this and all previously transmitted VGMs with the same `VGMID` must be discarded or ignored.

            If this flag is set, any VGM data other than the `VGMID` is irrelevant (if present).
        updatedDateTime:
          maxLength: 30
          type: "string"
          description: "The date and time when the VGM was last updated."
          format: "date-time"
          example: "2025-01-23T01:23:45Z"
      description: "Verified Gross Mass submission for one piece of equipment"
    VGMRouting:
      type: "object"
      properties:
        originatingParty:
          description: |
            The initial party with which the event originated.
          allOf:
          - $ref: "#/components/schemas/Party"
        forwardingParties:
          type: "array"
          description: |
            Ordered list of parties forwarding the event between the originating and destination party.
          items:
            $ref: "#/components/schemas/Party"
        destinationParty:
          description: |
            The final party intended as destination of the event.
          allOf:
          - $ref: "#/components/schemas/Party"
      description: |
        Routing of an event from the originating party, via forwarding parties, to the destination party.
  headers:
    API-Version:
      description: "Every API request and response must contain the `API-Version` header, set to the full version of the implemented DCSA standard."
      schema:
        type: "string"
        example: "1.0.0"
    Next-Page-Cursor:
      description: "A cursor value pointing to the next page of results in a paginated GET response."
      schema:
        type: "string"
        example: "ExampleNextPageCursor"
